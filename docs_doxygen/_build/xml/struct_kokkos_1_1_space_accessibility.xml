<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_kokkos_1_1_space_accessibility" kind="struct" language="C++" prot="public">
    <compoundname>Kokkos::SpaceAccessibility</compoundname>
    <includes refid="_kokkos___concepts_8hpp" local="no">Kokkos_Concepts.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename AccessSpace</type>
      </param>
      <param>
        <type>typename MemorySpace</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="struct_kokkos_1_1_space_accessibility_1aab0d40fea53f916484141ab1ac20a6be" prot="public" static="no" strong="no">
        <type></type>
        <name>@181</name>
        <qualifiedname>Kokkos::SpaceAccessibility::@181</qualifiedname>
        <enumvalue id="struct_kokkos_1_1_space_accessibility_1aab0d40fea53f916484141ab1ac20a6beab5048a1acf3d3effe38cc95b227294ed" prot="public">
          <name>accessible</name>
          <initializer>= exe_access::accessible</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Can AccessSpace::execution_space access MemorySpace ? </para>
        </briefdescription>
        <detaileddescription>
<para>Default based upon memory space accessibility. Specialization required for other relationships. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" line="487" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" bodystart="487" bodyend="487"/>
      </memberdef>
      <memberdef kind="enum" id="struct_kokkos_1_1_space_accessibility_1aa0e8935d10eb04921ba0b6e25b9d6b78" prot="public" static="no" strong="no">
        <type></type>
        <name>@182</name>
        <qualifiedname>Kokkos::SpaceAccessibility::@182</qualifiedname>
        <enumvalue id="struct_kokkos_1_1_space_accessibility_1aa0e8935d10eb04921ba0b6e25b9d6b78a3356658866a9c9a0a7fe2b94fd1fa7ff" prot="public">
          <name>assignable</name>
          <initializer>= is_memory_space&lt;AccessSpace&gt;::value &amp;&amp; mem_access::assignable</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Can assign to AccessSpace from MemorySpace ? </para>
        </briefdescription>
        <detaileddescription>
<para>Default based upon memory space accessibility. Specialization required for other relationships. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" line="494" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" bodystart="494" bodyend="496"/>
      </memberdef>
      <memberdef kind="enum" id="struct_kokkos_1_1_space_accessibility_1a7c8946218e3dc3afbe0da2673bdeb66c" prot="public" static="no" strong="no">
        <type></type>
        <name>@183</name>
        <qualifiedname>Kokkos::SpaceAccessibility::@183</qualifiedname>
        <enumvalue id="struct_kokkos_1_1_space_accessibility_1a7c8946218e3dc3afbe0da2673bdeb66ca958f412619f420b12923225d49ee0edc" prot="public">
          <name>deepcopy</name>
          <initializer>= mem_access::deepcopy</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Can deep copy to AccessSpace::memory_Space from MemorySpace ? <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" line="499" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" bodystart="499" bodyend="499"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_kokkos_1_1_space_accessibility_1af0a616a71545db0960c4ed701d6cf6d6" prot="public" static="no">
        <type>typename std::conditional&lt; std::is_same&lt; typename AccessSpace::memory_space, MemorySpace &gt;::value||!exe_access::accessible, AccessSpace, <ref refid="struct_kokkos_1_1_device" kindref="compound">Kokkos::Device</ref>&lt; typename AccessSpace::execution_space, MemorySpace &gt; &gt;::type</type>
        <definition>using Kokkos::SpaceAccessibility&lt; AccessSpace, MemorySpace &gt;::space =  typename std::conditional&lt; std::is_same&lt;typename AccessSpace::memory_space, MemorySpace&gt;::value || !exe_access::accessible, AccessSpace, Kokkos::Device&lt;typename AccessSpace::execution_space, MemorySpace&gt; &gt;::type</definition>
        <argsstring></argsstring>
        <name>space</name>
        <qualifiedname>Kokkos::SpaceAccessibility::space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" line="505" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" bodystart="509" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="struct_kokkos_1_1_space_accessibility_1a981a7f0fba594c822bdf0c70e2f950c7" prot="private" static="no">
        <type><ref refid="struct_kokkos_1_1_impl_1_1_memory_space_access" kindref="compound">Kokkos::Impl::MemorySpaceAccess</ref>&lt; typename AccessSpace::execution_space::memory_space, MemorySpace &gt;</type>
        <definition>using Kokkos::SpaceAccessibility&lt; AccessSpace, MemorySpace &gt;::exe_access =  Kokkos::Impl::MemorySpaceAccess&lt; typename AccessSpace::execution_space::memory_space, MemorySpace&gt;</definition>
        <argsstring></argsstring>
        <name>exe_access</name>
        <qualifiedname>Kokkos::SpaceAccessibility::exe_access</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" line="474" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_kokkos_1_1_space_accessibility_1a30ca1f44cd3077a0bc6a447b943282ca" prot="private" static="no">
        <type><ref refid="struct_kokkos_1_1_impl_1_1_memory_space_access" kindref="compound">Kokkos::Impl::MemorySpaceAccess</ref>&lt; typename AccessSpace::memory_space, MemorySpace &gt;</type>
        <definition>using Kokkos::SpaceAccessibility&lt; AccessSpace, MemorySpace &gt;::mem_access =  Kokkos::Impl::MemorySpaceAccess&lt;typename AccessSpace::memory_space, MemorySpace&gt;</definition>
        <argsstring></argsstring>
        <name>mem_access</name>
        <qualifiedname>Kokkos::SpaceAccessibility::mem_access</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" line="477" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" bodystart="479" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Can AccessSpace access MemorySpace ? </para>
    </briefdescription>
    <detaileddescription>
<para>Requires: Kokkos::is_space&lt; AccessSpace &gt;::value Kokkos::is_memory_space&lt; MemorySpace &gt;::value</para>
<para>Can AccessSpace::execution_space access MemorySpace ? enum : bool { accessible };</para>
<para>Is View&lt;AccessSpace::memory_space&gt; assignable from View&lt;MemorySpace&gt; ? enum : bool { assignable };</para>
<para>If ! accessible then through which intercessory memory space should a be used to deep copy memory for AccessSpace::execution_space to get access. When AccessSpace::memory_space == <ref refid="class_kokkos_1_1_host_space" kindref="compound">Kokkos::HostSpace</ref> then space is the <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> host mirror space. </para>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" line="459" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" bodystart="459" bodyend="510"/>
    <listofallmembers>
      <member refid="struct_kokkos_1_1_space_accessibility_1aab0d40fea53f916484141ab1ac20a6beab5048a1acf3d3effe38cc95b227294ed" prot="public" virt="non-virtual"><scope>Kokkos::SpaceAccessibility</scope><name>accessible</name></member>
      <member refid="struct_kokkos_1_1_space_accessibility_1aa0e8935d10eb04921ba0b6e25b9d6b78a3356658866a9c9a0a7fe2b94fd1fa7ff" prot="public" virt="non-virtual"><scope>Kokkos::SpaceAccessibility</scope><name>assignable</name></member>
      <member refid="struct_kokkos_1_1_space_accessibility_1a7c8946218e3dc3afbe0da2673bdeb66ca958f412619f420b12923225d49ee0edc" prot="public" virt="non-virtual"><scope>Kokkos::SpaceAccessibility</scope><name>deepcopy</name></member>
      <member refid="struct_kokkos_1_1_space_accessibility_1a981a7f0fba594c822bdf0c70e2f950c7" prot="private" virt="non-virtual"><scope>Kokkos::SpaceAccessibility</scope><name>exe_access</name></member>
      <member refid="struct_kokkos_1_1_space_accessibility_1a30ca1f44cd3077a0bc6a447b943282ca" prot="private" virt="non-virtual"><scope>Kokkos::SpaceAccessibility</scope><name>mem_access</name></member>
      <member refid="struct_kokkos_1_1_space_accessibility_1af0a616a71545db0960c4ed701d6cf6d6" prot="public" virt="non-virtual"><scope>Kokkos::SpaceAccessibility</scope><name>space</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
