<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespacestd_1_1tr1" kind="namespace" language="C++">
    <compoundname>std::tr1</compoundname>
    <innerclass refid="classstd_1_1tr1_1_1tuple" prot="public">std::tr1::tuple</innerclass>
    <innerclass refid="classstd_1_1tr1_1_1tuple_3_01_t0_00_01_t1_00_01_t2_00_01_t3_00_01_t4_00_01_t5_00_01_t6_00_01_t7_00_01_t8_00_01void_01_4" prot="public">std::tr1::tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, void &gt;</innerclass>
    <innerclass refid="classstd_1_1tr1_1_1tuple_3_01_t0_00_01_t1_00_01_t2_00_01_t3_00_01_t4_00_01_t5_00_01_t6_00_01_t7_00_01void_00_01void_01_4" prot="public">std::tr1::tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, void, void &gt;</innerclass>
    <innerclass refid="classstd_1_1tr1_1_1tuple_3_01_t0_00_01_t1_00_01_t2_00_01_t3_00_01_t4_00_01_t5_00_01_t6_00_01void_00_01void_00_01void_01_4" prot="public">std::tr1::tuple&lt; T0, T1, T2, T3, T4, T5, T6, void, void, void &gt;</innerclass>
    <innerclass refid="classstd_1_1tr1_1_1tuple_3_01_t0_00_01_t1_00_01_t2_00_01_t3_00_01_t4_00_01_t5_00_01void_00_01void_00_01void_00_01void_01_4" prot="public">std::tr1::tuple&lt; T0, T1, T2, T3, T4, T5, void, void, void, void &gt;</innerclass>
    <innerclass refid="classstd_1_1tr1_1_1tuple_3_01_t0_00_01_t1_00_01_t2_00_01_t3_00_01_t4_00_01void_00_01void_00_01void_00_01void_00_01void_01_4" prot="public">std::tr1::tuple&lt; T0, T1, T2, T3, T4, void, void, void, void, void &gt;</innerclass>
    <innerclass refid="classstd_1_1tr1_1_1tuple_3_01_t0_00_01_t1_00_01_t2_00_01_t3_00_01void_00_01void_00_01void_00_01void_00_01void_00_01void_01_4" prot="public">std::tr1::tuple&lt; T0, T1, T2, T3, void, void, void, void, void, void &gt;</innerclass>
    <innerclass refid="classstd_1_1tr1_1_1tuple_3_01_t0_00_01_t1_00_01_t2_00_01void_00_01void_00_01void_00_01void_00_01void_00_01void_00_01void_01_4" prot="public">std::tr1::tuple&lt; T0, T1, T2, void, void, void, void, void, void, void &gt;</innerclass>
    <innerclass refid="classstd_1_1tr1_1_1tuple_3_01_t0_00_01_t1_00_01void_00_01void_00_01void_00_01void_00_01void_00_01void_00_01void_00_01void_01_4" prot="public">std::tr1::tuple&lt; T0, T1, void, void, void, void, void, void, void, void &gt;</innerclass>
    <innerclass refid="classstd_1_1tr1_1_1tuple_3_01_t0_00_01void_00_01void_00_01void_00_01void_00_01void_00_01void_00_01void_00_01void_00_01void_01_4" prot="public">std::tr1::tuple&lt; T0, void, void, void, void, void, void, void, void, void &gt;</innerclass>
    <innerclass refid="classstd_1_1tr1_1_1tuple_3_4" prot="public">std::tr1::tuple&lt;&gt;</innerclass>
    <innerclass refid="structstd_1_1tr1_1_1tuple__element" prot="public">std::tr1::tuple_element</innerclass>
    <innerclass refid="structstd_1_1tr1_1_1tuple__size" prot="public">std::tr1::tuple_size</innerclass>
    <innerclass refid="structstd_1_1tr1_1_1tuple__size_3_01tuple_3_01_t0_00_01_t1_00_01_t2_00_01_t3_00_01_t4_00_01_t5_084fc9e052f94419d1123206995851faa" prot="public">std::tr1::tuple_size&lt; tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; &gt;</innerclass>
    <innerclass refid="structstd_1_1tr1_1_1tuple__size_3_01tuple_3_01_t0_00_01_t1_00_01_t2_00_01_t3_00_01_t4_00_01_t5_0ddcbca082516b2a77f5ddebf97e8e338" prot="public">std::tr1::tuple_size&lt; tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, void &gt; &gt;</innerclass>
    <innerclass refid="structstd_1_1tr1_1_1tuple__size_3_01tuple_3_01_t0_00_01_t1_00_01_t2_00_01_t3_00_01_t4_00_01_t5_0e5684675012b4f6b8dbb02ee847609bc" prot="public">std::tr1::tuple_size&lt; tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, void, void &gt; &gt;</innerclass>
    <innerclass refid="structstd_1_1tr1_1_1tuple__size_3_01tuple_3_01_t0_00_01_t1_00_01_t2_00_01_t3_00_01_t4_00_01_t5_05460ac2757f5cce6072a40c3735075b2" prot="public">std::tr1::tuple_size&lt; tuple&lt; T0, T1, T2, T3, T4, T5, T6, void, void, void &gt; &gt;</innerclass>
    <innerclass refid="structstd_1_1tr1_1_1tuple__size_3_01tuple_3_01_t0_00_01_t1_00_01_t2_00_01_t3_00_01_t4_00_01_t5_056f516ac46a890efd38cec1b24e3b1d3" prot="public">std::tr1::tuple_size&lt; tuple&lt; T0, T1, T2, T3, T4, T5, void, void, void, void &gt; &gt;</innerclass>
    <innerclass refid="structstd_1_1tr1_1_1tuple__size_3_01tuple_3_01_t0_00_01_t1_00_01_t2_00_01_t3_00_01_t4_00_01void_28fa179e9c2ffedf7ec0ee2a16419af7" prot="public">std::tr1::tuple_size&lt; tuple&lt; T0, T1, T2, T3, T4, void, void, void, void, void &gt; &gt;</innerclass>
    <innerclass refid="structstd_1_1tr1_1_1tuple__size_3_01tuple_3_01_t0_00_01_t1_00_01_t2_00_01_t3_00_01void_00_01void9a054cd027a7b1d3c03042550419a612" prot="public">std::tr1::tuple_size&lt; tuple&lt; T0, T1, T2, T3, void, void, void, void, void, void &gt; &gt;</innerclass>
    <innerclass refid="structstd_1_1tr1_1_1tuple__size_3_01tuple_3_01_t0_00_01_t1_00_01_t2_00_01void_00_01void_00_01voi33433f55d10fd851d2273cc02d0ee2fd" prot="public">std::tr1::tuple_size&lt; tuple&lt; T0, T1, T2, void, void, void, void, void, void, void &gt; &gt;</innerclass>
    <innerclass refid="structstd_1_1tr1_1_1tuple__size_3_01tuple_3_01_t0_00_01_t1_00_01void_00_01void_00_01void_00_01voc2ee27deb363431f12c795e03ad1648a" prot="public">std::tr1::tuple_size&lt; tuple&lt; T0, T1, void, void, void, void, void, void, void, void &gt; &gt;</innerclass>
    <innerclass refid="structstd_1_1tr1_1_1tuple__size_3_01tuple_3_01_t0_00_01void_00_01void_00_01void_00_01void_00_01vbdbd16ec82910df68c3240a12f14c7a7" prot="public">std::tr1::tuple_size&lt; tuple&lt; T0, void, void, void, void, void, void, void, void, void &gt; &gt;</innerclass>
    <innerclass refid="structstd_1_1tr1_1_1tuple__size_3_01tuple_3_4_01_4" prot="public">std::tr1::tuple_size&lt; tuple&lt;&gt; &gt;</innerclass>
    <innernamespace refid="namespacestd_1_1tr1_1_1gtest__internal">std::tr1::gtest_internal</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="gtest-test-part_8h_1af7e12a0f5b5791b5b7c49a5a17b85359" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref></type>
        <definition>tuple std::tr1::make_tuple</definition>
        <argsstring>()</argsstring>
        <name>make_tuple</name>
        <qualifiedname>std::tr1::make_tuple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1312" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1312" bodyend="1312"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1a37a005a4236d4a1a72e95dc8e7b1ab72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, void, void, void, void, void, void, void, void, void &gt;</type>
        <definition>tuple&lt; T0, void, void, void, void, void, void, void, void, void &gt; std::tr1::make_tuple</definition>
        <argsstring>(const T0 &amp;f0)</argsstring>
        <name>make_tuple</name>
        <qualifiedname>std::tr1::make_tuple</qualifiedname>
        <param>
          <type>const T0 &amp;</type>
          <declname>f0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1315" column="14" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1315" bodyend="1317"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1ab2ae4cbbd5fff28e6b523271fbee9fe5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, void, void, void, void, void, void, void, void &gt;</type>
        <definition>tuple&lt; T0, T1, void, void, void, void, void, void, void, void &gt; std::tr1::make_tuple</definition>
        <argsstring>(const T0 &amp;f0, const T1 &amp;f1)</argsstring>
        <name>make_tuple</name>
        <qualifiedname>std::tr1::make_tuple</qualifiedname>
        <param>
          <type>const T0 &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>f1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1320" column="14" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1320" bodyend="1322"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1af327df5b050f0913b18a724b436ca942" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, void, void, void, void, void, void, void &gt;</type>
        <definition>tuple&lt; T0, T1, T2, void, void, void, void, void, void, void &gt; std::tr1::make_tuple</definition>
        <argsstring>(const T0 &amp;f0, const T1 &amp;f1, const T2 &amp;f2)</argsstring>
        <name>make_tuple</name>
        <qualifiedname>std::tr1::make_tuple</qualifiedname>
        <param>
          <type>const T0 &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1325" column="14" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1325" bodyend="1327"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1a2281811b69e17d7211cbe5b462c38316" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, T3, void, void, void, void, void, void &gt;</type>
        <definition>tuple&lt; T0, T1, T2, T3, void, void, void, void, void, void &gt; std::tr1::make_tuple</definition>
        <argsstring>(const T0 &amp;f0, const T1 &amp;f1, const T2 &amp;f2, const T3 &amp;f3)</argsstring>
        <name>make_tuple</name>
        <qualifiedname>std::tr1::make_tuple</qualifiedname>
        <param>
          <type>const T0 &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1330" column="14" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1330" bodyend="1333"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1a93b766d98cb97ab1458cac7b9ad9355d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, T3, T4, void, void, void, void, void &gt;</type>
        <definition>tuple&lt; T0, T1, T2, T3, T4, void, void, void, void, void &gt; std::tr1::make_tuple</definition>
        <argsstring>(const T0 &amp;f0, const T1 &amp;f1, const T2 &amp;f2, const T3 &amp;f3, const T4 &amp;f4)</argsstring>
        <name>make_tuple</name>
        <qualifiedname>std::tr1::make_tuple</qualifiedname>
        <param>
          <type>const T0 &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>f4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1336" column="14" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1336" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1a775ad18f932491b797abd6bfad372891" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, T3, T4, T5, void, void, void, void &gt;</type>
        <definition>tuple&lt; T0, T1, T2, T3, T4, T5, void, void, void, void &gt; std::tr1::make_tuple</definition>
        <argsstring>(const T0 &amp;f0, const T1 &amp;f1, const T2 &amp;f2, const T3 &amp;f3, const T4 &amp;f4, const T5 &amp;f5)</argsstring>
        <name>make_tuple</name>
        <qualifiedname>std::tr1::make_tuple</qualifiedname>
        <param>
          <type>const T0 &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>f5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1342" column="14" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1342" bodyend="1345"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1a91d0990f3949ae21341163647903b21a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, T3, T4, T5, T6, void, void, void &gt;</type>
        <definition>tuple&lt; T0, T1, T2, T3, T4, T5, T6, void, void, void &gt; std::tr1::make_tuple</definition>
        <argsstring>(const T0 &amp;f0, const T1 &amp;f1, const T2 &amp;f2, const T3 &amp;f3, const T4 &amp;f4, const T5 &amp;f5, const T6 &amp;f6)</argsstring>
        <name>make_tuple</name>
        <qualifiedname>std::tr1::make_tuple</qualifiedname>
        <param>
          <type>const T0 &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>f6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1348" column="14" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1348" bodyend="1351"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1a1318ffcf93af6583fabb364885fb5af1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, T3, T4, T5, T6, T7, void, void &gt;</type>
        <definition>tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, void, void &gt; std::tr1::make_tuple</definition>
        <argsstring>(const T0 &amp;f0, const T1 &amp;f1, const T2 &amp;f2, const T3 &amp;f3, const T4 &amp;f4, const T5 &amp;f5, const T6 &amp;f6, const T7 &amp;f7)</argsstring>
        <name>make_tuple</name>
        <qualifiedname>std::tr1::make_tuple</qualifiedname>
        <param>
          <type>const T0 &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>f6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>f7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1354" column="14" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1354" bodyend="1357"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1aba55be39afe4e27580148937fb0fb6c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, void &gt;</type>
        <definition>tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, void &gt; std::tr1::make_tuple</definition>
        <argsstring>(const T0 &amp;f0, const T1 &amp;f1, const T2 &amp;f2, const T3 &amp;f3, const T4 &amp;f4, const T5 &amp;f5, const T6 &amp;f6, const T7 &amp;f7, const T8 &amp;f8)</argsstring>
        <name>make_tuple</name>
        <qualifiedname>std::tr1::make_tuple</qualifiedname>
        <param>
          <type>const T0 &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>f6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>f7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>f8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1360" column="14" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1360" bodyend="1364"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1a60621e6d4d39c993b8572052ddb56a68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
          <param>
            <type>typename T9</type>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt;</type>
        <definition>tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; std::tr1::make_tuple</definition>
        <argsstring>(const T0 &amp;f0, const T1 &amp;f1, const T2 &amp;f2, const T3 &amp;f3, const T4 &amp;f4, const T5 &amp;f5, const T6 &amp;f6, const T7 &amp;f7, const T8 &amp;f8, const T9 &amp;f9)</argsstring>
        <name>make_tuple</name>
        <qualifiedname>std::tr1::make_tuple</qualifiedname>
        <param>
          <type>const T0 &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>f6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>f7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>f8</declname>
        </param>
        <param>
          <type>const T9 &amp;</type>
          <declname>f9</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1367" column="14" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1367" bodyend="1371"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1a9dbfc2894f1984f100ce317738519362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k</declname>
            <defname>k</defname>
          </param>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
          <param>
            <type>typename T9</type>
          </param>
        </templateparamlist>
        <type>typename::std::tr1::gtest_internal::AddRef&lt; typenametuple_element&lt; k, <ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; &gt;::type &gt;::type</type>
        <definition>typename::std::tr1::gtest_internal::AddRef&lt; typenametuple_element&lt; k, tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; &gt;::type &gt;::type std::tr1::get</definition>
        <argsstring>(tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; &amp;t)</argsstring>
        <name>get</name>
        <qualifiedname>std::tr1::get</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1568" column="1" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1568" bodyend="1570"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1a9ccbf8d93ba70bc9b27ee27eed30a0f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k</declname>
            <defname>k</defname>
          </param>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
          <param>
            <type>typename T9</type>
          </param>
        </templateparamlist>
        <type>typename::std::tr1::gtest_internal::ByRef&lt; typenametuple_element&lt; k, <ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; &gt;::type &gt;::type</type>
        <definition>typename::std::tr1::gtest_internal::ByRef&lt; typenametuple_element&lt; k, tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; &gt;::type &gt;::type std::tr1::get</definition>
        <argsstring>(const tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; &amp;t)</argsstring>
        <name>get</name>
        <qualifiedname>std::tr1::get</qualifiedname>
        <param>
          <type>const <ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1574" column="1" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1574" bodyend="1576"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1a24d092ab21823e4bcb80457bae69924e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
          <param>
            <type>typename T9</type>
          </param>
          <param>
            <type>typename U0</type>
          </param>
          <param>
            <type>typename U1</type>
          </param>
          <param>
            <type>typename U2</type>
          </param>
          <param>
            <type>typename U3</type>
          </param>
          <param>
            <type>typename U4</type>
          </param>
          <param>
            <type>typename U5</type>
          </param>
          <param>
            <type>typename U6</type>
          </param>
          <param>
            <type>typename U7</type>
          </param>
          <param>
            <type>typename U8</type>
          </param>
          <param>
            <type>typename U9</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool std::tr1::operator==</definition>
        <argsstring>(const tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; &amp;t, const tuple&lt; U0, U1, U2, U3, U4, U5, U6, U7, U8, U9 &gt; &amp;u)</argsstring>
        <name>operator==</name>
        <qualifiedname>std::tr1::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; U0, U1, U2, U3, U4, U5, U6, U7, U8, U9 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1611" column="13" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1611" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1a3234f46889baf63128c5fa13f3b82b2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
          <param>
            <type>typename T9</type>
          </param>
          <param>
            <type>typename U0</type>
          </param>
          <param>
            <type>typename U1</type>
          </param>
          <param>
            <type>typename U2</type>
          </param>
          <param>
            <type>typename U3</type>
          </param>
          <param>
            <type>typename U4</type>
          </param>
          <param>
            <type>typename U5</type>
          </param>
          <param>
            <type>typename U6</type>
          </param>
          <param>
            <type>typename U7</type>
          </param>
          <param>
            <type>typename U8</type>
          </param>
          <param>
            <type>typename U9</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool std::tr1::operator!=</definition>
        <argsstring>(const tuple&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; &amp;t, const tuple&lt; U0, U1, U2, U3, U4, U5, U6, U7, U8, U9 &gt; &amp;u)</argsstring>
        <name>operator!=</name>
        <qualifiedname>std::tr1::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">tuple</ref>&lt; U0, U1, U2, U3, U4, U5, U6, U7, U8, U9 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="1619" column="13" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" bodystart="1619" bodyend="1620"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-test-part.h" line="750" column="1"/>
  </compounddef>
</doxygen>
