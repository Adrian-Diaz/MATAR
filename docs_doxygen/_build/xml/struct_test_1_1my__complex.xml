<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_test_1_1my__complex" kind="struct" language="C++" prot="public">
    <compoundname>Test::my_complex</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_test_1_1my__complex_1a6df2e7a537d04e464a364cf5ab8f56a3" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Test::my_complex::re</definition>
        <argsstring></argsstring>
        <name>re</name>
        <qualifiedname>Test::my_complex::re</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="60" column="10" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1my__complex_1a06c78e689a9337ba7974d2fa9f19444b" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Test::my_complex::im</definition>
        <argsstring></argsstring>
        <name>im</name>
        <qualifiedname>Test::my_complex::im</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="60" column="13" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1my__complex_1a67a5063ad51d708b279dd70e26303f14" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Test::my_complex::dummy</definition>
        <argsstring></argsstring>
        <name>dummy</name>
        <qualifiedname>Test::my_complex::dummy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="61" column="7" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_test_1_1my__complex_1aea34dcc9cf487f6fb189efdfede9d0a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Test::my_complex::my_complex</definition>
        <argsstring>()</argsstring>
        <name>my_complex</name>
        <qualifiedname>Test::my_complex::my_complex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="64" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1ab69601fc4d7cd8f2f33570154fc8baa3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Test::my_complex::my_complex</definition>
        <argsstring>(const my_complex &amp;src)</argsstring>
        <name>my_complex</name>
        <qualifiedname>Test::my_complex::my_complex</qualifiedname>
        <param>
          <type>const <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="71" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1a2372507bd3a8154933dd3017adf02580" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION my_complex &amp; Test::my_complex::operator=</definition>
        <argsstring>(const my_complex &amp;src)</argsstring>
        <name>operator=</name>
        <qualifiedname>Test::my_complex::operator=</qualifiedname>
        <param>
          <type>const <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="78" column="14" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1aa46183b6f6b1a841a0f72ee55ca876c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION my_complex &amp; Test::my_complex::operator=</definition>
        <argsstring>(const volatile my_complex &amp;src)</argsstring>
        <name>operator=</name>
        <qualifiedname>Test::my_complex::operator=</qualifiedname>
        <param>
          <type>const volatile <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="86" column="14" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1aff6449cb1a1c24af67be815c4bb95528" prot="public" static="no" const="no" explicit="no" inline="yes" volatile="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION volatile <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION volatile my_complex &amp; Test::my_complex::operator=</definition>
        <argsstring>(const my_complex &amp;src) volatile</argsstring>
        <name>operator=</name>
        <qualifiedname>Test::my_complex::operator=</qualifiedname>
        <param>
          <type>const <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="94" column="23" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1a4c29334069a4b957f410194fe5c82e28" prot="public" static="no" const="no" explicit="no" inline="yes" volatile="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION volatile <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION volatile my_complex &amp; Test::my_complex::operator=</definition>
        <argsstring>(const volatile my_complex &amp;src) volatile</argsstring>
        <name>operator=</name>
        <qualifiedname>Test::my_complex::operator=</qualifiedname>
        <param>
          <type>const volatile <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="102" column="23" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="102" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1a13b433ba493c23ec55c891d3059b6a01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Test::my_complex::my_complex</definition>
        <argsstring>(const volatile my_complex &amp;src)</argsstring>
        <name>my_complex</name>
        <qualifiedname>Test::my_complex::my_complex</qualifiedname>
        <param>
          <type>const volatile <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="110" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1a3381c000e078fbc7ef8a362c7a6c555d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Test::my_complex::my_complex</definition>
        <argsstring>(const double &amp;val)</argsstring>
        <name>my_complex</name>
        <qualifiedname>Test::my_complex::my_complex</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="117" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1a938575b55988be4aff10d86c67ef32aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION my_complex &amp; Test::my_complex::operator+=</definition>
        <argsstring>(const my_complex &amp;src)</argsstring>
        <name>operator+=</name>
        <qualifiedname>Test::my_complex::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="124" column="14" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1aee819b14cf3cdfde4dc7a591105e69e2" prot="public" static="no" const="no" explicit="no" inline="yes" volatile="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::my_complex::operator+=</definition>
        <argsstring>(const volatile my_complex &amp;src) volatile</argsstring>
        <name>operator+=</name>
        <qualifiedname>Test::my_complex::operator+=</qualifiedname>
        <param>
          <type>const volatile <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="132" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="132" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1a85be9f73f80cf36a8e8cc4e3719c590a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION my_complex Test::my_complex::operator+</definition>
        <argsstring>(const my_complex &amp;src)</argsstring>
        <name>operator+</name>
        <qualifiedname>Test::my_complex::operator+</qualifiedname>
        <param>
          <type>const <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="139" column="14" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="139" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1a76292ed6821c6b7c3c2b7b3f011e4bc7" prot="public" static="no" const="no" explicit="no" inline="yes" volatile="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION my_complex Test::my_complex::operator+</definition>
        <argsstring>(const volatile my_complex &amp;src) volatile</argsstring>
        <name>operator+</name>
        <qualifiedname>Test::my_complex::operator+</qualifiedname>
        <param>
          <type>const volatile <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="148" column="14" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="148" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1a8d26b64d60ff089f453fcbbda3614659" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION my_complex &amp; Test::my_complex::operator*=</definition>
        <argsstring>(const my_complex &amp;src)</argsstring>
        <name>operator*=</name>
        <qualifiedname>Test::my_complex::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="157" column="14" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="157" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1a98822acc79876bce78469df31f36d1cc" prot="public" static="no" const="no" explicit="no" inline="yes" volatile="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::my_complex::operator*=</definition>
        <argsstring>(const volatile my_complex &amp;src) volatile</argsstring>
        <name>operator*=</name>
        <qualifiedname>Test::my_complex::operator*=</qualifiedname>
        <param>
          <type>const volatile <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="167" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="167" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1a108a9a2c2c3f65c259dc81fc1d0a80db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Test::my_complex::operator==</definition>
        <argsstring>(const my_complex &amp;src) const</argsstring>
        <name>operator==</name>
        <qualifiedname>Test::my_complex::operator==</qualifiedname>
        <param>
          <type>const <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="176" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1a57fb36b0744b2982c22296ed8b881472" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Test::my_complex::operator!=</definition>
        <argsstring>(const my_complex &amp;src) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>Test::my_complex::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="181" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="181" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1adf8fb47d3239eddf618b6ce140d4619c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Test::my_complex::operator!=</definition>
        <argsstring>(const double &amp;val) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>Test::my_complex::operator!=</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="186" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1ae01fa9864e95d152518ab9509424fee6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION my_complex &amp; Test::my_complex::operator=</definition>
        <argsstring>(const int &amp;val)</argsstring>
        <name>operator=</name>
        <qualifiedname>Test::my_complex::operator=</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="191" column="14" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="191" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1a73f64aaac90644b4b0fe53133e3e6898" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_test_1_1my__complex" kindref="compound">my_complex</ref> &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION my_complex &amp; Test::my_complex::operator=</definition>
        <argsstring>(const double &amp;val)</argsstring>
        <name>operator=</name>
        <qualifiedname>Test::my_complex::operator=</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="199" column="14" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1my__complex_1ab666f0f82228237ad6ac0fe656fdcc8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Test::my_complex::operator double</definition>
        <argsstring>()</argsstring>
        <name>operator double</name>
        <qualifiedname>Test::my_complex::operator double</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="207" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="207" bodyend="207"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" line="59" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp" bodystart="59" bodyend="208"/>
    <listofallmembers>
      <member refid="struct_test_1_1my__complex_1a67a5063ad51d708b279dd70e26303f14" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>dummy</name></member>
      <member refid="struct_test_1_1my__complex_1a06c78e689a9337ba7974d2fa9f19444b" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>im</name></member>
      <member refid="struct_test_1_1my__complex_1aea34dcc9cf487f6fb189efdfede9d0a7" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>my_complex</name></member>
      <member refid="struct_test_1_1my__complex_1ab69601fc4d7cd8f2f33570154fc8baa3" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>my_complex</name></member>
      <member refid="struct_test_1_1my__complex_1a13b433ba493c23ec55c891d3059b6a01" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>my_complex</name></member>
      <member refid="struct_test_1_1my__complex_1a3381c000e078fbc7ef8a362c7a6c555d" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>my_complex</name></member>
      <member refid="struct_test_1_1my__complex_1ab666f0f82228237ad6ac0fe656fdcc8b" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator double</name></member>
      <member refid="struct_test_1_1my__complex_1a57fb36b0744b2982c22296ed8b881472" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator!=</name></member>
      <member refid="struct_test_1_1my__complex_1adf8fb47d3239eddf618b6ce140d4619c" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator!=</name></member>
      <member refid="struct_test_1_1my__complex_1a8d26b64d60ff089f453fcbbda3614659" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator*=</name></member>
      <member refid="struct_test_1_1my__complex_1a98822acc79876bce78469df31f36d1cc" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator*=</name></member>
      <member refid="struct_test_1_1my__complex_1a85be9f73f80cf36a8e8cc4e3719c590a" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator+</name></member>
      <member refid="struct_test_1_1my__complex_1a76292ed6821c6b7c3c2b7b3f011e4bc7" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator+</name></member>
      <member refid="struct_test_1_1my__complex_1a938575b55988be4aff10d86c67ef32aa" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator+=</name></member>
      <member refid="struct_test_1_1my__complex_1aee819b14cf3cdfde4dc7a591105e69e2" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator+=</name></member>
      <member refid="struct_test_1_1my__complex_1a2372507bd3a8154933dd3017adf02580" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator=</name></member>
      <member refid="struct_test_1_1my__complex_1aa46183b6f6b1a841a0f72ee55ca876c3" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator=</name></member>
      <member refid="struct_test_1_1my__complex_1aff6449cb1a1c24af67be815c4bb95528" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator=</name></member>
      <member refid="struct_test_1_1my__complex_1a4c29334069a4b957f410194fe5c82e28" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator=</name></member>
      <member refid="struct_test_1_1my__complex_1ae01fa9864e95d152518ab9509424fee6" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator=</name></member>
      <member refid="struct_test_1_1my__complex_1a73f64aaac90644b4b0fe53133e3e6898" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator=</name></member>
      <member refid="struct_test_1_1my__complex_1a108a9a2c2c3f65c259dc81fc1d0a80db" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>operator==</name></member>
      <member refid="struct_test_1_1my__complex_1a6df2e7a537d04e464a364cf5ab8f56a3" prot="public" virt="non-virtual"><scope>Test::my_complex</scope><name>re</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
