<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4" kind="struct" language="C++" prot="public">
    <compoundname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>class DataType</type>
      </param>
      <param>
        <type>class DeviceType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a2f75451f1088b6741524c6645041967a" prot="public" static="no">
        <type>DeviceType</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::execution_space =  DeviceType</definition>
        <argsstring></argsstring>
        <name>execution_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::execution_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="189" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a77b6d3ffc0adc0af6ccd58c5b3a9740a" prot="public" static="no">
        <type>typename execution_space::memory_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::memory_space =  typename execution_space::memory_space</definition>
        <argsstring></argsstring>
        <name>memory_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::memory_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="190" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a030fc3b0815ab2870139b1b4aa7797f4" prot="public" static="no">
        <type>typename execution_space::size_type</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::size_type =  typename execution_space::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="191" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1af303a4ccf6d581328645d07878132e44" prot="public" static="no">
        <type>int</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::value_type =  int</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="193" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a2e3f208f6d2216fe0b995af618b3e62d" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::left_view =  Kokkos::DynRankView&lt;DataType, Kokkos::LayoutLeft, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>left_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::left_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="204" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a24b13fd8c7991bba3a0f8e4ac4dec0a5" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::right_view =  Kokkos::DynRankView&lt;DataType, Kokkos::LayoutRight, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>right_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::right_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="207" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a19585f83ee27ecf09802da546eef7438" prot="public" static="no">
        <type>typename DeviceType::execution_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::execution_space =  typename DeviceType::execution_space</definition>
        <argsstring></argsstring>
        <name>execution_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::execution_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="274" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ac5a3c32ef71679eabb7008c93225409f" prot="public" static="no">
        <type>typename DeviceType::memory_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::memory_space =  typename DeviceType::memory_space</definition>
        <argsstring></argsstring>
        <name>memory_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::memory_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="275" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a030fc3b0815ab2870139b1b4aa7797f4" prot="public" static="no">
        <type>typename execution_space::size_type</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::size_type =  typename execution_space::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="276" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1af303a4ccf6d581328645d07878132e44" prot="public" static="no">
        <type>int</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::value_type =  int</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="278" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ae2a4cca326406c8781f9c2a37237ad93" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::left_view =  Kokkos::View&lt;DataType, Kokkos::LayoutLeft, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>left_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::left_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="289" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ae6b3a1ef93041184fd99eee1ab1dc60e" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::right_view =  Kokkos::View&lt;DataType, Kokkos::LayoutRight, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>right_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::right_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="290" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="291" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1aed51241546426ed48b9a9e38344c1683" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">left_view</ref></type>
        <definition>left_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::left</definition>
        <argsstring></argsstring>
        <name>left</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::left</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="210" column="13" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a525dd180690b0b41b1562c412fda33e9" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">right_view</ref></type>
        <definition>right_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::right</definition>
        <argsstring></argsstring>
        <name>right</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::right</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="211" column="14" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a82171d7b31188f8eb50a9983d04f1a44" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::left_alloc</definition>
        <argsstring></argsstring>
        <name>left_alloc</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::left_alloc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="212" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1adbfb731c4bcdf105bc0761b859b71f62" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::right_alloc</definition>
        <argsstring></argsstring>
        <name>right_alloc</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::right_alloc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="213" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a9d34e493d5e8f7d3596d59387cdb4f3f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::join</definition>
        <argsstring>(volatile value_type &amp;update, const volatile value_type &amp;input)</argsstring>
        <name>join</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::join</qualifiedname>
        <param>
          <type>volatile value_type &amp;</type>
          <declname>update</declname>
        </param>
        <param>
          <type>const volatile value_type &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="196" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ad9b8ddb3d501efb81d3c34b7d4c85010" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::init</definition>
        <argsstring>(value_type &amp;update)</argsstring>
        <name>init</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::init</qualifiedname>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="202" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="202" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a9a21ed3b1941c2eb991e91000cdae515" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::testit</definition>
        <argsstring>(unsigned N0, unsigned N1, unsigned N2, unsigned N3, unsigned N4, unsigned N5)</argsstring>
        <name>testit</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::testit</qualifiedname>
        <param>
          <type>unsigned</type>
          <declname>N0</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N1</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N2</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N3</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N4</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="222" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="222" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a9d34e493d5e8f7d3596d59387cdb4f3f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::join</definition>
        <argsstring>(volatile value_type &amp;update, const volatile value_type &amp;input)</argsstring>
        <name>join</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::join</qualifiedname>
        <param>
          <type>volatile value_type &amp;</type>
          <declname>update</declname>
        </param>
        <param>
          <type>const volatile value_type &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="281" column="15" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ad9b8ddb3d501efb81d3c34b7d4c85010" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::init</definition>
        <argsstring>(value_type &amp;update)</argsstring>
        <name>init</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::init</qualifiedname>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="287" column="15" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="287" bodyend="287"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ae49bfbe4ec41a09c61664d42be596b03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::TestViewOperator_LeftAndRight</definition>
        <argsstring>(unsigned N0, unsigned N1, unsigned N2, unsigned N3, unsigned N4, unsigned N5)</argsstring>
        <name>TestViewOperator_LeftAndRight</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::TestViewOperator_LeftAndRight</qualifiedname>
        <param>
          <type>unsigned</type>
          <declname>N0</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N1</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N2</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N3</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N4</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="215" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="215" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ad09c3e4c8fa94ea50138f6e0f1b5c931" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::operator()</definition>
        <argsstring>(const size_type, value_type &amp;update) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::operator()</qualifiedname>
        <param>
          <type>const</type>
          <declname>size_type</declname>
        </param>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="234" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="234" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ae01fe78a82a699b8476becdb6ac9dc70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::TestViewOperator_LeftAndRight</definition>
        <argsstring>()</argsstring>
        <name>TestViewOperator_LeftAndRight</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::TestViewOperator_LeftAndRight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="298" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="298" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ad346ea5d595693d90e7def0a949b8383" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::testit</definition>
        <argsstring>()</argsstring>
        <name>testit</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::testit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="304" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="304" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ad09c3e4c8fa94ea50138f6e0f1b5c931" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::operator()</definition>
        <argsstring>(const size_type, value_type &amp;update) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;::operator()</qualifiedname>
        <param>
          <type>const</type>
          <declname>size_type</declname>
        </param>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="313" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="313" bodyend="345"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>Kokkos::DynRankView&lt; DataType, Kokkos::LayoutLeft, execution_space &gt;</label>
        <link refid="class_kokkos_1_1_dyn_rank_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Kokkos::DynRankView&lt; DataType, Kokkos::LayoutRight, execution_space &gt;</label>
        <link refid="class_kokkos_1_1_dyn_rank_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</label>
        <link refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4"/>
        <childnode refid="2" relation="usage">
          <edgelabel>left</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>right</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Kokkos::ViewTraits&lt; DataType, Properties... &gt;</label>
        <link refid="struct_kokkos_1_1_view_traits"/>
      </node>
    </collaborationgraph>
    <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="188" column="1" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="188" bodyend="267"/>
    <listofallmembers>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a2f75451f1088b6741524c6645041967a" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>execution_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a19585f83ee27ecf09802da546eef7438" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>execution_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ad9b8ddb3d501efb81d3c34b7d4c85010" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>init</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ad9b8ddb3d501efb81d3c34b7d4c85010" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>init</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a9d34e493d5e8f7d3596d59387cdb4f3f" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>join</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a9d34e493d5e8f7d3596d59387cdb4f3f" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>join</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1aed51241546426ed48b9a9e38344c1683" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>left</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a82171d7b31188f8eb50a9983d04f1a44" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>left_alloc</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a2e3f208f6d2216fe0b995af618b3e62d" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>left_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ae2a4cca326406c8781f9c2a37237ad93" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>left_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a77b6d3ffc0adc0af6ccd58c5b3a9740a" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>memory_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ac5a3c32ef71679eabb7008c93225409f" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>memory_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ad09c3e4c8fa94ea50138f6e0f1b5c931" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>operator()</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ad09c3e4c8fa94ea50138f6e0f1b5c931" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>operator()</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a525dd180690b0b41b1562c412fda33e9" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>right</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1adbfb731c4bcdf105bc0761b859b71f62" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>right_alloc</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a24b13fd8c7991bba3a0f8e4ac4dec0a5" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>right_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ae6b3a1ef93041184fd99eee1ab1dc60e" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>right_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a030fc3b0815ab2870139b1b4aa7797f4" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>size_type</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a030fc3b0815ab2870139b1b4aa7797f4" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>size_type</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1a9a21ed3b1941c2eb991e91000cdae515" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>testit</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ad346ea5d595693d90e7def0a949b8383" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>testit</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ae49bfbe4ec41a09c61664d42be596b03" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>TestViewOperator_LeftAndRight</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1ae01fe78a82a699b8476becdb6ac9dc70" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>TestViewOperator_LeftAndRight</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1af303a4ccf6d581328645d07878132e44" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>value_type</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_016_01_4_1af303a4ccf6d581328645d07878132e44" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 6 &gt;</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
