<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_test_half_operators_8hpp" kind="file" language="C++">
    <compoundname>TestHalfOperators.hpp</compoundname>
    <includedby refid="_test_default_device_type_8cpp" local="no">src/Kokkos/kokkos/core/unit_test/default/TestDefaultDeviceType.cpp</includedby>
    <innerclass refid="struct_test_1_1_functor___test_half_volatile_operators" prot="public">Test::Functor_TestHalfVolatileOperators</innerclass>
    <innerclass refid="struct_test_1_1_functor___test_half_operators" prot="public">Test::Functor_TestHalfOperators</innerclass>
    <innernamespace refid="namespace_test">Test</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_test_half_operators_8hpp_1a31a5d17b503320f5509972d45cdb2515" prot="public" static="no">
        <name>FP16_EPSILON</name>
        <initializer>0.0009765625F</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestHalfOperators.hpp" line="51" column="9" bodyfile="src/Kokkos/kokkos/core/unit_test/TestHalfOperators.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//<sp/>************************************************************************</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos<sp/>v.<sp/>3.0</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>(2020)<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC<sp/>(NTESS).</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//<sp/>the<sp/>U.S.<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//<sp/>met:</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Corporation<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>NTESS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>NTESS<sp/>OR<sp/>THE</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>Christian<sp/>R.<sp/>Trott<sp/>(crtrott@sandia.gov)</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//</highlight></codeline>
<codeline lineno="42"><highlight class="comment">//<sp/>************************************************************************</highlight></codeline>
<codeline lineno="43"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="44"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TESTHALFOPERATOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TESTHALFOPERATOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Remove<sp/>ifndef<sp/>once<sp/>https://github.com/kokkos/kokkos/pull/3480<sp/>merges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>KOKKOS_ENABLE_SYCL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FP16_EPSILON<sp/>0.0009765625F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Kokkos::Experimental;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ExecutionSpace<sp/>=<sp/>TEST_EXECSPACE;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ScalarType<sp/><sp/><sp/><sp/><sp/>=<sp/>double;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ViewType<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View&lt;ScalarType*, ExecutionSpace&gt;</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ViewTypeHost<sp/><sp/><sp/>=<sp/><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View&lt;ScalarType*, Kokkos::HostSpace&gt;</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">KOKKOS_FUNCTION</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>half_t&amp;<sp/>accept_ref(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>half_t&amp;<sp/>a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;<sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>OP_TESTS<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>ASSIGN,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>ASSIGN_CHAINED,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>UNA,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>UNS,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>PREFIX_INC,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>PREFIX_DEC,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>POSTFIX_INC,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>POSTFIX_DEC,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>CADD_H_H,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>CADD_H_S,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>CADD_S_H,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>CADD_H_D,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>CADD_D_H,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>CSUB_H_H,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>CSUB_H_S,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>CSUB_S_H,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>CSUB_H_D,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>CSUB_D_H,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>CMUL_H_H,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>CMUL_H_S,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>CMUL_S_H,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>CMUL_H_D,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>CMUL_D_H,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>CDIV_H_H,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>CDIV_H_S,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>CDIV_S_H,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>CDIV_H_D,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>CDIV_D_H,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>ADD_H_H,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>ADD_H_S,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>ADD_S_H,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>ADD_H_D,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>ADD_D_H,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>ADD_H_H_SZ,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>ADD_H_S_SZ,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>ADD_S_H_SZ,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>ADD_H_D_SZ,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>ADD_D_H_SZ,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>ADD_SI_H,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>ADD_SI_H_SZ,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>ADD_I_H,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>ADD_I_H_SZ,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>ADD_LI_H,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>ADD_LI_H_SZ,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>ADD_LLI_H,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>ADD_LLI_H_SZ,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>ADD_USI_H,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>ADD_USI_H_SZ,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>ADD_UI_H,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>ADD_UI_H_SZ,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>ADD_ULI_H,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>ADD_ULI_H_SZ,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>ADD_ULLI_H,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>ADD_ULLI_H_SZ,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>ADD_H_SI,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>ADD_H_SI_SZ,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>ADD_H_I,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>ADD_H_I_SZ,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>ADD_H_LI,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>ADD_H_LI_SZ,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>ADD_H_LLI,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>ADD_H_LLI_SZ,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>ADD_H_USI,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>ADD_H_USI_SZ,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>ADD_H_UI,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>ADD_H_UI_SZ,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>ADD_H_ULI,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>ADD_H_ULI_SZ,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>ADD_H_ULLI,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>ADD_H_ULLI_SZ,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>SUB_H_H,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>SUB_H_S,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>SUB_S_H,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>SUB_H_D,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>SUB_D_H,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>SUB_H_H_SZ,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>SUB_H_S_SZ,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>SUB_S_H_SZ,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>SUB_H_D_SZ,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>SUB_D_H_SZ,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>SUB_SI_H,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>SUB_SI_H_SZ,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>SUB_I_H,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>SUB_I_H_SZ,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>SUB_LI_H,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>SUB_LI_H_SZ,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>SUB_LLI_H,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>SUB_LLI_H_SZ,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>SUB_USI_H,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>SUB_USI_H_SZ,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>SUB_UI_H,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>SUB_UI_H_SZ,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>SUB_ULI_H,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>SUB_ULI_H_SZ,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>SUB_ULLI_H,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>SUB_ULLI_H_SZ,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>SUB_H_SI,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>SUB_H_SI_SZ,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>SUB_H_I,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>SUB_H_I_SZ,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>SUB_H_LI,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>SUB_H_LI_SZ,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>SUB_H_LLI,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>SUB_H_LLI_SZ,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>SUB_H_USI,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>SUB_H_USI_SZ,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>SUB_H_UI,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>SUB_H_UI_SZ,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>SUB_H_ULI,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>SUB_H_ULI_SZ,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>SUB_H_ULLI,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>SUB_H_ULLI_SZ,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>MUL_H_H,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>MUL_H_S,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>MUL_S_H,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>MUL_H_D,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>MUL_D_H,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>MUL_H_H_SZ,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>MUL_H_S_SZ,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>MUL_S_H_SZ,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>MUL_H_D_SZ,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>MUL_D_H_SZ,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>MUL_SI_H,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>MUL_SI_H_SZ,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>MUL_I_H,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>MUL_I_H_SZ,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>MUL_LI_H,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>MUL_LI_H_SZ,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>MUL_LLI_H,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>MUL_LLI_H_SZ,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>MUL_USI_H,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>MUL_USI_H_SZ,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>MUL_UI_H,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>MUL_UI_H_SZ,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>MUL_ULI_H,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>MUL_ULI_H_SZ,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>MUL_ULLI_H,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>MUL_ULLI_H_SZ,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>MUL_H_SI,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>MUL_H_SI_SZ,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>MUL_H_I,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>MUL_H_I_SZ,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>MUL_H_LI,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>MUL_H_LI_SZ,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>MUL_H_LLI,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>MUL_H_LLI_SZ,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>MUL_H_USI,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>MUL_H_USI_SZ,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>MUL_H_UI,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>MUL_H_UI_SZ,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>MUL_H_ULI,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>MUL_H_ULI_SZ,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>MUL_H_ULLI,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>MUL_H_ULLI_SZ,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>DIV_H_H,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>DIV_H_S,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>DIV_S_H,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>DIV_H_D,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>DIV_D_H,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>DIV_H_H_SZ,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>DIV_H_S_SZ,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>DIV_S_H_SZ,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>DIV_H_D_SZ,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>DIV_D_H_SZ,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>DIV_SI_H,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>DIV_SI_H_SZ,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>DIV_I_H,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>DIV_I_H_SZ,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>DIV_LI_H,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>DIV_LI_H_SZ,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>DIV_LLI_H,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>DIV_LLI_H_SZ,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>DIV_USI_H,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>DIV_USI_H_SZ,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>DIV_UI_H,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>DIV_UI_H_SZ,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>DIV_ULI_H,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>DIV_ULI_H_SZ,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>DIV_ULLI_H,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>DIV_ULLI_H_SZ,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>DIV_H_SI,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>DIV_H_SI_SZ,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>DIV_H_I,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>DIV_H_I_SZ,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>DIV_H_LI,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>DIV_H_LI_SZ,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>DIV_H_LLI,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>DIV_H_LLI_SZ,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>DIV_H_USI,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>DIV_H_USI_SZ,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>DIV_H_UI,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>DIV_H_UI_SZ,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>DIV_H_ULI,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>DIV_H_ULI_SZ,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>DIV_H_ULLI,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>DIV_H_ULLI_SZ,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>NEG,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>AND,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>OR,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>EQ,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>NEQ,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>LT,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>GT,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>LE,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>GE,<sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>TW,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>PASS_BY_REF,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>AO_IMPL_HALF,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>AO_HALF_T,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>N_OP_TESTS</highlight></codeline>
<codeline lineno="270"><highlight class="normal">};</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>view_type&gt;</highlight></codeline>
<codeline lineno="273" refid="struct_test_1_1_functor___test_half_volatile_operators" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_test_1_1_functor___test_half_volatile_operators" kindref="compound">Functor_TestHalfVolatileOperators</ref><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>half_t<sp/>h_lhs,<sp/>h_rhs;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><ref refid="class_kokkos_1_1_view" kindref="compound">view_type</ref><sp/>actual_lhs,<sp/>expected_lhs;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d_lhs,<sp/>d_rhs;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><ref refid="struct_test_1_1_functor___test_half_volatile_operators" kindref="compound">Functor_TestHalfVolatileOperators</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>half_t<sp/>lhs<sp/>=<sp/>half_t(0),</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>half_t<sp/>rhs<sp/>=<sp/>half_t(0))</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>h_lhs(lhs),<sp/>h_rhs(rhs)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs<sp/><sp/><sp/>=<sp/><ref refid="class_kokkos_1_1_view" kindref="compound">view_type</ref>(</highlight><highlight class="stringliteral">&quot;actual_lhs&quot;</highlight><highlight class="normal">,<sp/>N_OP_TESTS);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs<sp/>=<sp/><ref refid="class_kokkos_1_1_view" kindref="compound">view_type</ref>(</highlight><highlight class="stringliteral">&quot;expected_lhs&quot;</highlight><highlight class="normal">,<sp/>N_OP_TESTS);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>d_lhs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(h_lhs);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>d_rhs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(h_rhs);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;view_type,<sp/>ViewTypeHost&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run_on_host<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>run_on_host(0);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::parallel_for(</highlight><highlight class="stringliteral">&quot;Test::Functor_TestHalfVolatileOperators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_kokkos_1_1_range_policy" kindref="compound">Kokkos::RangePolicy&lt;ExecutionSpace&gt;</ref>(0,<sp/>1),<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>half_t<sp/>tmp_lhs;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialze<sp/>output<sp/>views<sp/>to<sp/>catch<sp/>missing<sp/>test<sp/>invocations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N_OP_TESTS;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(i)<sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(i)<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(ASSIGN)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(ASSIGN)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(LT)<sp/><sp/><sp/>=<sp/>h_lhs<sp/>&lt;<sp/>h_rhs;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(LT)<sp/>=<sp/>d_lhs<sp/>&lt;<sp/>d_rhs;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(LE)<sp/><sp/><sp/>=<sp/>h_lhs<sp/>&lt;=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(LE)<sp/>=<sp/>d_lhs<sp/>&lt;=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(NEQ)<sp/><sp/><sp/>=<sp/>h_lhs<sp/>!=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(NEQ)<sp/>=<sp/>d_lhs<sp/>!=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(GT)<sp/><sp/><sp/>=<sp/>h_lhs<sp/>&gt;<sp/>h_rhs;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(GT)<sp/>=<sp/>d_lhs<sp/>&gt;<sp/>d_rhs;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(GE)<sp/><sp/><sp/>=<sp/>h_lhs<sp/>&gt;=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(GE)<sp/>=<sp/>d_lhs<sp/>&gt;=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(EQ)<sp/><sp/><sp/>=<sp/>h_lhs<sp/>==<sp/>h_rhs;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(EQ)<sp/>=<sp/>d_lhs<sp/>==<sp/>d_rhs;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>+=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CADD_H_H)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CADD_H_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CADD_H_H)<sp/>+=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>-=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CSUB_H_H)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CSUB_H_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CSUB_H_H)<sp/>-=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>*=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CMUL_H_H)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CMUL_H_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CMUL_H_H)<sp/>*=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>/=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CDIV_H_H)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CDIV_H_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CDIV_H_H)<sp/>/=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal">};</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>view_type&gt;</highlight></codeline>
<codeline lineno="352" refid="struct_test_1_1_functor___test_half_operators" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_test_1_1_functor___test_half_operators" kindref="compound">Functor_TestHalfOperators</ref><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>half_t<sp/>h_lhs,<sp/>h_rhs;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d_lhs,<sp/>d_rhs;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><ref refid="class_kokkos_1_1_view" kindref="compound">view_type</ref><sp/>actual_lhs,<sp/>expected_lhs;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><ref refid="struct_test_1_1_functor___test_half_operators" kindref="compound">Functor_TestHalfOperators</ref>(half_t<sp/>lhs<sp/>=<sp/>half_t(0),<sp/>half_t<sp/>rhs<sp/>=<sp/>half_t(0))</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>h_lhs(lhs),<sp/>h_rhs(rhs)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs<sp/><sp/><sp/>=<sp/><ref refid="class_kokkos_1_1_view" kindref="compound">view_type</ref>(</highlight><highlight class="stringliteral">&quot;actual_lhs&quot;</highlight><highlight class="normal">,<sp/>N_OP_TESTS);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs<sp/>=<sp/><ref refid="class_kokkos_1_1_view" kindref="compound">view_type</ref>(</highlight><highlight class="stringliteral">&quot;expected_lhs&quot;</highlight><highlight class="normal">,<sp/>N_OP_TESTS);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>d_lhs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(h_lhs);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>d_rhs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(h_rhs);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;view_type,<sp/>ViewTypeHost&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run_on_host<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>run_on_host(0);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::parallel_for(</highlight><highlight class="stringliteral">&quot;Test::Functor_TestHalfOperators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_kokkos_1_1_range_policy" kindref="compound">Kokkos::RangePolicy&lt;ExecutionSpace&gt;</ref>(0,<sp/>1),<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>BEGIN:<sp/>Binary<sp/>Arithmetic<sp/>test<sp/>helpers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>LhsType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RhsType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExpectedResultType&gt;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>KOKKOS_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_add(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op_test_idx,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op_test_sz_idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">LhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs)<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_rhs);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(op_test_idx)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sum);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;RhsType,<sp/>half_t&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;LhsType,<sp/>half_t&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(op_test_idx)<sp/>=<sp/>d_lhs<sp/>+<sp/>d_rhs;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;LhsType,<sp/>half_t&gt;::value)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(op_test_idx)<sp/>=<sp/>d_lhs<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_rhs);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;RhsType,<sp/>half_t&gt;::value)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(op_test_idx)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">LhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_lhs)<sp/>+<sp/>d_rhs;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(op_test_sz_idx)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sum);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(op_test_sz_idx)<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ExpectedResultType);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>LhsType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RhsType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExpectedResultType&gt;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>KOKKOS_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_sub(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op_test_idx,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op_test_sz_idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">LhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs)<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_rhs);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(op_test_idx)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;RhsType,<sp/>half_t&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;LhsType,<sp/>half_t&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(op_test_idx)<sp/>=<sp/>d_lhs<sp/>-<sp/>d_rhs;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;LhsType,<sp/>half_t&gt;::value)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(op_test_idx)<sp/>=<sp/>d_lhs<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_rhs);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;RhsType,<sp/>half_t&gt;::value)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(op_test_idx)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">LhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_lhs)<sp/>-<sp/>d_rhs;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(op_test_sz_idx)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(op_test_sz_idx)<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ExpectedResultType);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>LhsType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RhsType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExpectedResultType&gt;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>KOKKOS_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_mul(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op_test_idx,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op_test_sz_idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">LhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs)<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_rhs);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(op_test_idx)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;RhsType,<sp/>half_t&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;LhsType,<sp/>half_t&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(op_test_idx)<sp/>=<sp/>d_lhs<sp/>*<sp/>d_rhs;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;LhsType,<sp/>half_t&gt;::value)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(op_test_idx)<sp/>=<sp/>d_lhs<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_rhs);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;RhsType,<sp/>half_t&gt;::value)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(op_test_idx)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">LhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_lhs)<sp/>*<sp/>d_rhs;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(op_test_sz_idx)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(op_test_sz_idx)<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ExpectedResultType);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>LhsType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RhsType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExpectedResultType&gt;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>KOKKOS_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_div(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op_test_idx,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op_test_sz_idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">LhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_rhs);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(op_test_idx)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;RhsType,<sp/>half_t&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;LhsType,<sp/>half_t&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(op_test_idx)<sp/>=<sp/>d_lhs<sp/>/<sp/>d_rhs;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;LhsType,<sp/>half_t&gt;::value)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(op_test_idx)<sp/>=<sp/>d_lhs<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_rhs);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;RhsType,<sp/>half_t&gt;::value)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(op_test_idx)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">LhsType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_lhs)<sp/>/<sp/>d_rhs;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(op_test_sz_idx)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(op_test_sz_idx)<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ExpectedResultType);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>END:<sp/>Binary<sp/>Arithmetic<sp/>test<sp/>helpers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>half_t<sp/>tmp_lhs,<sp/>tmp2_lhs,<sp/>*tmp_ptr;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp_d_lhs;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp_s_lhs;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">half_impl_type<sp/>=<sp/>Kokkos::Impl::half_impl_t::type;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>half_impl_type<sp/>half_tmp;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialze<sp/>output<sp/>views<sp/>to<sp/>catch<sp/>missing<sp/>test<sp/>invocations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N_OP_TESTS;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(i)<sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_lhs(i)<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(ASSIGN)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(ASSIGN)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp2_lhs<sp/>=<sp/>tmp_lhs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(ASSIGN_CHAINED)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp2_lhs);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(ASSIGN_CHAINED)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(UNA)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(+h_lhs);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(UNA)<sp/>=<sp/>+d_lhs;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(UNS)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(-h_lhs);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(UNS)<sp/>=<sp/>-d_lhs;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_d_lhs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(PREFIX_INC)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(++tmp_lhs);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(PREFIX_INC)<sp/>=<sp/>++tmp_d_lhs;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(PREFIX_DEC)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(--tmp_lhs);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(PREFIX_DEC)<sp/>=<sp/>--tmp_d_lhs;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(h_lhs<sp/>!=<sp/>tmp_lhs)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>printf(&quot;tmp_lhs<sp/>=<sp/>%f,<sp/>h_lhs<sp/>=<sp/>%f\n&quot;,<sp/>__half2float(tmp_lhs),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>__half2float(h_lhs));<sp/>Kokkos::abort(&quot;Error<sp/>in<sp/>half_t<sp/>prefix<sp/>operators&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(POSTFIX_INC)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs++);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(POSTFIX_INC)<sp/>=<sp/>tmp_d_lhs++;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(POSTFIX_DEC)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs--);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(POSTFIX_DEC)<sp/>=<sp/>tmp_d_lhs--;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(h_lhs<sp/>!=<sp/>tmp_lhs)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>printf(&quot;tmp_lhs<sp/>=<sp/>%f,<sp/>h_lhs<sp/>=<sp/>%f\n&quot;,<sp/>__half2float(tmp_lhs),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>__half2float(h_lhs));<sp/>Kokkos::abort(&quot;Error<sp/>in<sp/>half_t<sp/>postfix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>operators&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>+=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CADD_H_H)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CADD_H_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CADD_H_H)<sp/>+=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_rhs);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CADD_H_S)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CADD_H_S)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CADD_H_S)<sp/>+=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_s_lhs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_s_lhs<sp/>+=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CADD_S_H)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tmp_s_lhs);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CADD_S_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CADD_S_H)<sp/>+=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_rhs);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CADD_H_D)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CADD_H_D)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CADD_H_D)<sp/>+=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_d_lhs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_d_lhs<sp/>+=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CADD_D_H)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tmp_d_lhs);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CADD_D_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CADD_D_H)<sp/>+=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>-=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CSUB_H_H)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CSUB_H_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CSUB_H_H)<sp/>-=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>-=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_rhs);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CSUB_H_S)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CSUB_H_S)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CSUB_H_S)<sp/>-=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_s_lhs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_s_lhs<sp/>-=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CSUB_S_H)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tmp_s_lhs);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CSUB_S_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CSUB_S_H)<sp/>-=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>-=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CSUB_H_D)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tmp_lhs);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CSUB_H_D)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CSUB_H_D)<sp/>-=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_d_lhs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_d_lhs<sp/>-=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CSUB_D_H)<sp/><sp/><sp/>=<sp/>tmp_d_lhs;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CSUB_D_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CSUB_D_H)<sp/>-=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>*=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CMUL_H_H)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CMUL_H_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CMUL_H_H)<sp/>*=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>*=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_rhs);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CMUL_H_S)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CMUL_H_S)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CMUL_H_S)<sp/>*=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_s_lhs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_s_lhs<sp/>*=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CMUL_S_H)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tmp_s_lhs);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CMUL_S_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CMUL_S_H)<sp/>*=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>*=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CMUL_H_D)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tmp_lhs);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CMUL_H_D)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CMUL_H_D)<sp/>*=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_d_lhs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_d_lhs<sp/>*=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CMUL_D_H)<sp/><sp/><sp/>=<sp/>tmp_d_lhs;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CMUL_D_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CMUL_D_H)<sp/>*=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>/=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CDIV_H_H)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CDIV_H_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CDIV_H_H)<sp/>/=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>/=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_rhs);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CDIV_H_S)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_lhs);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CDIV_H_S)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CDIV_H_S)<sp/>/=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_s_lhs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_s_lhs<sp/>/=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CDIV_S_H)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tmp_s_lhs);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CDIV_S_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CDIV_S_H)<sp/>/=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lhs<sp/>/=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CDIV_H_D)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tmp_lhs);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CDIV_H_D)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CDIV_H_D)<sp/>/=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_d_lhs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_d_lhs<sp/>/=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(CDIV_D_H)<sp/><sp/><sp/>=<sp/>tmp_d_lhs;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CDIV_D_H)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(CDIV_D_H)<sp/>/=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add&lt;half_t,<sp/>half_t,<sp/>half_t&gt;(ADD_H_H,<sp/>ADD_H_H_SZ);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add&lt;float,<sp/>half_t,<sp/>float&gt;(ADD_S_H,<sp/>ADD_S_H_SZ);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add&lt;double,<sp/>half_t,<sp/>double&gt;(ADD_D_H,<sp/>ADD_D_H_SZ);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add&lt;short<sp/>int,<sp/>half_t,<sp/>half_t&gt;(ADD_SI_H,<sp/>ADD_SI_H_SZ);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add&lt;int,<sp/>half_t,<sp/>half_t&gt;(ADD_I_H,<sp/>ADD_I_H_SZ);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add&lt;long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(ADD_LI_H,<sp/>ADD_LI_H_SZ);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add&lt;long<sp/>long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(ADD_LLI_H,<sp/>ADD_LLI_H_SZ);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add&lt;half_t,<sp/>float,<sp/>float&gt;(ADD_H_S,<sp/>ADD_H_S_SZ);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add&lt;half_t,<sp/>double,<sp/>double&gt;(ADD_H_D,<sp/>ADD_H_D_SZ);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add&lt;half_t,<sp/>short<sp/>int,<sp/>half_t&gt;(ADD_H_SI,<sp/>ADD_H_SI_SZ);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add&lt;half_t,<sp/>int,<sp/>half_t&gt;(ADD_H_I,<sp/>ADD_H_I_SZ);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add&lt;half_t,<sp/>long<sp/>int,<sp/>half_t&gt;(ADD_H_LI,<sp/>ADD_H_LI_SZ);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add&lt;half_t,<sp/>long<sp/>long<sp/>int,<sp/>half_t&gt;(ADD_H_LLI,<sp/>ADD_H_LLI_SZ);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>potential<sp/>overflow<sp/>due<sp/>to<sp/>negative<sp/>half_t<sp/>-&gt;<sp/>unsigned<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_lhs<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_add&lt;unsigned<sp/>short<sp/>int,<sp/>half_t,<sp/>half_t&gt;(ADD_USI_H,<sp/>ADD_USI_H_SZ);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_add&lt;unsigned<sp/>int,<sp/>half_t,<sp/>half_t&gt;(ADD_UI_H,<sp/>ADD_UI_H_SZ);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_add&lt;unsigned<sp/>long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(ADD_ULI_H,<sp/>ADD_ULI_H_SZ);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_add&lt;unsigned<sp/>long<sp/>long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(ADD_ULLI_H,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADD_ULLI_H_SZ);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_USI_H)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(ADD_USI_H);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_USI_H_SZ)<sp/><sp/>=<sp/>expected_lhs(ADD_USI_H_SZ);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_UI_H)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(ADD_UI_H);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_UI_H_SZ)<sp/><sp/><sp/>=<sp/>expected_lhs(ADD_UI_H_SZ);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_ULI_H)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(ADD_ULI_H);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_ULI_H_SZ)<sp/><sp/>=<sp/>expected_lhs(ADD_ULI_H_SZ);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_ULLI_H)<sp/><sp/><sp/><sp/>=<sp/>expected_lhs(ADD_ULLI_H);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_ULLI_H_SZ)<sp/>=<sp/>expected_lhs(ADD_ULLI_H_SZ);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>potential<sp/>overflow<sp/>due<sp/>to<sp/>negative<sp/>half_t<sp/>-&gt;<sp/>unsigned<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_rhs<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_add&lt;half_t,<sp/>unsigned<sp/>short<sp/>int,<sp/>half_t&gt;(ADD_H_USI,<sp/>ADD_H_USI_SZ);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_add&lt;half_t,<sp/>unsigned<sp/>int,<sp/>half_t&gt;(ADD_H_UI,<sp/>ADD_H_UI_SZ);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_add&lt;half_t,<sp/>unsigned<sp/>long<sp/>int,<sp/>half_t&gt;(ADD_H_ULI,<sp/>ADD_H_ULI_SZ);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_add&lt;half_t,<sp/>unsigned<sp/>long<sp/>long<sp/>int,<sp/>half_t&gt;(ADD_H_ULLI,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADD_H_ULLI_SZ);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_H_USI)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(ADD_H_USI);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_H_USI_SZ)<sp/><sp/>=<sp/>expected_lhs(ADD_H_USI_SZ);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_H_UI)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(ADD_H_UI);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_H_UI_SZ)<sp/><sp/><sp/>=<sp/>expected_lhs(ADD_H_UI_SZ);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_H_ULI)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(ADD_H_ULI);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_H_ULI_SZ)<sp/><sp/>=<sp/>expected_lhs(ADD_H_ULI_SZ);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_H_ULLI)<sp/><sp/><sp/><sp/>=<sp/>expected_lhs(ADD_H_ULLI);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(ADD_H_ULLI_SZ)<sp/>=<sp/>expected_lhs(ADD_H_ULLI_SZ);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sub&lt;half_t,<sp/>half_t,<sp/>half_t&gt;(SUB_H_H,<sp/>SUB_H_H_SZ);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sub&lt;float,<sp/>half_t,<sp/>float&gt;(SUB_S_H,<sp/>SUB_S_H_SZ);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sub&lt;double,<sp/>half_t,<sp/>double&gt;(SUB_D_H,<sp/>SUB_D_H_SZ);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sub&lt;short<sp/>int,<sp/>half_t,<sp/>half_t&gt;(SUB_SI_H,<sp/>SUB_SI_H_SZ);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sub&lt;int,<sp/>half_t,<sp/>half_t&gt;(SUB_I_H,<sp/>SUB_I_H_SZ);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sub&lt;long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(SUB_LI_H,<sp/>SUB_LI_H_SZ);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sub&lt;long<sp/>long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(SUB_LLI_H,<sp/>SUB_LLI_H_SZ);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sub&lt;half_t,<sp/>float,<sp/>float&gt;(SUB_H_S,<sp/>SUB_H_S_SZ);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sub&lt;half_t,<sp/>double,<sp/>double&gt;(SUB_H_D,<sp/>SUB_H_D_SZ);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sub&lt;half_t,<sp/>short<sp/>int,<sp/>half_t&gt;(SUB_H_SI,<sp/>SUB_H_SI_SZ);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sub&lt;half_t,<sp/>int,<sp/>half_t&gt;(SUB_H_I,<sp/>SUB_H_I_SZ);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sub&lt;half_t,<sp/>long<sp/>int,<sp/>half_t&gt;(SUB_H_LI,<sp/>SUB_H_LI_SZ);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sub&lt;half_t,<sp/>long<sp/>long<sp/>int,<sp/>half_t&gt;(SUB_H_LLI,<sp/>SUB_H_LLI_SZ);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>potential<sp/>overflow<sp/>due<sp/>to<sp/>negative<sp/>half_t<sp/>-&gt;<sp/>unsigned<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_lhs<sp/>&gt;=<sp/>half_t(0))<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_sub&lt;unsigned<sp/>short<sp/>int,<sp/>half_t,<sp/>half_t&gt;(SUB_USI_H,<sp/>SUB_USI_H_SZ);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_sub&lt;unsigned<sp/>int,<sp/>half_t,<sp/>half_t&gt;(SUB_UI_H,<sp/>SUB_UI_H_SZ);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_sub&lt;unsigned<sp/>long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(SUB_ULI_H,<sp/>SUB_ULI_H_SZ);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_sub&lt;unsigned<sp/>long<sp/>long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(SUB_ULLI_H,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUB_ULLI_H_SZ);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_USI_H)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(SUB_USI_H);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_USI_H_SZ)<sp/><sp/>=<sp/>expected_lhs(SUB_USI_H_SZ);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_UI_H)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(SUB_UI_H);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_UI_H_SZ)<sp/><sp/><sp/>=<sp/>expected_lhs(SUB_UI_H_SZ);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_ULI_H)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(SUB_ULI_H);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_ULI_H_SZ)<sp/><sp/>=<sp/>expected_lhs(SUB_ULI_H_SZ);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_ULLI_H)<sp/><sp/><sp/><sp/>=<sp/>expected_lhs(SUB_ULLI_H);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_ULLI_H_SZ)<sp/>=<sp/>expected_lhs(SUB_ULLI_H_SZ);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>potential<sp/>overflow<sp/>due<sp/>to<sp/>negative<sp/>half_t<sp/>-&gt;<sp/>unsigned<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_rhs<sp/>&gt;=<sp/>half_t(0))<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_sub&lt;half_t,<sp/>unsigned<sp/>short<sp/>int,<sp/>half_t&gt;(SUB_H_USI,<sp/>SUB_H_USI_SZ);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_sub&lt;half_t,<sp/>unsigned<sp/>int,<sp/>half_t&gt;(SUB_H_UI,<sp/>SUB_H_UI_SZ);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_sub&lt;half_t,<sp/>unsigned<sp/>long<sp/>int,<sp/>half_t&gt;(SUB_H_ULI,<sp/>SUB_H_ULI_SZ);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_sub&lt;half_t,<sp/>unsigned<sp/>long<sp/>long<sp/>int,<sp/>half_t&gt;(SUB_H_ULLI,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUB_H_ULLI_SZ);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_H_USI)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(SUB_H_USI);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_H_USI_SZ)<sp/><sp/>=<sp/>expected_lhs(SUB_H_USI_SZ);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_H_UI)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(SUB_H_UI);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_H_UI_SZ)<sp/><sp/><sp/>=<sp/>expected_lhs(SUB_H_UI_SZ);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_H_ULI)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(SUB_H_ULI);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_H_ULI_SZ)<sp/><sp/>=<sp/>expected_lhs(SUB_H_ULI_SZ);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_H_ULLI)<sp/><sp/><sp/><sp/>=<sp/>expected_lhs(SUB_H_ULLI);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(SUB_H_ULLI_SZ)<sp/>=<sp/>expected_lhs(SUB_H_ULLI_SZ);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mul&lt;half_t,<sp/>half_t,<sp/>half_t&gt;(MUL_H_H,<sp/>MUL_H_H_SZ);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mul&lt;float,<sp/>half_t,<sp/>float&gt;(MUL_S_H,<sp/>MUL_S_H_SZ);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mul&lt;double,<sp/>half_t,<sp/>double&gt;(MUL_D_H,<sp/>MUL_D_H_SZ);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mul&lt;short<sp/>int,<sp/>half_t,<sp/>half_t&gt;(MUL_SI_H,<sp/>MUL_SI_H_SZ);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mul&lt;int,<sp/>half_t,<sp/>half_t&gt;(MUL_I_H,<sp/>MUL_I_H_SZ);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mul&lt;long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(MUL_LI_H,<sp/>MUL_LI_H_SZ);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mul&lt;long<sp/>long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(MUL_LLI_H,<sp/>MUL_LLI_H_SZ);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mul&lt;half_t,<sp/>float,<sp/>float&gt;(MUL_H_S,<sp/>MUL_H_S_SZ);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mul&lt;half_t,<sp/>double,<sp/>double&gt;(MUL_H_D,<sp/>MUL_H_D_SZ);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mul&lt;half_t,<sp/>short<sp/>int,<sp/>half_t&gt;(MUL_H_SI,<sp/>MUL_H_SI_SZ);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mul&lt;half_t,<sp/>int,<sp/>half_t&gt;(MUL_H_I,<sp/>MUL_H_I_SZ);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mul&lt;half_t,<sp/>long<sp/>int,<sp/>half_t&gt;(MUL_H_LI,<sp/>MUL_H_LI_SZ);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mul&lt;half_t,<sp/>long<sp/>long<sp/>int,<sp/>half_t&gt;(MUL_H_LLI,<sp/>MUL_H_LLI_SZ);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>potential<sp/>overflow<sp/>due<sp/>to<sp/>negative<sp/>half_t<sp/>-&gt;<sp/>unsigned<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_lhs<sp/>&gt;=<sp/>half_t(0))<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_mul&lt;unsigned<sp/>short<sp/>int,<sp/>half_t,<sp/>half_t&gt;(MUL_USI_H,<sp/>MUL_USI_H_SZ);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_mul&lt;unsigned<sp/>int,<sp/>half_t,<sp/>half_t&gt;(MUL_UI_H,<sp/>MUL_UI_H_SZ);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_mul&lt;unsigned<sp/>long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(MUL_ULI_H,<sp/>MUL_ULI_H_SZ);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_mul&lt;unsigned<sp/>long<sp/>long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(MUL_ULLI_H,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MUL_ULLI_H_SZ);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_USI_H)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(MUL_USI_H);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_UI_H)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(MUL_UI_H);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_ULI_H)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(MUL_ULI_H);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_ULLI_H)<sp/><sp/><sp/><sp/>=<sp/>expected_lhs(MUL_ULLI_H);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_USI_H_SZ)<sp/><sp/>=<sp/>expected_lhs(MUL_USI_H_SZ);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_UI_H_SZ)<sp/><sp/><sp/>=<sp/>expected_lhs(MUL_UI_H_SZ);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_ULI_H_SZ)<sp/><sp/>=<sp/>expected_lhs(MUL_ULI_H_SZ);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_ULLI_H_SZ)<sp/>=<sp/>expected_lhs(MUL_ULLI_H_SZ);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>potential<sp/>overflow<sp/>due<sp/>to<sp/>negative<sp/>half_t<sp/>-&gt;<sp/>unsigned<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_rhs<sp/>&gt;=<sp/>half_t(0))<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_mul&lt;half_t,<sp/>unsigned<sp/>short<sp/>int,<sp/>half_t&gt;(MUL_H_USI,<sp/>MUL_H_USI_SZ);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_mul&lt;half_t,<sp/>unsigned<sp/>int,<sp/>half_t&gt;(MUL_H_UI,<sp/>MUL_H_UI_SZ);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_mul&lt;half_t,<sp/>unsigned<sp/>long<sp/>int,<sp/>half_t&gt;(MUL_H_ULI,<sp/>MUL_H_ULI_SZ);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_mul&lt;half_t,<sp/>unsigned<sp/>long<sp/>long<sp/>int,<sp/>half_t&gt;(MUL_H_ULLI,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MUL_H_ULLI_SZ);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_H_USI)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(MUL_H_USI);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_H_UI)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(MUL_H_UI);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_H_ULI)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(MUL_H_ULI);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_H_ULLI)<sp/><sp/><sp/><sp/>=<sp/>expected_lhs(MUL_H_ULLI);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_H_USI_SZ)<sp/><sp/>=<sp/>expected_lhs(MUL_H_USI_SZ);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_H_UI_SZ)<sp/><sp/><sp/>=<sp/>expected_lhs(MUL_H_UI_SZ);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_H_ULI_SZ)<sp/><sp/>=<sp/>expected_lhs(MUL_H_ULI_SZ);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(MUL_H_ULLI_SZ)<sp/>=<sp/>expected_lhs(MUL_H_ULLI_SZ);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>test_div&lt;half_t,<sp/>half_t,<sp/>half_t&gt;(DIV_H_H,<sp/>DIV_H_H_SZ);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>test_div&lt;float,<sp/>half_t,<sp/>float&gt;(DIV_S_H,<sp/>DIV_S_H_SZ);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>test_div&lt;double,<sp/>half_t,<sp/>double&gt;(DIV_D_H,<sp/>DIV_D_H_SZ);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>test_div&lt;short<sp/>int,<sp/>half_t,<sp/>half_t&gt;(DIV_SI_H,<sp/>DIV_SI_H_SZ);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>test_div&lt;int,<sp/>half_t,<sp/>half_t&gt;(DIV_I_H,<sp/>DIV_I_H_SZ);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>test_div&lt;long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(DIV_LI_H,<sp/>DIV_LI_H_SZ);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>test_div&lt;long<sp/>long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(DIV_LLI_H,<sp/>DIV_LLI_H_SZ);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>test_div&lt;half_t,<sp/>float,<sp/>float&gt;(DIV_H_S,<sp/>DIV_H_S_SZ);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>test_div&lt;half_t,<sp/>double,<sp/>double&gt;(DIV_H_D,<sp/>DIV_H_D_SZ);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>division<sp/>by<sp/>zero<sp/>due<sp/>to<sp/>truncation<sp/>by<sp/>half_t<sp/>-&gt;<sp/>integral<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_rhs<sp/>&gt;=<sp/>half_t(1)<sp/>||<sp/>h_rhs<sp/>&lt;=<sp/>half_t(-1))<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_div&lt;half_t,<sp/>short<sp/>int,<sp/>half_t&gt;(DIV_H_SI,<sp/>DIV_H_SI_SZ);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_div&lt;half_t,<sp/>int,<sp/>half_t&gt;(DIV_H_I,<sp/>DIV_H_I_SZ);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_div&lt;half_t,<sp/>long<sp/>int,<sp/>half_t&gt;(DIV_H_LI,<sp/>DIV_H_LI_SZ);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_div&lt;half_t,<sp/>long<sp/>long<sp/>int,<sp/>half_t&gt;(DIV_H_LLI,<sp/>DIV_H_LLI_SZ);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_SI)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(DIV_H_SI);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_I)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(DIV_H_I);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_LI)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(DIV_H_LI);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_LLI)<sp/><sp/><sp/><sp/>=<sp/>expected_lhs(DIV_H_LLI);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_SI_SZ)<sp/><sp/>=<sp/>expected_lhs(DIV_H_SI_SZ);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_I_SZ)<sp/><sp/><sp/>=<sp/>expected_lhs(DIV_H_I_SZ);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_LI_SZ)<sp/><sp/>=<sp/>expected_lhs(DIV_H_LI_SZ);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_LLI_SZ)<sp/>=<sp/>expected_lhs(DIV_H_LLI_SZ);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>potential<sp/>overflow<sp/>due<sp/>to<sp/>negative<sp/>half_t<sp/>-&gt;<sp/>unsigned<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_lhs<sp/>&gt;=<sp/>half_t(0))<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_div&lt;unsigned<sp/>short<sp/>int,<sp/>half_t,<sp/>half_t&gt;(DIV_USI_H,<sp/>DIV_USI_H_SZ);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_div&lt;unsigned<sp/>int,<sp/>half_t,<sp/>half_t&gt;(DIV_UI_H,<sp/>DIV_UI_H_SZ);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_div&lt;unsigned<sp/>long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(DIV_ULI_H,<sp/>DIV_ULI_H_SZ);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_div&lt;unsigned<sp/>long<sp/>long<sp/>int,<sp/>half_t,<sp/>half_t&gt;(DIV_ULLI_H,</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DIV_ULLI_H_SZ);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_USI_H)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(DIV_USI_H);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_UI_H)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(DIV_UI_H);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_ULI_H)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(DIV_ULI_H);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_ULLI_H)<sp/><sp/><sp/><sp/>=<sp/>expected_lhs(DIV_ULLI_H);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_USI_H_SZ)<sp/><sp/>=<sp/>expected_lhs(DIV_USI_H_SZ);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_UI_H_SZ)<sp/><sp/><sp/>=<sp/>expected_lhs(DIV_UI_H_SZ);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_ULI_H_SZ)<sp/><sp/>=<sp/>expected_lhs(DIV_ULI_H_SZ);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_ULLI_H_SZ)<sp/>=<sp/>expected_lhs(DIV_ULLI_H_SZ);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>division<sp/>by<sp/>zero<sp/>due<sp/>to<sp/>truncation<sp/>by<sp/>half_t<sp/>-&gt;<sp/>integral<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_rhs<sp/>&gt;=<sp/>half_t(1))<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_div&lt;half_t,<sp/>unsigned<sp/>short<sp/>int,<sp/>half_t&gt;(DIV_H_USI,<sp/>DIV_H_USI_SZ);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_div&lt;half_t,<sp/>unsigned<sp/>int,<sp/>half_t&gt;(DIV_H_UI,<sp/>DIV_H_UI_SZ);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_div&lt;half_t,<sp/>unsigned<sp/>long<sp/>int,<sp/>half_t&gt;(DIV_H_ULI,<sp/>DIV_H_ULI_SZ);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_div&lt;half_t,<sp/>unsigned<sp/>long<sp/>long<sp/>int,<sp/>half_t&gt;(DIV_H_ULLI,</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DIV_H_ULLI_SZ);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_USI)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(DIV_H_USI);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_USI_SZ)<sp/><sp/>=<sp/>expected_lhs(DIV_H_USI_SZ);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_UI)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(DIV_H_UI);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_UI_SZ)<sp/><sp/><sp/>=<sp/>expected_lhs(DIV_H_UI_SZ);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_ULI)<sp/><sp/><sp/><sp/><sp/>=<sp/>expected_lhs(DIV_H_ULI);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_ULI_SZ)<sp/><sp/>=<sp/>expected_lhs(DIV_H_ULI_SZ);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_ULLI)<sp/><sp/><sp/><sp/>=<sp/>expected_lhs(DIV_H_ULLI);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_lhs(DIV_H_ULLI_SZ)<sp/>=<sp/>expected_lhs(DIV_H_ULLI_SZ);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>figure<sp/>out<sp/>why<sp/>operator{!,&amp;&amp;,||}<sp/>are<sp/>returning<sp/>__nv_bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(NEG)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(!h_lhs);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(NEG)<sp/>=<sp/>!d_lhs;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(AND)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(half_t(0)<sp/>&amp;&amp;<sp/>h_lhs);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(AND)<sp/>=<sp/>double(0)<sp/>&amp;&amp;<sp/>d_lhs;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(OR)<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_lhs<sp/>||<sp/>half_t(1));</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(OR)<sp/>=<sp/>d_lhs<sp/>||<sp/>double(1);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(EQ)<sp/><sp/><sp/>=<sp/>h_lhs<sp/>==<sp/>h_rhs;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(EQ)<sp/>=<sp/>d_lhs<sp/>==<sp/>d_rhs;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(NEQ)<sp/><sp/><sp/>=<sp/>h_lhs<sp/>!=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(NEQ)<sp/>=<sp/>d_lhs<sp/>!=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(LT)<sp/><sp/><sp/>=<sp/>h_lhs<sp/>&lt;<sp/>h_rhs;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(LT)<sp/>=<sp/>d_lhs<sp/>&lt;<sp/>d_rhs;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(GT)<sp/><sp/><sp/>=<sp/>h_lhs<sp/>&gt;<sp/>h_rhs;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(GT)<sp/>=<sp/>d_lhs<sp/>&gt;<sp/>d_rhs;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(LE)<sp/><sp/><sp/>=<sp/>h_lhs<sp/>&lt;=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(LE)<sp/>=<sp/>d_lhs<sp/>&lt;=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(GE)<sp/><sp/><sp/>=<sp/>h_lhs<sp/>&gt;=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(GE)<sp/>=<sp/>d_lhs<sp/>&gt;=<sp/>d_rhs;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>actual_lhs(TW)<sp/><sp/><sp/>=<sp/>h_lhs<sp/>&lt;=&gt;<sp/>h_rhs;<sp/><sp/>//<sp/>Need<sp/>C++20?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expected_lhs(TW)<sp/>=<sp/>d_lhs<sp/>&lt;=&gt;<sp/>d_rhs;<sp/><sp/>//<sp/>Need<sp/>C++20?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(PASS_BY_REF)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(accept_ref(h_lhs));</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(PASS_BY_REF)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>half_tmp<sp/>=<sp/>cast_from_half&lt;float&gt;(h_lhs);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_ptr<sp/><sp/>=<sp/>&amp;(tmp_lhs<sp/>=<sp/>half_tmp);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_ptr<sp/>!=<sp/>&amp;tmp_lhs)</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::abort(</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>half_t<sp/>address-of<sp/>operator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(AO_IMPL_HALF)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(*tmp_ptr);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(AO_IMPL_HALF)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp2_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_ptr<sp/><sp/>=<sp/>&amp;(tmp_lhs<sp/>=<sp/>tmp2_lhs);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_ptr<sp/>!=<sp/>&amp;tmp_lhs)</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::abort(</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>half_t<sp/>address-of<sp/>operator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_lhs(AO_HALF_T)<sp/><sp/><sp/>=<sp/>cast_from_half&lt;double&gt;(tmp_ptr[0]);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_lhs(AO_HALF_T)<sp/>=<sp/>d_lhs;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Check<sp/>upcasting<sp/>and<sp/>downcasting<sp/>in<sp/>large<sp/>expressions<sp/>involving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>integral<sp/>and<sp/>floating<sp/>point<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal">};</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__test_half_operators(half_t<sp/>h_lhs,<sp/>half_t<sp/>h_rhs)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_experimental_1_1epsilon" kindref="compound">epsilon</ref><sp/>=<sp/>KOKKOS_HALF_T_IS_FLOAT<sp/>?<sp/>FLT_EPSILON<sp/>:<sp/>FP16_EPSILON;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><ref refid="struct_test_1_1_functor___test_half_operators" kindref="compound">Functor_TestHalfOperators&lt;ViewType&gt;</ref><sp/>f_device(h_lhs,<sp/>h_rhs);<sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>on<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><ref refid="struct_test_1_1_functor___test_half_operators" kindref="compound">Functor_TestHalfOperators&lt;ViewTypeHost&gt;</ref><sp/>f_host(h_lhs,<sp/>h_rhs);<sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>on<sp/>host</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_kokkos_1_1_view" kindref="compound">ViewType::HostMirror</ref><sp/>f_device_actual_lhs<sp/>=</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::create_mirror_view(f_device.actual_lhs);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_kokkos_1_1_view" kindref="compound">ViewType::HostMirror</ref><sp/>f_device_expected_lhs<sp/>=</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::create_mirror_view(f_device.expected_lhs);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>ExecutionSpace().fence();</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>Kokkos::deep_copy(f_device_actual_lhs,<sp/>f_device.actual_lhs);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>Kokkos::deep_copy(f_device_expected_lhs,<sp/>f_device.expected_lhs);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op_test<sp/>=<sp/>0;<sp/>op_test<sp/>&lt;<sp/>N_OP_TESTS;<sp/>op_test++)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;op_test<sp/>=<sp/>%d\n&quot;,<sp/>op_test);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_NEAR(f_device_actual_lhs(op_test),<sp/>f_device_expected_lhs(op_test),</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_kokkos_1_1_experimental_1_1epsilon" kindref="compound">epsilon</ref>);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_NEAR(f_host.actual_lhs(op_test),<sp/>f_host.expected_lhs(op_test),</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_kokkos_1_1_experimental_1_1epsilon" kindref="compound">epsilon</ref>);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>partial<sp/>volatile<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>half_t<sp/>_h_lhs<sp/>=<sp/>h_lhs;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>half_t<sp/>_h_rhs<sp/>=<sp/>h_rhs;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>Functor_TestHalfVolatileOperators&lt;ViewType&gt;<sp/>f_volatile_device(_h_lhs,<sp/>_h_rhs);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>Functor_TestHalfVolatileOperators&lt;ViewTypeHost&gt;<sp/>f_volatile_host(_h_lhs,</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_h_rhs);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>ExecutionSpace().fence();</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>Kokkos::deep_copy(f_device_actual_lhs,<sp/>f_device.actual_lhs);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>Kokkos::deep_copy(f_device_expected_lhs,<sp/>f_device.expected_lhs);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op_test<sp/>=<sp/>0;<sp/>op_test<sp/>&lt;<sp/>N_OP_TESTS;<sp/>op_test++)<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;op_test<sp/>=<sp/>%d\n&quot;,<sp/>op_test);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_test<sp/>==<sp/>ASSIGN<sp/>||<sp/>op_test<sp/>==<sp/>LT<sp/>||<sp/>op_test<sp/>==<sp/>LE<sp/>||<sp/>op_test<sp/>==<sp/>NEQ<sp/>||</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_test<sp/>==<sp/>EQ<sp/>||<sp/>op_test<sp/>==<sp/>GT<sp/>||<sp/>op_test<sp/>==<sp/>GE<sp/>||</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_test<sp/>==<sp/>CADD_H_H<sp/>||<sp/>op_test<sp/>==<sp/>CSUB_H_H<sp/>||<sp/>op_test<sp/>==<sp/>CMUL_H_H<sp/>||</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_test<sp/>==<sp/>CDIV_H_H)<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_NEAR(f_device_actual_lhs(op_test),<sp/>f_device_expected_lhs(op_test),</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_kokkos_1_1_experimental_1_1epsilon" kindref="compound">epsilon</ref>);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_NEAR(f_host.actual_lhs(op_test),<sp/>f_host.expected_lhs(op_test),</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_kokkos_1_1_experimental_1_1epsilon" kindref="compound">epsilon</ref>);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is_trivially_copyable<sp/>is<sp/>false<sp/>with<sp/>the<sp/>addition<sp/>of<sp/>explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>constructors<sp/>that<sp/>are<sp/>required<sp/>for<sp/>supporting<sp/>reductions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ASSERT_TRUE(std::is_trivially_copyable&lt;half_t&gt;::value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_bytes<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(half_t)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>half_t<sp/>h_arr0<sp/>=<sp/>half_t(0x89ab),<sp/>h_arr1<sp/>=<sp/>half_t(0xcdef);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>half_t<sp/>h_arr[n];</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c_arr[n_bytes],<sp/>*h_arr_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>h_arr[0]<sp/><sp/>=<sp/>h_arr0;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>h_arr[1]<sp/><sp/>=<sp/>h_arr1;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>h_arr_ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h_arr);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>std::memcpy(c_arr,<sp/>h_arr,<sp/>n_bytes);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_bytes;<sp/>i++)<sp/>ASSERT_EQ(c_arr[i],<sp/>h_arr_ptr[i]);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>std::memcpy(h_arr,<sp/>c_arr,<sp/>n_bytes);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>ASSERT_EQ(h_arr[0],<sp/>h_arr0);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>ASSERT_EQ(h_arr[1],<sp/>h_arr1);</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_half_operators()<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>half_t<sp/>h_lhs<sp/>=<sp/>half_t(0.23458),<sp/>h_rhs<sp/>=<sp/>half_t(0.67898);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>-3;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;%f<sp/>OP<sp/>%f\n&quot;,<sp/>float(h_lhs<sp/>+<sp/>cast_to_half(i<sp/>+<sp/>1)),<sp/>float(h_rhs<sp/>+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast_to_half(i)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>__test_half_operators(h_lhs<sp/>+<sp/>cast_to_half(i<sp/>+<sp/>1),<sp/>h_rhs<sp/>+<sp/>cast_to_half(i));</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>__test_half_operators(h_lhs<sp/>+<sp/>cast_to_half(i<sp/>+<sp/>1),<sp/>half_t(0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>__test_half_operators(half_t(0),<sp/>h_rhs<sp/>+<sp/>cast_to_half(i));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>half_operators)<sp/>{<sp/>test_half_operators();<sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>KOKKOS_ENABLE_SYCL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>TESTHALFOPERATOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/Kokkos/kokkos/core/unit_test/TestHalfOperators.hpp"/>
  </compounddef>
</doxygen>
