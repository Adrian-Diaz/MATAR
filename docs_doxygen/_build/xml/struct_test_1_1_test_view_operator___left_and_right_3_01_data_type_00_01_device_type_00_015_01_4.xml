<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4" kind="struct" language="C++" prot="public">
    <compoundname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>class DataType</type>
      </param>
      <param>
        <type>class DeviceType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1af34ff3447a6f2b26c519579ba86d9d0f" prot="public" static="no">
        <type>DeviceType</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::execution_space =  DeviceType</definition>
        <argsstring></argsstring>
        <name>execution_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::execution_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="271" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a325c94e290e9f786e4b52ade7a9de1b0" prot="public" static="no">
        <type>typename execution_space::memory_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::memory_space =  typename execution_space::memory_space</definition>
        <argsstring></argsstring>
        <name>memory_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::memory_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="272" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a853e2de4be1ce6eaa6c36c3edb7651e9" prot="public" static="no">
        <type>typename execution_space::size_type</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::size_type =  typename execution_space::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="273" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1afc518d4934cd25b15576a360625f2ef4" prot="public" static="no">
        <type>int</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::value_type =  int</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="275" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a0720a2b2db163e6d6de39daff23c3801" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::left_view =  Kokkos::DynRankView&lt;DataType, Kokkos::LayoutLeft, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>left_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::left_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="286" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a0167d68123885166add99ca8f2119020" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::right_view =  Kokkos::DynRankView&lt;DataType, Kokkos::LayoutRight, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>right_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::right_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="289" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1acea6e4680b487117a8511d620ac87dc3" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::stride_view =  Kokkos::DynRankView&lt;DataType, Kokkos::LayoutStride, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>stride_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::stride_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="292" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1ab31000da86bad42f9782020b004c6d08" prot="public" static="no">
        <type>typename DeviceType::execution_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::execution_space =  typename DeviceType::execution_space</definition>
        <argsstring></argsstring>
        <name>execution_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::execution_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="350" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a0a2ad2b1abecd26416783735a8945df2" prot="public" static="no">
        <type>typename DeviceType::memory_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::memory_space =  typename DeviceType::memory_space</definition>
        <argsstring></argsstring>
        <name>memory_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::memory_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="351" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a853e2de4be1ce6eaa6c36c3edb7651e9" prot="public" static="no">
        <type>typename execution_space::size_type</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::size_type =  typename execution_space::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="352" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1afc518d4934cd25b15576a360625f2ef4" prot="public" static="no">
        <type>int</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::value_type =  int</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="354" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a0e7aa3c549c5d69d428a11dc6ebcaa39" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::left_view =  Kokkos::View&lt;DataType, Kokkos::LayoutLeft, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>left_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::left_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="365" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1ac1a42b357ec0e1995bc2e937ea3c44bf" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::right_view =  Kokkos::View&lt;DataType, Kokkos::LayoutRight, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>right_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::right_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="366" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1aa82405684cc98bc8fe26ceb8bd84e28e" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::stride_view =  Kokkos::View&lt;DataType, Kokkos::LayoutStride, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>stride_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::stride_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="368" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="369" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a2fed6cc4cd1445093c498ddf59787df3" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">left_view</ref></type>
        <definition>left_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::left</definition>
        <argsstring></argsstring>
        <name>left</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::left</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="295" column="13" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a08614e8c506c8965c31a5dfaf5d1db77" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">right_view</ref></type>
        <definition>right_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::right</definition>
        <argsstring></argsstring>
        <name>right</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::right</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="296" column="14" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1ae65fd7c164ef8da09caf946ad816f9da" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">stride_view</ref></type>
        <definition>stride_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::left_stride</definition>
        <argsstring></argsstring>
        <name>left_stride</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::left_stride</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="297" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a360cc36a0bd1edee91da0f011fb184d7" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">stride_view</ref></type>
        <definition>stride_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::right_stride</definition>
        <argsstring></argsstring>
        <name>right_stride</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::right_stride</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="298" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a2a7f8dd90bc539089bd3eb0ad5f56a08" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::left_alloc</definition>
        <argsstring></argsstring>
        <name>left_alloc</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::left_alloc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="299" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a3081b45671b5898875c9078b3f2c83dd" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::right_alloc</definition>
        <argsstring></argsstring>
        <name>right_alloc</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::right_alloc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="300" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1abae222eeb4bc97a749d2148cea46ff8b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::join</definition>
        <argsstring>(volatile value_type &amp;update, const volatile value_type &amp;input)</argsstring>
        <name>join</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::join</qualifiedname>
        <param>
          <type>volatile value_type &amp;</type>
          <declname>update</declname>
        </param>
        <param>
          <type>const volatile value_type &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="278" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a3554ed4c10d7764b49149a58dd3551b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::init</definition>
        <argsstring>(value_type &amp;update)</argsstring>
        <name>init</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::init</qualifiedname>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="284" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="284" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1af01f492bc1d216b8ffc06b42decb7418" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::testit</definition>
        <argsstring>(unsigned N0, unsigned N1, unsigned N2, unsigned N3, unsigned N4)</argsstring>
        <name>testit</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::testit</qualifiedname>
        <param>
          <type>unsigned</type>
          <declname>N0</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N1</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N2</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N3</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="311" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="311" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1abae222eeb4bc97a749d2148cea46ff8b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::join</definition>
        <argsstring>(volatile value_type &amp;update, const volatile value_type &amp;input)</argsstring>
        <name>join</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::join</qualifiedname>
        <param>
          <type>volatile value_type &amp;</type>
          <declname>update</declname>
        </param>
        <param>
          <type>const volatile value_type &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="357" column="15" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="357" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a3554ed4c10d7764b49149a58dd3551b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::init</definition>
        <argsstring>(value_type &amp;update)</argsstring>
        <name>init</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::init</qualifiedname>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="363" column="15" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="363" bodyend="363"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1aecd1f6d74c34de436a9a2611c7019df1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::TestViewOperator_LeftAndRight</definition>
        <argsstring>(unsigned N0, unsigned N1, unsigned N2, unsigned N3, unsigned N4)</argsstring>
        <name>TestViewOperator_LeftAndRight</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::TestViewOperator_LeftAndRight</qualifiedname>
        <param>
          <type>unsigned</type>
          <declname>N0</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N1</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N2</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N3</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="302" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="302" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a643f0cf45a26b6d89f26a10dc51d97fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::operator()</definition>
        <argsstring>(const size_type, value_type &amp;update) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::operator()</qualifiedname>
        <param>
          <type>const</type>
          <declname>size_type</declname>
        </param>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="323" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="323" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1ab228c9ea98ebde4e349544a67a9a367b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::TestViewOperator_LeftAndRight</definition>
        <argsstring>()</argsstring>
        <name>TestViewOperator_LeftAndRight</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::TestViewOperator_LeftAndRight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="378" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="378" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a504dd209c1cd379c91a2ca3e9afa5a08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::testit</definition>
        <argsstring>()</argsstring>
        <name>testit</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::testit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="386" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="386" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a643f0cf45a26b6d89f26a10dc51d97fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::operator()</definition>
        <argsstring>(const size_type, value_type &amp;update) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;::operator()</qualifiedname>
        <param>
          <type>const</type>
          <declname>size_type</declname>
        </param>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="395" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="395" bodyend="433"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>Kokkos::DynRankView&lt; DataType, Kokkos::LayoutLeft, execution_space &gt;</label>
        <link refid="class_kokkos_1_1_dyn_rank_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Kokkos::DynRankView&lt; DataType, Kokkos::LayoutRight, execution_space &gt;</label>
        <link refid="class_kokkos_1_1_dyn_rank_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Kokkos::DynRankView&lt; DataType, Kokkos::LayoutStride, execution_space &gt;</label>
        <link refid="class_kokkos_1_1_dyn_rank_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</label>
        <link refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4"/>
        <childnode refid="2" relation="usage">
          <edgelabel>left</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>right</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>left_stride</edgelabel>
          <edgelabel>right_stride</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Kokkos::ViewTraits&lt; DataType, Properties... &gt;</label>
        <link refid="struct_kokkos_1_1_view_traits"/>
      </node>
    </collaborationgraph>
    <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="270" column="1" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="270" bodyend="362"/>
    <listofallmembers>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1af34ff3447a6f2b26c519579ba86d9d0f" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>execution_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1ab31000da86bad42f9782020b004c6d08" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>execution_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a3554ed4c10d7764b49149a58dd3551b5" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>init</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a3554ed4c10d7764b49149a58dd3551b5" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>init</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1abae222eeb4bc97a749d2148cea46ff8b" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>join</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1abae222eeb4bc97a749d2148cea46ff8b" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>join</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a2fed6cc4cd1445093c498ddf59787df3" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>left</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a2a7f8dd90bc539089bd3eb0ad5f56a08" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>left_alloc</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1ae65fd7c164ef8da09caf946ad816f9da" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>left_stride</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a0720a2b2db163e6d6de39daff23c3801" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>left_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a0e7aa3c549c5d69d428a11dc6ebcaa39" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>left_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a325c94e290e9f786e4b52ade7a9de1b0" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>memory_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a0a2ad2b1abecd26416783735a8945df2" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>memory_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a643f0cf45a26b6d89f26a10dc51d97fe" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>operator()</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a643f0cf45a26b6d89f26a10dc51d97fe" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>operator()</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a08614e8c506c8965c31a5dfaf5d1db77" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>right</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a3081b45671b5898875c9078b3f2c83dd" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>right_alloc</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a360cc36a0bd1edee91da0f011fb184d7" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>right_stride</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a0167d68123885166add99ca8f2119020" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>right_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1ac1a42b357ec0e1995bc2e937ea3c44bf" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>right_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a853e2de4be1ce6eaa6c36c3edb7651e9" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>size_type</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a853e2de4be1ce6eaa6c36c3edb7651e9" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>size_type</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1acea6e4680b487117a8511d620ac87dc3" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>stride_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1aa82405684cc98bc8fe26ceb8bd84e28e" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>stride_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1af01f492bc1d216b8ffc06b42decb7418" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>testit</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1a504dd209c1cd379c91a2ca3e9afa5a08" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>testit</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1aecd1f6d74c34de436a9a2611c7019df1" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>TestViewOperator_LeftAndRight</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1ab228c9ea98ebde4e349544a67a9a367b" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>TestViewOperator_LeftAndRight</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1afc518d4934cd25b15576a360625f2ef4" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>value_type</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_015_01_4_1afc518d4934cd25b15576a360625f2ef4" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 5 &gt;</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
