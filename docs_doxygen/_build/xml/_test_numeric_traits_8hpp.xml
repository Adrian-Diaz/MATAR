<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_test_numeric_traits_8hpp" kind="file" language="C++">
    <compoundname>TestNumericTraits.hpp</compoundname>
    <includes refid="gtest_8h" local="no">gtest/gtest.h</includes>
    <includes refid="_kokkos___core_8hpp" local="no">Kokkos_Core.hpp</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">limits</includes>
    <includes refid="_kokkos___numeric_traits_8hpp" local="yes">Kokkos_NumericTraits.hpp</includes>
    <includes refid="_kokkos___exec_policy_8hpp" local="yes">Kokkos_ExecPolicy.hpp</includes>
    <incdepgraph>
      <node id="39">
        <label>Cuda/Kokkos_Cuda_Half.hpp</label>
        <link refid="_kokkos___cuda___half_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>KokkosExp_MDRangePolicy.hpp</label>
        <link refid="_kokkos_exp___m_d_range_policy_8hpp_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="146">
        <label>Kokkos_AcquireUniqueTokenImpl.hpp</label>
        <link refid="_kokkos___acquire_unique_token_impl_8hpp_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>Kokkos_AnonymousSpace.hpp</label>
        <link refid="_kokkos___anonymous_space_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>Kokkos_Array.hpp</label>
        <link refid="_kokkos___array_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>Kokkos_Atomic.hpp</label>
        <link refid="_kokkos___atomic_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>Kokkos_Complex.hpp</label>
        <link refid="_kokkos___complex_8hpp_source"/>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>Kokkos_Concepts.hpp</label>
        <link refid="_kokkos___concepts_8hpp_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="141">
        <label>Kokkos_CopyViews.hpp</label>
        <link refid="_kokkos___copy_views_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Kokkos_Core.hpp</label>
        <link refid="_kokkos___core_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Kokkos_Core_fwd.hpp</label>
        <link refid="_kokkos___core__fwd_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>Kokkos_Crs.hpp</label>
        <link refid="_kokkos___crs_8hpp_source"/>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
      </node>
      <node id="122">
        <label>Kokkos_DetectionIdiom.hpp</label>
        <link refid="_kokkos___detection_idiom_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>Kokkos_ExecPolicy.hpp</label>
        <link refid="_kokkos___exec_policy_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="125">
        <label>Kokkos_Extents.hpp</label>
        <link refid="_kokkos___extents_8hpp_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>Kokkos_Half.hpp</label>
        <link refid="_kokkos___half_8hpp_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>Kokkos_HostSpace.hpp</label>
        <link refid="_kokkos___host_space_8hpp_source"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>Kokkos_Layout.hpp</label>
        <link refid="_kokkos___layout_8hpp"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>Kokkos_LogicalSpaces.hpp</label>
        <link refid="_kokkos___logical_spaces_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Kokkos_Macros.hpp</label>
        <link refid="_kokkos___macros_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>Kokkos_MathematicalFunctions.hpp</label>
        <link refid="_kokkos___mathematical_functions_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>Kokkos_MathematicalSpecialFunctions.hpp</label>
        <link refid="_kokkos___mathematical_special_functions_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>Kokkos_MemoryPool.hpp</label>
        <link refid="_kokkos___memory_pool_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>Kokkos_MemoryTraits.hpp</label>
        <link refid="_kokkos___memory_traits_8hpp_source"/>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>Kokkos_NumericTraits.hpp</label>
        <link refid="_kokkos___numeric_traits_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>Kokkos_Pair.hpp</label>
        <link refid="_kokkos___pair_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>Kokkos_Parallel.hpp</label>
        <link refid="_kokkos___parallel_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
      </node>
      <node id="133">
        <label>Kokkos_Parallel_Reduce.hpp</label>
        <link refid="_kokkos___parallel___reduce_8hpp_source"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>Kokkos_Rank.hpp</label>
        <link refid="_kokkos___rank_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>Kokkos_ScratchSpace.hpp</label>
        <link refid="_kokkos___scratch_space_8hpp_source"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="140">
        <label>Kokkos_TaskScheduler.hpp</label>
        <link refid="_kokkos___task_scheduler_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="139">
        <label>Kokkos_Timer.hpp</label>
        <link refid="_kokkos___timer_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>Kokkos_Tuners.hpp</label>
        <link refid="_kokkos___tuners_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="147">
        <label>Kokkos_UniqueToken.hpp</label>
        <link refid="_kokkos___unique_token_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="137">
        <label>Kokkos_Vectorization.hpp</label>
        <link refid="_kokkos___vectorization_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="123">
        <label>Kokkos_View.hpp</label>
        <link refid="_kokkos___view_8hpp_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
      </node>
      <node id="144">
        <label>Kokkos_WorkGraphPolicy.hpp</label>
        <link refid="_kokkos___work_graph_policy_8hpp_source"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="138">
        <label>Kokkos_hwloc.hpp</label>
        <link refid="_kokkos__hwloc_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>impl/KokkosExp_Host_IterateTile.hpp</label>
        <link refid="_kokkos_exp___host___iterate_tile_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>impl/Kokkos_AnalyzePolicy.hpp</label>
        <link refid="_kokkos___analyze_policy_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>impl/Kokkos_Atomic_Assembly.hpp</label>
        <link refid="_kokkos___atomic___assembly_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>impl/Kokkos_Atomic_Compare_Exchange_Strong.hpp</label>
        <link refid="_kokkos___atomic___compare___exchange___strong_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>impl/Kokkos_Atomic_Decrement.hpp</label>
        <link refid="_kokkos___atomic___decrement_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>impl/Kokkos_Atomic_Exchange.hpp</label>
        <link refid="_kokkos___atomic___exchange_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>impl/Kokkos_Atomic_Fetch_Add.hpp</label>
        <link refid="_kokkos___atomic___fetch___add_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>impl/Kokkos_Atomic_Fetch_And.hpp</label>
        <link refid="_kokkos___atomic___fetch___and_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="112">
        <label>impl/Kokkos_Atomic_Fetch_Or.hpp</label>
        <link refid="_kokkos___atomic___fetch___or_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>impl/Kokkos_Atomic_Fetch_Sub.hpp</label>
        <link refid="_kokkos___atomic___fetch___sub_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>impl/Kokkos_Atomic_Generic.hpp</label>
        <link refid="_kokkos___atomic___generic_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>impl/Kokkos_Atomic_Generic_Secondary.hpp</label>
        <link refid="_kokkos___atomic___generic___secondary_8hpp_source"/>
      </node>
      <node id="109">
        <label>impl/Kokkos_Atomic_Increment.hpp</label>
        <link refid="_kokkos___atomic___increment_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>impl/Kokkos_Atomic_Load.hpp</label>
        <link refid="_kokkos___atomic___load_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>impl/Kokkos_Atomic_Memory_Order.hpp</label>
        <link refid="_kokkos___atomic___memory___order_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>impl/Kokkos_Atomic_MinMax.hpp</label>
        <link refid="_kokkos___atomic___min_max_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="117">
        <label>impl/Kokkos_Atomic_Store.hpp</label>
        <link refid="_kokkos___atomic___store_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="128">
        <label>impl/Kokkos_Atomic_View.hpp</label>
        <link refid="_kokkos___atomic___view_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>impl/Kokkos_BitOps.hpp</label>
        <link refid="_kokkos___bit_ops_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="135">
        <label>impl/Kokkos_ClockTic.hpp</label>
        <link refid="_kokkos___clock_tic_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
      </node>
      <node id="145">
        <label>impl/Kokkos_Combined_Reducer.hpp</label>
        <link refid="_kokkos___combined___reducer_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="134">
        <label>impl/Kokkos_ConcurrentBitset.hpp</label>
        <link refid="_kokkos___concurrent_bitset_8hpp_source"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>impl/Kokkos_Error.hpp</label>
        <link refid="_kokkos___error_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="132">
        <label>impl/Kokkos_FunctorAdapter.hpp</label>
        <link refid="_kokkos___functor_adapter_8hpp_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="131">
        <label>impl/Kokkos_FunctorAnalysis.hpp</label>
        <link refid="_kokkos___functor_analysis_8hpp_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>impl/Kokkos_GraphImpl_fwd.hpp</label>
        <link refid="_kokkos___graph_impl__fwd_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>impl/Kokkos_HostSpace_deepcopy.hpp</label>
        <link refid="_kokkos___host_space__deepcopy_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>impl/Kokkos_MemorySpace.hpp</label>
        <link refid="_kokkos___memory_space_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>impl/Kokkos_Memory_Fence.hpp</label>
        <link refid="_kokkos___memory___fence_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>impl/Kokkos_Profiling.hpp</label>
        <link refid="_kokkos___profiling_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>impl/Kokkos_Profiling_C_Interface.h</label>
        <link refid="_kokkos___profiling___c___interface_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>impl/Kokkos_Profiling_DeviceInfo.hpp</label>
        <link refid="_kokkos___profiling___device_info_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>impl/Kokkos_Profiling_Interface.hpp</label>
        <link refid="_kokkos___profiling___interface_8hpp_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>impl/Kokkos_SharedAlloc.hpp</label>
        <link refid="_kokkos___shared_alloc_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>impl/Kokkos_Tools.hpp</label>
        <link refid="_kokkos___tools_8hpp_source"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>impl/Kokkos_Traits.hpp</label>
        <link refid="_kokkos___traits_8hpp_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>impl/Kokkos_Utilities.hpp</label>
        <link refid="_kokkos___utilities_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="129">
        <label>impl/Kokkos_ViewArray.hpp</label>
        <link refid="_kokkos___view_array_8hpp_source"/>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>impl/Kokkos_ViewCtor.hpp</label>
        <link refid="_kokkos___view_ctor_8hpp_source"/>
      </node>
      <node id="124">
        <label>impl/Kokkos_ViewMapping.hpp</label>
        <link refid="_kokkos___view_mapping_8hpp_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>impl/Kokkos_ViewTracker.hpp</label>
        <link refid="_kokkos___view_tracker_8hpp_source"/>
      </node>
      <node id="130">
        <label>impl/Kokkos_ViewUniformType.hpp</label>
        <link refid="_kokkos___view_uniform_type_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="115">
        <label>impl/Kokkos_Volatile_Load.hpp</label>
        <link refid="_kokkos___volatile___load_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>traits/Kokkos_ExecutionSpaceTrait.hpp</label>
        <link refid="_kokkos___execution_space_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>traits/Kokkos_GraphKernelTrait.hpp</label>
        <link refid="_kokkos___graph_kernel_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>traits/Kokkos_IndexTypeTrait.hpp</label>
        <link refid="_kokkos___index_type_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>traits/Kokkos_IterationPatternTrait.hpp</label>
        <link refid="_kokkos___iteration_pattern_trait_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>traits/Kokkos_LaunchBoundsTrait.hpp</label>
        <link refid="_kokkos___launch_bounds_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>traits/Kokkos_OccupancyControlTrait.hpp</label>
        <link refid="_kokkos___occupancy_control_trait_8hpp_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>traits/Kokkos_PolicyTraitAdaptor.hpp</label>
        <link refid="_kokkos___policy_trait_adaptor_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>traits/Kokkos_ScheduleTrait.hpp</label>
        <link refid="_kokkos___schedule_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>traits/Kokkos_Traits_fwd.hpp</label>
        <link refid="_kokkos___traits__fwd_8hpp_source"/>
      </node>
      <node id="67">
        <label>traits/Kokkos_WorkItemPropertyTrait.hpp</label>
        <link refid="_kokkos___work_item_property_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>traits/Kokkos_WorkTagTrait.hpp</label>
        <link refid="_kokkos___work_tag_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp</label>
        <link refid="_test_numeric_traits_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>KokkosCore_Config_DeclareBackend.hpp</label>
      </node>
      <node id="37">
        <label>KokkosCore_Config_FwdBackend.hpp</label>
      </node>
      <node id="148">
        <label>KokkosCore_Config_PostInclude.hpp</label>
      </node>
      <node id="31">
        <label>KokkosCore_Config_SetupBackend.hpp</label>
      </node>
      <node id="30">
        <label>KokkosCore_config.h</label>
      </node>
      <node id="72">
        <label>algorithm</label>
      </node>
      <node id="81">
        <label>array</label>
      </node>
      <node id="25">
        <label>assert.h</label>
      </node>
      <node id="102">
        <label>atomic</label>
      </node>
      <node id="84">
        <label>cassert</label>
      </node>
      <node id="94">
        <label>cfloat</label>
      </node>
      <node id="136">
        <label>chrono</label>
      </node>
      <node id="75">
        <label>cinttypes</label>
      </node>
      <node id="53">
        <label>climits</label>
      </node>
      <node id="91">
        <label>cmath</label>
      </node>
      <node id="119">
        <label>complex</label>
      </node>
      <node id="43">
        <label>cstddef</label>
      </node>
      <node id="34">
        <label>cstdint</label>
      </node>
      <node id="46">
        <label>cstdio</label>
      </node>
      <node id="76">
        <label>cstdlib</label>
      </node>
      <node id="88">
        <label>cstring</label>
      </node>
      <node id="6">
        <label>ctype.h</label>
      </node>
      <node id="21">
        <label>float.h</label>
      </node>
      <node id="142">
        <label>functional</label>
      </node>
      <node id="36">
        <label>initializer_list</label>
      </node>
      <node id="22">
        <label>iomanip</label>
      </node>
      <node id="26">
        <label>iosfwd</label>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="24">
        <label>iterator</label>
      </node>
      <node id="3">
        <label>limits</label>
      </node>
      <node id="83">
        <label>map</label>
      </node>
      <node id="85">
        <label>memory</label>
      </node>
      <node id="87">
        <label>mutex</label>
      </node>
      <node id="4">
        <label>ostream</label>
      </node>
      <node id="18">
        <label>regex.h</label>
      </node>
      <node id="23">
        <label>set</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="80">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
      <node id="79">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="17">
        <label>strings.h</label>
      </node>
      <node id="12">
        <label>sys/stat.h</label>
      </node>
      <node id="11">
        <label>sys/types.h</label>
      </node>
      <node id="82">
        <label>tuple</label>
      </node>
      <node id="35">
        <label>type_traits</label>
      </node>
      <node id="19">
        <label>typeinfo</label>
      </node>
      <node id="16">
        <label>unistd.h</label>
      </node>
      <node id="86">
        <label>unordered_map</label>
      </node>
      <node id="20">
        <label>utility</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structextrema" prot="public">extrema</innerclass>
    <innerclass refid="struct_infinity" prot="public">Infinity</innerclass>
    <innerclass refid="struct_epsilon" prot="public">Epsilon</innerclass>
    <innerclass refid="struct_finite_min" prot="public">FiniteMin</innerclass>
    <innerclass refid="struct_finite_max" prot="public">FiniteMax</innerclass>
    <innerclass refid="struct_round_error" prot="public">RoundError</innerclass>
    <innerclass refid="struct_norm_min" prot="public">NormMin</innerclass>
    <innerclass refid="struct_digits" prot="public">Digits</innerclass>
    <innerclass refid="struct_digits10" prot="public">Digits10</innerclass>
    <innerclass refid="struct_max_digits10" prot="public">MaxDigits10</innerclass>
    <innerclass refid="struct_radix" prot="public">Radix</innerclass>
    <innerclass refid="struct_min_exponent" prot="public">MinExponent</innerclass>
    <innerclass refid="struct_max_exponent" prot="public">MaxExponent</innerclass>
    <innerclass refid="struct_min_exponent10" prot="public">MinExponent10</innerclass>
    <innerclass refid="struct_max_exponent10" prot="public">MaxExponent10</innerclass>
    <innerclass refid="struct_test_numeric_traits" prot="public">TestNumericTraits</innerclass>
    <innerclass refid="struct_numeric_traits_s_f_i_n_a_e_1_1_has_no_specialization" prot="public">NumericTraitsSFINAE::HasNoSpecialization</innerclass>
    <innerclass refid="struct_assert_int_equality" prot="public">AssertIntEquality</innerclass>
    <innerclass refid="struct_assert_int_equality_3_01_v_00_01_v_01_4" prot="public">AssertIntEquality&lt; V, V &gt;</innerclass>
    <innernamespace refid="namespace_numeric_traits_s_f_i_n_a_e">NumericTraitsSFINAE</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_test_numeric_traits_8hpp_1a8a86c5b98b8d581b7ddc9fb5d0097851" prot="public" static="no">
        <name>DEFINE_EXTREMA</name>
        <param><defname>T</defname></param>
        <param><defname>m</defname></param>
        <param><defname>M</defname></param>
        <initializer>  KOKKOS_FUNCTION static T min(T) { return m; } \
  KOKKOS_FUNCTION static T max(T) { return M; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="54" column="9" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_test_numeric_traits_8hpp_1a2b82a6197fff36513930032d398fe0d7" prot="public" static="no">
        <name>CHECK_TRAIT_IS_SFINAE_FRIENDLY</name>
        <param><defname>TRAIT</defname></param>
        <initializer>  template &lt;class T&gt;                                                       \
  using TRAIT##_value_t = decltype(Kokkos::Experimental::TRAIT&lt;T&gt;::value); \
  template &lt;class T&gt;                                                       \
  using has_##TRAIT = Kokkos::is_detected&lt;TRAIT##_value_t, T&gt;;             \
  static_assert(!has_##TRAIT&lt;HasNoSpecialization&gt;::value, &quot;&quot;);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="345" column="9" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_test_numeric_traits_8hpp_1a0ece481c0adfba0fd792a84503ed598d" prot="public" static="no">
        <name>CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT</name>
        <param><defname>T</defname></param>
        <param><defname>TRAIT</defname></param>
        <initializer>  static_assert(<ref refid="struct_assert_int_equality" kindref="compound">AssertIntEquality</ref>&lt;Kokkos::Experimental::TRAIT&lt;T&gt;::value, \
                                  std::numeric_limits&lt;T&gt;::TRAIT&gt;::value, \
                &quot;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="400" column="9" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_test_numeric_traits_8hpp_1a25d2c7e380176b6999d80cf6fb058f73" prot="public" static="no">
        <name>CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_FUNCTION</name>
        <param><defname>T</defname></param>
        <param><defname>TRAIT</defname></param>
        <initializer>  static_assert(Kokkos::Experimental::TRAIT&lt;T&gt;::value ==       \
                    std::numeric_limits&lt;T&gt;::TRAIT(),           \
                &quot;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="404" column="9" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="404" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_test_numeric_traits_8hpp_1a81bf7d2a9646ce9eda8d8aca1102ca8c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>decltype(<ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity</ref>&lt; T &gt;::value)</type>
        <definition>using infinity_value_t =  decltype(Kokkos::Experimental::infinity&lt;T&gt;::value)</definition>
        <argsstring></argsstring>
        <name>infinity_value_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="372" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_numeric_traits_8hpp_1aaf8091811dabf135c24151f6a737736a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>Kokkos::is_detected&lt; infinity_value_t, T &gt;</type>
        <definition>using has_infinity =  Kokkos::is_detected&lt;infinity_value_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_infinity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="375" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="375" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1af18ea608186d2724dfe37a8c15ddfd41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FUNCTION T *</type>
        <definition>KOKKOS_FUNCTION T * take_address_of</definition>
        <argsstring>(T &amp;arg)</argsstring>
        <name>take_address_of</name>
        <param>
          <type>T &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="95" column="19" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1af178321355d43bd7480e4d6fe3fb0739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FUNCTION void</type>
        <definition>KOKKOS_FUNCTION void take_by_value</definition>
        <argsstring>(T)</argsstring>
        <name>take_by_value</name>
        <param>
          <type>T</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="100" column="22" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1a0842e85b2d5d18dc2497ebf8d337e68f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, numeric_traits_infinity)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>numeric_traits_infinity</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="199" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="199" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1a0f13acdfcb3355bf02cf60b24b823269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, numeric_traits_epsilon)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>numeric_traits_epsilon</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="207" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="207" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1a45568662e8f602a01bf51455d30cf167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, numeric_traits_round_error)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>numeric_traits_round_error</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="215" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="215" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1ab20d69c0c0e3933cdaccd2951972ffce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, numeric_traits_norm_min)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>numeric_traits_norm_min</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="221" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="221" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1a49896cc6403e429b1017b807089cc851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, numeric_traits_finite_min_max)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>numeric_traits_finite_min_max</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="227" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="227" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1ab73b7e433e2e529d19ab38bcf94906db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, numeric_traits_digits)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>numeric_traits_digits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="263" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="263" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1a54d476a93bdaeda2198be979c3fc92e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, numeric_traits_digits10)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>numeric_traits_digits10</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="281" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="281" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1a510902885b91d2cbd28f5ac112289704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, numeric_traits_max_digits10)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>numeric_traits_max_digits10</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="299" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="299" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1a53a2c002ac4f2ebad4f4a2c3faaef8a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, numeric_traits_radix)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>numeric_traits_radix</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="305" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="305" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1a2700619e2c2f41da2cc64968bfe81bd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, numeric_traits_min_max_exponent)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>numeric_traits_min_max_exponent</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="323" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="323" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1a777577df95b87eae31ff1d4ae17bbace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, numeric_traits_min_max_exponent10)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>numeric_traits_min_max_exponent10</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="332" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="332" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1ae2d3cdbcdf1ca56c0fcc391d8108e799" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; has_infinity&lt; T &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T legacy_std_numeric_limits_infinity</definition>
        <argsstring>()</argsstring>
        <name>legacy_std_numeric_limits_infinity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="378" column="13" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="378" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="_test_numeric_traits_8hpp_1a0bfedac9a88fbdcdd73e4e103765b0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, numeric_traits_sfinae_friendly)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>numeric_traits_sfinae_friendly</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" line="387" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp" bodystart="387" bodyend="389"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos<sp/>v.<sp/>3.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>(2020)<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC<sp/>(NTESS).</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>the<sp/>U.S.<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//<sp/>met:</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Corporation<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>NTESS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>NTESS<sp/>OR<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>Christian<sp/>R.<sp/>Trott<sp/>(crtrott@sandia.gov)</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//<sp/>************************************************************************</highlight></codeline>
<codeline lineno="42"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="43"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Kokkos_Core.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Kokkos_NumericTraits.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Kokkos_ExecPolicy.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="structextrema" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrema" kindref="compound">extrema</ref><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_EXTREMA(T,<sp/>m,<sp/>M)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/>KOKKOS_FUNCTION<sp/>static<sp/>T<sp/>min(T)<sp/>{<sp/>return<sp/>m;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/>KOKKOS_FUNCTION<sp/>static<sp/>T<sp/>max(T)<sp/>{<sp/>return<sp/>M;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>CHAR_MIN,<sp/>CHAR_MAX);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>SCHAR_MIN,<sp/>SCHAR_MAX);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>0,<sp/>UCHAR_MAX);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>SHRT_MIN,<sp/>SHRT_MAX);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>0,<sp/>USHRT_MAX);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>INT_MIN,<sp/>INT_MAX);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/>0U,<sp/>UINT_MAX);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>LONG_MIN,<sp/>LONG_MAX);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>0UL,<sp/>ULONG_MAX);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>LLONG_MIN,<sp/>LLONG_MAX);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>0ULL,<sp/>ULLONG_MAX);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>-FLT_MAX,<sp/>FLT_MAX);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>-DBL_MAX,<sp/>DBL_MAX);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>DEFINE_EXTREMA(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>-LDBL_MAX,<sp/>LDBL_MAX);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DEFINE_EXTREMA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="struct_infinity" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_infinity" kindref="compound">Infinity</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="79" refid="struct_epsilon" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_epsilon" kindref="compound">Epsilon</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1epsilon" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1epsilon" kindref="compound">Kokkos::Experimental::epsilon&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="80" refid="struct_finite_min" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_finite_min" kindref="compound">FiniteMin</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="81" refid="struct_finite_max" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_finite_max" kindref="compound">FiniteMax</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="82" refid="struct_round_error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_round_error" kindref="compound">RoundError</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1round__error" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1round__error" kindref="compound">Kokkos::Experimental::round_error&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="83" refid="struct_norm_min" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_norm_min" kindref="compound">NormMin</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1norm__min" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1norm__min" kindref="compound">Kokkos::Experimental::norm_min&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="84" refid="struct_digits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_digits" kindref="compound">Digits</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1digits" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1digits" kindref="compound">Kokkos::Experimental::digits&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="85" refid="struct_digits10" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_digits10" kindref="compound">Digits10</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1digits10" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1digits10" kindref="compound">Kokkos::Experimental::digits10&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="86" refid="struct_max_digits10" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_max_digits10" kindref="compound">MaxDigits10</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1max__digits10" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1max__digits10" kindref="compound">Kokkos::Experimental::max_digits10&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="87" refid="struct_radix" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_radix" kindref="compound">Radix</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1radix" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1radix" kindref="compound">Kokkos::Experimental::radix&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="88" refid="struct_min_exponent" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_min_exponent" kindref="compound">MinExponent</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1min__exponent" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1min__exponent" kindref="compound">Kokkos::Experimental::min_exponent&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="89" refid="struct_max_exponent" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_max_exponent" kindref="compound">MaxExponent</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1max__exponent" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1max__exponent" kindref="compound">Kokkos::Experimental::max_exponent&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="90" refid="struct_min_exponent10" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_min_exponent10" kindref="compound">MinExponent10</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1min__exponent10" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1min__exponent10" kindref="compound">Kokkos::Experimental::min_exponent10&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="91" refid="struct_max_exponent10" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_max_exponent10" kindref="compound">MaxExponent10</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1max__exponent10" kindref="compound">trait</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_experimental_1_1max__exponent10" kindref="compound">Kokkos::Experimental::max_exponent10&lt;T&gt;</ref>;<sp/>};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">KOKKOS_FUNCTION<sp/>T*<sp/>take_address_of(T&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;arg;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>take_by_value(T)<sp/>{}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Space,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tag&gt;</highlight></codeline>
<codeline lineno="103" refid="struct_test_numeric_traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits</ref><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">trait<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tag::template<sp/>trait&lt;U&gt;;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View&lt;T, Space&gt;</ref><sp/>compare;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits</ref>()<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>compare<sp/>=<sp/><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View&lt;T, Space&gt;</ref>(</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>run();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<ref refid="class_kokkos_1_1_range_policy" kindref="compound">Kokkos::RangePolicy&lt;Space, Tag&gt;</ref>(0,<sp/>1),<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errors);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(errors,<sp/>0);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)take_address_of(trait&lt;T&gt;::value);<sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>on<sp/>host</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_infinity" kindref="compound">Infinity</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>e)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inf<sp/><sp/>=<sp/>infinity&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>zero<sp/>=<sp/>T(0);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>+=<sp/>(int)!(inf<sp/>+<sp/>inf<sp/>==<sp/>inf);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>+=<sp/>(int)!(inf<sp/>!=<sp/>zero);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>use_on_device();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_epsilon" kindref="compound">Epsilon</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>e)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1epsilon" kindref="compound">Kokkos::Experimental::epsilon</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eps<sp/>=<sp/>epsilon&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>one<sp/>=<sp/>T(1);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>higher<sp/>precision<sp/>intermediate<sp/>representation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>compare()<sp/>=<sp/>one<sp/>+<sp/>eps;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>+=<sp/>(int)!(compare()<sp/>!=<sp/>one);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>compare()<sp/>=<sp/>one<sp/>+<sp/>eps<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>+=<sp/>(int)!(compare()<sp/>==<sp/>one);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>use_on_device();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_finite_min" kindref="compound">FiniteMin</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>e)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>min<sp/>=<sp/>finite_min&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>finite_max&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>+=<sp/>(int)!(min<sp/>==<sp/>extrema::min(T{}));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>+=<sp/>(int)!(max<sp/>==<sp/>extrema::max(T{}));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>use_on_device();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_finite_max" kindref="compound">FiniteMax</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>use_on_device();<sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_round_error" kindref="compound">RoundError</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>use_on_device();<sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_norm_min" kindref="compound">NormMin</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>use_on_device();<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_digits" kindref="compound">Digits</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>use_on_device();<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_digits10" kindref="compound">Digits10</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>use_on_device();<sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_max_digits10" kindref="compound">MaxDigits10</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>use_on_device();<sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_radix" kindref="compound">Radix</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>use_on_device();<sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_min_exponent" kindref="compound">MinExponent</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>use_on_device();<sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_max_exponent" kindref="compound">MaxExponent</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>use_on_device();<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_min_exponent10" kindref="compound">MinExponent10</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>use_on_device();<sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="struct_max_exponent10" kindref="compound">MaxExponent10</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>use_on_device();<sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>use_on_device()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(KOKKOS_COMPILER_NVCC)<sp/>||<sp/>defined(KOKKOS_ENABLE_OPENMPTARGET)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>take_by_value(trait&lt;T&gt;::value);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)take_address_of(trait&lt;T&gt;::value);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal">};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(KOKKOS_COMPILER_NVCC)<sp/>||<sp/>defined(KOKKOS_ENABLE_SYCL)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(KOKKOS_ENABLE_OPENMPTARGET)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tag&gt;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits</ref>&lt;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">#if<sp/>defined(KOKKOS_ENABLE_CUDA)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>Kokkos::Cuda,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(KOKKOS_ENABLE_SYCL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>Kokkos::Experimental::SYCL,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>Kokkos::Experimental::OpenMPTarget,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>double,<sp/>Tag&gt;<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">trait<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tag::template<sp/>trait&lt;T&gt;;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits</ref>()<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)take_address_of(trait&lt;long<sp/>double&gt;::value);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing<sp/>on<sp/>the<sp/>device.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>According<sp/>to<sp/>the<sp/>doc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#constexpr-variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>traits<sp/>member<sp/>constant<sp/>value<sp/>cannot<sp/>be<sp/>directly<sp/>used<sp/>in<sp/>device<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal">};</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>numeric_traits_infinity)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, Infinity&gt;</ref>();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, Infinity&gt;</ref>();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>KOKKOS_COMPILER_IBM<sp/><sp/></highlight><highlight class="comment">//<sp/>fails<sp/>with<sp/>XL<sp/>16.1.1<sp/>see<sp/>issue<sp/>#4100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, Infinity&gt;</ref>();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>numeric_traits_epsilon)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, Epsilon&gt;</ref>();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, Epsilon&gt;</ref>();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>KOKKOS_COMPILER_IBM<sp/><sp/></highlight><highlight class="comment">//<sp/>fails<sp/>with<sp/>XL<sp/>16.1.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, Epsilon&gt;</ref>();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>numeric_traits_round_error)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, RoundError&gt;</ref>();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, RoundError&gt;</ref>();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, RoundError&gt;</ref>();</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>numeric_traits_norm_min)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, NormMin&gt;</ref>();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, NormMin&gt;</ref>();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, NormMin&gt;</ref>();</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>numeric_traits_finite_min_max)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, char, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, char, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, signed char, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, signed char, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned char, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned char, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, short, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, short, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned short, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned short, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, int, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, int, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned int, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned int, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned long, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned long, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long long, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long long, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned long long, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned long long, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, FiniteMin&gt;</ref>();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, FiniteMax&gt;</ref>();</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>numeric_traits_digits)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, bool, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, char, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, signed char, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned char, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, short, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned short, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, int, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned int, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long int, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned long int, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long long int, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned long long int, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, Digits&gt;</ref>();</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>numeric_traits_digits10)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, bool, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, char, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, signed char, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned char, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, short, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned short, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, int, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned int, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long int, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned long int, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long long int, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned long long int, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, Digits10&gt;</ref>();</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>numeric_traits_max_digits10)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, MaxDigits10&gt;</ref>();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, MaxDigits10&gt;</ref>();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, MaxDigits10&gt;</ref>();</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>numeric_traits_radix)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, bool, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, char, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, signed char, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned char, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, short, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned short, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, int, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned int, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long int, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned long int, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long long int, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, unsigned long long int, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, Radix&gt;</ref>();</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>numeric_traits_min_max_exponent)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, MinExponent&gt;</ref>();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, MaxExponent&gt;</ref>();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, MinExponent&gt;</ref>();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, MaxExponent&gt;</ref>();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, MinExponent&gt;</ref>();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, MaxExponent&gt;</ref>();</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>numeric_traits_min_max_exponent10)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, MinExponent10&gt;</ref>();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, float, MaxExponent10&gt;</ref>();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, MinExponent10&gt;</ref>();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, double, MaxExponent10&gt;</ref>();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, MinExponent10&gt;</ref>();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><ref refid="struct_test_numeric_traits" kindref="compound">TestNumericTraits&lt;TEST_EXECSPACE, long double, MaxExponent10&gt;</ref>();</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">NumericTraitsSFINAE<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="struct_numeric_traits_s_f_i_n_a_e_1_1_has_no_specialization" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_numeric_traits_s_f_i_n_a_e_1_1_has_no_specialization" kindref="compound">HasNoSpecialization</ref><sp/>{};</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_TRAIT_IS_SFINAE_FRIENDLY(TRAIT)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor"><sp/><sp/>using<sp/>TRAIT##_value_t<sp/>=<sp/>decltype(Kokkos::Experimental::TRAIT&lt;T&gt;::value);<sp/>\</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"><sp/><sp/>using<sp/>has_##TRAIT<sp/>=<sp/>Kokkos::is_detected&lt;TRAIT##_value_t,<sp/>T&gt;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"><sp/><sp/>static_assert(!has_##TRAIT&lt;HasNoSpecialization&gt;::value,<sp/>&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(infinity)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(finite_min)</highlight></codeline>
<codeline lineno="354"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(finite_max)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(epsilon)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(round_error)</highlight></codeline>
<codeline lineno="357"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(norm_min)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(digits)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(digits10)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(max_digits10)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(radix)</highlight></codeline>
<codeline lineno="363"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(min_exponent)</highlight></codeline>
<codeline lineno="364"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(min_exponent10)</highlight></codeline>
<codeline lineno="365"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(max_exponent)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">CHECK_TRAIT_IS_SFINAE_FRIENDLY(max_exponent10)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>NumericTraitsSFINAE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example<sp/>detecting<sp/>presence<sp/>or<sp/>absence<sp/>of<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">infinity_value_t<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity&lt;T&gt;::value</ref>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">has_infinity<sp/>=<sp/>Kokkos::is_detected&lt;infinity_value_t,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">template<sp/>&lt;class<sp/>T,<sp/>std::enable_if_t&lt;has_infinity&lt;T&gt;::value&gt;*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>T<sp/>legacy_std_numeric_limits_infinity()<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">template<sp/>&lt;class<sp/>T,<sp/>std::enable_if_t&lt;!has_infinity&lt;T&gt;::value&gt;*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>T<sp/>legacy_std_numeric_limits_infinity()<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T();</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>numeric_traits_sfinae_friendly)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>ASSERT_EQ(legacy_std_numeric_limits_infinity&lt;int&gt;(),<sp/>0);</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compare<sp/>to<sp/>std::numeric_limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>V2&gt;</highlight></codeline>
<codeline lineno="393" refid="struct_assert_int_equality" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_assert_int_equality" kindref="compound">AssertIntEquality</ref><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">};</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="397" refid="struct_assert_int_equality_3_01_v_00_01_v_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_assert_int_equality" kindref="compound">AssertIntEquality</ref>&lt;V,<sp/>V&gt;<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">};</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(T,<sp/>TRAIT)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"><sp/><sp/>static_assert(AssertIntEquality&lt;Kokkos::Experimental::TRAIT&lt;T&gt;::value,<sp/>\</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;T&gt;::TRAIT&gt;::value,<sp/>\</highlight></codeline>
<codeline lineno="403"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_FUNCTION(T,<sp/>TRAIT)<sp/>\</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"><sp/><sp/>static_assert(Kokkos::Experimental::TRAIT&lt;T&gt;::value<sp/>==<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;T&gt;::TRAIT(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_FUNCTION(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>infinity);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>infinity);</highlight></codeline>
<codeline lineno="411"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_FUNCTION(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>infinity);</highlight></codeline>
<codeline lineno="412"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_FUNCTION(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>epsilon);</highlight></codeline>
<codeline lineno="413"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>epsilon);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>KOKKOS_COMPILER_IBM<sp/><sp/></highlight><highlight class="comment">//<sp/>fails<sp/>with<sp/>XL<sp/>16.1.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_FUNCTION(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>epsilon);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_FUNCTION(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>round_error);</highlight></codeline>
<codeline lineno="418"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>round_error);</highlight></codeline>
<codeline lineno="419"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_FUNCTION(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>round_error);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1norm__min" kindref="compound">Kokkos::Experimental::norm_min&lt;float      &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/>float&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1norm__min" kindref="compound">Kokkos::Experimental::norm_min&lt;double     &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/>double&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1norm__min" kindref="compound">Kokkos::Experimental::norm_min&lt;long double&gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;long<sp/>double&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>integer<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;char                  &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;signed char           &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signed<sp/>char&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;unsigned char         &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>char&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;short                 &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;unsigned short        &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;int                   &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;unsigned int          &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;long int              &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>int&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;unsigned long int     &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long<sp/>int&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;long long int         &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long<sp/>int&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;unsigned long long int&gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;unsigned<sp/>long<sp/>long<sp/>int&gt;::min(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;char                  &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;signed char           &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signed<sp/>char&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;unsigned char         &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>char&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;short                 &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;unsigned short        &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;int                   &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;unsigned int          &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;long int              &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>int&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;unsigned long int     &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long<sp/>int&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;long long int         &gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long<sp/>int&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;unsigned long long int&gt;::value</ref><sp/>==<sp/>std::numeric_limits&lt;unsigned<sp/>long<sp/>long<sp/>int&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>floating<sp/>point<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;float      &gt;::value</ref><sp/>==<sp/>-std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/>float&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;double     &gt;::value</ref><sp/>==<sp/>-std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/>double&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__min" kindref="compound">Kokkos::Experimental::finite_min&lt;long double&gt;::value</ref><sp/>==<sp/>-std::numeric_limits&lt;long<sp/>double&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;float      &gt;::value</ref><sp/>==<sp/><sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/><sp/>float&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;double     &gt;::value</ref><sp/>==<sp/><sp/>std::numeric_limits&lt;<sp/><sp/><sp/><sp/><sp/>double&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_kokkos_1_1_experimental_1_1finite__max" kindref="compound">Kokkos::Experimental::finite_max&lt;long double&gt;::value</ref><sp/>==<sp/><sp/>std::numeric_limits&lt;long<sp/>double&gt;::max(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="457"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="458"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="459"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="461"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="462"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="463"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="465"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="467"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="468"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="469"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="470"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>digits);</highlight></codeline>
<codeline lineno="471"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="472"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="473"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="474"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="476"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="477"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="478"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="479"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="480"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="481"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="482"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="483"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="484"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="485"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>digits10);</highlight></codeline>
<codeline lineno="486"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>max_digits10);</highlight></codeline>
<codeline lineno="487"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>max_digits10);</highlight></codeline>
<codeline lineno="488"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>max_digits10);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="490"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="491"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="492"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="493"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="494"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="496"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="497"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="498"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="499"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="500"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="501"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="502"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="503"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>radix);</highlight></codeline>
<codeline lineno="504"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>min_exponent);</highlight></codeline>
<codeline lineno="505"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>max_exponent);</highlight></codeline>
<codeline lineno="506"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>min_exponent);</highlight></codeline>
<codeline lineno="507"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>max_exponent);</highlight></codeline>
<codeline lineno="508"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>min_exponent);</highlight></codeline>
<codeline lineno="509"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>max_exponent);</highlight></codeline>
<codeline lineno="510"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>min_exponent10);</highlight></codeline>
<codeline lineno="511"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>max_exponent10);</highlight></codeline>
<codeline lineno="512"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>min_exponent10);</highlight></codeline>
<codeline lineno="513"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>max_exponent10);</highlight></codeline>
<codeline lineno="514"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>min_exponent10);</highlight></codeline>
<codeline lineno="515"><highlight class="normal">CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>max_exponent10);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CHECK_SAME_AS_NUMERIC_LIMITS_MEMBER_CONSTANT</highlight></codeline>
    </programlisting>
    <location file="src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp"/>
  </compounddef>
</doxygen>
