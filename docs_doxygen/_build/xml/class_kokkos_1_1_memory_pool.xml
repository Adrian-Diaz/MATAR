<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="class_kokkos_1_1_memory_pool" kind="class" language="C++" prot="public">
    <compoundname>Kokkos::MemoryPool</compoundname>
    <innerclass refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics" prot="public">Kokkos::MemoryPool::usage_statistics</innerclass>
    <templateparamlist>
      <param>
        <type>typename DeviceType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="class_kokkos_1_1_memory_pool_1ac07f085c696a31cafcfa99b5eac2d201" prot="private" static="no" strong="no">
        <type>uint32_t</type>
        <name>@213</name>
        <qualifiedname>Kokkos::MemoryPool::@213</qualifiedname>
        <enumvalue id="class_kokkos_1_1_memory_pool_1ac07f085c696a31cafcfa99b5eac2d201a7f1d2edb43de6ca31a1cf14f3993a40c" prot="private">
          <name>bits_per_int_lg2</name>
          <initializer>= CB::bits_per_int_lg2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="92" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="enum" id="class_kokkos_1_1_memory_pool_1a311a95d1c7d635267be2ba8c6beecaff" prot="private" static="no" strong="no">
        <type>uint32_t</type>
        <name>@214</name>
        <qualifiedname>Kokkos::MemoryPool::@214</qualifiedname>
        <enumvalue id="class_kokkos_1_1_memory_pool_1a311a95d1c7d635267be2ba8c6beecaffad645293366a9366afa80de863898988c" prot="private">
          <name>state_shift</name>
          <initializer>= CB::state_shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="93" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="enum" id="class_kokkos_1_1_memory_pool_1a7142d58868f67c1247bbced47d326491" prot="private" static="no" strong="no">
        <type>uint32_t</type>
        <name>@215</name>
        <qualifiedname>Kokkos::MemoryPool::@215</qualifiedname>
        <enumvalue id="class_kokkos_1_1_memory_pool_1a7142d58868f67c1247bbced47d326491a823bb6ad97b0434ce0087e1f3775e858" prot="private">
          <name>state_used_mask</name>
          <initializer>= CB::state_used_mask</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="94" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="enum" id="class_kokkos_1_1_memory_pool_1aaf17069d705d55496019847bcf71babd" prot="private" static="no" strong="no">
        <type>uint32_t</type>
        <name>@216</name>
        <qualifiedname>Kokkos::MemoryPool::@216</qualifiedname>
        <enumvalue id="class_kokkos_1_1_memory_pool_1aaf17069d705d55496019847bcf71babdad98a28ca782bda9e9dcf9dad894515ae" prot="private">
          <name>state_header_mask</name>
          <initializer>= CB::state_header_mask</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="95" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="enum" id="class_kokkos_1_1_memory_pool_1a0173dec7a6c28124c75a61f2d799a034" prot="private" static="no" strong="no">
        <type>uint32_t</type>
        <name>@217</name>
        <qualifiedname>Kokkos::MemoryPool::@217</qualifiedname>
        <enumvalue id="class_kokkos_1_1_memory_pool_1a0173dec7a6c28124c75a61f2d799a034a52aec27652070279e3d909b58518c040" prot="private">
          <name>max_bit_count_lg2</name>
          <initializer>= CB::max_bit_count_lg2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="96" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="enum" id="class_kokkos_1_1_memory_pool_1a519d137ddbe2d5e1fca605856274285c" prot="private" static="no" strong="no">
        <type>uint32_t</type>
        <name>@218</name>
        <qualifiedname>Kokkos::MemoryPool::@218</qualifiedname>
        <enumvalue id="class_kokkos_1_1_memory_pool_1a519d137ddbe2d5e1fca605856274285ca894bedb2fa4ffa087a6a4161f41c4573" prot="private">
          <name>max_bit_count</name>
          <initializer>= CB::max_bit_count</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="97" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="enum" id="class_kokkos_1_1_memory_pool_1a9aa7f8709b116df80ba37275872624fb" prot="private" static="no" strong="no">
        <type>uint32_t</type>
        <name>@219</name>
        <qualifiedname>Kokkos::MemoryPool::@219</qualifiedname>
        <enumvalue id="class_kokkos_1_1_memory_pool_1a9aa7f8709b116df80ba37275872624fba0bcf0ff6207c62a07e83184fcdacf182" prot="private">
          <name>HINT_PER_BLOCK_SIZE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="99" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="enum" id="class_kokkos_1_1_memory_pool_1a78b9303103ddf5573dc7d5bdf3708ecf" prot="private" static="no" strong="no">
        <type></type>
        <name>@220</name>
        <qualifiedname>Kokkos::MemoryPool::@220</qualifiedname>
        <enumvalue id="class_kokkos_1_1_memory_pool_1a78b9303103ddf5573dc7d5bdf3708ecfae7798f63d36b5e87f93e1d00a5be0c95" prot="private">
          <name>accessible</name>
          <initializer>= Kokkos::Impl::MemorySpaceAccess&lt;Kokkos::HostSpace,
                                                 base_memory_space&gt;::accessible</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="123" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_memory_pool_1a6c239305544ea84e4bf3a85269c94a5a" prot="private" static="no">
        <type><ref refid="struct_kokkos_1_1_impl_1_1concurrent__bitset" kindref="compound">Kokkos::Impl::concurrent_bitset</ref></type>
        <definition>using Kokkos::MemoryPool&lt; DeviceType &gt;::CB =  Kokkos::Impl::concurrent_bitset</definition>
        <argsstring></argsstring>
        <name>CB</name>
        <qualifiedname>Kokkos::MemoryPool::CB</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="90" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_memory_pool_1a1c19d2d7a42ab5382ee27a179470a679" prot="private" static="no">
        <type>typename DeviceType::memory_space</type>
        <definition>using Kokkos::MemoryPool&lt; DeviceType &gt;::base_memory_space =  typename DeviceType::memory_space</definition>
        <argsstring></argsstring>
        <name>base_memory_space</name>
        <qualifiedname>Kokkos::MemoryPool::base_memory_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="121" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_memory_pool_1a77ed1434a009370478548b56e8d3ed96" prot="private" static="no">
        <type><ref refid="union_kokkos_1_1_impl_1_1_shared_allocation_tracker" kindref="compound">Kokkos::Impl::SharedAllocationTracker</ref></type>
        <definition>using Kokkos::MemoryPool&lt; DeviceType &gt;::Tracker =  Kokkos::Impl::SharedAllocationTracker</definition>
        <argsstring></argsstring>
        <name>Tracker</name>
        <qualifiedname>Kokkos::MemoryPool::Tracker</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="128" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_memory_pool_1a2ad05f58802003618fbd710abafb58a1" prot="private" static="no">
        <type><ref refid="class_kokkos_1_1_impl_1_1_shared_allocation_record" kindref="compound">Kokkos::Impl::SharedAllocationRecord</ref>&lt; base_memory_space &gt;</type>
        <definition>using Kokkos::MemoryPool&lt; DeviceType &gt;::Record =  Kokkos::Impl::SharedAllocationRecord&lt;base_memory_space&gt;</definition>
        <argsstring></argsstring>
        <name>Record</name>
        <qualifiedname>Kokkos::MemoryPool::Record</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="129" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_kokkos_1_1_memory_pool_1a65a7a82c46940fccb72f354f8ccda7b7" prot="public" static="no" strong="no">
        <type>uint32_t</type>
        <name>@221</name>
        <qualifiedname>Kokkos::MemoryPool::@221</qualifiedname>
        <enumvalue id="class_kokkos_1_1_memory_pool_1a65a7a82c46940fccb72f354f8ccda7b7a7ea511ed1c3c489cad93a0f7b5d122ac" prot="public">
          <name>max_superblock_size</name>
          <initializer>= 1LU &lt;&lt; 31</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The maximum size of a superblock and block. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="146" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="enum" id="class_kokkos_1_1_memory_pool_1adecb3fc3862021494fa528a77056e239" prot="public" static="no" strong="no">
        <type>uint32_t</type>
        <name>@222</name>
        <qualifiedname>Kokkos::MemoryPool::@222</qualifiedname>
        <enumvalue id="class_kokkos_1_1_memory_pool_1adecb3fc3862021494fa528a77056e239a47e7aef74d667adc13f2fb2a8490ecb0" prot="public">
          <name>max_block_per_superblock</name>
          <initializer>= max_bit_count</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="147" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_memory_pool_1a7f8f5463b647b00e6aa30badcf7aa623" prot="public" static="no">
        <type>typename DeviceType::memory_space</type>
        <definition>using Kokkos::MemoryPool&lt; DeviceType &gt;::memory_space =  typename DeviceType::memory_space</definition>
        <argsstring></argsstring>
        <name>memory_space</name>
        <qualifiedname>Kokkos::MemoryPool::memory_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="143" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_kokkos_1_1_memory_pool_1a80a6c4d2b21afbc0aa8b00c2ab7cd845" prot="private" static="no" mutable="no">
        <type><ref refid="union_kokkos_1_1_impl_1_1_shared_allocation_tracker" kindref="compound">Tracker</ref></type>
        <definition>Tracker Kokkos::MemoryPool&lt; DeviceType &gt;::m_tracker</definition>
        <argsstring></argsstring>
        <name>m_tracker</name>
        <qualifiedname>Kokkos::MemoryPool::m_tracker</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="131" column="11" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_kokkos_1_1_memory_pool_1a02bd31c2ccca893fba5c70df7b71b676" prot="private" static="no" mutable="no">
        <type>uint32_t *</type>
        <definition>uint32_t* Kokkos::MemoryPool&lt; DeviceType &gt;::m_sb_state_array</definition>
        <argsstring></argsstring>
        <name>m_sb_state_array</name>
        <qualifiedname>Kokkos::MemoryPool::m_sb_state_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="132" column="12" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_kokkos_1_1_memory_pool_1a97d8ef8df31ca051c43909c23d7d3c72" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t Kokkos::MemoryPool&lt; DeviceType &gt;::m_sb_state_size</definition>
        <argsstring></argsstring>
        <name>m_sb_state_size</name>
        <qualifiedname>Kokkos::MemoryPool::m_sb_state_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="133" column="12" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_kokkos_1_1_memory_pool_1a0d22b7d4f0d7e0a1ff2c8d04c67fcb54" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t Kokkos::MemoryPool&lt; DeviceType &gt;::m_sb_size_lg2</definition>
        <argsstring></argsstring>
        <name>m_sb_size_lg2</name>
        <qualifiedname>Kokkos::MemoryPool::m_sb_size_lg2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="134" column="12" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_kokkos_1_1_memory_pool_1ab312809c1347da26a28ac6133793d713" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t Kokkos::MemoryPool&lt; DeviceType &gt;::m_max_block_size_lg2</definition>
        <argsstring></argsstring>
        <name>m_max_block_size_lg2</name>
        <qualifiedname>Kokkos::MemoryPool::m_max_block_size_lg2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="135" column="12" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_kokkos_1_1_memory_pool_1ac158b20934279b9ce09e7f9144809ec5" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t Kokkos::MemoryPool&lt; DeviceType &gt;::m_min_block_size_lg2</definition>
        <argsstring></argsstring>
        <name>m_min_block_size_lg2</name>
        <qualifiedname>Kokkos::MemoryPool::m_min_block_size_lg2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="136" column="12" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_kokkos_1_1_memory_pool_1a40b387d28791f54ce9e6762f8d348a77" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t Kokkos::MemoryPool&lt; DeviceType &gt;::m_sb_count</definition>
        <argsstring></argsstring>
        <name>m_sb_count</name>
        <qualifiedname>Kokkos::MemoryPool::m_sb_count</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="137" column="11" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_kokkos_1_1_memory_pool_1ac81eceaa6ee1adcf1976ed73eca5b6d9" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t Kokkos::MemoryPool&lt; DeviceType &gt;::m_hint_offset</definition>
        <argsstring></argsstring>
        <name>m_hint_offset</name>
        <qualifiedname>Kokkos::MemoryPool::m_hint_offset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="138" column="11" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_kokkos_1_1_memory_pool_1a23a057001eb05f4cd58ba437a400f0cb" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t Kokkos::MemoryPool&lt; DeviceType &gt;::m_data_offset</definition>
        <argsstring></argsstring>
        <name>m_data_offset</name>
        <qualifiedname>Kokkos::MemoryPool::m_data_offset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="139" column="11" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_kokkos_1_1_memory_pool_1a84f1e01924c37493548e55fea20712bb" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t Kokkos::MemoryPool&lt; DeviceType &gt;::m_unused_padding</definition>
        <argsstring></argsstring>
        <name>m_unused_padding</name>
        <qualifiedname>Kokkos::MemoryPool::m_unused_padding</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="140" column="11" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1ae32218b222767500cf12a4ac9882afc6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::MemoryPool&lt; DeviceType &gt;::operator==</definition>
        <argsstring>(MemoryPool const &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::MemoryPool::operator==</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="152" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1a994e2c459f7607700f2edd7605367505" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION size_t</type>
        <definition>KOKKOS_INLINE_FUNCTION size_t Kokkos::MemoryPool&lt; DeviceType &gt;::capacity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>capacity</name>
        <qualifiedname>Kokkos::MemoryPool::capacity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="157" column="10" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1ab62580cc36be6a23f170dad3175b8280" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION size_t</type>
        <definition>KOKKOS_INLINE_FUNCTION size_t Kokkos::MemoryPool&lt; DeviceType &gt;::min_block_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>min_block_size</name>
        <qualifiedname>Kokkos::MemoryPool::min_block_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="162" column="10" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1a4d8a28a12a18862d7226b7687fd4195f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION size_t</type>
        <definition>KOKKOS_INLINE_FUNCTION size_t Kokkos::MemoryPool&lt; DeviceType &gt;::max_block_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max_block_size</name>
        <qualifiedname>Kokkos::MemoryPool::max_block_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="167" column="10" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1a259f0133628516b5c53cbfe234ac2ede" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::MemoryPool&lt; DeviceType &gt;::get_usage_statistics</definition>
        <argsstring>(usage_statistics &amp;stats) const</argsstring>
        <name>get_usage_statistics</name>
        <qualifiedname>Kokkos::MemoryPool::get_usage_statistics</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics" kindref="compound">usage_statistics</ref> &amp;</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="184" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="184" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1ae4970cf702f7b30b3c248322372de0d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::MemoryPool&lt; DeviceType &gt;::print_state</definition>
        <argsstring>(std::ostream &amp;s) const</argsstring>
        <name>print_state</name>
        <qualifiedname>Kokkos::MemoryPool::print_state</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="232" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="232" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1a86e2b352af60096e83a84247d25466b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION Kokkos::MemoryPool&lt; DeviceType &gt;::MemoryPool</definition>
        <argsstring>(MemoryPool &amp;&amp;)=default</argsstring>
        <name>MemoryPool</name>
        <qualifiedname>Kokkos::MemoryPool::MemoryPool</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="256" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1aaeae9ae937fcf4fd3a8ea623500212ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION Kokkos::MemoryPool&lt; DeviceType &gt;::MemoryPool</definition>
        <argsstring>(const MemoryPool &amp;)=default</argsstring>
        <name>MemoryPool</name>
        <qualifiedname>Kokkos::MemoryPool::MemoryPool</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="257" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1ad88311ef375b5e4fe6b3b838dcc07fb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION <ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref> &amp;</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION MemoryPool &amp; Kokkos::MemoryPool&lt; DeviceType &gt;::operator=</definition>
        <argsstring>(MemoryPool &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>Kokkos::MemoryPool::operator=</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="258" column="40"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1a21794e2cae4216b66399403fc0266722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION <ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref> &amp;</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION MemoryPool &amp; Kokkos::MemoryPool&lt; DeviceType &gt;::operator=</definition>
        <argsstring>(const MemoryPool &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>Kokkos::MemoryPool::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="259" column="40"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1a4e18319d70818775e89dc7c1f66f4133" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::MemoryPool&lt; DeviceType &gt;::MemoryPool</definition>
        <argsstring>()</argsstring>
        <name>MemoryPool</name>
        <qualifiedname>Kokkos::MemoryPool::MemoryPool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="261" column="26" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="261" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1a2d441a6c471aee54071b200cc2bce4a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Kokkos::MemoryPool&lt; DeviceType &gt;::MemoryPool</definition>
        <argsstring>(const base_memory_space &amp;memspace, const size_t min_total_alloc_size, size_t min_block_alloc_size=0, size_t max_block_alloc_size=0, size_t min_superblock_size=0)</argsstring>
        <name>MemoryPool</name>
        <qualifiedname>Kokkos::MemoryPool::MemoryPool</qualifiedname>
        <param>
          <type>const base_memory_space &amp;</type>
          <declname>memspace</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>min_total_alloc_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_block_alloc_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_block_alloc_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_superblock_size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Allocate a memory pool from &apos;memspace&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para>The memory pool will have at least &apos;min_total_alloc_size&apos; bytes of memory to allocate divided among superblocks of at least &apos;min_superblock_size&apos; bytes. A single allocation must fit within a single superblock, so &apos;min_superblock_size&apos; must be at least as large as the maximum single allocation. Both &apos;min_total_alloc_size&apos; and &apos;min_superblock_size&apos; are rounded up to the smallest power-of-two value that contains the corresponding sizes. Individual allocations will always consume a block of memory that is also a power-of-two. These roundings are made to enable significant runtime performance improvements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="287" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="287" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1a72916fdf925f0f830e6e6b6da4602365" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION uint32_t</type>
        <definition>KOKKOS_INLINE_FUNCTION uint32_t Kokkos::MemoryPool&lt; DeviceType &gt;::allocate_block_size</definition>
        <argsstring>(uint64_t alloc_size) const noexcept</argsstring>
        <name>allocate_block_size</name>
        <qualifiedname>Kokkos::MemoryPool::allocate_block_size</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>alloc_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="475" column="12" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="475" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1af2e8d0ed9ba38afdf714acb9f87652ab" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION void *</type>
        <definition>KOKKOS_FUNCTION void * Kokkos::MemoryPool&lt; DeviceType &gt;::allocate</definition>
        <argsstring>(size_t alloc_size, int32_t attempt_limit=1) const noexcept</argsstring>
        <name>allocate</name>
        <qualifiedname>Kokkos::MemoryPool::allocate</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>alloc_size</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>attempt_limit</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Allocate a block of memory that is at least &apos;alloc_size&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para>The block of memory is aligned to the minimum block size, currently is 64 bytes, will never be less than 32 bytes.</para>
<para>If concurrent allocations and deallocations are taking place then a single allocation attempt may fail due to lack of available space. The allocation attempt will try up to &apos;attempt_limit&apos; times. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="492" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="492" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1a7b23620698fdea955ccc296d23061937" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::MemoryPool&lt; DeviceType &gt;::deallocate</definition>
        <argsstring>(void *p, size_t) const noexcept</argsstring>
        <name>deallocate</name>
        <qualifiedname>Kokkos::MemoryPool::deallocate</qualifiedname>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
<para>Return an allocated block of memory to the pool. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires: p is return value from allocate( alloc_size );</para>
<para>For now the alloc_size is ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="725" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="725" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1af0ede52d789db03de9d8f09afb7a452b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION int</type>
        <definition>KOKKOS_INLINE_FUNCTION int Kokkos::MemoryPool&lt; DeviceType &gt;::number_of_superblocks</definition>
        <argsstring>() const noexcept</argsstring>
        <name>number_of_superblocks</name>
        <qualifiedname>Kokkos::MemoryPool::number_of_superblocks</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="774" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="774" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1a6c4f94c669a0175c4b2c25c8e1d8af74" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::MemoryPool&lt; DeviceType &gt;::superblock_state</definition>
        <argsstring>(int sb_id, int &amp;block_size, int &amp;block_count_capacity, int &amp;block_count_used) const noexcept</argsstring>
        <name>superblock_state</name>
        <qualifiedname>Kokkos::MemoryPool::superblock_state</qualifiedname>
        <param>
          <type>int</type>
          <declname>sb_id</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>block_size</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>block_count_capacity</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>block_count_used</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="777" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="777" bodyend="798"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_kokkos_1_1_memory_pool_1a53cc19137ee24a61db2810952dcda147" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>KOKKOS_FORCEINLINE_FUNCTION uint32_t</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION uint32_t Kokkos::MemoryPool&lt; DeviceType &gt;::get_block_size_lg2</definition>
        <argsstring>(uint32_t n) const noexcept</argsstring>
        <name>get_block_size_lg2</name>
        <qualifiedname>Kokkos::MemoryPool::get_block_size_lg2</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="466" column="12" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="466" bodyend="470"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" line="88" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp" bodystart="88" bodyend="799"/>
    <listofallmembers>
      <member refid="class_kokkos_1_1_memory_pool_1a78b9303103ddf5573dc7d5bdf3708ecfae7798f63d36b5e87f93e1d00a5be0c95" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>accessible</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1af2e8d0ed9ba38afdf714acb9f87652ab" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>allocate</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a72916fdf925f0f830e6e6b6da4602365" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>allocate_block_size</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a1c19d2d7a42ab5382ee27a179470a679" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>base_memory_space</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1ac07f085c696a31cafcfa99b5eac2d201a7f1d2edb43de6ca31a1cf14f3993a40c" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>bits_per_int_lg2</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a994e2c459f7607700f2edd7605367505" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>capacity</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a6c239305544ea84e4bf3a85269c94a5a" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>CB</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a7b23620698fdea955ccc296d23061937" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>deallocate</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a53cc19137ee24a61db2810952dcda147" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>get_block_size_lg2</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a259f0133628516b5c53cbfe234ac2ede" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>get_usage_statistics</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a9aa7f8709b116df80ba37275872624fba0bcf0ff6207c62a07e83184fcdacf182" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>HINT_PER_BLOCK_SIZE</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a23a057001eb05f4cd58ba437a400f0cb" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>m_data_offset</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1ac81eceaa6ee1adcf1976ed73eca5b6d9" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>m_hint_offset</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1ab312809c1347da26a28ac6133793d713" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>m_max_block_size_lg2</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1ac158b20934279b9ce09e7f9144809ec5" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>m_min_block_size_lg2</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a40b387d28791f54ce9e6762f8d348a77" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>m_sb_count</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a0d22b7d4f0d7e0a1ff2c8d04c67fcb54" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>m_sb_size_lg2</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a02bd31c2ccca893fba5c70df7b71b676" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>m_sb_state_array</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a97d8ef8df31ca051c43909c23d7d3c72" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>m_sb_state_size</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a80a6c4d2b21afbc0aa8b00c2ab7cd845" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>m_tracker</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a84f1e01924c37493548e55fea20712bb" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>m_unused_padding</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a519d137ddbe2d5e1fca605856274285ca894bedb2fa4ffa087a6a4161f41c4573" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>max_bit_count</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a0173dec7a6c28124c75a61f2d799a034a52aec27652070279e3d909b58518c040" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>max_bit_count_lg2</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1adecb3fc3862021494fa528a77056e239a47e7aef74d667adc13f2fb2a8490ecb0" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>max_block_per_superblock</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a4d8a28a12a18862d7226b7687fd4195f" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>max_block_size</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a65a7a82c46940fccb72f354f8ccda7b7a7ea511ed1c3c489cad93a0f7b5d122ac" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>max_superblock_size</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a7f8f5463b647b00e6aa30badcf7aa623" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>memory_space</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a86e2b352af60096e83a84247d25466b6" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>MemoryPool</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1aaeae9ae937fcf4fd3a8ea623500212ab" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>MemoryPool</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a4e18319d70818775e89dc7c1f66f4133" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>MemoryPool</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a2d441a6c471aee54071b200cc2bce4a2" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>MemoryPool</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1ab62580cc36be6a23f170dad3175b8280" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>min_block_size</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1af0ede52d789db03de9d8f09afb7a452b" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>number_of_superblocks</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1ad88311ef375b5e4fe6b3b838dcc07fb6" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>operator=</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a21794e2cae4216b66399403fc0266722" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>operator=</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1ae32218b222767500cf12a4ac9882afc6" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>operator==</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1ae4970cf702f7b30b3c248322372de0d3" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>print_state</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a2ad05f58802003618fbd710abafb58a1" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>Record</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1aaf17069d705d55496019847bcf71babdad98a28ca782bda9e9dcf9dad894515ae" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>state_header_mask</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a311a95d1c7d635267be2ba8c6beecaffad645293366a9366afa80de863898988c" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>state_shift</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a7142d58868f67c1247bbced47d326491a823bb6ad97b0434ce0087e1f3775e858" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>state_used_mask</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a6c4f94c669a0175c4b2c25c8e1d8af74" prot="public" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>superblock_state</name></member>
      <member refid="class_kokkos_1_1_memory_pool_1a77ed1434a009370478548b56e8d3ed96" prot="private" virt="non-virtual"><scope>Kokkos::MemoryPool</scope><name>Tracker</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
