<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="md_src__kokkos_kokkos_doc_design_notes_space_instances" kind="page">
    <compoundname>md_src_Kokkos_kokkos_doc_design_notes_space_instances</compoundname>
    <title>Design Notes for Execution and Memory Space Instances</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="md_src__kokkos_kokkos_doc_design_notes_space_instances_1autotoc_md88">
<title>Objective</title>
<para><itemizedlist>
<listitem><para>Enable Kokkos interoperability with coarse-grain tasking models</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_src__kokkos_kokkos_doc_design_notes_space_instances_1autotoc_md89">
<title>Requirements</title>
<para><itemizedlist>
<listitem><para>Backwards compatible with existing Kokkos API</para>
</listitem><listitem><para>Support existing Host execution spaces (Serial, Threads, OpenMP)</para>
</listitem><listitem><para>Support DARMA threading model (may require a new Host execution space)</para>
</listitem><listitem><para>Support Uintah threading model, i.e. indepentant worker threadpools working of of shared task queues</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_src__kokkos_kokkos_doc_design_notes_space_instances_1autotoc_md90">
<title>Execution Space</title>
<para><itemizedlist>
<listitem><para>Parallel work is <emphasis>dispatched</emphasis> on an execution space instance</para>
</listitem><listitem><para>Execution space instances are conceptually disjoint/independent from each other</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_src__kokkos_kokkos_doc_design_notes_space_instances_1autotoc_md91">
<title>Host Execution Space Instances</title>
<para><itemizedlist>
<listitem><para>A host-side <emphasis>control</emphasis> thread dispatches work to an instance</para>
</listitem><listitem><para><computeroutput>main</computeroutput> is the initial control thread</para>
</listitem><listitem><para>A host execution space instance is an organized thread pool</para>
</listitem><listitem><para>All instances are disjoint, i.e. hardware resources are not shared between instances</para>
</listitem><listitem><para>Exactly one control thread is associated with an instance and only that control thread may dispatch work to to that instance</para>
</listitem><listitem><para>The control thread is a member of the instance</para>
</listitem><listitem><para>The pool of threads associated with an instances is not mutatable during that instance existence</para>
</listitem><listitem><para>The pool of threads associated with an instance may be masked<itemizedlist>
<listitem><para>Allows work to be dispatched to a subset of the pool</para>
</listitem><listitem><para>Example: only one hyperthread per core of the instance</para>
</listitem><listitem><para>A mask can be applied during the policy creation of a parallel algorithm</para>
</listitem><listitem><para>Masking is portable by defining it as ceiling of fraction between [0.0, 1.0] of the available resources</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><programlisting><codeline><highlight class="normal">class<sp/>ExecutionSpace<sp/>{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>execution_space<sp/>=<sp/>ExecutionSpace;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>memory_space<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>device_type<sp/>=<sp/>Kokkos::Device&lt;execution_space,<sp/>memory_space&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>array_layout<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>size_type<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>scratch_memory_space<sp/>=<sp/>...;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>class<sp/>Instance</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>thread_pool_size(<sp/>int<sp/>depth<sp/>=<sp/>0<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>class<sp/>InstanceRequest</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>Control<sp/>=<sp/>std::function&lt;<sp/>void(<sp/>Instance<sp/>*<sp/>)&gt;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InstanceRequest(<sp/>Control<sp/>control</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>unsigned<sp/>thread_count</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>unsigned<sp/>use_numa_count<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>unsigned<sp/>use_cores_per_numa<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>in_parallel();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>sleep();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>wake();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>fence();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>print_configuration(<sp/>std::ostream<sp/>&amp;,<sp/>const<sp/>bool<sp/>detailed<sp/>=<sp/>false<sp/>);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>initialize(<sp/>unsigned<sp/>thread_count<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>unsigned<sp/>use_numa_count<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>unsigned<sp/>use_cores_per_numa<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Partition<sp/>the<sp/>current<sp/>instance<sp/>into<sp/>the<sp/>requested<sp/>instances</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>and<sp/>run<sp/>the<sp/>given<sp/>functions<sp/>on<sp/>the<sp/>cooresponding<sp/>instances</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>will<sp/>block<sp/>until<sp/>all<sp/>the<sp/>partitioned<sp/>instances<sp/>complete<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>the<sp/>original<sp/>instance<sp/>will<sp/>be<sp/>restored</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Requires<sp/>that<sp/>the<sp/>space<sp/>has<sp/>already<sp/>been<sp/>initialized</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Requires<sp/>that<sp/>the<sp/>request<sp/>can<sp/>be<sp/>statisfied<sp/>by<sp/>the<sp/>current<sp/>instance</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/><sp/><sp/>i.e.<sp/>the<sp/>sum<sp/>of<sp/>number<sp/>of<sp/>requested<sp/>threads<sp/>must<sp/>be<sp/>less<sp/>than<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/><sp/><sp/>max_hardware_threads</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Each<sp/>control<sp/>functor<sp/>will<sp/>accept<sp/>a<sp/>handle<sp/>to<sp/>its<sp/>new<sp/>default<sp/>instance</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Each<sp/>instance<sp/>must<sp/>be<sp/>independent<sp/>of<sp/>all<sp/>other<sp/>instances</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/><sp/><sp/>i.e.<sp/>no<sp/>assumption<sp/>on<sp/>scheduling<sp/>between<sp/>instances</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>user<sp/>is<sp/>responible<sp/>for<sp/>checking<sp/>the<sp/>return<sp/>code<sp/>for<sp/>errors</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>run_instances(<sp/>std::vector&lt;<sp/>InstanceRequest&gt;<sp/>const&amp;<sp/>requests<sp/>);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>finalize();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>is_initialized();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>concurrency();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>thread_pool_size(<sp/>int<sp/>depth<sp/>=<sp/>0<sp/>);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>thread_pool_rank();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>max_hardware_threads();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>hardware_thread_id();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>};</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/doc/design_notes_space_instances.md"/>
  </compounddef>
</doxygen>
