<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_kokkos_exp___host___iterate_tile_8hpp" kind="file" language="C++">
    <compoundname>KokkosExp_Host_IterateTile.hpp</compoundname>
    <includes refid="_kokkos___macros_8hpp" local="no">Kokkos_Macros.hpp</includes>
    <includes local="no">algorithm</includes>
    <includedby refid="_kokkos_exp___m_d_range_policy_8hpp" local="no">src/Kokkos/kokkos/core/src/KokkosExp_MDRangePolicy.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>Kokkos_Macros.hpp</label>
        <link refid="_kokkos___macros_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp</label>
        <link refid="_kokkos_exp___host___iterate_tile_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>KokkosCore_Config_SetupBackend.hpp</label>
      </node>
      <node id="3">
        <label>KokkosCore_config.h</label>
      </node>
      <node id="5">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="9">
        <label>src/Kokkos/kokkos/algorithms/src/Kokkos_Random.hpp</label>
        <link refid="_kokkos___random_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>src/Kokkos/kokkos/algorithms/src/Kokkos_Sort.hpp</label>
        <link refid="_kokkos___sort_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>src/Kokkos/kokkos/algorithms/unit_tests/TestRandom.hpp</label>
        <link refid="_test_random_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>src/Kokkos/kokkos/algorithms/unit_tests/TestRandomCommon.hpp</label>
        <link refid="_test_random_common_8hpp_source"/>
      </node>
      <node id="12">
        <label>src/Kokkos/kokkos/algorithms/unit_tests/TestSort.hpp</label>
        <link refid="_test_sort_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>src/Kokkos/kokkos/algorithms/unit_tests/TestSortCommon.hpp</label>
        <link refid="_test_sort_common_8hpp_source"/>
      </node>
      <node id="17">
        <label>src/Kokkos/kokkos/benchmarks/bytes_and_flops/bench.hpp</label>
        <link refid="bench_8hpp_source"/>
      </node>
      <node id="15">
        <label>src/Kokkos/kokkos/benchmarks/gather/gather.hpp</label>
        <link refid="gather_8hpp_source"/>
      </node>
      <node id="14">
        <label>src/Kokkos/kokkos/benchmarks/gather/gather_unroll.hpp</label>
        <link refid="gather__unroll_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/Kokkos/kokkos/benchmarks/policy_performance/policy_perf_test.hpp</label>
        <link refid="policy__perf__test_8hpp_source"/>
      </node>
      <node id="19">
        <label>src/Kokkos/kokkos/containers/performance_tests/TestDynRankView.hpp</label>
        <link refid="_test_dyn_rank_view_8hpp_source"/>
      </node>
      <node id="20">
        <label>src/Kokkos/kokkos/containers/performance_tests/TestGlobal2LocalIds.hpp</label>
        <link refid="_test_global2_local_ids_8hpp_source"/>
      </node>
      <node id="41">
        <label>src/Kokkos/kokkos/containers/performance_tests/TestScatterView.hpp</label>
        <link refid="performance__tests_2_test_scatter_view_8hpp_source"/>
      </node>
      <node id="21">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_Bitset.hpp</label>
        <link refid="_kokkos___bitset_8hpp_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_DualView.hpp</label>
        <link refid="_kokkos___dual_view_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp</label>
        <link refid="_kokkos___dyn_rank_view_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_DynamicView.hpp</label>
        <link refid="_kokkos___dynamic_view_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_ErrorReporter.hpp</label>
        <link refid="_kokkos___error_reporter_8hpp_source"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp</label>
        <link refid="_kokkos___offset_view_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp</label>
        <link refid="_kokkos___scatter_view_8hpp"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="201">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_StaticCrsGraph.hpp</label>
        <link refid="_kokkos___static_crs_graph_8hpp_source"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_UnorderedMap.hpp</label>
        <link refid="_kokkos___unordered_map_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_Vector.hpp</label>
        <link refid="_kokkos___vector_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestBitset.hpp</label>
        <link refid="_test_bitset_8hpp_source"/>
      </node>
      <node id="30">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp</label>
        <link refid="_test_dual_view_8hpp_source"/>
      </node>
      <node id="32">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp</label>
        <link refid="_test_dyn_view_a_p_i_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI_generic.hpp</label>
        <link refid="_test_dyn_view_a_p_i__generic_8hpp_source"/>
      </node>
      <node id="34">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI_rank12345.hpp</label>
        <link refid="_test_dyn_view_a_p_i__rank12345_8hpp_source"/>
      </node>
      <node id="35">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI_rank67.hpp</label>
        <link refid="_test_dyn_view_a_p_i__rank67_8hpp_source"/>
      </node>
      <node id="38">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynamicView.hpp</label>
        <link refid="_test_dynamic_view_8hpp_source"/>
      </node>
      <node id="27">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestErrorReporter.hpp</label>
        <link refid="_test_error_reporter_8hpp_source"/>
      </node>
      <node id="3">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestOffsetView.hpp</label>
        <link refid="_test_offset_view_8hpp_source"/>
      </node>
      <node id="42">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestScatterView.hpp</label>
        <link refid="unit__tests_2_test_scatter_view_8hpp_source"/>
      </node>
      <node id="43">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestStaticCrsGraph.hpp</label>
        <link refid="_test_static_crs_graph_8hpp_source"/>
      </node>
      <node id="23">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestUnorderedMap.hpp</label>
        <link refid="_test_unordered_map_8hpp_source"/>
      </node>
      <node id="29">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestVector.hpp</label>
        <link refid="_test_vector_8hpp_source"/>
      </node>
      <node id="36">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestViewCtorPropEmbeddedDim.hpp</label>
        <link refid="containers_2unit__tests_2_test_view_ctor_prop_embedded_dim_8hpp_source"/>
      </node>
      <node id="44">
        <label>src/Kokkos/kokkos/core/perf_test/PerfTest_ViewCopy.hpp</label>
        <link refid="_perf_test___view_copy_8hpp_source"/>
      </node>
      <node id="45">
        <label>src/Kokkos/kokkos/core/perf_test/PerfTest_ViewFill.hpp</label>
        <link refid="_perf_test___view_fill_8hpp_source"/>
      </node>
      <node id="46">
        <label>src/Kokkos/kokkos/core/perf_test/PerfTest_ViewResize.hpp</label>
        <link refid="_perf_test___view_resize_8hpp_source"/>
      </node>
      <node id="189">
        <label>src/Kokkos/kokkos/core/src/Cuda/Kokkos_Cuda_Instance.hpp</label>
        <link refid="_kokkos___cuda___instance_8hpp_source"/>
      </node>
      <node id="4">
        <label>src/Kokkos/kokkos/core/src/Cuda/Kokkos_Cuda_MDRangePolicy.hpp</label>
        <link refid="_kokkos___cuda___m_d_range_policy_8hpp_source"/>
      </node>
      <node id="5">
        <label>src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_MDRangePolicy.hpp</label>
        <link refid="_kokkos___h_i_p___m_d_range_policy_8hpp_source"/>
      </node>
      <node id="6">
        <label>src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_Parallel_MDRange.hpp</label>
        <link refid="_kokkos___h_i_p___parallel___m_d_range_8hpp_source"/>
      </node>
      <node id="204">
        <label>src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_Parallel_Range.hpp</label>
        <link refid="_kokkos___h_i_p___parallel___range_8hpp_source"/>
      </node>
      <node id="205">
        <label>src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_Parallel_Team.hpp</label>
        <link refid="_kokkos___h_i_p___parallel___team_8hpp_source"/>
      </node>
      <node id="219">
        <label>src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_UniqueToken.hpp</label>
        <link refid="_kokkos___h_i_p___unique_token_8hpp_source"/>
      </node>
      <node id="202">
        <label>src/Kokkos/kokkos/core/src/KokkosExp_InterOp.hpp</label>
        <link refid="_kokkos_exp___inter_op_8hpp_source"/>
      </node>
      <node id="2">
        <label>src/Kokkos/kokkos/core/src/KokkosExp_MDRangePolicy.hpp</label>
        <link refid="_kokkos_exp___m_d_range_policy_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>src/Kokkos/kokkos/core/src/Kokkos_AcquireUniqueTokenImpl.hpp</label>
        <link refid="_kokkos___acquire_unique_token_impl_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="191">
        <label>src/Kokkos/kokkos/core/src/Kokkos_Atomic.hpp</label>
        <link refid="_kokkos___atomic_8hpp"/>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="198" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="192">
        <label>src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp</label>
        <link refid="_kokkos___complex_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp</label>
        <link refid="_kokkos___copy_views_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>src/Kokkos/kokkos/core/src/Kokkos_Core.hpp</label>
        <link refid="_kokkos___core_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
      </node>
      <node id="181">
        <label>src/Kokkos/kokkos/core/src/Kokkos_Crs.hpp</label>
        <link refid="_kokkos___crs_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
      </node>
      <node id="209">
        <label>src/Kokkos/kokkos/core/src/Kokkos_Graph.hpp</label>
        <link refid="_kokkos___graph_8hpp_source"/>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="212">
        <label>src/Kokkos/kokkos/core/src/Kokkos_GraphNode.hpp</label>
        <link refid="_kokkos___graph_node_8hpp_source"/>
        <childnode refid="209" relation="include">
        </childnode>
      </node>
      <node id="190">
        <label>src/Kokkos/kokkos/core/src/Kokkos_HostSpace.hpp</label>
        <link refid="_kokkos___host_space_8hpp_source"/>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
      </node>
      <node id="185">
        <label>src/Kokkos/kokkos/core/src/Kokkos_LogicalSpaces.hpp</label>
        <link refid="_kokkos___logical_spaces_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="193">
        <label>src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp</label>
        <link refid="_kokkos___mathematical_special_functions_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="194">
        <label>src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp</label>
        <link refid="_kokkos___memory_pool_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="203">
        <label>src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp</label>
        <link refid="_kokkos___parallel_8hpp"/>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="204" relation="include">
        </childnode>
        <childnode refid="205" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
      </node>
      <node id="211">
        <label>src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp</label>
        <link refid="_kokkos___parallel___reduce_8hpp_source"/>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="212" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="213" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="186">
        <label>src/Kokkos/kokkos/core/src/Kokkos_Profiling_ProfileSection.hpp</label>
        <link refid="_kokkos___profiling___profile_section_8hpp_source"/>
      </node>
      <node id="183">
        <label>src/Kokkos/kokkos/core/src/Kokkos_Tuners.hpp</label>
        <link refid="_kokkos___tuners_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
      </node>
      <node id="200">
        <label>src/Kokkos/kokkos/core/src/Kokkos_View.hpp</label>
        <link refid="_kokkos___view_8hpp_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="202" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
        <childnode refid="214" relation="include">
        </childnode>
        <childnode refid="215" relation="include">
        </childnode>
      </node>
      <node id="182">
        <label>src/Kokkos/kokkos/core/src/Kokkos_WorkGraphPolicy.hpp</label>
        <link refid="_kokkos___work_graph_policy_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="195">
        <label>src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp</label>
        <link refid="_kokkos___open_m_p_target___exec_8hpp_source"/>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Instance.hpp</label>
        <link refid="_kokkos___open_m_p_target___instance_8hpp_source"/>
      </node>
      <node id="196">
        <label>src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Parallel.hpp</label>
        <link refid="_kokkos___open_m_p_target___parallel_8hpp_source"/>
      </node>
      <node id="197">
        <label>src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Parallel_MDRange.hpp</label>
        <link refid="_kokkos___open_m_p_target___parallel___m_d_range_8hpp_source"/>
      </node>
      <node id="187">
        <label>src/Kokkos/kokkos/core/src/SYCL/Kokkos_SYCL_Instance.hpp</label>
        <link refid="_kokkos___s_y_c_l___instance_8hpp_source"/>
      </node>
      <node id="229">
        <label>src/Kokkos/kokkos/core/src/SYCL/Kokkos_SYCL_MDRangePolicy.hpp</label>
        <link refid="_kokkos___s_y_c_l___m_d_range_policy_8hpp_source"/>
      </node>
      <node id="206">
        <label>src/Kokkos/kokkos/core/src/SYCL/Kokkos_SYCL_Parallel_Team.hpp</label>
        <link refid="_kokkos___s_y_c_l___parallel___team_8hpp_source"/>
      </node>
      <node id="220">
        <label>src/Kokkos/kokkos/core/src/SYCL/Kokkos_SYCL_UniqueToken.hpp</label>
        <link refid="_kokkos___s_y_c_l___unique_token_8hpp_source"/>
      </node>
      <node id="1">
        <label>src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp</label>
        <link refid="_kokkos_exp___host___iterate_tile_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="217">
        <label>src/Kokkos/kokkos/core/src/impl/KokkosExp_ViewMapping.hpp</label>
        <link refid="_kokkos_exp___view_mapping_8hpp_source"/>
      </node>
      <node id="198">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_Atomic_Compare_Exchange_Weak.hpp</label>
        <link refid="_kokkos___atomic___compare___exchange___weak_8hpp_source"/>
      </node>
      <node id="199">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_Atomic_View.hpp</label>
        <link refid="_kokkos___atomic___view_8hpp_source"/>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="216" relation="include">
        </childnode>
      </node>
      <node id="213">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_Combined_Reducer.hpp</label>
        <link refid="_kokkos___combined___reducer_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="218">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_ConcurrentBitset.hpp</label>
        <link refid="_kokkos___concurrent_bitset_8hpp_source"/>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
      </node>
      <node id="207">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_Default_GraphNodeKernel.hpp</label>
        <link refid="_kokkos___default___graph_node_kernel_8hpp_source"/>
        <childnode refid="208" relation="include">
        </childnode>
      </node>
      <node id="210">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_Default_GraphNode_Impl.hpp</label>
        <link refid="_kokkos___default___graph_node___impl_8hpp_source"/>
        <childnode refid="208" relation="include">
        </childnode>
      </node>
      <node id="208">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_Default_Graph_Impl.hpp</label>
        <link refid="_kokkos___default___graph___impl_8hpp_source"/>
        <childnode refid="209" relation="include">
        </childnode>
      </node>
      <node id="222">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_FixedBufferMemoryPool.hpp</label>
        <link refid="_kokkos___fixed_buffer_memory_pool_8hpp_source"/>
      </node>
      <node id="223">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_HostBarrier.hpp</label>
        <link refid="_kokkos___host_barrier_8hpp_source"/>
        <childnode refid="224" relation="include">
        </childnode>
      </node>
      <node id="225">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_HostSharedPtr.hpp</label>
        <link refid="_kokkos___host_shared_ptr_8hpp_source"/>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="224">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp</label>
        <link refid="_kokkos___host_thread_team_8hpp_source"/>
      </node>
      <node id="214">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_PhysicalLayout.hpp</label>
        <link refid="_kokkos___physical_layout_8hpp_source"/>
      </node>
      <node id="184">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_Profiling.hpp</label>
        <link refid="_kokkos___profiling_8hpp_source"/>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="187" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
      </node>
      <node id="228">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_SharedAlloc_timpl.hpp</label>
        <link refid="_kokkos___shared_alloc__timpl_8hpp_source"/>
      </node>
      <node id="227">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_Spinwait.hpp</label>
        <link refid="_kokkos___spinwait_8hpp_source"/>
        <childnode refid="195" relation="include">
        </childnode>
      </node>
      <node id="188">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_Tools.hpp</label>
        <link refid="_kokkos___tools_8hpp_source"/>
        <childnode refid="189" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="216" relation="include">
        </childnode>
      </node>
      <node id="215">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp</label>
        <link refid="_kokkos___view_layout_tiled_8hpp_source"/>
        <childnode refid="132" relation="include">
        </childnode>
      </node>
      <node id="216">
        <label>src/Kokkos/kokkos/core/src/impl/Kokkos_ViewMapping.hpp</label>
        <link refid="_kokkos___view_mapping_8hpp_source"/>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="217" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations.hpp</label>
        <link refid="_test_atomic_operations_8hpp_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_complexdouble.hpp</label>
        <link refid="_test_atomic_operations__complexdouble_8hpp_source"/>
      </node>
      <node id="51">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_complexfloat.hpp</label>
        <link refid="_test_atomic_operations__complexfloat_8hpp_source"/>
      </node>
      <node id="52">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_double.hpp</label>
        <link refid="_test_atomic_operations__double_8hpp_source"/>
      </node>
      <node id="53">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_float.hpp</label>
        <link refid="_test_atomic_operations__float_8hpp_source"/>
      </node>
      <node id="54">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_int.hpp</label>
        <link refid="_test_atomic_operations__int_8hpp_source"/>
      </node>
      <node id="55">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_longint.hpp</label>
        <link refid="_test_atomic_operations__longint_8hpp_source"/>
      </node>
      <node id="56">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_longlongint.hpp</label>
        <link refid="_test_atomic_operations__longlongint_8hpp_source"/>
      </node>
      <node id="57">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_unsignedint.hpp</label>
        <link refid="_test_atomic_operations__unsignedint_8hpp_source"/>
      </node>
      <node id="58">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_unsignedlongint.hpp</label>
        <link refid="_test_atomic_operations__unsignedlongint_8hpp_source"/>
      </node>
      <node id="60">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicViews.hpp</label>
        <link refid="_test_atomic_views_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomics.hpp</label>
        <link refid="_test_atomics_8hpp_source"/>
      </node>
      <node id="62">
        <label>src/Kokkos/kokkos/core/unit_test/TestBlockSizeDeduction.hpp</label>
        <link refid="_test_block_size_deduction_8hpp_source"/>
      </node>
      <node id="63">
        <label>src/Kokkos/kokkos/core/unit_test/TestCXX11.hpp</label>
        <link refid="_test_c_x_x11_8hpp_source"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>src/Kokkos/kokkos/core/unit_test/TestCXX11Deduction.hpp</label>
        <link refid="_test_c_x_x11_deduction_8hpp_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>src/Kokkos/kokkos/core/unit_test/TestCompilerMacros.hpp</label>
        <link refid="_test_compiler_macros_8hpp_source"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>src/Kokkos/kokkos/core/unit_test/TestComplex.hpp</label>
        <link refid="_test_complex_8hpp_source"/>
      </node>
      <node id="70">
        <label>src/Kokkos/kokkos/core/unit_test/TestConcepts.hpp</label>
        <link refid="_test_concepts_8hpp_source"/>
      </node>
      <node id="221">
        <label>src/Kokkos/kokkos/core/unit_test/TestConcurrentBitset.hpp</label>
        <link refid="_test_concurrent_bitset_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>src/Kokkos/kokkos/core/unit_test/TestCrs.hpp</label>
        <link refid="_test_crs_8hpp_source"/>
      </node>
      <node id="72">
        <label>src/Kokkos/kokkos/core/unit_test/TestDeepCopyAlignment.hpp</label>
        <link refid="_test_deep_copy_alignment_8hpp_source"/>
      </node>
      <node id="73">
        <label>src/Kokkos/kokkos/core/unit_test/TestDefaultDeviceTypeInit.hpp</label>
        <link refid="_test_default_device_type_init_8hpp_source"/>
      </node>
      <node id="74">
        <label>src/Kokkos/kokkos/core/unit_test/TestExecSpacePartitioning.hpp</label>
        <link refid="_test_exec_space_partitioning_8hpp_source"/>
      </node>
      <node id="75">
        <label>src/Kokkos/kokkos/core/unit_test/TestExecutionSpace.hpp</label>
        <link refid="_test_execution_space_8hpp_source"/>
      </node>
      <node id="76">
        <label>src/Kokkos/kokkos/core/unit_test/TestFunctorAnalysis.hpp</label>
        <link refid="_test_functor_analysis_8hpp_source"/>
      </node>
      <node id="77">
        <label>src/Kokkos/kokkos/core/unit_test/TestGraph.hpp</label>
        <link refid="_test_graph_8hpp_source"/>
      </node>
      <node id="226">
        <label>src/Kokkos/kokkos/core/unit_test/TestHostSharedPtr.hpp</label>
        <link refid="_test_host_shared_ptr_8hpp_source"/>
      </node>
      <node id="78">
        <label>src/Kokkos/kokkos/core/unit_test/TestHostSharedPtrAccessOnDevice.hpp</label>
        <link refid="_test_host_shared_ptr_access_on_device_8hpp_source"/>
      </node>
      <node id="68">
        <label>src/Kokkos/kokkos/core/unit_test/TestInit.hpp</label>
        <link refid="_test_init_8hpp_source"/>
      </node>
      <node id="79">
        <label>src/Kokkos/kokkos/core/unit_test/TestIrregularLayout.hpp</label>
        <link refid="_test_irregular_layout_8hpp_source"/>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>src/Kokkos/kokkos/core/unit_test/TestLocalDeepCopy.hpp</label>
        <link refid="_test_local_deep_copy_8hpp_source"/>
      </node>
      <node id="82">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange.hpp</label>
        <link refid="_test_m_d_range_8hpp_source"/>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_a.hpp</label>
        <link refid="_test_m_d_range__a_8hpp_source"/>
      </node>
      <node id="84">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_b.hpp</label>
        <link refid="_test_m_d_range__b_8hpp_source"/>
      </node>
      <node id="85">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_c.hpp</label>
        <link refid="_test_m_d_range__c_8hpp_source"/>
      </node>
      <node id="86">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_d.hpp</label>
        <link refid="_test_m_d_range__d_8hpp_source"/>
      </node>
      <node id="87">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_e.hpp</label>
        <link refid="_test_m_d_range__e_8hpp_source"/>
      </node>
      <node id="88">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_f.hpp</label>
        <link refid="_test_m_d_range__f_8hpp_source"/>
      </node>
      <node id="89">
        <label>src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp</label>
        <link refid="_test_mathematical_functions_8hpp_source"/>
      </node>
      <node id="90">
        <label>src/Kokkos/kokkos/core/unit_test/TestMathematicalSpecialFunctions.hpp</label>
        <link refid="_test_mathematical_special_functions_8hpp_source"/>
      </node>
      <node id="91">
        <label>src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp</label>
        <link refid="_test_non_trivial_scalar_types_8hpp_source"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp</label>
        <link refid="_test_numeric_traits_8hpp_source"/>
      </node>
      <node id="64">
        <label>src/Kokkos/kokkos/core/unit_test/TestOther.hpp</label>
        <link refid="_test_other_8hpp_source"/>
      </node>
      <node id="97">
        <label>src/Kokkos/kokkos/core/unit_test/TestPolicyConstruction.hpp</label>
        <link refid="_test_policy_construction_8hpp_source"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>src/Kokkos/kokkos/core/unit_test/TestRange.hpp</label>
        <link refid="_test_range_8hpp_source"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>src/Kokkos/kokkos/core/unit_test/TestRangePolicy.hpp</label>
        <link refid="_test_range_policy_8hpp_source"/>
      </node>
      <node id="100">
        <label>src/Kokkos/kokkos/core/unit_test/TestRangePolicyRequire.hpp</label>
        <link refid="_test_range_policy_require_8hpp_source"/>
      </node>
      <node id="101">
        <label>src/Kokkos/kokkos/core/unit_test/TestReduce.hpp</label>
        <link refid="_test_reduce_8hpp_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>src/Kokkos/kokkos/core/unit_test/TestReduceCombinatorical.hpp</label>
        <link refid="_test_reduce_combinatorical_8hpp_source"/>
      </node>
      <node id="103">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers.hpp</label>
        <link refid="_test_reducers_8hpp_source"/>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers_a.hpp</label>
        <link refid="_test_reducers__a_8hpp_source"/>
      </node>
      <node id="105">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers_b.hpp</label>
        <link refid="_test_reducers__b_8hpp_source"/>
      </node>
      <node id="106">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers_c.hpp</label>
        <link refid="_test_reducers__c_8hpp_source"/>
      </node>
      <node id="92">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers_d.hpp</label>
        <link refid="_test_reducers__d_8hpp_source"/>
      </node>
      <node id="66">
        <label>src/Kokkos/kokkos/core/unit_test/TestReductions.hpp</label>
        <link refid="_test_reductions_8hpp_source"/>
      </node>
      <node id="107">
        <label>src/Kokkos/kokkos/core/unit_test/TestReductions_DeviceView.hpp</label>
        <link refid="_test_reductions___device_view_8hpp_source"/>
      </node>
      <node id="108">
        <label>src/Kokkos/kokkos/core/unit_test/TestResize.hpp</label>
        <link refid="_test_resize_8hpp_source"/>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>src/Kokkos/kokkos/core/unit_test/TestScan.hpp</label>
        <link refid="_test_scan_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>src/Kokkos/kokkos/core/unit_test/TestSharedAlloc.hpp</label>
        <link refid="_test_shared_alloc_8hpp_source"/>
      </node>
      <node id="112">
        <label>src/Kokkos/kokkos/core/unit_test/TestStackTrace.hpp</label>
        <link refid="_test_stack_trace_8hpp_source"/>
      </node>
      <node id="139">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_a.hpp</label>
        <link refid="_test_sub_view__a_8hpp_source"/>
      </node>
      <node id="140">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_b.hpp</label>
        <link refid="_test_sub_view__b_8hpp_source"/>
      </node>
      <node id="141">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c01.hpp</label>
        <link refid="_test_sub_view__c01_8hpp_source"/>
      </node>
      <node id="142">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c02.hpp</label>
        <link refid="_test_sub_view__c02_8hpp_source"/>
      </node>
      <node id="143">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c03.hpp</label>
        <link refid="_test_sub_view__c03_8hpp_source"/>
      </node>
      <node id="144">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c04.hpp</label>
        <link refid="_test_sub_view__c04_8hpp_source"/>
      </node>
      <node id="145">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c05.hpp</label>
        <link refid="_test_sub_view__c05_8hpp_source"/>
      </node>
      <node id="146">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c06.hpp</label>
        <link refid="_test_sub_view__c06_8hpp_source"/>
      </node>
      <node id="147">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c07.hpp</label>
        <link refid="_test_sub_view__c07_8hpp_source"/>
      </node>
      <node id="148">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c08.hpp</label>
        <link refid="_test_sub_view__c08_8hpp_source"/>
      </node>
      <node id="149">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c09.hpp</label>
        <link refid="_test_sub_view__c09_8hpp_source"/>
      </node>
      <node id="150">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c10.hpp</label>
        <link refid="_test_sub_view__c10_8hpp_source"/>
      </node>
      <node id="151">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c11.hpp</label>
        <link refid="_test_sub_view__c11_8hpp_source"/>
      </node>
      <node id="152">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c12.hpp</label>
        <link refid="_test_sub_view__c12_8hpp_source"/>
      </node>
      <node id="153">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c13.hpp</label>
        <link refid="_test_sub_view__c13_8hpp_source"/>
      </node>
      <node id="154">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c14.hpp</label>
        <link refid="_test_sub_view__c14_8hpp_source"/>
      </node>
      <node id="113">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeam.hpp</label>
        <link refid="_test_team_8hpp_source"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamBasic.hpp</label>
        <link refid="_test_team_basic_8hpp_source"/>
      </node>
      <node id="114">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamReductionScan.hpp</label>
        <link refid="_test_team_reduction_scan_8hpp_source"/>
      </node>
      <node id="116">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamScan.hpp</label>
        <link refid="_test_team_scan_8hpp_source"/>
      </node>
      <node id="115">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamScratch.hpp</label>
        <link refid="_test_team_scratch_8hpp_source"/>
      </node>
      <node id="117">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamTeamSize.hpp</label>
        <link refid="_test_team_team_size_8hpp_source"/>
      </node>
      <node id="93">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamVector.hpp</label>
        <link refid="_test_team_vector_8hpp_source"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamVectorRange.hpp</label>
        <link refid="_test_team_vector_range_8hpp_source"/>
      </node>
      <node id="119">
        <label>src/Kokkos/kokkos/core/unit_test/TestTemplateMetaFunctions.hpp</label>
        <link refid="_test_template_meta_functions_8hpp_source"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>src/Kokkos/kokkos/core/unit_test/TestUniqueToken.hpp</label>
        <link refid="_test_unique_token_8hpp_source"/>
      </node>
      <node id="121">
        <label>src/Kokkos/kokkos/core/unit_test/TestUtilities.hpp</label>
        <link refid="_test_utilities_8hpp_source"/>
      </node>
      <node id="122">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp</label>
        <link refid="_test_view_a_p_i_8hpp_source"/>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="123">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_a.hpp</label>
        <link refid="_test_view_a_p_i__a_8hpp_source"/>
      </node>
      <node id="124">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_b.hpp</label>
        <link refid="_test_view_a_p_i__b_8hpp_source"/>
      </node>
      <node id="125">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_c.hpp</label>
        <link refid="_test_view_a_p_i__c_8hpp_source"/>
      </node>
      <node id="126">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_d.hpp</label>
        <link refid="_test_view_a_p_i__d_8hpp_source"/>
      </node>
      <node id="127">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_e.hpp</label>
        <link refid="_test_view_a_p_i__e_8hpp_source"/>
      </node>
      <node id="128">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewCopy_a.hpp</label>
        <link refid="_test_view_copy__a_8hpp_source"/>
      </node>
      <node id="129">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewCopy_b.hpp</label>
        <link refid="_test_view_copy__b_8hpp_source"/>
      </node>
      <node id="130">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewCtorPropEmbeddedDim.hpp</label>
        <link refid="core_2unit__test_2_test_view_ctor_prop_embedded_dim_8hpp_source"/>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="131">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewIsAssignable.hpp</label>
        <link refid="_test_view_is_assignable_8hpp_source"/>
        <childnode refid="127" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewLayoutStrideAssignment.hpp</label>
        <link refid="_test_view_layout_stride_assignment_8hpp_source"/>
      </node>
      <node id="132">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewLayoutTiled.hpp</label>
        <link refid="_test_view_layout_tiled_8hpp_source"/>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="133">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewMapping_a.hpp</label>
        <link refid="_test_view_mapping__a_8hpp_source"/>
      </node>
      <node id="134">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewMapping_b.hpp</label>
        <link refid="_test_view_mapping__b_8hpp_source"/>
      </node>
      <node id="135">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewMapping_subview.hpp</label>
        <link refid="_test_view_mapping__subview_8hpp_source"/>
      </node>
      <node id="136">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewOfClass.hpp</label>
        <link refid="_test_view_of_class_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewResize.hpp</label>
        <link refid="_test_view_resize_8hpp_source"/>
      </node>
      <node id="137">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewSpaceAssign.hpp</label>
        <link refid="_test_view_space_assign_8hpp_source"/>
      </node>
      <node id="138">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewSubview.hpp</label>
        <link refid="_test_view_subview_8hpp_source"/>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="155">
        <label>src/Kokkos/kokkos/core/unit_test/TestView_64bit.hpp</label>
        <link refid="_test_view__64bit_8hpp_source"/>
      </node>
      <node id="156">
        <label>src/Kokkos/kokkos/core/unit_test/TestWorkGraph.hpp</label>
        <link refid="_test_work_graph_8hpp_source"/>
      </node>
      <node id="157">
        <label>src/Kokkos/kokkos/core/unit_test/Test_InterOp_Streams.hpp</label>
        <link refid="_test___inter_op___streams_8hpp_source"/>
      </node>
      <node id="158">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test01_execspace.hpp</label>
        <link refid="_test01__execspace_8hpp_source"/>
      </node>
      <node id="159">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test02_atomic_host.hpp</label>
        <link refid="_test02__atomic__host_8hpp_source"/>
      </node>
      <node id="160">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test03a_MemorySpace_malloc.hpp</label>
        <link refid="_test03a___memory_space__malloc_8hpp_source"/>
      </node>
      <node id="161">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test03b_MemorySpace_free.hpp</label>
        <link refid="_test03b___memory_space__free_8hpp_source"/>
      </node>
      <node id="162">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test04_ParallelFor_RangePolicy.hpp</label>
        <link refid="_test04___parallel_for___range_policy_8hpp_source"/>
      </node>
      <node id="163">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test05_ParallelReduce_RangePolicy.hpp</label>
        <link refid="_test05___parallel_reduce___range_policy_8hpp_source"/>
      </node>
      <node id="164">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test06_ParallelFor_MDRangePolicy.hpp</label>
        <link refid="_test06___parallel_for___m_d_range_policy_8hpp_source"/>
      </node>
      <node id="165">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp</label>
        <link refid="_test08__deep__copy_8hpp_source"/>
      </node>
      <node id="166">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test10_HierarchicalBasics.hpp</label>
        <link refid="_test10___hierarchical_basics_8hpp_source"/>
      </node>
      <node id="167">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test11a_ParallelFor_TeamThreadRange.hpp</label>
        <link refid="_test11a___parallel_for___team_thread_range_8hpp_source"/>
      </node>
      <node id="168">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test11b_ParallelFor_TeamVectorRange.hpp</label>
        <link refid="_test11b___parallel_for___team_vector_range_8hpp_source"/>
      </node>
      <node id="169">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test11c_ParallelFor_ThreadVectorRange.hpp</label>
        <link refid="_test11c___parallel_for___thread_vector_range_8hpp_source"/>
      </node>
      <node id="170">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test12a_ThreadScratch.hpp</label>
        <link refid="_test12a___thread_scratch_8hpp_source"/>
      </node>
      <node id="171">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test12b_TeamScratch.hpp</label>
        <link refid="_test12b___team_scratch_8hpp_source"/>
      </node>
      <node id="172">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test13a_ParallelRed_TeamThreadRange.hpp</label>
        <link refid="_test13a___parallel_red___team_thread_range_8hpp_source"/>
      </node>
      <node id="173">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test13b_ParallelRed_TeamVectorRange.hpp</label>
        <link refid="_test13b___parallel_red___team_vector_range_8hpp_source"/>
      </node>
      <node id="174">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test13c_ParallelRed_ThreadVectorRange.hpp</label>
        <link refid="_test13c___parallel_red___thread_vector_range_8hpp_source"/>
      </node>
      <node id="175">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test14_MDRangeReduce.hpp</label>
        <link refid="_test14___m_d_range_reduce_8hpp_source"/>
      </node>
      <node id="176">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test16_ParallelScan.hpp</label>
        <link refid="_test16___parallel_scan_8hpp_source"/>
      </node>
      <node id="177">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test17_CompleteAtomic.hpp</label>
        <link refid="_test17___complete_atomic_8hpp_source"/>
      </node>
      <node id="59">
        <label>src/Kokkos/kokkos/core/unit_test/openmp/TestOpenMP.hpp</label>
        <link refid="_test_open_m_p_8hpp_source"/>
      </node>
      <node id="95">
        <label>src/Kokkos/kokkos/core/unit_test/openmptarget/TestOpenMPTarget.hpp</label>
        <link refid="_test_open_m_p_target_8hpp_source"/>
      </node>
      <node id="178">
        <label>src/Kokkos/kokkos/core/unit_test/tools/TestEventCorrectness.hpp</label>
        <link refid="_test_event_correctness_8hpp_source"/>
      </node>
      <node id="179">
        <label>src/Kokkos/kokkos/core/unit_test/tools/TestLogicalSpaces.hpp</label>
        <link refid="_test_logical_spaces_8hpp_source"/>
      </node>
      <node id="180">
        <label>src/Kokkos/kokkos/example/virtual_functions/classes.hpp</label>
        <link refid="classes_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_011_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 1, IsLeft, IType, void, void &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_012_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 2, IsLeft, IType, void, void &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_013_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 3, IsLeft, IType, void, void &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_014_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 4, IsLeft, IType, void, void &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_015_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 5, IsLeft, IType, void, void &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_016_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 6, IsLeft, IType, void, void &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_017_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 7, IsLeft, IType, void, void &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_018_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 8, IsLeft, IType, void, void &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_011_00_01_is_left_00_01_i_type_00_01_tagged_00_091bcbece239e4ba93c161bc81c330223" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 1, IsLeft, IType, Tagged, typename std::enable_if&lt;!std::is_same&lt; Tagged, void &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_012_00_01_is_left_00_01_i_type_00_01_tagged_00_058e6558be2e47cc3e9f524fca210aa52" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 2, IsLeft, IType, Tagged, typename std::enable_if&lt;!std::is_same&lt; Tagged, void &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_013_00_01_is_left_00_01_i_type_00_01_tagged_00_0d77f4e10659331875a923f15cd371d9d" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 3, IsLeft, IType, Tagged, typename std::enable_if&lt;!std::is_same&lt; Tagged, void &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_014_00_01_is_left_00_01_i_type_00_01_tagged_00_064caad6839603822fae64e7fd6a49331" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 4, IsLeft, IType, Tagged, typename std::enable_if&lt;!std::is_same&lt; Tagged, void &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_015_00_01_is_left_00_01_i_type_00_01_tagged_00_00b75b8193aa401fd45837c7744f65a43" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 5, IsLeft, IType, Tagged, typename std::enable_if&lt;!std::is_same&lt; Tagged, void &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_016_00_01_is_left_00_01_i_type_00_01_tagged_00_02ae400a370ab289932e697cd7193fe4f" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 6, IsLeft, IType, Tagged, typename std::enable_if&lt;!std::is_same&lt; Tagged, void &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_017_00_01_is_left_00_01_i_type_00_01_tagged_00_075d4a9d45d6b5bb7748b7c52977508b0" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 7, IsLeft, IType, Tagged, typename std::enable_if&lt;!std::is_same&lt; Tagged, void &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_018_00_01_is_left_00_01_i_type_00_01_tagged_00_01eed31d0e423abb412e2d2a23f671cbc" prot="public">Kokkos::Impl::Tile_Loop_Type&lt; 8, IsLeft, IType, Tagged, typename std::enable_if&lt;!std::is_same&lt; Tagged, void &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile_3_01_r_p_00_01_functor_00_01_tag_00_01_value_type_033a1e0dc37565438ce1f7173e7db3297" prot="public">Kokkos::Impl::HostIterateTile&lt; RP, Functor, Tag, ValueType, std::enable_if_t&lt; std::is_void&lt; ValueType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile_3_01_r_p_00_01_functor_00_01_tag_00_01_value_type_08a809c1869b8e632e12982b5ce997f03" prot="public">Kokkos::Impl::HostIterateTile&lt; RP, Functor, Tag, ValueType, std::enable_if_t&lt; std::is_void&lt; ValueType &gt;::value &gt; &gt;::RankTag</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile_3_01_r_p_00_01_functor_00_01_tag_00_01_value_type_02bd2db12b6c77eadc751eb463f9c01f4" prot="public">Kokkos::Impl::HostIterateTile&lt; RP, Functor, Tag, ValueType, std::enable_if_t&lt;!std::is_void&lt; ValueType &gt;::value &amp;&amp;!std::is_array&lt; ValueType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile_3_01_r_p_00_01_functor_00_01_tag_00_01_value_type_04653db4f9ba28a1c18ac6098968fb0d3" prot="public">Kokkos::Impl::HostIterateTile&lt; RP, Functor, Tag, ValueType, std::enable_if_t&lt;!std::is_void&lt; ValueType &gt;::value &amp;&amp;!std::is_array&lt; ValueType &gt;::value &gt; &gt;::RankTag</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile_3_01_r_p_00_01_functor_00_01_tag_00_01_value_type_019260587cca7902daca3b505df73c4e2" prot="public">Kokkos::Impl::HostIterateTile&lt; RP, Functor, Tag, ValueType, std::enable_if_t&lt;!std::is_void&lt; ValueType &gt;::value &amp;&amp;std::is_array&lt; ValueType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile_3_01_r_p_00_01_functor_00_01_tag_00_01_value_type_00fc5d7300f780def6eb100639219a8bc" prot="public">Kokkos::Impl::HostIterateTile&lt; RP, Functor, Tag, ValueType, std::enable_if_t&lt;!std::is_void&lt; ValueType &gt;::value &amp;&amp;std::is_array&lt; ValueType &gt;::value &gt; &gt;::RankTag</innerclass>
    <innernamespace refid="namespace_kokkos">Kokkos</innernamespace>
    <innernamespace refid="namespace_kokkos_1_1_impl">Kokkos::Impl</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a09559b75d93b2ec0f2fe0061b82f89ba" prot="public" static="no">
        <name>KOKKOS_ENABLE_IVDEP_MDRANGE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="57" column="10" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a245bf37e99e4361aaa9bf427b3b96134" prot="public" static="no">
        <name>KOKKOS_ENABLE_NEW_LOOP_MACROS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="66" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ae8e56cbb4879bad6ad5b76a297c6e8ff" prot="public" static="no">
        <name>LOOP_1L</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE \
  for (type i0 = 0; i0 &lt; static_cast&lt;type&gt;(tile[0]); ++i0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="68" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1acb3f3a76537bd375fecc71040a9aaaa2" prot="public" static="no">
        <name>LOOP_2L</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  for (type i1 = 0; i1 &lt; static_cast&lt;type&gt;(tile[1]); ++i1) LOOP_1L(type, tile)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="72" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a7642e9b159a70fa4c8b8a39b9b78ba94" prot="public" static="no">
        <name>LOOP_3L</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  for (type i2 = 0; i2 &lt; static_cast&lt;type&gt;(tile[2]); ++i2) LOOP_2L(type, tile)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="75" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a4d1960036677a782b00ff24f9f91a747" prot="public" static="no">
        <name>LOOP_4L</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  for (type i3 = 0; i3 &lt; static_cast&lt;type&gt;(tile[3]); ++i3) LOOP_3L(type, tile)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="78" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ae2bf42884af25c05209812fed510bc42" prot="public" static="no">
        <name>LOOP_5L</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  for (type i4 = 0; i4 &lt; static_cast&lt;type&gt;(tile[4]); ++i4) LOOP_4L(type, tile)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="81" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a3317ab1041e6c2cb782ac9cbd4cd52bb" prot="public" static="no">
        <name>LOOP_6L</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  for (type i5 = 0; i5 &lt; static_cast&lt;type&gt;(tile[5]); ++i5) LOOP_5L(type, tile)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="84" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a99a98dce7f7d5ff66fe6fd09eb24f782" prot="public" static="no">
        <name>LOOP_7L</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  for (type i6 = 0; i6 &lt; static_cast&lt;type&gt;(tile[6]); ++i6) LOOP_6L(type, tile)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="87" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a63ef52a88925d6079dea060ff2e92f18" prot="public" static="no">
        <name>LOOP_8L</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  for (type i7 = 0; i7 &lt; static_cast&lt;type&gt;(tile[7]); ++i7) LOOP_7L(type, tile)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="90" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a480dca537786053b17e9dae1f9e5a17e" prot="public" static="no">
        <name>LOOP_1R</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE \
  for (type i0 = 0; i0 &lt; static_cast&lt;type&gt;(tile[0]); ++i0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="93" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a31ab72b92bbc357ce3d41e5f6de18ff6" prot="public" static="no">
        <name>LOOP_2R</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  LOOP_1R(type, tile)       \
  for (type i1 = 0; i1 &lt; static_cast&lt;type&gt;(tile[1]); ++i1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="97" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a4af948204dcba1d669325d5feb01efa4" prot="public" static="no">
        <name>LOOP_3R</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  LOOP_2R(type, tile)       \
  for (type i2 = 0; i2 &lt; static_cast&lt;type&gt;(tile[2]); ++i2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="101" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a98ba3854067cac7dc0e0ac30343f4c00" prot="public" static="no">
        <name>LOOP_4R</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  LOOP_3R(type, tile)       \
  for (type i3 = 0; i3 &lt; static_cast&lt;type&gt;(tile[3]); ++i3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="105" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a3c8bf06e0dcdc77a01af7ad46c905c74" prot="public" static="no">
        <name>LOOP_5R</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  LOOP_4R(type, tile)       \
  for (type i4 = 0; i4 &lt; static_cast&lt;type&gt;(tile[4]); ++i4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="109" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1afe466604b6299675885a003eb3cb8c54" prot="public" static="no">
        <name>LOOP_6R</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  LOOP_5R(type, tile)       \
  for (type i5 = 0; i5 &lt; static_cast&lt;type&gt;(tile[5]); ++i5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="113" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a8202b7d203536556a8c8408727396a74" prot="public" static="no">
        <name>LOOP_7R</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  LOOP_6R(type, tile)       \
  for (type i6 = 0; i6 &lt; static_cast&lt;type&gt;(tile[6]); ++i6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="117" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a79f11d58154e5fa3ffd464bffdb0bcb5" prot="public" static="no">
        <name>LOOP_8R</name>
        <param><defname>type</defname></param>
        <param><defname>tile</defname></param>
        <initializer>  LOOP_7R(type, tile)       \
  for (type i7 = 0; i7 &lt; static_cast&lt;type&gt;(tile[7]); ++i7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="121" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ae996fc2a066659bf932314dae409dbaf" prot="public" static="no">
        <name>LOOP_ARGS_1</name>
        <initializer>i0 + m_offset[0]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="125" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a3bc521864e962470986f049a5aa94601" prot="public" static="no">
        <name>LOOP_ARGS_2</name>
        <initializer>LOOP_ARGS_1, i1 + m_offset[1]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="126" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a7c7675568a167bbb995c35d9fcf2a89f" prot="public" static="no">
        <name>LOOP_ARGS_3</name>
        <initializer>LOOP_ARGS_2, i2 + m_offset[2]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="127" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a8523afd9911a782d16da748303debd4a" prot="public" static="no">
        <name>LOOP_ARGS_4</name>
        <initializer>LOOP_ARGS_3, i3 + m_offset[3]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="128" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1afac09a20e2ca72c798ff4830e6b07099" prot="public" static="no">
        <name>LOOP_ARGS_5</name>
        <initializer>LOOP_ARGS_4, i4 + m_offset[4]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="129" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a7620e0e3273721d13222826141c8e45a" prot="public" static="no">
        <name>LOOP_ARGS_6</name>
        <initializer>LOOP_ARGS_5, i5 + m_offset[5]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="130" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a7ff385c16c8fdaaa7abdb1f48048ebbb" prot="public" static="no">
        <name>LOOP_ARGS_7</name>
        <initializer>LOOP_ARGS_6, i6 + m_offset[6]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="131" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1abfc58bd0d9e740be10a0185e0a17ba1d" prot="public" static="no">
        <name>LOOP_ARGS_8</name>
        <initializer>LOOP_ARGS_7, i7 + m_offset[7]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="132" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a50adee89a5656e584fd67bbdcf9c4974" prot="public" static="no">
        <name>APPLY</name>
        <param><defname>func</defname></param>
        <param><defname>...</defname></param>
        <initializer>func(__VA_ARGS__);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="136" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a9bd57ece0accabe24d7008e6a605a80e" prot="public" static="no">
        <name>LOOP_R_1</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \
  for (type i0 = (type)0; i0 &lt; static_cast&lt;type&gt;(extent[d]); ++i0) { \
    APPLY(func, __VA_ARGS__, i0 + m_offset[d])                       \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="140" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a26e6835b123b353b95eccc0a362d422c" prot="public" static="no">
        <name>LOOP_R_2</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[d]); ++i1) { \
    LOOP_R_1(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \
             i1 + m_offset[d])                                       \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="146" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a926e0c5df218cd0200dc90cc60a63c56" prot="public" static="no">
        <name>LOOP_R_3</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[d]); ++i2) { \
    LOOP_R_2(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \
             i2 + m_offset[d])                                       \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="152" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a243d69696e0eebfcf4bb001c59e68ded" prot="public" static="no">
        <name>LOOP_R_4</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[d]); ++i3) { \
    LOOP_R_3(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \
             i3 + m_offset[d])                                       \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="158" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ac51456daff768bd682b69cbc244184df" prot="public" static="no">
        <name>LOOP_R_5</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[d]); ++i4) { \
    LOOP_R_4(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \
             i4 + m_offset[d])                                       \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="164" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ac1097ae0cf64c2f3369350fd5c5b6078" prot="public" static="no">
        <name>LOOP_R_6</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[d]); ++i5) { \
    LOOP_R_5(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \
             i5 + m_offset[d])                                       \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="170" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a60a3bc2d32d7c4fb88aa62e41968a8d3" prot="public" static="no">
        <name>LOOP_R_7</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[d]); ++i6) { \
    LOOP_R_6(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \
             i6 + m_offset[d])                                       \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="176" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1aab4a70c54b72552f6f164315a31858bb" prot="public" static="no">
        <name>LOOP_R_8</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[d]); ++i7) { \
    LOOP_R_7(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \
             i7 + m_offset[d])                                       \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="182" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ae567f70418f3b332863c18a7632c4e89" prot="public" static="no">
        <name>LOOP_L_1</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \
  for (type i0 = (type)0; i0 &lt; static_cast&lt;type&gt;(extent[d]); ++i0) { \
    APPLY(func, i0 + m_offset[d], __VA_ARGS__)                       \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="190" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a08923754bbb55a4587be5d828454f9ef" prot="public" static="no">
        <name>LOOP_L_2</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[d]); ++i1) { \
    LOOP_L_1(func, type, m_offset, extent, d - 1, i1 + m_offset[d],  \
             __VA_ARGS__)                                            \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="196" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a3e371a272faca44dbd56daef47e4ae91" prot="public" static="no">
        <name>LOOP_L_3</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[d]); ++i2) { \
    LOOP_L_2(func, type, m_offset, extent, d - 1, i2 + m_offset[d],  \
             __VA_ARGS__)                                            \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="202" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a400db2fc5bb1284f567d4467f6665cb5" prot="public" static="no">
        <name>LOOP_L_4</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[d]); ++i3) { \
    LOOP_L_3(func, type, m_offset, extent, d - 1, i3 + m_offset[d],  \
             __VA_ARGS__)                                            \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="208" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a480858d3428f52371e36d69a4018079d" prot="public" static="no">
        <name>LOOP_L_5</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[d]); ++i4) { \
    LOOP_L_4(func, type, m_offset, extent, d - 1, i4 + m_offset[d],  \
             __VA_ARGS__)                                            \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="214" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1aa2ff2a09355ce5b474228885cd8b6939" prot="public" static="no">
        <name>LOOP_L_6</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[d]); ++i5) { \
    LOOP_L_5(func, type, m_offset, extent, d - 1, i5 + m_offset[d],  \
             __VA_ARGS__)                                            \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="220" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a7219e9ccba4e08032b11ddfde3adadc0" prot="public" static="no">
        <name>LOOP_L_7</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[d]); ++i6) { \
    LOOP_L_6(func, type, m_offset, extent, d - 1, i6 + m_offset[d],  \
             __VA_ARGS__)                                            \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="226" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ae2eb30229320fdafb07d1614c4e58c24" prot="public" static="no">
        <name>LOOP_L_8</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[d]); ++i7) { \
    LOOP_L_7(func, type, m_offset, extent, d - 1, i7 + m_offset[d],  \
             __VA_ARGS__)                                            \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="232" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ad183c3f0b09989627d8148daa0c5ff06" prot="public" static="no">
        <name>LOOP_LAYOUT_1</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \
  for (type i0 = (type)0; i0 &lt; static_cast&lt;type&gt;(extent[0]); ++i0) { \
    APPLY(func, i0 + m_offset[0])                                    \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="240" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a4c5b89bbe6e70b1c41721c22438c4334" prot="public" static="no">
        <name>LOOP_LAYOUT_2</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i1) { \
      LOOP_L_1(func, type, m_offset, extent, rank - 2,                        \
               i1 + m_offset[rank - 1])                                       \
    }                                                                         \
  } else {                                                                    \
    for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[0]); ++i1) {        \
      LOOP_R_1(func, type, m_offset, extent, 1, i1 + m_offset[0])             \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="246" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a1e7e52a6c3dc4ba285c77f99233a8472" prot="public" static="no">
        <name>LOOP_LAYOUT_3</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i2) { \
      LOOP_L_2(func, type, m_offset, extent, rank - 2,                        \
               i2 + m_offset[rank - 1])                                       \
    }                                                                         \
  } else {                                                                    \
    for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[0]); ++i2) {        \
      LOOP_R_2(func, type, m_offset, extent, 1, i2 + m_offset[0])             \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="258" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ac67b69f15738b4b8d846746bab67939c" prot="public" static="no">
        <name>LOOP_LAYOUT_4</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i3) { \
      LOOP_L_3(func, type, m_offset, extent, rank - 2,                        \
               i3 + m_offset[rank - 1])                                       \
    }                                                                         \
  } else {                                                                    \
    for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[0]); ++i3) {        \
      LOOP_R_3(func, type, m_offset, extent, 1, i3 + m_offset[0])             \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="270" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a6bd3c2d63b1e36df2b6783cf2eaaf967" prot="public" static="no">
        <name>LOOP_LAYOUT_5</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i4) { \
      LOOP_L_4(func, type, m_offset, extent, rank - 2,                        \
               i4 + m_offset[rank - 1])                                       \
    }                                                                         \
  } else {                                                                    \
    for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[0]); ++i4) {        \
      LOOP_R_4(func, type, m_offset, extent, 1, i4 + m_offset[0])             \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="282" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a5b01f4e83bf6dc4276c172d1677bf30a" prot="public" static="no">
        <name>LOOP_LAYOUT_6</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i5) { \
      LOOP_L_5(func, type, m_offset, extent, rank - 2,                        \
               i5 + m_offset[rank - 1])                                       \
    }                                                                         \
  } else {                                                                    \
    for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[0]); ++i5) {        \
      LOOP_R_5(func, type, m_offset, extent, 1, i5 + m_offset[0])             \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="294" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a566999ed00f284539d7ead25501a2f8c" prot="public" static="no">
        <name>LOOP_LAYOUT_7</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i6) { \
      LOOP_L_6(func, type, m_offset, extent, rank - 2,                        \
               i6 + m_offset[rank - 1])                                       \
    }                                                                         \
  } else {                                                                    \
    for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[0]); ++i6) {        \
      LOOP_R_6(func, type, m_offset, extent, 1, i6 + m_offset[0])             \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="306" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1adb34a179b33e24bbf7bb253f86a48339" prot="public" static="no">
        <name>LOOP_LAYOUT_8</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i7) { \
      LOOP_L_7(func, type, m_offset, extent, rank - 2,                        \
               i7 + m_offset[rank - 1])                                       \
    }                                                                         \
  } else {                                                                    \
    for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[0]); ++i7) {        \
      LOOP_R_7(func, type, m_offset, extent, 1, i7 + m_offset[0])             \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="318" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a24eea7132f8a8b05a7c60918a8b702e1" prot="public" static="no">
        <name>TILE_LOOP_1</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                          \
    LOOP_LAYOUT_1(func, type, is_left, m_offset, extent_full, rank)    \
  } else {                                                             \
    LOOP_LAYOUT_1(func, type, is_left, m_offset, extent_partial, rank) \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="332" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1adc558e634b5322e5f3cc3ca8b00eb86c" prot="public" static="no">
        <name>TILE_LOOP_2</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                          \
    LOOP_LAYOUT_2(func, type, is_left, m_offset, extent_full, rank)    \
  } else {                                                             \
    LOOP_LAYOUT_2(func, type, is_left, m_offset, extent_partial, rank) \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="340" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a763b3b6de8ca56ca9473f0cdf43832af" prot="public" static="no">
        <name>TILE_LOOP_3</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                          \
    LOOP_LAYOUT_3(func, type, is_left, m_offset, extent_full, rank)    \
  } else {                                                             \
    LOOP_LAYOUT_3(func, type, is_left, m_offset, extent_partial, rank) \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="348" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ace1da3d8431b3d543673f5b764f93847" prot="public" static="no">
        <name>TILE_LOOP_4</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                          \
    LOOP_LAYOUT_4(func, type, is_left, m_offset, extent_full, rank)    \
  } else {                                                             \
    LOOP_LAYOUT_4(func, type, is_left, m_offset, extent_partial, rank) \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="356" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a1c9d4019e46128b2aab35f7b5a7b6c3c" prot="public" static="no">
        <name>TILE_LOOP_5</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                          \
    LOOP_LAYOUT_5(func, type, is_left, m_offset, extent_full, rank)    \
  } else {                                                             \
    LOOP_LAYOUT_5(func, type, is_left, m_offset, extent_partial, rank) \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="364" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a0714fd62e67c3ed3fda25d3df038ce84" prot="public" static="no">
        <name>TILE_LOOP_6</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                          \
    LOOP_LAYOUT_6(func, type, is_left, m_offset, extent_full, rank)    \
  } else {                                                             \
    LOOP_LAYOUT_6(func, type, is_left, m_offset, extent_partial, rank) \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="372" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a399cce565edaa1a72a99e7fcafd2a317" prot="public" static="no">
        <name>TILE_LOOP_7</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                          \
    LOOP_LAYOUT_7(func, type, is_left, m_offset, extent_full, rank)    \
  } else {                                                             \
    LOOP_LAYOUT_7(func, type, is_left, m_offset, extent_partial, rank) \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="380" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a4f80abb62a85c1fc5bfe860cfe3f71a8" prot="public" static="no">
        <name>TILE_LOOP_8</name>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                          \
    LOOP_LAYOUT_8(func, type, is_left, m_offset, extent_full, rank)    \
  } else {                                                             \
    LOOP_LAYOUT_8(func, type, is_left, m_offset, extent_partial, rank) \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="388" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a470627ef25305378201abca0d1898e91" prot="public" static="no">
        <name>APPLY_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>...</defname></param>
        <initializer>func(__VA_ARGS__, val);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="397" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a81202688c7d925858d5ca0613911579b" prot="public" static="no">
        <name>LOOP_R_1_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \
  for (type i0 = (type)0; i0 &lt; static_cast&lt;type&gt;(extent[d]); ++i0) { \
    APPLY_REDUX(val, func, __VA_ARGS__, i0 + m_offset[d])            \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="401" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a6633f6a66d41d7544416a004679b626c" prot="public" static="no">
        <name>LOOP_R_2_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[d]); ++i1) {      \
    LOOP_R_1_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                   i1 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="407" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a3bc19e2d140a286499da683312e25ebf" prot="public" static="no">
        <name>LOOP_R_3_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[d]); ++i2) {      \
    LOOP_R_2_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                   i2 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="413" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1aebaa9014c0e651cb9a03b1861ee4d05c" prot="public" static="no">
        <name>LOOP_R_4_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[d]); ++i3) {      \
    LOOP_R_3_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                   i3 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="419" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ac0b2df19e04c995fb9207d2a7a204235" prot="public" static="no">
        <name>LOOP_R_5_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[d]); ++i4) {      \
    LOOP_R_4_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                   i4 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="425" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a0c190fe0a77a5b2c35a456164854395f" prot="public" static="no">
        <name>LOOP_R_6_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[d]); ++i5) {      \
    LOOP_R_5_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                   i5 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="431" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ab606336d5ae7180e37b52917b56bb294" prot="public" static="no">
        <name>LOOP_R_7_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[d]); ++i6) {      \
    LOOP_R_6_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                   i6 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="437" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a4b0d6ace70e2cbca29097c205c23dc9e" prot="public" static="no">
        <name>LOOP_R_8_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[d]); ++i7) {      \
    LOOP_R_7_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                   i7 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="443" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a701b9be86a8b5da27183abe6f636c22a" prot="public" static="no">
        <name>LOOP_L_1_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \
  for (type i0 = (type)0; i0 &lt; static_cast&lt;type&gt;(extent[d]); ++i0) { \
    APPLY_REDUX(val, func, i0 + m_offset[d], __VA_ARGS__)            \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="451" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ab0c2116261e0305379cbe35aa8cf1a66" prot="public" static="no">
        <name>LOOP_L_2_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[d]); ++i1) {           \
    LOOP_L_1_REDUX(val, func, type, m_offset, extent, d - 1, i1 + m_offset[d], \
                   __VA_ARGS__)                                                \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="457" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a654c6948f0a13f057991670a16e45886" prot="public" static="no">
        <name>LOOP_L_3_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[d]); ++i2) {           \
    LOOP_L_2_REDUX(val, func, type, m_offset, extent, d - 1, i2 + m_offset[d], \
                   __VA_ARGS__)                                                \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="463" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ad124b708946e61487369817e28e846b6" prot="public" static="no">
        <name>LOOP_L_4_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[d]); ++i3) {           \
    LOOP_L_3_REDUX(val, func, type, m_offset, extent, d - 1, i3 + m_offset[d], \
                   __VA_ARGS__)                                                \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="469" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a6739dd257595320983b86f479465504b" prot="public" static="no">
        <name>LOOP_L_5_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[d]); ++i4) {           \
    LOOP_L_4_REDUX(val, func, type, m_offset, extent, d - 1, i4 + m_offset[d], \
                   __VA_ARGS__)                                                \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="475" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1adbdf226fbae10332debfb0a0eac0d33c" prot="public" static="no">
        <name>LOOP_L_6_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[d]); ++i5) {           \
    LOOP_L_5_REDUX(val, func, type, m_offset, extent, d - 1, i5 + m_offset[d], \
                   __VA_ARGS__)                                                \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="481" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a80fbe33e4b17cf3907122719e512fcfc" prot="public" static="no">
        <name>LOOP_L_7_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[d]); ++i6) {           \
    LOOP_L_6_REDUX(val, func, type, m_offset, extent, d - 1, i6 + m_offset[d], \
                   __VA_ARGS__)                                                \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="487" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a09e224000916bb24653be954c0ed822b" prot="public" static="no">
        <name>LOOP_L_8_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[d]); ++i7) {           \
    LOOP_L_7_REDUX(val, func, type, m_offset, extent, d - 1, i7 + m_offset[d], \
                   __VA_ARGS__)                                                \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="493" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ad4633b9aceec9186cef0a85d6dd1748e" prot="public" static="no">
        <name>LOOP_LAYOUT_1_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE                                                 \
  for (type i0 = (type)0; i0 &lt; static_cast&lt;type&gt;(extent[0]); ++i0) {          \
    APPLY_REDUX(val, func, i0 + m_offset[0])                                  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="500" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1abb57f80c93e5233cdb5f573cf189285f" prot="public" static="no">
        <name>LOOP_LAYOUT_2_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i1) { \
      LOOP_L_1_REDUX(val, func, type, m_offset, extent, rank - 2,             \
                     i1 + m_offset[rank - 1])                                 \
    }                                                                         \
  } else {                                                                    \
    for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[0]); ++i1) {        \
      LOOP_R_1_REDUX(val, func, type, m_offset, extent, 1, i1 + m_offset[0])  \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="506" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a2fc4957296af76117ec44a504894729b" prot="public" static="no">
        <name>LOOP_LAYOUT_3_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i2) { \
      LOOP_L_2_REDUX(val, func, type, m_offset, extent, rank - 2,             \
                     i2 + m_offset[rank - 1])                                 \
    }                                                                         \
  } else {                                                                    \
    for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[0]); ++i2) {        \
      LOOP_R_2_REDUX(val, func, type, m_offset, extent, 1, i2 + m_offset[0])  \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="518" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a1446350ef142fdab02e2a6ecdcce9474" prot="public" static="no">
        <name>LOOP_LAYOUT_4_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i3) { \
      LOOP_L_3_REDUX(val, func, type, m_offset, extent, rank - 2,             \
                     i3 + m_offset[rank - 1])                                 \
    }                                                                         \
  } else {                                                                    \
    for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[0]); ++i3) {        \
      LOOP_R_3_REDUX(val, func, type, m_offset, extent, 1, i3 + m_offset[0])  \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="530" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a74c99f2c630ed5b80b75fbadf6cacdf3" prot="public" static="no">
        <name>LOOP_LAYOUT_5_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i4) { \
      LOOP_L_4_REDUX(val, func, type, m_offset, extent, rank - 2,             \
                     i4 + m_offset[rank - 1])                                 \
    }                                                                         \
  } else {                                                                    \
    for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[0]); ++i4) {        \
      LOOP_R_4_REDUX(val, func, type, m_offset, extent, 1, i4 + m_offset[0])  \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="542" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1afbc7a432e8cfda39b2d38533b466ea6f" prot="public" static="no">
        <name>LOOP_LAYOUT_6_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i5) { \
      LOOP_L_5_REDUX(val, func, type, m_offset, extent, rank - 2,             \
                     i5 + m_offset[rank - 1])                                 \
    }                                                                         \
  } else {                                                                    \
    for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[0]); ++i5) {        \
      LOOP_R_5_REDUX(val, func, type, m_offset, extent, 1, i5 + m_offset[0])  \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="554" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a0dbe74de672bc22492b858bcb95a534e" prot="public" static="no">
        <name>LOOP_LAYOUT_7_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i6) { \
      LOOP_L_6_REDUX(val, func, type, m_offset, extent, rank - 2,             \
                     i6 + m_offset[rank - 1])                                 \
    }                                                                         \
  } else {                                                                    \
    for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[0]); ++i6) {        \
      LOOP_R_6_REDUX(val, func, type, m_offset, extent, 1, i6 + m_offset[0])  \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="566" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="566" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ab857afae2d5b55cf5f9fca8b6e921921" prot="public" static="no">
        <name>LOOP_LAYOUT_8_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i7) { \
      LOOP_L_7_REDUX(val, func, type, m_offset, extent, rank - 2,             \
                     i7 + m_offset[rank - 1])                                 \
    }                                                                         \
  } else {                                                                    \
    for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[0]); ++i7) {        \
      LOOP_R_7_REDUX(val, func, type, m_offset, extent, 1, i7 + m_offset[0])  \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="578" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="578" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a15ba8c8f3c0ebe6ed474273f132fc623" prot="public" static="no">
        <name>TILE_LOOP_1_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                  \
    LOOP_LAYOUT_1_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \
  } else {                                                                     \
    LOOP_LAYOUT_1_REDUX(val, func, type, is_left, m_offset, extent_partial,    \
                        rank)                                                  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="592" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a0dafdd80b83ac6deb59b2e232ab25a7f" prot="public" static="no">
        <name>TILE_LOOP_2_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                  \
    LOOP_LAYOUT_2_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \
  } else {                                                                     \
    LOOP_LAYOUT_2_REDUX(val, func, type, is_left, m_offset, extent_partial,    \
                        rank)                                                  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="601" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ae4fa5cc90361a4e51970fd7aff476512" prot="public" static="no">
        <name>TILE_LOOP_3_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                  \
    LOOP_LAYOUT_3_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \
  } else {                                                                     \
    LOOP_LAYOUT_3_REDUX(val, func, type, is_left, m_offset, extent_partial,    \
                        rank)                                                  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="610" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ab11ffb17568891e2f8d42a75e3215e3c" prot="public" static="no">
        <name>TILE_LOOP_4_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                  \
    LOOP_LAYOUT_4_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \
  } else {                                                                     \
    LOOP_LAYOUT_4_REDUX(val, func, type, is_left, m_offset, extent_partial,    \
                        rank)                                                  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="619" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1adf630851f31aa8f0abb716dfd87bc85d" prot="public" static="no">
        <name>TILE_LOOP_5_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                  \
    LOOP_LAYOUT_5_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \
  } else {                                                                     \
    LOOP_LAYOUT_5_REDUX(val, func, type, is_left, m_offset, extent_partial,    \
                        rank)                                                  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="628" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a799b1533dd0f6db97067ca5658250193" prot="public" static="no">
        <name>TILE_LOOP_6_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                  \
    LOOP_LAYOUT_6_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \
  } else {                                                                     \
    LOOP_LAYOUT_6_REDUX(val, func, type, is_left, m_offset, extent_partial,    \
                        rank)                                                  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="637" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a4fee61adddf3dd6f5006191e63d3008d" prot="public" static="no">
        <name>TILE_LOOP_7_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                  \
    LOOP_LAYOUT_7_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \
  } else {                                                                     \
    LOOP_LAYOUT_7_REDUX(val, func, type, is_left, m_offset, extent_partial,    \
                        rank)                                                  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="646" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="645" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1abb740cf8f87441ad2a948c6c0f4cab4c" prot="public" static="no">
        <name>TILE_LOOP_8_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                  \
    LOOP_LAYOUT_8_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \
  } else {                                                                     \
    LOOP_LAYOUT_8_REDUX(val, func, type, is_left, m_offset, extent_partial,    \
                        rank)                                                  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="655" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="654" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a4edc1eedaa10c856a4f195e33f65dad1" prot="public" static="no">
        <name>TAGGED_APPLY</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>...</defname></param>
        <initializer>func(tag, __VA_ARGS__);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="665" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a77a75e63df3ba9078562bd99e8a6b711" prot="public" static="no">
        <name>TAGGED_LOOP_R_1</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \
  for (type i0 = (type)0; i0 &lt; static_cast&lt;type&gt;(extent[d]); ++i0) { \
    TAGGED_APPLY(tag, func, __VA_ARGS__, i0 + m_offset[d])           \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="669" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="669" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ad1f59b9093e8fbf52730e7ef34467f90" prot="public" static="no">
        <name>TAGGED_LOOP_R_2</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[d]); ++i1) {       \
    TAGGED_LOOP_R_1(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                    i1 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="675" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="675" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1aa13c3d6121dc4892269078505303fdc5" prot="public" static="no">
        <name>TAGGED_LOOP_R_3</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[d]); ++i2) {       \
    TAGGED_LOOP_R_2(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                    i2 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="681" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="681" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1abc8a9d1fedb0c6d545f246416ae83f7b" prot="public" static="no">
        <name>TAGGED_LOOP_R_4</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[d]); ++i3) {       \
    TAGGED_LOOP_R_3(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                    i3 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="687" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a4e4420331eb05e73f7fea0fb053bcd7c" prot="public" static="no">
        <name>TAGGED_LOOP_R_5</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[d]); ++i4) {       \
    TAGGED_LOOP_R_4(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                    i4 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="693" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a5838e3273946c3fa06f1fff419db2201" prot="public" static="no">
        <name>TAGGED_LOOP_R_6</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[d]); ++i5) {       \
    TAGGED_LOOP_R_5(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                    i5 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="699" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="699" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ab74df5a136fea365257f1b42afcb39d4" prot="public" static="no">
        <name>TAGGED_LOOP_R_7</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[d]); ++i6) {       \
    TAGGED_LOOP_R_6(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                    i6 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="705" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a1e5d5596aa9cb7c59b1f7c8caf4b5892" prot="public" static="no">
        <name>TAGGED_LOOP_R_8</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[d]); ++i7) {       \
    TAGGED_LOOP_R_7(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \
                    i7 + m_offset[d])                                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="711" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1afc84b3719208441e55e01ebe7052b4f7" prot="public" static="no">
        <name>TAGGED_LOOP_L_1</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \
  for (type i0 = (type)0; i0 &lt; static_cast&lt;type&gt;(extent[d]); ++i0) { \
    TAGGED_APPLY(tag, func, i0 + m_offset[d], __VA_ARGS__)           \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="719" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="719" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a5506d9866d8cb6da2a205d11e8b4e298" prot="public" static="no">
        <name>TAGGED_LOOP_L_2</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[d]); ++i1) { \
    TAGGED_LOOP_L_1(tag, func, type, m_offset, extent, d - 1,        \
                    i1 + m_offset[d], __VA_ARGS__)                   \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="725" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a798341161fb6e786a80ea0ae3b64efaa" prot="public" static="no">
        <name>TAGGED_LOOP_L_3</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[d]); ++i2) { \
    TAGGED_LOOP_L_2(tag, func, type, m_offset, extent, d - 1,        \
                    i2 + m_offset[d], __VA_ARGS__)                   \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="731" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ab65a77ba475a1291fe570dbbee20b6b0" prot="public" static="no">
        <name>TAGGED_LOOP_L_4</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[d]); ++i3) { \
    TAGGED_LOOP_L_3(tag, func, type, m_offset, extent, d - 1,        \
                    i3 + m_offset[d], __VA_ARGS__)                   \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="737" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a1572c468e477971c0ef96311e885b02d" prot="public" static="no">
        <name>TAGGED_LOOP_L_5</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[d]); ++i4) { \
    TAGGED_LOOP_L_4(tag, func, type, m_offset, extent, d - 1,        \
                    i4 + m_offset[d], __VA_ARGS__)                   \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="743" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="743" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1af30a5b81ca2b98fd5049ea951c71125f" prot="public" static="no">
        <name>TAGGED_LOOP_L_6</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[d]); ++i5) { \
    TAGGED_LOOP_L_5(tag, func, type, m_offset, extent, d - 1,        \
                    i5 + m_offset[d], __VA_ARGS__)                   \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="749" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="749" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a391ccee17359a1782d64e6ea1c4e20a5" prot="public" static="no">
        <name>TAGGED_LOOP_L_7</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[d]); ++i6) { \
    TAGGED_LOOP_L_6(tag, func, type, m_offset, extent, d - 1,        \
                    i6 + m_offset[d], __VA_ARGS__)                   \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="755" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="755" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a58067f8501658b0e2d183277fc6dcb50" prot="public" static="no">
        <name>TAGGED_LOOP_L_8</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[d]); ++i7) { \
    TAGGED_LOOP_L_7(tag, func, type, m_offset, extent, d - 1,        \
                    i7 + m_offset[d], __VA_ARGS__)                   \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="761" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ae4be069e27b20887c7291c3e85b71881" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_1</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE                                                  \
  for (type i0 = (type)0; i0 &lt; static_cast&lt;type&gt;(extent[0]); ++i0) {           \
    TAGGED_APPLY(tag, func, i0 + m_offset[0])                                  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="769" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="769" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a12a9825e608558f493754b1ffae41d53" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_2</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                               \
    for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i1) {  \
      TAGGED_LOOP_L_1(tag, func, type, m_offset, extent, rank - 2,             \
                      i1 + m_offset[rank - 1])                                 \
    }                                                                          \
  } else {                                                                     \
    for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[0]); ++i1) {         \
      TAGGED_LOOP_R_1(tag, func, type, m_offset, extent, 1, i1 + m_offset[0])  \
    }                                                                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="775" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a9d17bae5e98e993a4848527ed643bab0" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_3</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                               \
    for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i2) {  \
      TAGGED_LOOP_L_2(tag, func, type, m_offset, extent, rank - 2,             \
                      i2 + m_offset[rank - 1])                                 \
    }                                                                          \
  } else {                                                                     \
    for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[0]); ++i2) {         \
      TAGGED_LOOP_R_2(tag, func, type, m_offset, extent, 1, i2 + m_offset[0])  \
    }                                                                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="787" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="787" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a0fc29f4047983556d7525e1b69a00ab1" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_4</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                               \
    for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i3) {  \
      TAGGED_LOOP_L_3(tag, func, type, m_offset, extent, rank - 2,             \
                      i3 + m_offset[rank - 1])                                 \
    }                                                                          \
  } else {                                                                     \
    for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[0]); ++i3) {         \
      TAGGED_LOOP_R_3(tag, func, type, m_offset, extent, 1, i3 + m_offset[0])  \
    }                                                                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="799" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="799" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ab81429f058cbbf18cfe3d8082c5bc6b2" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_5</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                               \
    for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i4) {  \
      TAGGED_LOOP_L_4(tag, func, type, m_offset, extent, rank - 2,             \
                      i4 + m_offset[rank - 1])                                 \
    }                                                                          \
  } else {                                                                     \
    for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[0]); ++i4) {         \
      TAGGED_LOOP_R_4(tag, func, type, m_offset, extent, 1, i4 + m_offset[0])  \
    }                                                                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="811" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ad79286c12c345aabc9d97809368ba221" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_6</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                               \
    for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i5) {  \
      TAGGED_LOOP_L_5(tag, func, type, m_offset, extent, rank - 2,             \
                      i5 + m_offset[rank - 1])                                 \
    }                                                                          \
  } else {                                                                     \
    for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[0]); ++i5) {         \
      TAGGED_LOOP_R_5(tag, func, type, m_offset, extent, 1, i5 + m_offset[0])  \
    }                                                                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="823" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="823" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ade72309a3eae8ffada8ab62e707567e4" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_7</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                               \
    for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i6) {  \
      TAGGED_LOOP_L_6(tag, func, type, m_offset, extent, rank - 2,             \
                      i6 + m_offset[rank - 1])                                 \
    }                                                                          \
  } else {                                                                     \
    for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[0]); ++i6) {         \
      TAGGED_LOOP_R_6(tag, func, type, m_offset, extent, 1, i6 + m_offset[0])  \
    }                                                                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="835" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ac54ac66114c734184cb9ac6f3495af17" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_8</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                               \
    for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i7) {  \
      TAGGED_LOOP_L_7(tag, func, type, m_offset, extent, rank - 2,             \
                      i7 + m_offset[rank - 1])                                 \
    }                                                                          \
  } else {                                                                     \
    for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[0]); ++i7) {         \
      TAGGED_LOOP_R_7(tag, func, type, m_offset, extent, 1, i7 + m_offset[0])  \
    }                                                                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="847" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1afd248e399517c1a9dcaed4a332dde511" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_1</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                \
    TAGGED_LOOP_LAYOUT_1(tag, func, type, is_left, m_offset, extent_full,    \
                         rank)                                               \
  } else {                                                                   \
    TAGGED_LOOP_LAYOUT_1(tag, func, type, is_left, m_offset, extent_partial, \
                         rank)                                               \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="861" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a6bc279698deaabcda93e47e07f5055bb" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_2</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                \
    TAGGED_LOOP_LAYOUT_2(tag, func, type, is_left, m_offset, extent_full,    \
                         rank)                                               \
  } else {                                                                   \
    TAGGED_LOOP_LAYOUT_2(tag, func, type, is_left, m_offset, extent_partial, \
                         rank)                                               \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="871" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1afaea9536735344fa9f48b987ec03075c" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_3</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                \
    TAGGED_LOOP_LAYOUT_3(tag, func, type, is_left, m_offset, extent_full,    \
                         rank)                                               \
  } else {                                                                   \
    TAGGED_LOOP_LAYOUT_3(tag, func, type, is_left, m_offset, extent_partial, \
                         rank)                                               \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="881" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="880" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a1c0c3704ac0acd7fb9413ce531426f7a" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_4</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                \
    TAGGED_LOOP_LAYOUT_4(tag, func, type, is_left, m_offset, extent_full,    \
                         rank)                                               \
  } else {                                                                   \
    TAGGED_LOOP_LAYOUT_4(tag, func, type, is_left, m_offset, extent_partial, \
                         rank)                                               \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="891" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="890" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a0a7853abac5077a93f3030ecb41a6083" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_5</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                \
    TAGGED_LOOP_LAYOUT_5(tag, func, type, is_left, m_offset, extent_full,    \
                         rank)                                               \
  } else {                                                                   \
    TAGGED_LOOP_LAYOUT_5(tag, func, type, is_left, m_offset, extent_partial, \
                         rank)                                               \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="901" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="900" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1abdaf75830914cf9fe74e9a9072942d9f" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_6</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                \
    TAGGED_LOOP_LAYOUT_6(tag, func, type, is_left, m_offset, extent_full,    \
                         rank)                                               \
  } else {                                                                   \
    TAGGED_LOOP_LAYOUT_6(tag, func, type, is_left, m_offset, extent_partial, \
                         rank)                                               \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="911" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="910" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a6ea11d50c0baf68de4134b3f34ef1e8f" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_7</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                \
    TAGGED_LOOP_LAYOUT_7(tag, func, type, is_left, m_offset, extent_full,    \
                         rank)                                               \
  } else {                                                                   \
    TAGGED_LOOP_LAYOUT_7(tag, func, type, is_left, m_offset, extent_partial, \
                         rank)                                               \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="921" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="920" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ae6a86658caa4c203817c806c1c6b2471" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_8</name>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                \
    TAGGED_LOOP_LAYOUT_8(tag, func, type, is_left, m_offset, extent_full,    \
                         rank)                                               \
  } else {                                                                   \
    TAGGED_LOOP_LAYOUT_8(tag, func, type, is_left, m_offset, extent_partial, \
                         rank)                                               \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="931" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1aef487337257e1ba369c12fd008fa031d" prot="public" static="no">
        <name>TAGGED_APPLY_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>...</defname></param>
        <initializer>func(tag, __VA_ARGS__, val);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="942" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="942" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a70cd2c18c7347ebbfdfc4f270c1a1fb0" prot="public" static="no">
        <name>TAGGED_LOOP_R_1_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE                                                 \
  for (type i0 = (type)0; i0 &lt; static_cast&lt;type&gt;(extent[d]); ++i0) {          \
    TAGGED_APPLY_REDUX(val, tag, func, __VA_ARGS__, i0 + m_offset[d])         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="946" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="946" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a617a2a728da9d48078b01322064f84aa" prot="public" static="no">
        <name>TAGGED_LOOP_R_2_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[d]); ++i1) {          \
    TAGGED_LOOP_R_1_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \
                          __VA_ARGS__, i1 + m_offset[d])                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="952" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="952" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a46a6244e42215ff8d17247f22bcc0852" prot="public" static="no">
        <name>TAGGED_LOOP_R_3_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[d]); ++i2) {          \
    TAGGED_LOOP_R_2_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \
                          __VA_ARGS__, i2 + m_offset[d])                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="958" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="958" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ad4fdc4bdeed3219d47d530c6d4dd69f6" prot="public" static="no">
        <name>TAGGED_LOOP_R_4_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[d]); ++i3) {          \
    TAGGED_LOOP_R_3_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \
                          __VA_ARGS__, i3 + m_offset[d])                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="964" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="964" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a0b4a48a49441797619295d4d597b6a25" prot="public" static="no">
        <name>TAGGED_LOOP_R_5_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[d]); ++i4) {          \
    TAGGED_LOOP_R_4_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \
                          __VA_ARGS__, i4 + m_offset[d])                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="970" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="970" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a6f1077c1ca562aa2747974f594e9899f" prot="public" static="no">
        <name>TAGGED_LOOP_R_6_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[d]); ++i5) {          \
    TAGGED_LOOP_R_5_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \
                          __VA_ARGS__, i5 + m_offset[d])                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="976" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="976" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a17adec8124c572a9fb09cc8b4b2aca02" prot="public" static="no">
        <name>TAGGED_LOOP_R_7_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[d]); ++i6) {          \
    TAGGED_LOOP_R_6_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \
                          __VA_ARGS__, i6 + m_offset[d])                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="982" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="982" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a3a9f34220e026938a8d7db91dfb9b6eb" prot="public" static="no">
        <name>TAGGED_LOOP_R_8_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[d]); ++i7) {          \
    TAGGED_LOOP_R_7_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \
                          __VA_ARGS__, i7 + m_offset[d])                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="988" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="988" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1aae56d4879806af6505fcbe58e5c4564c" prot="public" static="no">
        <name>TAGGED_LOOP_L_1_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE                                                 \
  for (type i0 = (type)0; i0 &lt; static_cast&lt;type&gt;(extent[d]); ++i0) {          \
    TAGGED_APPLY_REDUX(val, tag, func, i0 + m_offset[d], __VA_ARGS__)         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="996" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="996" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1abfaee8aea19268edd0fe8a42b964ee58" prot="public" static="no">
        <name>TAGGED_LOOP_L_2_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[d]); ++i1) {          \
    TAGGED_LOOP_L_1_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \
                          i1 + m_offset[d], __VA_ARGS__)                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1002" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1002" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a0787032c63be0847fa47511b79d075ad" prot="public" static="no">
        <name>TAGGED_LOOP_L_3_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[d]); ++i2) {          \
    TAGGED_LOOP_L_2_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \
                          i2 + m_offset[d], __VA_ARGS__)                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1008" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1008" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a19b0ea177f23bd3d6050e345857ef950" prot="public" static="no">
        <name>TAGGED_LOOP_L_4_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[d]); ++i3) {          \
    TAGGED_LOOP_L_3_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \
                          i3 + m_offset[d], __VA_ARGS__)                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1014" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1014" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a1e2642fda3eab368d966811d1428679c" prot="public" static="no">
        <name>TAGGED_LOOP_L_5_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[d]); ++i4) {          \
    TAGGED_LOOP_L_4_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \
                          i4 + m_offset[d], __VA_ARGS__)                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1020" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1020" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1aa8ffad140eda8a415eda6141b426a9e0" prot="public" static="no">
        <name>TAGGED_LOOP_L_6_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[d]); ++i5) {          \
    TAGGED_LOOP_L_5_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \
                          i5 + m_offset[d], __VA_ARGS__)                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1026" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1026" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a9b052cbc679ea915dcdc0b3c3f2a6f20" prot="public" static="no">
        <name>TAGGED_LOOP_L_7_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[d]); ++i6) {          \
    TAGGED_LOOP_L_6_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \
                          i6 + m_offset[d], __VA_ARGS__)                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1032" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1032" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ac2615b539fa027ba490d9f487a1d7323" prot="public" static="no">
        <name>TAGGED_LOOP_L_8_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>d</defname></param>
        <param><defname>...</defname></param>
        <initializer>  for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[d]); ++i7) {          \
    TAGGED_LOOP_L_7_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \
                          i7 + m_offset[d], __VA_ARGS__)                      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1038" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1038" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a118cec542a0059af6d6c8ea42bb2dd6b" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_1_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  KOKKOS_ENABLE_IVDEP_MDRANGE                                               \
  for (type i0 = (type)0; i0 &lt; static_cast&lt;type&gt;(extent[0]); ++i0) {        \
    TAGGED_APPLY_REDUX(val, tag, func, i0 + m_offset[0])                    \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1046" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1045" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1acc8c1b6281c14c657b0b05a5162f1639" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_2_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i1) { \
      TAGGED_LOOP_L_1_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \
                            i1 + m_offset[rank - 1])                          \
    }                                                                         \
  } else {                                                                    \
    for (type i1 = (type)0; i1 &lt; static_cast&lt;type&gt;(extent[0]); ++i1) {        \
      TAGGED_LOOP_R_1_REDUX(val, tag, func, type, m_offset, extent, 1,        \
                            i1 + m_offset[0])                                 \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1053" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1052" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a34b16e8d85745dba4925df4e7a6056b1" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_3_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i2) { \
      TAGGED_LOOP_L_2_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \
                            i2 + m_offset[rank - 1])                          \
    }                                                                         \
  } else {                                                                    \
    for (type i2 = (type)0; i2 &lt; static_cast&lt;type&gt;(extent[0]); ++i2) {        \
      TAGGED_LOOP_R_2_REDUX(val, tag, func, type, m_offset, extent, 1,        \
                            i2 + m_offset[0])                                 \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1067" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1066" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a6f6e99f867c98aa8a1032498a53fbf9a" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_4_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i3) { \
      TAGGED_LOOP_L_3_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \
                            i3 + m_offset[rank - 1])                          \
    }                                                                         \
  } else {                                                                    \
    for (type i3 = (type)0; i3 &lt; static_cast&lt;type&gt;(extent[0]); ++i3) {        \
      TAGGED_LOOP_R_3_REDUX(val, tag, func, type, m_offset, extent, 1,        \
                            i3 + m_offset[0])                                 \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1081" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1080" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a71b56ebee08f5adcc606ddb64a2fa49a" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_5_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i4) { \
      TAGGED_LOOP_L_4_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \
                            i4 + m_offset[rank - 1])                          \
    }                                                                         \
  } else {                                                                    \
    for (type i4 = (type)0; i4 &lt; static_cast&lt;type&gt;(extent[0]); ++i4) {        \
      TAGGED_LOOP_R_4_REDUX(val, tag, func, type, m_offset, extent, 1,        \
                            i4 + m_offset[0])                                 \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1095" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1094" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a5dcddc1538081eb35c21df4ee610c4be" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_6_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i5) { \
      TAGGED_LOOP_L_5_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \
                            i5 + m_offset[rank - 1])                          \
    }                                                                         \
  } else {                                                                    \
    for (type i5 = (type)0; i5 &lt; static_cast&lt;type&gt;(extent[0]); ++i5) {        \
      TAGGED_LOOP_R_5_REDUX(val, tag, func, type, m_offset, extent, 1,        \
                            i5 + m_offset[0])                                 \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1109" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a4d7c9fe5e31ee3bb81c35188d9414e7a" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_7_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i6) { \
      TAGGED_LOOP_L_6_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \
                            i6 + m_offset[rank - 1])                          \
    }                                                                         \
  } else {                                                                    \
    for (type i6 = (type)0; i6 &lt; static_cast&lt;type&gt;(extent[0]); ++i6) {        \
      TAGGED_LOOP_R_6_REDUX(val, tag, func, type, m_offset, extent, 1,        \
                            i6 + m_offset[0])                                 \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1123" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a30f12edd0dd765dae998f1c45eb82183" prot="public" static="no">
        <name>TAGGED_LOOP_LAYOUT_8_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (is_left) {                                                              \
    for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[rank - 1]); ++i7) { \
      TAGGED_LOOP_L_7_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \
                            i7 + m_offset[rank - 1])                          \
    }                                                                         \
  } else {                                                                    \
    for (type i7 = (type)0; i7 &lt; static_cast&lt;type&gt;(extent[0]); ++i7) {        \
      TAGGED_LOOP_R_7_REDUX(val, tag, func, type, m_offset, extent, 1,        \
                            i7 + m_offset[0])                                 \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1137" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ab6dfa0943ee0dd3d22422d68475b90dd" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_1_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                 \
    TAGGED_LOOP_LAYOUT_1_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_full, rank)                             \
  } else {                                                                    \
    TAGGED_LOOP_LAYOUT_1_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_partial, rank)                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1152" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1afd3fb2da7bbe74a0c07cf5209df86774" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_2_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                 \
    TAGGED_LOOP_LAYOUT_2_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_full, rank)                             \
  } else {                                                                    \
    TAGGED_LOOP_LAYOUT_2_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_partial, rank)                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1162" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ac1b7b5cfb461423331e777baa5a7f17e" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_3_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                 \
    TAGGED_LOOP_LAYOUT_3_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_full, rank)                             \
  } else {                                                                    \
    TAGGED_LOOP_LAYOUT_3_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_partial, rank)                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1172" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ad6f4ed69d951558e30fa0dd5c87b87b6" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_4_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                 \
    TAGGED_LOOP_LAYOUT_4_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_full, rank)                             \
  } else {                                                                    \
    TAGGED_LOOP_LAYOUT_4_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_partial, rank)                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1182" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a213d30606577abce81425334889b8e51" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_5_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                 \
    TAGGED_LOOP_LAYOUT_5_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_full, rank)                             \
  } else {                                                                    \
    TAGGED_LOOP_LAYOUT_5_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_partial, rank)                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1192" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1acfca6fae8d19a8acd9da717d3f8c1c9c" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_6_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                 \
    TAGGED_LOOP_LAYOUT_6_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_full, rank)                             \
  } else {                                                                    \
    TAGGED_LOOP_LAYOUT_6_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_partial, rank)                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1202" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1ab4556466d26d32145dc8cde3423af356" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_7_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                 \
    TAGGED_LOOP_LAYOUT_7_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_full, rank)                             \
  } else {                                                                    \
    TAGGED_LOOP_LAYOUT_7_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_partial, rank)                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1212" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_kokkos_exp___host___iterate_tile_8hpp_1a1a9d78352dc13e0a95aea5dcd6220faa" prot="public" static="no">
        <name>TAGGED_TILE_LOOP_8_REDUX</name>
        <param><defname>val</defname></param>
        <param><defname>tag</defname></param>
        <param><defname>func</defname></param>
        <param><defname>type</defname></param>
        <param><defname>is_left</defname></param>
        <param><defname>cond</defname></param>
        <param><defname>m_offset</defname></param>
        <param><defname>extent_full</defname></param>
        <param><defname>extent_partial</defname></param>
        <param><defname>rank</defname></param>
        <initializer>  if (cond) {                                                                 \
    TAGGED_LOOP_LAYOUT_8_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_full, rank)                             \
  } else {                                                                    \
    TAGGED_LOOP_LAYOUT_8_REDUX(val, tag, func, type, is_left, m_offset,       \
                               extent_partial, rank)                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" line="1222" column="9" bodyfile="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp" bodystart="1221" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos<sp/>v.<sp/>3.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>(2020)<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC<sp/>(NTESS).</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>the<sp/>U.S.<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//<sp/>met:</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Corporation<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>NTESS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>NTESS<sp/>OR<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>Christian<sp/>R.<sp/>Trott<sp/>(crtrott@sandia.gov)</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//<sp/>************************************************************************</highlight></codeline>
<codeline lineno="42"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="43"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>KOKKOS_HOST_EXP_ITERATE_TILE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KOKKOS_HOST_EXP_ITERATE_TILE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Kokkos_Macros.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(KOKKOS_ENABLE_AGGRESSIVE_VECTORIZATION)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(KOKKOS_ENABLE_PRAGMA_IVDEP)<sp/>&amp;&amp;<sp/>!defined(__CUDA_ARCH__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KOKKOS_MDRANGE_IVDEP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KOKKOS_MDRANGE_IVDEP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/>_Pragma(&quot;ivdep&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KOKKOS_ENABLE_IVDEP_MDRANGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Kokkos<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Temporary,<sp/>for<sp/>testing<sp/>new<sp/>loop<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KOKKOS_ENABLE_NEW_LOOP_MACROS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_1L(type,<sp/>tile)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[0]);<sp/>++i0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_2L(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[1]);<sp/>++i1)<sp/>LOOP_1L(type,<sp/>tile)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_3L(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[2]);<sp/>++i2)<sp/>LOOP_2L(type,<sp/>tile)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_4L(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[3]);<sp/>++i3)<sp/>LOOP_3L(type,<sp/>tile)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_5L(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[4]);<sp/>++i4)<sp/>LOOP_4L(type,<sp/>tile)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_6L(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[5]);<sp/>++i5)<sp/>LOOP_5L(type,<sp/>tile)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_7L(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[6]);<sp/>++i6)<sp/>LOOP_6L(type,<sp/>tile)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_8L(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[7]);<sp/>++i7)<sp/>LOOP_7L(type,<sp/>tile)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_1R(type,<sp/>tile)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[0]);<sp/>++i0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_2R(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/>LOOP_1R(type,<sp/>tile)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[1]);<sp/>++i1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_3R(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/>LOOP_2R(type,<sp/>tile)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[2]);<sp/>++i2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_4R(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/>LOOP_3R(type,<sp/>tile)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[3]);<sp/>++i3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_5R(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/>LOOP_4R(type,<sp/>tile)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[4]);<sp/>++i4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_6R(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/>LOOP_5R(type,<sp/>tile)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[5]);<sp/>++i5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_7R(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/>LOOP_6R(type,<sp/>tile)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[6]);<sp/>++i6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_8R(type,<sp/>tile)<sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/>LOOP_7R(type,<sp/>tile)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(tile[7]);<sp/>++i7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_ARGS_1<sp/>i0<sp/>+<sp/>m_offset[0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_ARGS_2<sp/>LOOP_ARGS_1,<sp/>i1<sp/>+<sp/>m_offset[1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_ARGS_3<sp/>LOOP_ARGS_2,<sp/>i2<sp/>+<sp/>m_offset[2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_ARGS_4<sp/>LOOP_ARGS_3,<sp/>i3<sp/>+<sp/>m_offset[3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_ARGS_5<sp/>LOOP_ARGS_4,<sp/>i4<sp/>+<sp/>m_offset[4]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_ARGS_6<sp/>LOOP_ARGS_5,<sp/>i5<sp/>+<sp/>m_offset[5]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_ARGS_7<sp/>LOOP_ARGS_6,<sp/>i6<sp/>+<sp/>m_offset[6]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_ARGS_8<sp/>LOOP_ARGS_7,<sp/>i7<sp/>+<sp/>m_offset[7]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>New<sp/>Loop<sp/>Macros...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parallel_for,<sp/>non-tagged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>APPLY(func,<sp/>...)<sp/>func(__VA_ARGS__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LayoutRight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>d<sp/>=<sp/>0<sp/>to<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_1(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>(type)0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>APPLY(func,<sp/>__VA_ARGS__,<sp/>i0<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_2(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_1(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_3(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_2(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_4(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i3)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_3(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i3<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_5(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i4)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_4(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i4<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_6(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i5)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_5(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i5<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_7(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i6)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_6(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i6<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_8(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i7)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_7(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i7<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LayoutLeft</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>d<sp/>=<sp/>rank-1<sp/>to<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_1(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>(type)0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>APPLY(func,<sp/>i0<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_2(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_1(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i1<sp/>+<sp/>m_offset[d],<sp/><sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_3(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_2(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i2<sp/>+<sp/>m_offset[d],<sp/><sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_4(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i3)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_3(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i3<sp/>+<sp/>m_offset[d],<sp/><sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_5(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i4)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_4(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i4<sp/>+<sp/>m_offset[d],<sp/><sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_6(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i5)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_5(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i5<sp/>+<sp/>m_offset[d],<sp/><sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_7(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i6)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_6(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i6<sp/>+<sp/>m_offset[d],<sp/><sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_8(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i7)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_7(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i7<sp/>+<sp/>m_offset[d],<sp/><sp/>\</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Left<sp/>vs<sp/>Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>rank<sp/>not<sp/>necessary<sp/>to<sp/>pass<sp/>through,<sp/>can<sp/>hardcode<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_1(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>(type)0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>APPLY(func,<sp/>i0<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_2(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_1(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_1(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i1<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_3(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_2(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_2(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i2<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="268"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_4(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i3)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_3(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i3<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i3)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_3(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i3<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_5(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i4)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_4(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i4<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i4)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_4(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i4<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_6(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i5)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_5(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i5<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i5)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_5(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i5<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_7(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i6)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_6(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i6<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i6)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_6(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i6<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_8(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="319"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i7)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_7(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i7<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="324"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i7)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="326"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_7(func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i7<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Partial<sp/>vs<sp/>Full<sp/>Tile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_1(func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/>extent_full,<sp/><sp/>\</highlight></codeline>
<codeline lineno="332"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="333"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="334"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_1(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_1(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_2(func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/>extent_full,<sp/><sp/>\</highlight></codeline>
<codeline lineno="340"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="341"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="342"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_2(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="343"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="344"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_2(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_3(func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/>extent_full,<sp/><sp/>\</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_3(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_3(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_4(func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/>extent_full,<sp/><sp/>\</highlight></codeline>
<codeline lineno="356"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="358"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_4(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="359"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="360"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_4(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_5(func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/>extent_full,<sp/><sp/>\</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_5(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_5(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_6(func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/>extent_full,<sp/><sp/>\</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="373"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_6(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="375"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_6(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="377"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_7(func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/>extent_full,<sp/><sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_7(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_7(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_8(func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/>extent_full,<sp/><sp/>\</highlight></codeline>
<codeline lineno="388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="389"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="390"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_8(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="391"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_8(func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parallel_reduce,<sp/>non-tagged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reduction<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>APPLY_REDUX(val,<sp/>func,<sp/>...)<sp/>func(__VA_ARGS__,<sp/>val);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LayoutRight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>d<sp/>=<sp/>0<sp/>to<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_1_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="403"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>(type)0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>APPLY_REDUX(val,<sp/>func,<sp/>__VA_ARGS__,<sp/>i0<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_2_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="408"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="409"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_1_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="410"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="411"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_3_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="414"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_2_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="416"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="417"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_4_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="420"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i3)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_3_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i3<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_5_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="426"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i4)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_4_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="428"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i4<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="429"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_6_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="432"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i5)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="433"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_5_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="434"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i5<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="435"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_7_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="438"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i6)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="439"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_6_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="440"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i6<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="441"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_R_8_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="444"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i7)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="445"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_R_7_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="446"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i7<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="447"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LayoutLeft</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>d<sp/>=<sp/>rank-1<sp/>to<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_1_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="452"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="453"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>(type)0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="454"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>APPLY_REDUX(val,<sp/>func,<sp/>i0<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="455"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_2_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="458"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_1_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i1<sp/>+<sp/>m_offset[d],<sp/>\</highlight></codeline>
<codeline lineno="460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="461"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_3_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="464"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_2_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i2<sp/>+<sp/>m_offset[d],<sp/>\</highlight></codeline>
<codeline lineno="466"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="467"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_4_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="470"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i3)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_3_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i3<sp/>+<sp/>m_offset[d],<sp/>\</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="473"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_5_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="476"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i4)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="477"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_4_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i4<sp/>+<sp/>m_offset[d],<sp/>\</highlight></codeline>
<codeline lineno="478"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="479"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_6_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="482"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i5)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="483"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_5_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i5<sp/>+<sp/>m_offset[d],<sp/>\</highlight></codeline>
<codeline lineno="484"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="485"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_7_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i6)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_6_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i6<sp/>+<sp/>m_offset[d],<sp/>\</highlight></codeline>
<codeline lineno="490"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="491"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_L_8_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="494"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i7)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="495"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_L_7_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/>i7<sp/>+<sp/>m_offset[d],<sp/>\</highlight></codeline>
<codeline lineno="496"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="497"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Left<sp/>vs<sp/>Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_1_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="501"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="502"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>(type)0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="503"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>APPLY_REDUX(val,<sp/>func,<sp/>i0<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="504"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_2_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="507"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="508"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="509"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_1_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="512"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_1_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i1<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="516"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_3_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="519"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="520"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_2_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="524"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="526"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_2_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i2<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="527"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="528"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_4_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i3)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_3_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i3<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="536"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="537"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i3)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="538"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_3_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i3<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="540"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_5_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="543"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="544"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i4)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="545"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_4_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="546"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i4<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="547"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="548"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i4)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_4_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i4<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="551"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="552"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_6_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="555"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="556"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i5)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="557"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_5_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="558"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i5<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="559"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="560"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i5)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="562"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_5_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i5<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="563"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="564"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_7_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="567"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="568"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i6)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="569"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_6_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="570"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i6<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="571"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="572"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i6)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="574"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_6_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i6<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="575"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="576"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_LAYOUT_8_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="579"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="580"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i7)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="581"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_L_7_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="582"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i7<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="583"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="584"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="585"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i7)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="586"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_R_7_REDUX(val,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i7<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="587"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="588"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Partial<sp/>vs<sp/>Full<sp/>Tile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_1_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="592"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="593"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="594"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_1_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="595"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="596"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_1_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="597"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="598"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_2_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="601"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="602"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="603"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_2_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="604"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="605"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_2_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="606"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="607"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_3_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="610"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="611"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="612"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_3_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="613"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="614"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_3_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="615"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="616"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_4_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="619"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="620"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="621"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_4_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="622"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="623"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_4_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="624"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="625"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_5_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="628"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="629"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="630"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_5_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="631"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="632"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_5_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="633"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="634"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_6_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="637"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="638"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="639"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_6_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="640"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="641"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_6_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="642"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="643"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_7_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="646"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="647"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="648"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_7_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="649"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="650"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_7_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="651"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="652"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TILE_LOOP_8_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="655"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="656"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="657"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_8_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="658"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="659"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>LOOP_LAYOUT_8_REDUX(val,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="660"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="661"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>New<sp/>Loop<sp/>Macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tagged<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_APPLY(tag,<sp/>func,<sp/>...)<sp/>func(tag,<sp/>__VA_ARGS__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LayoutRight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>d<sp/>=<sp/>0<sp/>to<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_1(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="670"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="671"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>(type)0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="672"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_APPLY(tag,<sp/>func,<sp/>__VA_ARGS__,<sp/>i0<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="673"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_2(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="676"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="677"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_1(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="678"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="679"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_3(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="682"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="683"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_2(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="684"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="685"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_4(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="688"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i3)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="689"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_3(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="690"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i3<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="691"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_5(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="694"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i4)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="695"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_4(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="696"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i4<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="697"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_6(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="700"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i5)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="701"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_5(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="702"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i5<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="703"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_7(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="706"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i6)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="707"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_6(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="708"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i6<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="709"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_8(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="712"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i7)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="713"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_7(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="714"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i7<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="715"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LayoutLeft</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">//<sp/>d<sp/>=<sp/>rank-1<sp/>to<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_1(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="720"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="721"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>(type)0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="722"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_APPLY(tag,<sp/>func,<sp/>i0<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="723"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_2(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="726"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="727"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_1(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="728"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="729"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_3(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="732"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="733"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_2(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="734"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="735"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_4(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="738"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i3)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="739"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_3(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="740"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i3<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="741"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_5(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="744"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i4)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="745"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_4(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="746"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i4<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="747"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_6(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="750"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i5)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_5(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="752"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i5<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="753"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_7(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="756"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i6)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="757"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_6(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i6<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="759"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_8(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="762"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i7)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="763"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_7(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="764"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i7<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="765"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Left<sp/>vs<sp/>Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>rank<sp/>not<sp/>necessary<sp/>to<sp/>pass<sp/>through,<sp/>can<sp/>hardcode<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_1(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="770"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="771"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>(type)0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="772"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_APPLY(tag,<sp/>func,<sp/>i0<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="773"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_2(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="776"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="777"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i1)<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="778"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_1(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="779"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="780"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="781"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="782"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="783"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_1(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i1<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="784"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="785"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_3(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="788"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i2)<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_2(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="791"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="792"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="793"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="794"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="795"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_2(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i2<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="796"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="797"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_4(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="800"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="801"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i3)<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="802"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_3(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="803"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i3<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="804"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="805"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="806"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i3)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="807"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_3(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i3<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="808"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="809"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_5(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="812"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="813"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i4)<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="814"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_4(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="815"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i4<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="816"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="817"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="818"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i4)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="819"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_4(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i4<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="820"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="821"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_6(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="824"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="825"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i5)<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="826"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_5(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="827"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i5<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="828"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="829"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="830"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i5)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="831"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_5(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i5<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="832"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="833"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_7(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="836"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="837"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i6)<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="838"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_6(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="839"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i6<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="840"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="841"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="842"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i6)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="843"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_6(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i6<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="844"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="845"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_8(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="848"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="849"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i7)<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="850"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_7(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="851"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i7<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="852"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="853"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="854"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i7)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="855"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_7(tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/>i7<sp/>+<sp/>m_offset[0])<sp/><sp/>\</highlight></codeline>
<codeline lineno="856"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="857"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Partial<sp/>vs<sp/>Full<sp/>Tile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_1(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="861"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="862"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="863"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_1(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="864"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="865"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="866"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_1(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>\</highlight></codeline>
<codeline lineno="867"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="868"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_2(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="871"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="872"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="873"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_2(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="874"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="875"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="876"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_2(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>\</highlight></codeline>
<codeline lineno="877"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="878"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_3(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="881"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="882"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_3(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="884"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="885"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="886"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_3(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>\</highlight></codeline>
<codeline lineno="887"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="888"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_4(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="891"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="892"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="893"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_4(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="894"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="895"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="896"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_4(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>\</highlight></codeline>
<codeline lineno="897"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="898"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_5(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="901"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="902"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="903"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_5(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="904"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="905"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="906"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_5(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>\</highlight></codeline>
<codeline lineno="907"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="908"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_6(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="911"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="912"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="913"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_6(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="914"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="915"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="916"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_6(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>\</highlight></codeline>
<codeline lineno="917"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="918"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_7(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="921"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="922"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="923"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_7(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="924"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="925"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="926"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_7(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>\</highlight></codeline>
<codeline lineno="927"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="928"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_8(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="931"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="932"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="933"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_8(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_full,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="934"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="935"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="936"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_8(tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>extent_partial,<sp/>\</highlight></codeline>
<codeline lineno="937"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="938"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parallel_reduce,<sp/>tagged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reduction<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_APPLY_REDUX(val,<sp/>tag,<sp/>func,<sp/>...)<sp/>func(tag,<sp/>__VA_ARGS__,<sp/>val);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LayoutRight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment">//<sp/>d<sp/>=<sp/>0<sp/>to<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_1_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="947"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="948"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>(type)0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="949"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_APPLY_REDUX(val,<sp/>tag,<sp/>func,<sp/>__VA_ARGS__,<sp/>i0<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="950"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_2_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="953"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="954"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_1_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="955"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__,<sp/>i1<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="956"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_3_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="959"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="960"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_2_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="961"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__,<sp/>i2<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="962"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_4_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="965"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i3)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="966"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_3_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="967"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__,<sp/>i3<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="968"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_5_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="971"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i4)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="972"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_4_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="973"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__,<sp/>i4<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="974"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_6_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="977"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i5)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="978"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_5_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="979"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__,<sp/>i5<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="980"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_7_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="983"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i6)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="984"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_6_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="985"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__,<sp/>i6<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="986"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_R_8_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="989"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i7)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="990"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_7_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>+<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="991"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__,<sp/>i7<sp/>+<sp/>m_offset[d])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="992"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LayoutLeft</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>d<sp/>=<sp/>rank-1<sp/>to<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_1_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="997"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="998"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>(type)0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="999"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_APPLY_REDUX(val,<sp/>tag,<sp/>func,<sp/>i0<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1000"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_2_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1003"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1004"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_1_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1005"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1006"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_3_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1009"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1010"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_2_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1011"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1012"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_4_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1015"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i3)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1016"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_3_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1017"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i3<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1018"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_5_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1021"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i4)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1022"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_4_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1023"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i4<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1024"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_6_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1027"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i5)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1028"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_5_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1029"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i5<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1030"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_7_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1033"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i6)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1034"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_6_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1035"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i6<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1036"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_L_8_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1039"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[d]);<sp/>++i7)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1040"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_7_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>d<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1041"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i7<sp/>+<sp/>m_offset[d],<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1042"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Left<sp/>vs<sp/>Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_1_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/>\</highlight></codeline>
<codeline lineno="1046"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1047"><highlight class="preprocessor"><sp/><sp/>KOKKOS_ENABLE_IVDEP_MDRANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1048"><highlight class="preprocessor"><sp/><sp/>for<sp/>(type<sp/>i0<sp/>=<sp/>(type)0;<sp/>i0<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1049"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_APPLY_REDUX(val,<sp/>tag,<sp/>func,<sp/>i0<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1050"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_2_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1053"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1054"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1055"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1056"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_1_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/>\</highlight></codeline>
<codeline lineno="1057"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1058"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1059"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1060"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i1<sp/>=<sp/>(type)0;<sp/>i1<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1061"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_1_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1062"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1063"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1064"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_3_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1067"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1068"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1069"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1070"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_2_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/>\</highlight></codeline>
<codeline lineno="1071"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1072"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1073"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1074"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i2<sp/>=<sp/>(type)0;<sp/>i2<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1075"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_2_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1076"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1077"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1078"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_4_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1081"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1082"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1083"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i3)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1084"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_3_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/>\</highlight></codeline>
<codeline lineno="1085"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i3<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1086"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1087"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1088"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i3<sp/>=<sp/>(type)0;<sp/>i3<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i3)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1089"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_3_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1090"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i3<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1091"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1092"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_5_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1095"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1096"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1097"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i4)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1098"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_4_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/>\</highlight></codeline>
<codeline lineno="1099"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i4<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1101"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i4<sp/>=<sp/>(type)0;<sp/>i4<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i4)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_4_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i4<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1106"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_6_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1110"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i5)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_5_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/>\</highlight></codeline>
<codeline lineno="1113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i5<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1115"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i5<sp/>=<sp/>(type)0;<sp/>i5<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i5)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_5_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i5<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1120"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_7_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1124"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i6)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_6_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/>\</highlight></codeline>
<codeline lineno="1127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i6<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1129"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i6<sp/>=<sp/>(type)0;<sp/>i6<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i6)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_6_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i6<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1134"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_LOOP_LAYOUT_8_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1138"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[rank<sp/>-<sp/>1]);<sp/>++i7)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_L_7_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>rank<sp/>-<sp/>2,<sp/>\</highlight></codeline>
<codeline lineno="1141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i7<sp/>+<sp/>m_offset[rank<sp/>-<sp/>1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1143"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(type<sp/>i7<sp/>=<sp/>(type)0;<sp/>i7<sp/>&lt;<sp/>static_cast&lt;type&gt;(extent[0]);<sp/>++i7)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TAGGED_LOOP_R_7_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>m_offset,<sp/>extent,<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i7<sp/>+<sp/>m_offset[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1148"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Partial<sp/>vs<sp/>Full<sp/>Tile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_1_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset,<sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="1153"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_1_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1156"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_1_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1159"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_2_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset,<sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="1163"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_2_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1166"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_2_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1169"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_3_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset,<sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="1173"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_3_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1176"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_3_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1179"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_4_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset,<sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="1183"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_4_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1186"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_4_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1189"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_5_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset,<sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="1193"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_5_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1196"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_5_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1199"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_6_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset,<sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="1203"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_6_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1206"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_6_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1209"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_7_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset,<sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="1213"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_7_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1216"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_7_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1219"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAGGED_TILE_LOOP_8_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>cond,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset,<sp/>extent_full,<sp/>extent_partial,<sp/>rank)<sp/>\</highlight></codeline>
<codeline lineno="1223"><highlight class="preprocessor"><sp/><sp/>if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_8_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_full,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1226"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TAGGED_LOOP_LAYOUT_8_REDUX(val,<sp/>tag,<sp/>func,<sp/>type,<sp/>is_left,<sp/>m_offset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent_partial,<sp/>rank)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1229"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>tagged<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Structs<sp/>for<sp/>calling<sp/>loops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Rank,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tagged,</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1236" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1239" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_011_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;1,<sp/>IsLeft,<sp/>IType,<sp/>void,<sp/>void&gt;<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_1(func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>1);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_1_REDUX(value,<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>1);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1255" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_012_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;2,<sp/>IsLeft,<sp/>IType,<sp/>void,<sp/>void&gt;<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_2(func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>2);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_2_REDUX(value,<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>2);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1271" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_013_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;3,<sp/>IsLeft,<sp/>IType,<sp/>void,<sp/>void&gt;<sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_3(func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>3);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_3_REDUX(value,<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>3);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1284"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1287" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_014_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;4,<sp/>IsLeft,<sp/>IType,<sp/>void,<sp/>void&gt;<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_4(func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>4);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_4_REDUX(value,<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>4);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1303" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_015_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;5,<sp/>IsLeft,<sp/>IType,<sp/>void,<sp/>void&gt;<sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_5(func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>5);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_5_REDUX(value,<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>5);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1319" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_016_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;6,<sp/>IsLeft,<sp/>IType,<sp/>void,<sp/>void&gt;<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_6(func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>6);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_6_REDUX(value,<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>6);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1335" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_017_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;7,<sp/>IsLeft,<sp/>IType,<sp/>void,<sp/>void&gt;<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_7(func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>7);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_7_REDUX(value,<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>7);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1351" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_018_00_01_is_left_00_01_i_type_00_01void_00_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;8,<sp/>IsLeft,<sp/>IType,<sp/>void,<sp/>void&gt;<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_8(func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>8);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>TILE_LOOP_8_REDUX(value,<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>8);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tagged<sp/>versions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tagged&gt;</highlight></codeline>
<codeline lineno="1369" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_011_00_01_is_left_00_01_i_type_00_01_tagged_00_091bcbece239e4ba93c161bc81c330223" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>IsLeft,<sp/>IType,<sp/>Tagged,</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!std::is_same&lt;Tagged,<sp/>void&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_1(Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>1);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_1_REDUX(value,<sp/>Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a,<sp/>b,<sp/>1);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tagged&gt;</highlight></codeline>
<codeline lineno="1388" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_012_00_01_is_left_00_01_i_type_00_01_tagged_00_058e6558be2e47cc3e9f524fca210aa52" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>2,<sp/>IsLeft,<sp/>IType,<sp/>Tagged,</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!std::is_same&lt;Tagged,<sp/>void&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_2(Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>2);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_2_REDUX(value,<sp/>Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a,<sp/>b,<sp/>2);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tagged&gt;</highlight></codeline>
<codeline lineno="1407" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_013_00_01_is_left_00_01_i_type_00_01_tagged_00_0d77f4e10659331875a923f15cd371d9d" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>3,<sp/>IsLeft,<sp/>IType,<sp/>Tagged,</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!std::is_same&lt;Tagged,<sp/>void&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_3(Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>3);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_3_REDUX(value,<sp/>Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a,<sp/>b,<sp/>3);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tagged&gt;</highlight></codeline>
<codeline lineno="1426" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_014_00_01_is_left_00_01_i_type_00_01_tagged_00_064caad6839603822fae64e7fd6a49331" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>4,<sp/>IsLeft,<sp/>IType,<sp/>Tagged,</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!std::is_same&lt;Tagged,<sp/>void&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_4(Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>4);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_4_REDUX(value,<sp/>Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a,<sp/>b,<sp/>4);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tagged&gt;</highlight></codeline>
<codeline lineno="1445" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_015_00_01_is_left_00_01_i_type_00_01_tagged_00_00b75b8193aa401fd45837c7744f65a43" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>5,<sp/>IsLeft,<sp/>IType,<sp/>Tagged,</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!std::is_same&lt;Tagged,<sp/>void&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_5(Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>5);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_5_REDUX(value,<sp/>Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a,<sp/>b,<sp/>5);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1461"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tagged&gt;</highlight></codeline>
<codeline lineno="1464" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_016_00_01_is_left_00_01_i_type_00_01_tagged_00_02ae400a370ab289932e697cd7193fe4f" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>6,<sp/>IsLeft,<sp/>IType,<sp/>Tagged,</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!std::is_same&lt;Tagged,<sp/>void&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_6(Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>6);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_6_REDUX(value,<sp/>Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a,<sp/>b,<sp/>6);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tagged&gt;</highlight></codeline>
<codeline lineno="1483" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_017_00_01_is_left_00_01_i_type_00_01_tagged_00_075d4a9d45d6b5bb7748b7c52977508b0" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>7,<sp/>IsLeft,<sp/>IType,<sp/>Tagged,</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!std::is_same&lt;Tagged,<sp/>void&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_7(Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>7);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_7_REDUX(value,<sp/>Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a,<sp/>b,<sp/>7);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLeft,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tagged&gt;</highlight></codeline>
<codeline lineno="1502" refid="struct_kokkos_1_1_impl_1_1_tile___loop___type_3_018_00_01_is_left_00_01_i_type_00_01_tagged_00_01eed31d0e423abb412e2d2a23f671cbc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_tile___loop___type" kindref="compound">Tile_Loop_Type</ref>&lt;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>8,<sp/>IsLeft,<sp/>IType,<sp/>Tagged,</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!std::is_same&lt;Tagged,<sp/>void&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_8(Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,<sp/>a,<sp/>b,<sp/>8);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Offset,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentA,</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExtentB&gt;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(ValType&amp;<sp/>value,<sp/>Func<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>offset,<sp/>ExtentA<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>ExtentB<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>TAGGED_TILE_LOOP_8_REDUX(value,<sp/>Tagged(),<sp/>func,<sp/>IType,<sp/>IsLeft,<sp/>cond,<sp/>offset,</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a,<sp/>b,<sp/>8);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>Structs<sp/>for<sp/>calling<sp/>loops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RP,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tag<sp/>=<sp/>void,</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType<sp/>=<sp/>void,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1523" refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile" kindref="compound">HostIterateTile</ref>;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>ParallelFor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RP,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tag,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType&gt;</highlight></codeline>
<codeline lineno="1527" refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile_3_01_r_p_00_01_functor_00_01_tag_00_01_value_type_033a1e0dc37565438ce1f7173e7db3297" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile" kindref="compound">HostIterateTile</ref>&lt;RP,<sp/>Functor,<sp/>Tag,<sp/>ValueType,</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::enable_if_t&lt;std::is_void&lt;ValueType&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">index_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RP::index_type;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">point_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RP::point_type;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/>ValueType;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile" kindref="compound">HostIterateTile</ref>(RP<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rp,<sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func)</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_rp(rp),<sp/>m_func(func)<sp/>{}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_iteration_bounds(point_type&amp;<sp/>partial_tile,</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_type&amp;<sp/>offset)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_full_tile<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((offset[i]<sp/>+<sp/>m_rp.m_tile[i])<sp/>&lt;=<sp/>m_rp.m_upper[i])<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_tile[i]<sp/>=<sp/>m_rp.m_tile[i];</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_full_tile<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_tile[i]<sp/>=</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_rp.m_upper[i]<sp/>-<sp/>1<sp/>-<sp/>offset[i])<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>1</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(m_rp.m_upper[i]<sp/>-<sp/>m_rp.m_tile[i])<sp/>&gt;<sp/>0</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(m_rp.m_upper[i]<sp/>-<sp/>offset[i])</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(m_rp.m_upper[i]<sp/>-</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rp.m_lower[i]);<sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>single<sp/>tile<sp/>encloses<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_full_tile;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>check<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Rank&gt;</highlight></codeline>
<codeline lineno="1560" refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile_3_01_r_p_00_01_functor_00_01_tag_00_01_value_type_08a809c1869b8e632e12982b5ce997f03" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RankTag<sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>RankTag&lt;Rank&gt;;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>value<sp/>=<sp/>(int)<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref><sp/>};</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>KOKKOS_ENABLE_NEW_LOOP_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(IType<sp/>tile_idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>Tile_Loop_Type&lt;RP::rank,<sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left),<sp/>index_type,</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tag&gt;::apply(m_func,<sp/>full_tile,<sp/>m_offset,<sp/>m_rp.m_tile,</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tiledims);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(IType<sp/>tile_idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>operator_impl(tile_idx,<sp/>RankTag&lt;RP::rank&gt;());</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>added<sp/>due<sp/>to<sp/>compiler<sp/>error<sp/>when<sp/>using<sp/>sfinae<sp/>to<sp/>choose<sp/>operator<sp/>based<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rank<sp/>w/<sp/>cuda+serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;2&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_2L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_2);<sp/>}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_2L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_2);<sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_2R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_2);<sp/>}</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_2R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_2);<sp/>}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;3&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_3L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_3);<sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_3L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_3);<sp/>}</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_3R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_3);<sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_3R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_3);<sp/>}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;4&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_4L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_4);<sp/>}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_4L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_4);<sp/>}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_4R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_4);<sp/>}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_4R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_4);<sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;5&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_5L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_5);<sp/>}</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_5L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_5);<sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_5R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_5);<sp/>}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_5R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_5);<sp/>}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;6&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_6L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_6);<sp/>}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_6L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_6);<sp/>}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_6R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_6);<sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_6R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_6);<sp/>}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;7&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_7L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_7);<sp/>}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_7L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_7);<sp/>}</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_7R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_7);<sp/>}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_7R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_7);<sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;8&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_8L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_8);<sp/>}</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_8L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_8);<sp/>}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_8R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_8);<sp/>}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_8R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_8);<sp/>}</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>RP::rank<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;Tag,<sp/>void&gt;::value),</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/>apply(Args&amp;&amp;...<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/>m_func(args...);</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>RP::rank<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;Tag,<sp/>void&gt;::value),</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/>apply(Args&amp;&amp;...<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>m_func(m_tag,<sp/>args...);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/>RP<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_rp;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_func;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::conditional&lt;std::is_same&lt;Tag,<sp/>void&gt;::value,<sp/>int,<sp/>Tag&gt;::type</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_tag;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>ParallelReduce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ValueType<sp/>-<sp/>scalar:<sp/>For<sp/>reductions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RP,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tag,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType&gt;</highlight></codeline>
<codeline lineno="1936" refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile_3_01_r_p_00_01_functor_00_01_tag_00_01_value_type_02bd2db12b6c77eadc751eb463f9c01f4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile" kindref="compound">HostIterateTile</ref>&lt;RP,<sp/>Functor,<sp/>Tag,<sp/>ValueType,</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::enable_if_t&lt;!std::is_void&lt;ValueType&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_array&lt;ValueType&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">index_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RP::index_type;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">point_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RP::point_type;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/>ValueType;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile" kindref="compound">HostIterateTile</ref>(RP<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rp,<sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,<sp/>value_type&amp;<sp/>v)</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_rp(rp)<sp/><sp/></highlight><highlight class="comment">//<sp/>Cuda<sp/>7.0<sp/>does<sp/>not<sp/>like<sp/>braces...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_func(func),</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_v(v)<sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>with<sp/>non-void<sp/>ValueType<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Errors<sp/>due<sp/>to<sp/>braces<sp/>rather<sp/>than<sp/>parenthesis<sp/>for<sp/>init<sp/>(with<sp/>cuda<sp/>7.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>/home/ndellin/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp:1216:98:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>error:<sp/>too<sp/>many<sp/>braces<sp/>around<sp/>initializer<sp/>for<sp/>‘int’<sp/>[-fpermissive]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>/home/ndellin/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp:1216:98:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>error:<sp/>aggregate<sp/>value<sp/>used<sp/>where<sp/>an<sp/>integer<sp/>was<sp/>expected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_iteration_bounds(point_type&amp;<sp/>partial_tile,</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_type&amp;<sp/>offset)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_full_tile<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((offset[i]<sp/>+<sp/>m_rp.m_tile[i])<sp/>&lt;=<sp/>m_rp.m_upper[i])<sp/>{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_tile[i]<sp/>=<sp/>m_rp.m_tile[i];</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_full_tile<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_tile[i]<sp/>=</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_rp.m_upper[i]<sp/>-<sp/>1<sp/>-<sp/>offset[i])<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>1</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(m_rp.m_upper[i]<sp/>-<sp/>m_rp.m_tile[i])<sp/>&gt;<sp/>0</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(m_rp.m_upper[i]<sp/>-<sp/>offset[i])</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(m_rp.m_upper[i]<sp/>-</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rp.m_lower[i]);<sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>single<sp/>tile<sp/>encloses<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_full_tile;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>check<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Rank&gt;</highlight></codeline>
<codeline lineno="1980" refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile_3_01_r_p_00_01_functor_00_01_tag_00_01_value_type_04653db4f9ba28a1c18ac6098968fb0d3" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RankTag<sp/>{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>RankTag&lt;Rank&gt;;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>value<sp/>=<sp/>(int)<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref><sp/>};</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>KOKKOS_ENABLE_NEW_LOOP_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(IType<sp/>tile_idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>Tile_Loop_Type&lt;RP::rank,<sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left),<sp/>index_type,</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tag&gt;::apply(m_v,<sp/>m_func,<sp/>full_tile,<sp/>m_offset,<sp/>m_rp.m_tile,</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tiledims);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(IType<sp/>tile_idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/>operator_impl(tile_idx,<sp/>RankTag&lt;RP::rank&gt;());</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>added<sp/>due<sp/>to<sp/>compiler<sp/>error<sp/>when<sp/>using<sp/>sfinae<sp/>to<sp/>choose<sp/>operator<sp/>based<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;2&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_2L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_2);<sp/>}</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_2L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_2);<sp/>}</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_2R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_2);<sp/>}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_2R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_2);<sp/>}</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;3&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_3L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_3);<sp/>}</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_3L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_3);<sp/>}</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_3R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_3);<sp/>}</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_3R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_3);<sp/>}</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;4&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_4L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_4);<sp/>}</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_4L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_4);<sp/>}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_4R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_4);<sp/>}</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_4R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_4);<sp/>}</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;5&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_5L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_5);<sp/>}</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_5L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_5);<sp/>}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_5R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_5);<sp/>}</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_5R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_5);<sp/>}</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;6&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_6L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_6);<sp/>}</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_6L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_6);<sp/>}</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_6R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_6);<sp/>}</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_6R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_6);<sp/>}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;7&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_7L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_7);<sp/>}</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_7L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_7);<sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_7R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_7);<sp/>}</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_7R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_7);<sp/>}</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"></highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;8&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_8L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_8);<sp/>}</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_8L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_8);<sp/>}</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_8R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_8);<sp/>}</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_8R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_8);<sp/>}</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>RP::rank<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;Tag,<sp/>void&gt;::value),</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/>apply(Args&amp;&amp;...<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/>m_func(args...,<sp/>m_v);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>RP::rank<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;Tag,<sp/>void&gt;::value),</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/>apply(Args&amp;&amp;...<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/>m_func(m_tag,<sp/>args...,<sp/>m_v);</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/>RP<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_rp;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_func;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/>value_type&amp;<sp/>m_v;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::conditional&lt;std::is_same&lt;Tag,<sp/>void&gt;::value,<sp/>int,<sp/>Tag&gt;::type</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_tag;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>ParallelReduce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Extra<sp/>specialization<sp/>for<sp/>array<sp/>reductions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ValueType[]:<sp/>For<sp/>array<sp/>reductions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RP,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tag,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType&gt;</highlight></codeline>
<codeline lineno="2358" refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile_3_01_r_p_00_01_functor_00_01_tag_00_01_value_type_019260587cca7902daca3b505df73c4e2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile" kindref="compound">HostIterateTile</ref>&lt;RP,<sp/>Functor,<sp/>Tag,<sp/>ValueType,</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::enable_if_t&lt;!std::is_void&lt;ValueType&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_array&lt;ValueType&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">index_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RP::index_type;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">point_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RP::point_type;</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::remove_extent_t&lt;ValueType&gt;;<sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>away<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;array-ness&apos;<sp/>[],<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>underlying<sp/>type<sp/>remains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile" kindref="compound">HostIterateTile</ref>(</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RP<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rp,<sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func,</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_type*<sp/>v)<sp/><sp/></highlight><highlight class="comment">//<sp/>v<sp/>should<sp/>be<sp/>an<sp/>array;<sp/>treat<sp/>as<sp/>pointer<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compatibility<sp/>since<sp/>size<sp/>is<sp/>not<sp/>known<sp/>nor<sp/>needed<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_rp(rp)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cuda<sp/>7.0<sp/>does<sp/>not<sp/>like<sp/>braces...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_func(func),</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_v(v)<sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>with<sp/>non-void<sp/>ValueType<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_iteration_bounds(point_type&amp;<sp/>partial_tile,</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_type&amp;<sp/>offset)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_full_tile<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((offset[i]<sp/>+<sp/>m_rp.m_tile[i])<sp/>&lt;=<sp/>m_rp.m_upper[i])<sp/>{</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_tile[i]<sp/>=<sp/>m_rp.m_tile[i];</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_full_tile<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_tile[i]<sp/>=</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_rp.m_upper[i]<sp/>-<sp/>1<sp/>-<sp/>offset[i])<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>1</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(m_rp.m_upper[i]<sp/>-<sp/>m_rp.m_tile[i])<sp/>&gt;<sp/>0</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(m_rp.m_upper[i]<sp/>-<sp/>offset[i])</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(m_rp.m_upper[i]<sp/>-</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rp.m_lower[i]);<sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>single<sp/>tile<sp/>encloses<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_full_tile;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>check<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Rank&gt;</highlight></codeline>
<codeline lineno="2402" refid="struct_kokkos_1_1_impl_1_1_host_iterate_tile_3_01_r_p_00_01_functor_00_01_tag_00_01_value_type_00fc5d7300f780def6eb100639219a8bc" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RankTag<sp/>{</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>RankTag&lt;Rank&gt;;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>value<sp/>=<sp/>(int)<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref><sp/>};</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>KOKKOS_ENABLE_NEW_LOOP_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(IType<sp/>tile_idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/>Tile_Loop_Type&lt;RP::rank,<sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left),<sp/>index_type,</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tag&gt;::apply(m_v,<sp/>m_func,<sp/>full_tile,<sp/>m_offset,<sp/>m_rp.m_tile,</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tiledims);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(IType<sp/>tile_idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/>operator_impl(tile_idx,<sp/>RankTag&lt;RP::rank&gt;());</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>added<sp/>due<sp/>to<sp/>compiler<sp/>error<sp/>when<sp/>using<sp/>sfinae<sp/>to<sp/>choose<sp/>operator<sp/>based<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;2&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_2L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_2);<sp/>}</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_2L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_2);<sp/>}</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_2R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_2);<sp/>}</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_2R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_2);<sp/>}</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;3&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_3L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_3);<sp/>}</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_3L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_3);<sp/>}</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_3R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_3);<sp/>}</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_3R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_3);<sp/>}</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;4&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_4L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_4);<sp/>}</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_4L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_4);<sp/>}</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_4R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_4);<sp/>}</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_4R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_4);<sp/>}</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;5&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_5L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_5);<sp/>}</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_5L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_5);<sp/>}</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_5R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_5);<sp/>}</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_5R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_5);<sp/>}</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;6&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_6L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_6);<sp/>}</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_6L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_6);<sp/>}</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_6R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_6);<sp/>}</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_6R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_6);<sp/>}</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;7&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_7L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_7);<sp/>}</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_7L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_7);<sp/>}</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_7R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_7);<sp/>}</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_7R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_7);<sp/>}</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IType&gt;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator_impl(IType<sp/>tile_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RankTag&lt;8&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_offset;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/>point_type<sp/>m_tiledims;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::outer_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RP::rank;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>RP::rank<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset[i]<sp/>=</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tile_idx<sp/>%<sp/>m_rp.m_tile_end[i])<sp/>*<sp/>m_rp.m_tile[i]<sp/>+<sp/>m_rp.m_lower[i];</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_idx<sp/>/=<sp/>m_rp.m_tile_end[i];</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>offset+tiledim<sp/>in<sp/>bounds<sp/>-<sp/>if<sp/>not,<sp/>replace<sp/>tile<sp/>dims<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>tile<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_tile<sp/>=<sp/>check_iteration_bounds(m_tiledims,<sp/>m_offset);</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RP::inner_direction<sp/>==<sp/>Iterate::Left)<sp/>{</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_8L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_8);<sp/>}</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_8L(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_8);<sp/>}</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_tile)<sp/>{</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_8R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_8);<sp/>}</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOOP_8R(index_type,<sp/>m_tiledims)<sp/>{<sp/>apply(LOOP_ARGS_8);<sp/>}</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="normal"></highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>op()<sp/>rank<sp/>==<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>RP::rank<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;Tag,<sp/>void&gt;::value),</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/>apply(Args&amp;&amp;...<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/>m_func(args...,<sp/>m_v);</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>RP::rank<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;Tag,<sp/>void&gt;::value),</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/>apply(Args&amp;&amp;...<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/>m_func(m_tag,<sp/>args...,<sp/>m_v);</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"></highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/>RP<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_rp;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_func;</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/>value_type*<sp/>m_v;</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::conditional&lt;std::is_same&lt;Tag,<sp/>void&gt;::value,<sp/>int,<sp/>Tag&gt;::type</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_tag;</highlight></codeline>
<codeline lineno="2774"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>KOKKOS_ENABLE_NEW_LOOP_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Kokkos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/Kokkos/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp"/>
  </compounddef>
</doxygen>
