<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_kokkos___mathematical_special_functions_8hpp" kind="file" language="C++">
    <compoundname>Kokkos_MathematicalSpecialFunctions.hpp</compoundname>
    <includes refid="_kokkos___macros_8hpp" local="no">Kokkos_Macros.hpp</includes>
    <includes local="no">cmath</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">type_traits</includes>
    <includes refid="_kokkos___mathematical_functions_8hpp" local="no">Kokkos_MathematicalFunctions.hpp</includes>
    <includes refid="_kokkos___numeric_traits_8hpp" local="no">Kokkos_NumericTraits.hpp</includes>
    <includes refid="_kokkos___complex_8hpp" local="no">Kokkos_Complex.hpp</includes>
    <includedby refid="_kokkos___core_8hpp" local="no">src/Kokkos/kokkos/core/src/Kokkos_Core.hpp</includedby>
    <incdepgraph>
      <node id="51">
        <label>KokkosExp_MDRangePolicy.hpp</label>
        <link refid="_kokkos_exp___m_d_range_policy_8hpp_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>Kokkos_Array.hpp</label>
        <link refid="_kokkos___array_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Kokkos_Atomic.hpp</label>
        <link refid="_kokkos___atomic_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Kokkos_Complex.hpp</label>
        <link refid="_kokkos___complex_8hpp_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>Kokkos_Concepts.hpp</label>
        <link refid="_kokkos___concepts_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>Kokkos_Core_fwd.hpp</label>
        <link refid="_kokkos___core__fwd_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Kokkos_ExecPolicy.hpp</label>
        <link refid="_kokkos___exec_policy_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Kokkos_HostSpace.hpp</label>
        <link refid="_kokkos___host_space_8hpp_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>Kokkos_Layout.hpp</label>
        <link refid="_kokkos___layout_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Kokkos_Macros.hpp</label>
        <link refid="_kokkos___macros_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Kokkos_MathematicalFunctions.hpp</label>
        <link refid="_kokkos___mathematical_functions_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp</label>
        <link refid="_kokkos___mathematical_special_functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Kokkos_MemoryTraits.hpp</label>
        <link refid="_kokkos___memory_traits_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Kokkos_NumericTraits.hpp</label>
        <link refid="_kokkos___numeric_traits_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>Kokkos_Rank.hpp</label>
        <link refid="_kokkos___rank_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>Kokkos_Tuners.hpp</label>
        <link refid="_kokkos___tuners_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>impl/KokkosExp_Host_IterateTile.hpp</label>
        <link refid="_kokkos_exp___host___iterate_tile_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>impl/Kokkos_AnalyzePolicy.hpp</label>
        <link refid="_kokkos___analyze_policy_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>impl/Kokkos_Atomic_Assembly.hpp</label>
        <link refid="_kokkos___atomic___assembly_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>impl/Kokkos_Atomic_Compare_Exchange_Strong.hpp</label>
        <link refid="_kokkos___atomic___compare___exchange___strong_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>impl/Kokkos_Atomic_Decrement.hpp</label>
        <link refid="_kokkos___atomic___decrement_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>impl/Kokkos_Atomic_Exchange.hpp</label>
        <link refid="_kokkos___atomic___exchange_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>impl/Kokkos_Atomic_Fetch_Add.hpp</label>
        <link refid="_kokkos___atomic___fetch___add_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>impl/Kokkos_Atomic_Fetch_And.hpp</label>
        <link refid="_kokkos___atomic___fetch___and_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>impl/Kokkos_Atomic_Fetch_Or.hpp</label>
        <link refid="_kokkos___atomic___fetch___or_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>impl/Kokkos_Atomic_Fetch_Sub.hpp</label>
        <link refid="_kokkos___atomic___fetch___sub_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>impl/Kokkos_Atomic_Generic.hpp</label>
        <link refid="_kokkos___atomic___generic_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>impl/Kokkos_Atomic_Generic_Secondary.hpp</label>
        <link refid="_kokkos___atomic___generic___secondary_8hpp_source"/>
      </node>
      <node id="80">
        <label>impl/Kokkos_Atomic_Increment.hpp</label>
        <link refid="_kokkos___atomic___increment_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>impl/Kokkos_Atomic_Load.hpp</label>
        <link refid="_kokkos___atomic___load_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>impl/Kokkos_Atomic_Memory_Order.hpp</label>
        <link refid="_kokkos___atomic___memory___order_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>impl/Kokkos_Atomic_MinMax.hpp</label>
        <link refid="_kokkos___atomic___min_max_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>impl/Kokkos_Atomic_Store.hpp</label>
        <link refid="_kokkos___atomic___store_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>impl/Kokkos_BitOps.hpp</label>
        <link refid="_kokkos___bit_ops_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>impl/Kokkos_Error.hpp</label>
        <link refid="_kokkos___error_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>impl/Kokkos_GraphImpl_fwd.hpp</label>
        <link refid="_kokkos___graph_impl__fwd_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>impl/Kokkos_HostSpace_deepcopy.hpp</label>
        <link refid="_kokkos___host_space__deepcopy_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>impl/Kokkos_Memory_Fence.hpp</label>
        <link refid="_kokkos___memory___fence_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>impl/Kokkos_Profiling.hpp</label>
        <link refid="_kokkos___profiling_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>impl/Kokkos_Profiling_C_Interface.h</label>
        <link refid="_kokkos___profiling___c___interface_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>impl/Kokkos_Profiling_DeviceInfo.hpp</label>
        <link refid="_kokkos___profiling___device_info_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>impl/Kokkos_Profiling_Interface.hpp</label>
        <link refid="_kokkos___profiling___interface_8hpp_source"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>impl/Kokkos_SharedAlloc.hpp</label>
        <link refid="_kokkos___shared_alloc_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>impl/Kokkos_Tools.hpp</label>
        <link refid="_kokkos___tools_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>impl/Kokkos_Traits.hpp</label>
        <link refid="_kokkos___traits_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>impl/Kokkos_Utilities.hpp</label>
        <link refid="_kokkos___utilities_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>impl/Kokkos_Volatile_Load.hpp</label>
        <link refid="_kokkos___volatile___load_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>traits/Kokkos_ExecutionSpaceTrait.hpp</label>
        <link refid="_kokkos___execution_space_trait_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>traits/Kokkos_GraphKernelTrait.hpp</label>
        <link refid="_kokkos___graph_kernel_trait_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>traits/Kokkos_IndexTypeTrait.hpp</label>
        <link refid="_kokkos___index_type_trait_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>traits/Kokkos_IterationPatternTrait.hpp</label>
        <link refid="_kokkos___iteration_pattern_trait_8hpp_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>traits/Kokkos_LaunchBoundsTrait.hpp</label>
        <link refid="_kokkos___launch_bounds_trait_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>traits/Kokkos_OccupancyControlTrait.hpp</label>
        <link refid="_kokkos___occupancy_control_trait_8hpp_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>traits/Kokkos_PolicyTraitAdaptor.hpp</label>
        <link refid="_kokkos___policy_trait_adaptor_8hpp_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>traits/Kokkos_ScheduleTrait.hpp</label>
        <link refid="_kokkos___schedule_trait_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>traits/Kokkos_Traits_fwd.hpp</label>
        <link refid="_kokkos___traits__fwd_8hpp_source"/>
      </node>
      <node id="48">
        <label>traits/Kokkos_WorkItemPropertyTrait.hpp</label>
        <link refid="_kokkos___work_item_property_trait_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>traits/Kokkos_WorkTagTrait.hpp</label>
        <link refid="_kokkos___work_tag_trait_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>KokkosCore_Config_FwdBackend.hpp</label>
      </node>
      <node id="4">
        <label>KokkosCore_Config_SetupBackend.hpp</label>
      </node>
      <node id="3">
        <label>KokkosCore_config.h</label>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
      <node id="63">
        <label>array</label>
      </node>
      <node id="73">
        <label>atomic</label>
      </node>
      <node id="67">
        <label>cassert</label>
      </node>
      <node id="10">
        <label>cfloat</label>
      </node>
      <node id="56">
        <label>cinttypes</label>
      </node>
      <node id="11">
        <label>climits</label>
      </node>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="90">
        <label>complex</label>
      </node>
      <node id="29">
        <label>cstddef</label>
      </node>
      <node id="12">
        <label>cstdint</label>
      </node>
      <node id="57">
        <label>cstdlib</label>
      </node>
      <node id="16">
        <label>cstring</label>
      </node>
      <node id="23">
        <label>initializer_list</label>
      </node>
      <node id="18">
        <label>iosfwd</label>
      </node>
      <node id="53">
        <label>limits</label>
      </node>
      <node id="66">
        <label>map</label>
      </node>
      <node id="68">
        <label>memory</label>
      </node>
      <node id="70">
        <label>mutex</label>
      </node>
      <node id="62">
        <label>stdbool.h</label>
      </node>
      <node id="60">
        <label>stddef.h</label>
      </node>
      <node id="61">
        <label>stdint.h</label>
      </node>
      <node id="17">
        <label>string</label>
      </node>
      <node id="64">
        <label>tuple</label>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
      <node id="19">
        <label>typeinfo</label>
      </node>
      <node id="69">
        <label>unordered_map</label>
      </node>
      <node id="24">
        <label>utility</label>
      </node>
      <node id="65">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>src/Kokkos/kokkos/algorithms/src/Kokkos_Random.hpp</label>
        <link refid="_kokkos___random_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>src/Kokkos/kokkos/algorithms/src/Kokkos_Sort.hpp</label>
        <link refid="_kokkos___sort_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/Kokkos/kokkos/algorithms/unit_tests/TestRandom.hpp</label>
        <link refid="_test_random_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/Kokkos/kokkos/algorithms/unit_tests/TestRandomCommon.hpp</label>
        <link refid="_test_random_common_8hpp_source"/>
      </node>
      <node id="6">
        <label>src/Kokkos/kokkos/algorithms/unit_tests/TestSort.hpp</label>
        <link refid="_test_sort_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/Kokkos/kokkos/algorithms/unit_tests/TestSortCommon.hpp</label>
        <link refid="_test_sort_common_8hpp_source"/>
      </node>
      <node id="11">
        <label>src/Kokkos/kokkos/benchmarks/bytes_and_flops/bench.hpp</label>
        <link refid="bench_8hpp_source"/>
      </node>
      <node id="9">
        <label>src/Kokkos/kokkos/benchmarks/gather/gather.hpp</label>
        <link refid="gather_8hpp_source"/>
      </node>
      <node id="8">
        <label>src/Kokkos/kokkos/benchmarks/gather/gather_unroll.hpp</label>
        <link refid="gather__unroll_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>src/Kokkos/kokkos/benchmarks/policy_performance/policy_perf_test.hpp</label>
        <link refid="policy__perf__test_8hpp_source"/>
      </node>
      <node id="13">
        <label>src/Kokkos/kokkos/containers/performance_tests/TestDynRankView.hpp</label>
        <link refid="_test_dyn_rank_view_8hpp_source"/>
      </node>
      <node id="14">
        <label>src/Kokkos/kokkos/containers/performance_tests/TestGlobal2LocalIds.hpp</label>
        <link refid="_test_global2_local_ids_8hpp_source"/>
      </node>
      <node id="36">
        <label>src/Kokkos/kokkos/containers/performance_tests/TestScatterView.hpp</label>
        <link refid="performance__tests_2_test_scatter_view_8hpp_source"/>
      </node>
      <node id="15">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_Bitset.hpp</label>
        <link refid="_kokkos___bitset_8hpp_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_DualView.hpp</label>
        <link refid="_kokkos___dual_view_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp</label>
        <link refid="_kokkos___dyn_rank_view_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_DynamicView.hpp</label>
        <link refid="_kokkos___dynamic_view_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_ErrorReporter.hpp</label>
        <link refid="_kokkos___error_reporter_8hpp_source"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp</label>
        <link refid="_kokkos___offset_view_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp</label>
        <link refid="_kokkos___scatter_view_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_UnorderedMap.hpp</label>
        <link refid="_kokkos___unordered_map_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_Vector.hpp</label>
        <link refid="_kokkos___vector_8hpp_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestBitset.hpp</label>
        <link refid="_test_bitset_8hpp_source"/>
      </node>
      <node id="24">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp</label>
        <link refid="_test_dual_view_8hpp_source"/>
      </node>
      <node id="26">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp</label>
        <link refid="_test_dyn_view_a_p_i_8hpp_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI_generic.hpp</label>
        <link refid="_test_dyn_view_a_p_i__generic_8hpp_source"/>
      </node>
      <node id="28">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI_rank12345.hpp</label>
        <link refid="_test_dyn_view_a_p_i__rank12345_8hpp_source"/>
      </node>
      <node id="29">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI_rank67.hpp</label>
        <link refid="_test_dyn_view_a_p_i__rank67_8hpp_source"/>
      </node>
      <node id="32">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynamicView.hpp</label>
        <link refid="_test_dynamic_view_8hpp_source"/>
      </node>
      <node id="21">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestErrorReporter.hpp</label>
        <link refid="_test_error_reporter_8hpp_source"/>
      </node>
      <node id="34">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestOffsetView.hpp</label>
        <link refid="_test_offset_view_8hpp_source"/>
      </node>
      <node id="37">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestScatterView.hpp</label>
        <link refid="unit__tests_2_test_scatter_view_8hpp_source"/>
      </node>
      <node id="38">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestStaticCrsGraph.hpp</label>
        <link refid="_test_static_crs_graph_8hpp_source"/>
      </node>
      <node id="17">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestUnorderedMap.hpp</label>
        <link refid="_test_unordered_map_8hpp_source"/>
      </node>
      <node id="23">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestVector.hpp</label>
        <link refid="_test_vector_8hpp_source"/>
      </node>
      <node id="30">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestViewCtorPropEmbeddedDim.hpp</label>
        <link refid="containers_2unit__tests_2_test_view_ctor_prop_embedded_dim_8hpp_source"/>
      </node>
      <node id="39">
        <label>src/Kokkos/kokkos/core/perf_test/PerfTest_ViewCopy.hpp</label>
        <link refid="_perf_test___view_copy_8hpp_source"/>
      </node>
      <node id="40">
        <label>src/Kokkos/kokkos/core/perf_test/PerfTest_ViewFill.hpp</label>
        <link refid="_perf_test___view_fill_8hpp_source"/>
      </node>
      <node id="41">
        <label>src/Kokkos/kokkos/core/perf_test/PerfTest_ViewResize.hpp</label>
        <link refid="_perf_test___view_resize_8hpp_source"/>
      </node>
      <node id="42">
        <label>src/Kokkos/kokkos/core/src/Kokkos_AcquireUniqueTokenImpl.hpp</label>
        <link refid="_kokkos___acquire_unique_token_impl_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/Kokkos/kokkos/core/src/Kokkos_Core.hpp</label>
        <link refid="_kokkos___core_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp</label>
        <link refid="_kokkos___mathematical_special_functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Instance.hpp</label>
        <link refid="_kokkos___open_m_p_target___instance_8hpp_source"/>
      </node>
      <node id="44">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations.hpp</label>
        <link refid="_test_atomic_operations_8hpp_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_complexdouble.hpp</label>
        <link refid="_test_atomic_operations__complexdouble_8hpp_source"/>
      </node>
      <node id="46">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_complexfloat.hpp</label>
        <link refid="_test_atomic_operations__complexfloat_8hpp_source"/>
      </node>
      <node id="47">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_double.hpp</label>
        <link refid="_test_atomic_operations__double_8hpp_source"/>
      </node>
      <node id="48">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_float.hpp</label>
        <link refid="_test_atomic_operations__float_8hpp_source"/>
      </node>
      <node id="49">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_int.hpp</label>
        <link refid="_test_atomic_operations__int_8hpp_source"/>
      </node>
      <node id="50">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_longint.hpp</label>
        <link refid="_test_atomic_operations__longint_8hpp_source"/>
      </node>
      <node id="51">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_longlongint.hpp</label>
        <link refid="_test_atomic_operations__longlongint_8hpp_source"/>
      </node>
      <node id="52">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_unsignedint.hpp</label>
        <link refid="_test_atomic_operations__unsignedint_8hpp_source"/>
      </node>
      <node id="53">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_unsignedlongint.hpp</label>
        <link refid="_test_atomic_operations__unsignedlongint_8hpp_source"/>
      </node>
      <node id="55">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicViews.hpp</label>
        <link refid="_test_atomic_views_8hpp_source"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomics.hpp</label>
        <link refid="_test_atomics_8hpp_source"/>
      </node>
      <node id="57">
        <label>src/Kokkos/kokkos/core/unit_test/TestBlockSizeDeduction.hpp</label>
        <link refid="_test_block_size_deduction_8hpp_source"/>
      </node>
      <node id="58">
        <label>src/Kokkos/kokkos/core/unit_test/TestCXX11.hpp</label>
        <link refid="_test_c_x_x11_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>src/Kokkos/kokkos/core/unit_test/TestCXX11Deduction.hpp</label>
        <link refid="_test_c_x_x11_deduction_8hpp_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>src/Kokkos/kokkos/core/unit_test/TestCompilerMacros.hpp</label>
        <link refid="_test_compiler_macros_8hpp_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>src/Kokkos/kokkos/core/unit_test/TestComplex.hpp</label>
        <link refid="_test_complex_8hpp_source"/>
      </node>
      <node id="65">
        <label>src/Kokkos/kokkos/core/unit_test/TestConcepts.hpp</label>
        <link refid="_test_concepts_8hpp_source"/>
      </node>
      <node id="66">
        <label>src/Kokkos/kokkos/core/unit_test/TestCrs.hpp</label>
        <link refid="_test_crs_8hpp_source"/>
      </node>
      <node id="67">
        <label>src/Kokkos/kokkos/core/unit_test/TestDeepCopyAlignment.hpp</label>
        <link refid="_test_deep_copy_alignment_8hpp_source"/>
      </node>
      <node id="68">
        <label>src/Kokkos/kokkos/core/unit_test/TestDefaultDeviceTypeInit.hpp</label>
        <link refid="_test_default_device_type_init_8hpp_source"/>
      </node>
      <node id="69">
        <label>src/Kokkos/kokkos/core/unit_test/TestExecSpacePartitioning.hpp</label>
        <link refid="_test_exec_space_partitioning_8hpp_source"/>
      </node>
      <node id="70">
        <label>src/Kokkos/kokkos/core/unit_test/TestExecutionSpace.hpp</label>
        <link refid="_test_execution_space_8hpp_source"/>
      </node>
      <node id="71">
        <label>src/Kokkos/kokkos/core/unit_test/TestFunctorAnalysis.hpp</label>
        <link refid="_test_functor_analysis_8hpp_source"/>
      </node>
      <node id="72">
        <label>src/Kokkos/kokkos/core/unit_test/TestGraph.hpp</label>
        <link refid="_test_graph_8hpp_source"/>
      </node>
      <node id="73">
        <label>src/Kokkos/kokkos/core/unit_test/TestHostSharedPtrAccessOnDevice.hpp</label>
        <link refid="_test_host_shared_ptr_access_on_device_8hpp_source"/>
      </node>
      <node id="63">
        <label>src/Kokkos/kokkos/core/unit_test/TestInit.hpp</label>
        <link refid="_test_init_8hpp_source"/>
      </node>
      <node id="74">
        <label>src/Kokkos/kokkos/core/unit_test/TestIrregularLayout.hpp</label>
        <link refid="_test_irregular_layout_8hpp_source"/>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>src/Kokkos/kokkos/core/unit_test/TestLocalDeepCopy.hpp</label>
        <link refid="_test_local_deep_copy_8hpp_source"/>
      </node>
      <node id="77">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange.hpp</label>
        <link refid="_test_m_d_range_8hpp_source"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_a.hpp</label>
        <link refid="_test_m_d_range__a_8hpp_source"/>
      </node>
      <node id="79">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_b.hpp</label>
        <link refid="_test_m_d_range__b_8hpp_source"/>
      </node>
      <node id="80">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_c.hpp</label>
        <link refid="_test_m_d_range__c_8hpp_source"/>
      </node>
      <node id="81">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_d.hpp</label>
        <link refid="_test_m_d_range__d_8hpp_source"/>
      </node>
      <node id="82">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_e.hpp</label>
        <link refid="_test_m_d_range__e_8hpp_source"/>
      </node>
      <node id="83">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_f.hpp</label>
        <link refid="_test_m_d_range__f_8hpp_source"/>
      </node>
      <node id="84">
        <label>src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp</label>
        <link refid="_test_mathematical_functions_8hpp_source"/>
      </node>
      <node id="85">
        <label>src/Kokkos/kokkos/core/unit_test/TestMathematicalSpecialFunctions.hpp</label>
        <link refid="_test_mathematical_special_functions_8hpp_source"/>
      </node>
      <node id="86">
        <label>src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp</label>
        <link refid="_test_non_trivial_scalar_types_8hpp_source"/>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp</label>
        <link refid="_test_numeric_traits_8hpp_source"/>
      </node>
      <node id="59">
        <label>src/Kokkos/kokkos/core/unit_test/TestOther.hpp</label>
        <link refid="_test_other_8hpp_source"/>
      </node>
      <node id="92">
        <label>src/Kokkos/kokkos/core/unit_test/TestPolicyConstruction.hpp</label>
        <link refid="_test_policy_construction_8hpp_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>src/Kokkos/kokkos/core/unit_test/TestRange.hpp</label>
        <link refid="_test_range_8hpp_source"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>src/Kokkos/kokkos/core/unit_test/TestRangePolicy.hpp</label>
        <link refid="_test_range_policy_8hpp_source"/>
      </node>
      <node id="95">
        <label>src/Kokkos/kokkos/core/unit_test/TestRangePolicyRequire.hpp</label>
        <link refid="_test_range_policy_require_8hpp_source"/>
      </node>
      <node id="96">
        <label>src/Kokkos/kokkos/core/unit_test/TestReduce.hpp</label>
        <link refid="_test_reduce_8hpp_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>src/Kokkos/kokkos/core/unit_test/TestReduceCombinatorical.hpp</label>
        <link refid="_test_reduce_combinatorical_8hpp_source"/>
      </node>
      <node id="98">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers.hpp</label>
        <link refid="_test_reducers_8hpp_source"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers_a.hpp</label>
        <link refid="_test_reducers__a_8hpp_source"/>
      </node>
      <node id="100">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers_b.hpp</label>
        <link refid="_test_reducers__b_8hpp_source"/>
      </node>
      <node id="101">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers_c.hpp</label>
        <link refid="_test_reducers__c_8hpp_source"/>
      </node>
      <node id="87">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers_d.hpp</label>
        <link refid="_test_reducers__d_8hpp_source"/>
      </node>
      <node id="61">
        <label>src/Kokkos/kokkos/core/unit_test/TestReductions.hpp</label>
        <link refid="_test_reductions_8hpp_source"/>
      </node>
      <node id="102">
        <label>src/Kokkos/kokkos/core/unit_test/TestReductions_DeviceView.hpp</label>
        <link refid="_test_reductions___device_view_8hpp_source"/>
      </node>
      <node id="103">
        <label>src/Kokkos/kokkos/core/unit_test/TestResize.hpp</label>
        <link refid="_test_resize_8hpp_source"/>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>src/Kokkos/kokkos/core/unit_test/TestScan.hpp</label>
        <link refid="_test_scan_8hpp_source"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>src/Kokkos/kokkos/core/unit_test/TestSharedAlloc.hpp</label>
        <link refid="_test_shared_alloc_8hpp_source"/>
      </node>
      <node id="107">
        <label>src/Kokkos/kokkos/core/unit_test/TestStackTrace.hpp</label>
        <link refid="_test_stack_trace_8hpp_source"/>
      </node>
      <node id="134">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_a.hpp</label>
        <link refid="_test_sub_view__a_8hpp_source"/>
      </node>
      <node id="135">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_b.hpp</label>
        <link refid="_test_sub_view__b_8hpp_source"/>
      </node>
      <node id="136">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c01.hpp</label>
        <link refid="_test_sub_view__c01_8hpp_source"/>
      </node>
      <node id="137">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c02.hpp</label>
        <link refid="_test_sub_view__c02_8hpp_source"/>
      </node>
      <node id="138">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c03.hpp</label>
        <link refid="_test_sub_view__c03_8hpp_source"/>
      </node>
      <node id="139">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c04.hpp</label>
        <link refid="_test_sub_view__c04_8hpp_source"/>
      </node>
      <node id="140">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c05.hpp</label>
        <link refid="_test_sub_view__c05_8hpp_source"/>
      </node>
      <node id="141">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c06.hpp</label>
        <link refid="_test_sub_view__c06_8hpp_source"/>
      </node>
      <node id="142">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c07.hpp</label>
        <link refid="_test_sub_view__c07_8hpp_source"/>
      </node>
      <node id="143">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c08.hpp</label>
        <link refid="_test_sub_view__c08_8hpp_source"/>
      </node>
      <node id="144">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c09.hpp</label>
        <link refid="_test_sub_view__c09_8hpp_source"/>
      </node>
      <node id="145">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c10.hpp</label>
        <link refid="_test_sub_view__c10_8hpp_source"/>
      </node>
      <node id="146">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c11.hpp</label>
        <link refid="_test_sub_view__c11_8hpp_source"/>
      </node>
      <node id="147">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c12.hpp</label>
        <link refid="_test_sub_view__c12_8hpp_source"/>
      </node>
      <node id="148">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c13.hpp</label>
        <link refid="_test_sub_view__c13_8hpp_source"/>
      </node>
      <node id="149">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c14.hpp</label>
        <link refid="_test_sub_view__c14_8hpp_source"/>
      </node>
      <node id="108">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeam.hpp</label>
        <link refid="_test_team_8hpp_source"/>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamBasic.hpp</label>
        <link refid="_test_team_basic_8hpp_source"/>
      </node>
      <node id="109">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamReductionScan.hpp</label>
        <link refid="_test_team_reduction_scan_8hpp_source"/>
      </node>
      <node id="111">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamScan.hpp</label>
        <link refid="_test_team_scan_8hpp_source"/>
      </node>
      <node id="110">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamScratch.hpp</label>
        <link refid="_test_team_scratch_8hpp_source"/>
      </node>
      <node id="112">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamTeamSize.hpp</label>
        <link refid="_test_team_team_size_8hpp_source"/>
      </node>
      <node id="88">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamVector.hpp</label>
        <link refid="_test_team_vector_8hpp_source"/>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamVectorRange.hpp</label>
        <link refid="_test_team_vector_range_8hpp_source"/>
      </node>
      <node id="114">
        <label>src/Kokkos/kokkos/core/unit_test/TestTemplateMetaFunctions.hpp</label>
        <link refid="_test_template_meta_functions_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="115">
        <label>src/Kokkos/kokkos/core/unit_test/TestUniqueToken.hpp</label>
        <link refid="_test_unique_token_8hpp_source"/>
      </node>
      <node id="116">
        <label>src/Kokkos/kokkos/core/unit_test/TestUtilities.hpp</label>
        <link refid="_test_utilities_8hpp_source"/>
      </node>
      <node id="117">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp</label>
        <link refid="_test_view_a_p_i_8hpp_source"/>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_a.hpp</label>
        <link refid="_test_view_a_p_i__a_8hpp_source"/>
      </node>
      <node id="119">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_b.hpp</label>
        <link refid="_test_view_a_p_i__b_8hpp_source"/>
      </node>
      <node id="120">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_c.hpp</label>
        <link refid="_test_view_a_p_i__c_8hpp_source"/>
      </node>
      <node id="121">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_d.hpp</label>
        <link refid="_test_view_a_p_i__d_8hpp_source"/>
      </node>
      <node id="122">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_e.hpp</label>
        <link refid="_test_view_a_p_i__e_8hpp_source"/>
      </node>
      <node id="123">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewCopy_a.hpp</label>
        <link refid="_test_view_copy__a_8hpp_source"/>
      </node>
      <node id="124">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewCopy_b.hpp</label>
        <link refid="_test_view_copy__b_8hpp_source"/>
      </node>
      <node id="125">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewCtorPropEmbeddedDim.hpp</label>
        <link refid="core_2unit__test_2_test_view_ctor_prop_embedded_dim_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewIsAssignable.hpp</label>
        <link refid="_test_view_is_assignable_8hpp_source"/>
        <childnode refid="122" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewLayoutStrideAssignment.hpp</label>
        <link refid="_test_view_layout_stride_assignment_8hpp_source"/>
      </node>
      <node id="127">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewLayoutTiled.hpp</label>
        <link refid="_test_view_layout_tiled_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="128">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewMapping_a.hpp</label>
        <link refid="_test_view_mapping__a_8hpp_source"/>
      </node>
      <node id="129">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewMapping_b.hpp</label>
        <link refid="_test_view_mapping__b_8hpp_source"/>
      </node>
      <node id="130">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewMapping_subview.hpp</label>
        <link refid="_test_view_mapping__subview_8hpp_source"/>
      </node>
      <node id="131">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewOfClass.hpp</label>
        <link refid="_test_view_of_class_8hpp_source"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewResize.hpp</label>
        <link refid="_test_view_resize_8hpp_source"/>
      </node>
      <node id="132">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewSpaceAssign.hpp</label>
        <link refid="_test_view_space_assign_8hpp_source"/>
      </node>
      <node id="133">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewSubview.hpp</label>
        <link refid="_test_view_subview_8hpp_source"/>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="150">
        <label>src/Kokkos/kokkos/core/unit_test/TestView_64bit.hpp</label>
        <link refid="_test_view__64bit_8hpp_source"/>
      </node>
      <node id="151">
        <label>src/Kokkos/kokkos/core/unit_test/TestWorkGraph.hpp</label>
        <link refid="_test_work_graph_8hpp_source"/>
      </node>
      <node id="152">
        <label>src/Kokkos/kokkos/core/unit_test/Test_InterOp_Streams.hpp</label>
        <link refid="_test___inter_op___streams_8hpp_source"/>
      </node>
      <node id="153">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test01_execspace.hpp</label>
        <link refid="_test01__execspace_8hpp_source"/>
      </node>
      <node id="154">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test02_atomic_host.hpp</label>
        <link refid="_test02__atomic__host_8hpp_source"/>
      </node>
      <node id="155">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test03a_MemorySpace_malloc.hpp</label>
        <link refid="_test03a___memory_space__malloc_8hpp_source"/>
      </node>
      <node id="156">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test03b_MemorySpace_free.hpp</label>
        <link refid="_test03b___memory_space__free_8hpp_source"/>
      </node>
      <node id="157">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test04_ParallelFor_RangePolicy.hpp</label>
        <link refid="_test04___parallel_for___range_policy_8hpp_source"/>
      </node>
      <node id="158">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test05_ParallelReduce_RangePolicy.hpp</label>
        <link refid="_test05___parallel_reduce___range_policy_8hpp_source"/>
      </node>
      <node id="159">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test06_ParallelFor_MDRangePolicy.hpp</label>
        <link refid="_test06___parallel_for___m_d_range_policy_8hpp_source"/>
      </node>
      <node id="160">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp</label>
        <link refid="_test08__deep__copy_8hpp_source"/>
      </node>
      <node id="161">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test10_HierarchicalBasics.hpp</label>
        <link refid="_test10___hierarchical_basics_8hpp_source"/>
      </node>
      <node id="162">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test11a_ParallelFor_TeamThreadRange.hpp</label>
        <link refid="_test11a___parallel_for___team_thread_range_8hpp_source"/>
      </node>
      <node id="163">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test11b_ParallelFor_TeamVectorRange.hpp</label>
        <link refid="_test11b___parallel_for___team_vector_range_8hpp_source"/>
      </node>
      <node id="164">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test11c_ParallelFor_ThreadVectorRange.hpp</label>
        <link refid="_test11c___parallel_for___thread_vector_range_8hpp_source"/>
      </node>
      <node id="165">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test12a_ThreadScratch.hpp</label>
        <link refid="_test12a___thread_scratch_8hpp_source"/>
      </node>
      <node id="166">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test12b_TeamScratch.hpp</label>
        <link refid="_test12b___team_scratch_8hpp_source"/>
      </node>
      <node id="167">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test13a_ParallelRed_TeamThreadRange.hpp</label>
        <link refid="_test13a___parallel_red___team_thread_range_8hpp_source"/>
      </node>
      <node id="168">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test13b_ParallelRed_TeamVectorRange.hpp</label>
        <link refid="_test13b___parallel_red___team_vector_range_8hpp_source"/>
      </node>
      <node id="169">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test13c_ParallelRed_ThreadVectorRange.hpp</label>
        <link refid="_test13c___parallel_red___thread_vector_range_8hpp_source"/>
      </node>
      <node id="170">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test14_MDRangeReduce.hpp</label>
        <link refid="_test14___m_d_range_reduce_8hpp_source"/>
      </node>
      <node id="171">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test16_ParallelScan.hpp</label>
        <link refid="_test16___parallel_scan_8hpp_source"/>
      </node>
      <node id="172">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test17_CompleteAtomic.hpp</label>
        <link refid="_test17___complete_atomic_8hpp_source"/>
      </node>
      <node id="54">
        <label>src/Kokkos/kokkos/core/unit_test/openmp/TestOpenMP.hpp</label>
        <link refid="_test_open_m_p_8hpp_source"/>
      </node>
      <node id="90">
        <label>src/Kokkos/kokkos/core/unit_test/openmptarget/TestOpenMPTarget.hpp</label>
        <link refid="_test_open_m_p_target_8hpp_source"/>
      </node>
      <node id="173">
        <label>src/Kokkos/kokkos/core/unit_test/tools/TestEventCorrectness.hpp</label>
        <link refid="_test_event_correctness_8hpp_source"/>
      </node>
      <node id="174">
        <label>src/Kokkos/kokkos/core/unit_test/tools/TestLogicalSpaces.hpp</label>
        <link refid="_test_logical_spaces_8hpp_source"/>
      </node>
      <node id="175">
        <label>src/Kokkos/kokkos/example/virtual_functions/classes.hpp</label>
        <link refid="classes_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespace_kokkos">Kokkos</innernamespace>
    <innernamespace refid="namespace_kokkos_1_1_experimental">Kokkos::Experimental</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_kokkos___mathematical_special_functions_8hpp_1ae71449b1cc6e6250b91f539153a7a0d3" prot="public" static="no">
        <name>M_PI</name>
        <initializer>3.14159265358979323846</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="57" column="9" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos<sp/>v.<sp/>3.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>(2020)<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC<sp/>(NTESS).</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>the<sp/>U.S.<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//<sp/>met:</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Corporation<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>NTESS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>NTESS<sp/>OR<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>Christian<sp/>R.<sp/>Trott<sp/>(crtrott@sandia.gov)</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//<sp/>************************************************************************</highlight></codeline>
<codeline lineno="42"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="43"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>KOKKOS_MATHEMATICAL_SPECIAL_FUNCTIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KOKKOS_MATHEMATICAL_SPECIAL_FUNCTIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Kokkos_Macros.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Kokkos_MathematicalFunctions.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Kokkos_NumericTraits.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Kokkos_Complex.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_PI<sp/>3.14159265358979323846</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Kokkos<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Experimental<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RealType&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>RealType<sp/>expint1(RealType<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>a<sp/>conversion<sp/>of<sp/>the<sp/>corresponding<sp/>Fortran<sp/>program<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>S.<sp/>Zhang<sp/>&amp;<sp/>J.<sp/>Jin<sp/>&quot;Computation<sp/>of<sp/>Special<sp/>Functions&quot;<sp/>(Wiley,<sp/>1996).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1epsilon" kindref="compound">Kokkos::Experimental::epsilon</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::exp;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::fabs;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::log;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::pow;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>RealType<sp/>e1;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>-infinity&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>infinity&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>RealType<sp/>r<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>25;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>k_real<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RealType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-r<sp/>*<sp/>k_real<sp/>*<sp/>x<sp/>/<sp/>pow(k_real<sp/>+<sp/>1.0,<sp/>2.0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>e1<sp/>+<sp/>r;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(r)<sp/>&lt;=<sp/>fabs(e1)<sp/>*<sp/>epsilon&lt;RealType&gt;::value)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>-0.5772156649015328<sp/>-<sp/>log(x)<sp/>+<sp/>x<sp/>*<sp/>e1;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>20<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(80.0<sp/>/<sp/>x);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>RealType<sp/>t0<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>m;<sp/>k<sp/>&gt;=<sp/>1;<sp/>k--)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>k_real<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RealType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>k_real<sp/>/<sp/>(1.0<sp/>+<sp/>k_real<sp/>/<sp/>(x<sp/>+<sp/>t0));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>exp(-x)<sp/>*<sp/>(1.0<sp/>/<sp/>(x<sp/>+<sp/>t0));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e1;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RealType&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/><ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex&lt;RealType&gt;</ref><sp/>erf(</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex&lt;RealType&gt;</ref>&amp;<sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>a<sp/>conversion<sp/>of<sp/>the<sp/>corresponding<sp/>Fortran<sp/>program<sp/>written</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>D.E.<sp/>Amos,<sp/>May,1974.<sp/>D.E.<sp/>Amos&apos;<sp/>revisions<sp/>of<sp/>Jan<sp/>86<sp/>incorporated<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ken<sp/>Damrau<sp/>on<sp/>27-Jan-1986<sp/>14:37:13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reference:<sp/>NBS<sp/>HANDBOOK<sp/>OF<sp/>MATHEMATICAL<sp/>FUNCTIONS,<sp/>AMS<sp/>55,<sp/>By</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M.<sp/>ABRAMOWITZ<sp/>AND<sp/>I.A.<sp/>STEGUN,<sp/>December,1955.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Summary:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>If<sp/>x<sp/>&lt;<sp/>0,<sp/>z<sp/>is<sp/>replaced<sp/>by<sp/>-z<sp/>and<sp/>all<sp/>computation<sp/>is<sp/>done<sp/>in<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>half<sp/>lane,<sp/>except<sp/>for<sp/>z<sp/>inside<sp/>the<sp/>circle<sp/>abs(z)&lt;=2,<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>erf(-z)=-erf(z).<sp/>The<sp/>regions<sp/>for<sp/>computation<sp/>are<sp/>divided<sp/>as<sp/>follows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(1)<sp/><sp/>abs(z)&lt;=2<sp/>-<sp/>Power<sp/>series,<sp/>NBS<sp/>Handbook,<sp/>p.<sp/>298</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(2)<sp/><sp/>abs(z)&gt;2<sp/>and<sp/>x&gt;1<sp/>-<sp/>continued<sp/>fraction,<sp/>NBS<sp/>Handbook,<sp/>p.<sp/>298</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(3)<sp/><sp/>abs(z)&gt;2<sp/>and<sp/>0&lt;=x&lt;=1<sp/>and<sp/>abs(y)&lt;6<sp/>-<sp/>series,<sp/>NBS<sp/>Handbook,<sp/>p.<sp/>299</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(4)<sp/><sp/>abs(z)&gt;2<sp/>and<sp/>0&lt;=x&lt;=1<sp/>and<sp/>abs(y)&gt;=6<sp/>-<sp/>asymtotic<sp/>expansion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Error<sp/>condition:<sp/>abs(z^2)<sp/>&gt;<sp/>670<sp/>is<sp/>a<sp/>fatal<sp/>overflow<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::cos;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1epsilon" kindref="compound">Kokkos::Experimental::epsilon</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::exp;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::fabs;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::sin;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">CmplxType<sp/>=<sp/><ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex&lt;RealType&gt;</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inf<sp/>=<sp/>infinity&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tol<sp/>=<sp/>epsilon&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>fnorm<sp/>=<sp/>1.12837916709551;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>gnorm<sp/>=<sp/>0.564189583547756;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>eh<sp/><sp/><sp/><sp/>=<sp/>0.606530659712633;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>ef<sp/><sp/><sp/><sp/>=<sp/>0.778800783071405;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>RealType<sp/>tol<sp/><sp/><sp/>=<sp/>1.0e-13;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>CmplxType<sp/>cans;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>RealType<sp/>az<sp/>=<sp/>Kokkos::abs(z);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(az<sp/>&lt;=<sp/>2.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Series<sp/>for<sp/>abs(z)&lt;=2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>CmplxType<sp/>cz<sp/><sp/><sp/><sp/>=<sp/>z<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>CmplxType<sp/>accum<sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>CmplxType<sp/>term<sp/><sp/>=<sp/>accum;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>RealType<sp/>ak<sp/><sp/><sp/><sp/><sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>35;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>term<sp/><sp/>=<sp/>term<sp/>*<sp/>cz<sp/>/<sp/>ak;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accum<sp/>=<sp/>accum<sp/>+<sp/>term;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Kokkos::abs(term)<sp/>&lt;=<sp/>tol)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ak<sp/>=<sp/>ak<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>cz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-cz;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>RealType<sp/>er<sp/>=<sp/>cz.real();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>RealType<sp/>ei<sp/>=<sp/>cz.imag();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>accum<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>accum<sp/>*<sp/>z<sp/>*<sp/>fnorm;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>cz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>exp(er)<sp/>*<sp/>CmplxType(cos(ei),<sp/>sin(ei));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>cans<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>accum<sp/>*<sp/>cz;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>(az<sp/>&lt;=<sp/>2.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//(az<sp/>&gt;<sp/>2.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>CmplxType<sp/>zp<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>zp<sp/>=<sp/>-z;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>CmplxType<sp/>cz<sp/>=<sp/>zp<sp/>*<sp/>zp;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>RealType<sp/>xp<sp/><sp/>=<sp/>zp.real();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>RealType<sp/>yp<sp/><sp/>=<sp/>zp.imag();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xp<sp/>&gt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>continued<sp/>fraction<sp/>for<sp/>erfc(z),<sp/>abs(Z)&gt;2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(100.0<sp/>/<sp/>az<sp/>+<sp/>5.0);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>term<sp/>=<sp/>cz;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>fnh<sp/>=<sp/>fn<sp/>-<sp/>0.5;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cz<sp/>+<sp/>(fnh<sp/>*<sp/>term)<sp/>/<sp/>(fn<sp/>+<sp/>term);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>fn<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Kokkos::abs(cz)<sp/>&gt;<sp/>670.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CmplxType(inf,<sp/>inf);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-cz;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>er<sp/><sp/><sp/><sp/><sp/>=<sp/>cz.real();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ei<sp/><sp/><sp/><sp/><sp/>=<sp/>cz.imag();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>exp(er)<sp/>*<sp/>CmplxType(cos(ei),<sp/>sin(ei));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>accum<sp/>=<sp/>zp<sp/>*<sp/>gnorm<sp/>*<sp/>cz;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cans<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0<sp/>-<sp/>accum<sp/>/<sp/>term;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>cans<sp/>=<sp/>-cans;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>(xp<sp/>&gt;<sp/>1.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//(xp<sp/>&lt;=<sp/>1.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(yp)<sp/>&lt;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Series<sp/>(3)<sp/>for<sp/>abs(z)&gt;2<sp/>and<sp/>0&lt;=xp&lt;=1<sp/>and<sp/>abs(yp)&lt;6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>s1<sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>s2<sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>x2<sp/><sp/><sp/>=<sp/>xp<sp/>*<sp/>xp;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>fx2<sp/><sp/>=<sp/>4.0<sp/>*<sp/>x2;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>tx<sp/><sp/><sp/>=<sp/>xp<sp/>+<sp/>xp;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>xy<sp/><sp/><sp/>=<sp/>xp<sp/>*<sp/>yp;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>sxyh<sp/>=<sp/>sin(xy);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>sxy<sp/><sp/>=<sp/>sin(xy<sp/>+<sp/>xy);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>cxy<sp/><sp/>=<sp/>cos(xy<sp/>+<sp/>xy);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>fn<sp/><sp/><sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>fnh<sp/><sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ey<sp/><sp/><sp/>=<sp/>exp(yp);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>en<sp/><sp/><sp/>=<sp/>ey;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ehn<sp/><sp/>=<sp/>eh;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>un<sp/><sp/><sp/>=<sp/>ef;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>vn<sp/><sp/><sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>50;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ren<sp/>=<sp/>1.0<sp/>/<sp/>en;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>csh<sp/>=<sp/>en<sp/>+<sp/>ren;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>tm<sp/><sp/>=<sp/>xp<sp/>*<sp/>csh;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ssh<sp/>=<sp/>en<sp/>-<sp/>ren;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>tmp<sp/>=<sp/>fnh<sp/>*<sp/>ssh;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>rn<sp/><sp/>=<sp/>tx<sp/>-<sp/>tm<sp/>*<sp/>cxy<sp/>+<sp/>tmp<sp/>*<sp/>sxy;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ain<sp/>=<sp/>tm<sp/>*<sp/>sxy<sp/>+<sp/>tmp<sp/>*<sp/>cxy;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>cf<sp/><sp/>=<sp/>un<sp/>/<sp/>(vn<sp/>+<sp/>fx2);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cf<sp/>*<sp/>rn;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ain<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cf<sp/>*<sp/>ain;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s1<sp/>+<sp/>rn;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s2<sp/>+<sp/>ain;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fabs(rn)<sp/>+<sp/>fabs(ain))<sp/>&lt;<sp/>tol<sp/>*<sp/>(fabs(s1)<sp/>+<sp/>fabs(s2)))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>un<sp/><sp/>=<sp/>un<sp/>*<sp/>ehn<sp/>*<sp/>ef;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ehn<sp/>=<sp/>ehn<sp/>*<sp/>eh;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>en<sp/><sp/>=<sp/>en<sp/>*<sp/>ey;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vn<sp/><sp/>=<sp/>vn<sp/>+<sp/>fn<sp/>+<sp/>fn<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fnh<sp/>=<sp/>fnh<sp/>+<sp/>0.5;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fn<sp/><sp/>=<sp/>fn<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>s1<sp/>+<sp/>s1;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>s2<sp/>+<sp/>s2;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>s2<sp/>+<sp/>yp;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>s1<sp/>+<sp/>sxyh<sp/>*<sp/>sxyh<sp/>/<sp/>xp;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>s2<sp/>+<sp/>sxy<sp/>/<sp/>tx;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Power<sp/>series<sp/>for<sp/>erf(xp),<sp/>0&lt;=xp&lt;=1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>w<sp/><sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ak<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>tm<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>17;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tm<sp/>=<sp/>tm<sp/>*<sp/>x2<sp/>/<sp/>ak;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/><sp/>=<sp/>w<sp/>+<sp/>tm;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tm<sp/>&lt;=<sp/>tol)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ak<sp/>=<sp/>ak<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ex<sp/>=<sp/>exp(-x2);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>w<sp/>*<sp/>xp<sp/>*<sp/>fnorm<sp/>*<sp/>ex;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>cf<sp/>=<sp/>ex<sp/>/<sp/>pi;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cf<sp/>*<sp/>s1<sp/>+<sp/>w;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cf<sp/>*<sp/>s2;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CmplxType(s1,<sp/>s2);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>cans<sp/>=<sp/>-cans;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>(abs(yp)<sp/>&lt;<sp/>6.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//(abs(YP)&gt;=6.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Asymtotic<sp/>expansion<sp/>for<sp/>0&lt;=xp&lt;=1<sp/>and<sp/>abs(yp)&gt;=6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>rcz<sp/><sp/><sp/>=<sp/>0.5<sp/>/<sp/>cz;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>accum<sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>term<sp/><sp/>=<sp/>accum;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ak<sp/><sp/><sp/><sp/><sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>35;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term<sp/><sp/>=<sp/>-term<sp/>*<sp/>ak<sp/>*<sp/>rcz;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accum<sp/>=<sp/>accum<sp/>+<sp/>term;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Kokkos::abs(term)<sp/>/<sp/>Kokkos::abs(accum)<sp/>&lt;=<sp/>tol)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ak<sp/>=<sp/>ak<sp/>+<sp/>2.0;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accum<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>accum<sp/>*<sp/>gnorm<sp/>/<sp/>zp;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-cz;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>er<sp/>=<sp/>cz.real();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(er)<sp/>&gt;<sp/>670.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CmplxType(inf,<sp/>inf);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ei<sp/>=<sp/>cz.imag();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>exp(er)<sp/>*<sp/>CmplxType(cos(ei),<sp/>sin(ei));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0<sp/>-<sp/>accum<sp/>*<sp/>cz;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>cans<sp/>=<sp/>-cans;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>(abs(YP)&gt;=6.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>(xp<sp/>&lt;=<sp/>1.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>(az<sp/>&gt;<sp/>2.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cans;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RealType&gt;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/><ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex&lt;RealType&gt;</ref><sp/>erfcx(</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex&lt;RealType&gt;</ref>&amp;<sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>a<sp/>conversion<sp/>of<sp/>the<sp/>corresponding<sp/>Fortran<sp/>program<sp/>written</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>D.E.<sp/>Amos,<sp/>May,1974.<sp/>D.E.<sp/>Amos&apos;<sp/>revisions<sp/>of<sp/>Jan<sp/>86<sp/>incorporated<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ken<sp/>Damrau<sp/>on<sp/>27-Jan-1986<sp/>14:37:13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reference:<sp/>NBS<sp/>HANDBOOK<sp/>OF<sp/>MATHEMATICAL<sp/>FUNCTIONS,<sp/>AMS<sp/>55,<sp/>By</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M.<sp/>ABRAMOWITZ<sp/>AND<sp/>I.A.<sp/>STEGUN,<sp/>December,1955.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Summary:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>If<sp/>x<sp/>&lt;<sp/>0,<sp/>z<sp/>is<sp/>replaced<sp/>by<sp/>-z<sp/>and<sp/>all<sp/>computation<sp/>is<sp/>done<sp/>in<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>half<sp/>lane,<sp/>except<sp/>for<sp/>z<sp/>inside<sp/>the<sp/>circle<sp/>abs(z)&lt;=2,<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>erfc(-z)=2-erfc(z).<sp/>The<sp/>regions<sp/>for<sp/>computation<sp/>are<sp/>divided<sp/>as<sp/>follows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(1)<sp/><sp/>abs(z)&lt;=2<sp/>-<sp/>Power<sp/>series,<sp/>NBS<sp/>Handbook,<sp/>p.<sp/>298</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(2)<sp/><sp/>abs(z)&gt;2<sp/>and<sp/>x&gt;1<sp/>-<sp/>continued<sp/>fraction,<sp/>NBS<sp/>Handbook,<sp/>p.<sp/>298</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(3)<sp/><sp/>abs(z)&gt;2<sp/>and<sp/>0&lt;=x&lt;=1<sp/>and<sp/>abs(y)&lt;6<sp/>-<sp/>series,<sp/>NBS<sp/>Handbook,<sp/>p.<sp/>299</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(4)<sp/><sp/>abs(z)&gt;2<sp/>and<sp/>0&lt;=x&lt;=1<sp/>and<sp/>abs(y)&gt;=6<sp/>-<sp/>asymtotic<sp/>expansion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>condition:<sp/>abs(z^2)<sp/>&gt;<sp/>670<sp/>is<sp/>a<sp/>fatal<sp/>overflow<sp/>error<sp/>when<sp/>x&lt;0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::cos;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1epsilon" kindref="compound">Kokkos::Experimental::epsilon</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::exp;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::fabs;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity</ref>;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::isinf;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::sin;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">CmplxType<sp/>=<sp/><ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex&lt;RealType&gt;</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inf<sp/>=<sp/>infinity&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tol<sp/>=<sp/>epsilon&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>fnorm<sp/>=<sp/>1.12837916709551;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>gnorm<sp/>=<sp/>0.564189583547756;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>eh<sp/><sp/><sp/><sp/>=<sp/>0.606530659712633;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>ef<sp/><sp/><sp/><sp/>=<sp/>0.778800783071405;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>RealType<sp/>tol<sp/><sp/><sp/>=<sp/>1.0e-13;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>CmplxType<sp/>cans;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((isinf(z.real()))<sp/>&amp;&amp;<sp/>(z.real()<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>cans<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cans;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((isinf(z.real()))<sp/>&amp;&amp;<sp/>(z.real()<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>cans<sp/>=<sp/>CmplxType(inf,<sp/>inf);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cans;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>RealType<sp/>az<sp/>=<sp/>Kokkos::abs(z);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(az<sp/>&lt;=<sp/>2.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Series<sp/>for<sp/>abs(z)&lt;=2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>CmplxType<sp/>cz<sp/><sp/><sp/><sp/>=<sp/>z<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>CmplxType<sp/>accum<sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>CmplxType<sp/>term<sp/><sp/>=<sp/>accum;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>RealType<sp/>ak<sp/><sp/><sp/><sp/><sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>35;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>term<sp/><sp/>=<sp/>term<sp/>*<sp/>cz<sp/>/<sp/>ak;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accum<sp/>=<sp/>accum<sp/>+<sp/>term;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Kokkos::abs(term)<sp/>&lt;=<sp/>tol)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ak<sp/>=<sp/>ak<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>cz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-cz;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>RealType<sp/>er<sp/>=<sp/>cz.real();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>RealType<sp/>ei<sp/>=<sp/>cz.imag();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>accum<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>accum<sp/>*<sp/>z<sp/>*<sp/>fnorm;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>cz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>exp(er)<sp/>*<sp/>CmplxType(cos(ei),<sp/>sin(ei));</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>cans<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0<sp/>/<sp/>cz<sp/>-<sp/>accum;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>(az<sp/>&lt;=<sp/>2.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//(az<sp/>&gt;<sp/>2.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>CmplxType<sp/>zp<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>zp<sp/>=<sp/>-z;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>CmplxType<sp/>cz<sp/>=<sp/>zp<sp/>*<sp/>zp;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>RealType<sp/>xp<sp/><sp/>=<sp/>zp.real();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>RealType<sp/>yp<sp/><sp/>=<sp/>zp.imag();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xp<sp/>&gt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>continued<sp/>fraction<sp/>for<sp/>erfc(z),<sp/>abs(z)&gt;2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(100.0<sp/>/<sp/>az<sp/>+<sp/>5.0);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>term<sp/>=<sp/>cz;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>fnh<sp/>=<sp/>fn<sp/>-<sp/>0.5;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cz<sp/>+<sp/>(fnh<sp/>*<sp/>term)<sp/>/<sp/>(fn<sp/>+<sp/>term);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>fn<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cans<sp/>=<sp/>zp<sp/>*<sp/>gnorm<sp/>/<sp/>term;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&gt;=<sp/>0.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cans;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Kokkos::abs(cz)<sp/>&gt;<sp/>670.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CmplxType(inf,<sp/>inf);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-cz;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>er<sp/>=<sp/>cz.real();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ei<sp/>=<sp/>cz.imag();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>exp(er)<sp/>*<sp/>CmplxType(cos(ei),<sp/>sin(ei));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0<sp/>/<sp/>cz;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cans<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cz<sp/>+<sp/>cz<sp/>-<sp/>cans;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>(xp<sp/>&gt;<sp/>1.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//(xp<sp/>&lt;=<sp/>1.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(yp)<sp/>&lt;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Series<sp/>(3)<sp/>for<sp/>abs(z)&gt;2<sp/>and<sp/>0&lt;=xp&lt;=1<sp/>and<sp/>abs(yp)&lt;6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>s1<sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>s2<sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>x2<sp/><sp/><sp/>=<sp/>xp<sp/>*<sp/>xp;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>fx2<sp/><sp/>=<sp/>4.0<sp/>*<sp/>x2;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>tx<sp/><sp/><sp/>=<sp/>xp<sp/>+<sp/>xp;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>xy<sp/><sp/><sp/>=<sp/>xp<sp/>*<sp/>yp;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>sxyh<sp/>=<sp/>sin(xy);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>sxy<sp/><sp/>=<sp/>sin(xy<sp/>+<sp/>xy);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>cxy<sp/><sp/>=<sp/>cos(xy<sp/>+<sp/>xy);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>fn<sp/><sp/><sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>fnh<sp/><sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ey<sp/><sp/><sp/>=<sp/>exp(yp);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>en<sp/><sp/><sp/>=<sp/>ey;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ehn<sp/><sp/>=<sp/>eh;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>un<sp/><sp/><sp/>=<sp/>ef;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>vn<sp/><sp/><sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>50;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ren<sp/>=<sp/>1.0<sp/>/<sp/>en;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>csh<sp/>=<sp/>en<sp/>+<sp/>ren;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>tm<sp/><sp/>=<sp/>xp<sp/>*<sp/>csh;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ssh<sp/>=<sp/>en<sp/>-<sp/>ren;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>tmp<sp/>=<sp/>fnh<sp/>*<sp/>ssh;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>rn<sp/><sp/>=<sp/>tx<sp/>-<sp/>tm<sp/>*<sp/>cxy<sp/>+<sp/>tmp<sp/>*<sp/>sxy;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ain<sp/>=<sp/>tm<sp/>*<sp/>sxy<sp/>+<sp/>tmp<sp/>*<sp/>cxy;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>cf<sp/><sp/>=<sp/>un<sp/>/<sp/>(vn<sp/>+<sp/>fx2);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cf<sp/>*<sp/>rn;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ain<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cf<sp/>*<sp/>ain;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s1<sp/>+<sp/>rn;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s2<sp/>+<sp/>ain;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fabs(rn)<sp/>+<sp/>fabs(ain))<sp/>&lt;<sp/>tol<sp/>*<sp/>(fabs(s1)<sp/>+<sp/>fabs(s2)))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>un<sp/><sp/>=<sp/>un<sp/>*<sp/>ehn<sp/>*<sp/>ef;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ehn<sp/>=<sp/>ehn<sp/>*<sp/>eh;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>en<sp/><sp/>=<sp/>en<sp/>*<sp/>ey;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vn<sp/><sp/>=<sp/>vn<sp/>+<sp/>fn<sp/>+<sp/>fn<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fnh<sp/>=<sp/>fnh<sp/>+<sp/>0.5;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fn<sp/><sp/>=<sp/>fn<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>s1<sp/>+<sp/>s1;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>s2<sp/>+<sp/>s2;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>s2<sp/>+<sp/>yp;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>s1<sp/>+<sp/>sxyh<sp/>*<sp/>sxyh<sp/>/<sp/>xp;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>s2<sp/>+<sp/>sxy<sp/>/<sp/>tx;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Power<sp/>series<sp/>for<sp/>erf(xp),<sp/>0&lt;=xp&lt;=1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>w<sp/><sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ak<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>tm<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>17;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tm<sp/>=<sp/>tm<sp/>*<sp/>x2<sp/>/<sp/>ak;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/><sp/>=<sp/>w<sp/>+<sp/>tm;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tm<sp/>&lt;=<sp/>tol)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ak<sp/>=<sp/>ak<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ex<sp/><sp/><sp/>=<sp/>exp(-x2);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>w<sp/>*<sp/>xp<sp/>*<sp/>fnorm<sp/>*<sp/>ex;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>rcz<sp/>=<sp/>CmplxType(cxy,<sp/>sxy);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>y2<sp/><sp/><sp/>=<sp/>yp<sp/>*<sp/>yp;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>exp(x2<sp/>-<sp/>y2)<sp/>*<sp/>rcz;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>exp(-y2)<sp/>*<sp/>rcz;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&gt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans<sp/>=<sp/>cz<sp/>*<sp/>(1.0<sp/>-<sp/>w)<sp/>-<sp/>rcz<sp/>*<sp/>CmplxType(s1,<sp/>s2)<sp/>/<sp/>pi;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans<sp/>=<sp/>cz<sp/>*<sp/>(1.0<sp/>+<sp/>w)<sp/>+<sp/>rcz<sp/>*<sp/>CmplxType(s1,<sp/>s2)<sp/>/<sp/>pi;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>(abs(yp)<sp/>&lt;<sp/>6.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//(abs(YP)&gt;=6.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Asymtotic<sp/>expansion<sp/>for<sp/>0&lt;=xp&lt;=1<sp/>and<sp/>abs(yp)&gt;=6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>rcz<sp/><sp/><sp/>=<sp/>0.5<sp/>/<sp/>cz;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>accum<sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>term<sp/><sp/>=<sp/>accum;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>ak<sp/><sp/><sp/><sp/><sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>35;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term<sp/><sp/>=<sp/>-term<sp/>*<sp/>ak<sp/>*<sp/>rcz;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accum<sp/>=<sp/>accum<sp/>+<sp/>term;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Kokkos::abs(term)<sp/>/<sp/>Kokkos::abs(accum)<sp/>&lt;=<sp/>tol)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ak<sp/>=<sp/>ak<sp/>+<sp/>2.0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accum<sp/>=<sp/>accum<sp/>*<sp/>gnorm<sp/>/<sp/>zp;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>accum<sp/>=<sp/>-accum;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans<sp/>=<sp/>accum;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>(abs(YP)&gt;=6.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>(xp<sp/>&lt;=<sp/>1.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>(az<sp/>&gt;<sp/>2.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cans;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RealType&gt;</highlight></codeline>
<codeline lineno="469"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>RealType<sp/>erfcx(RealType<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">CmplxType<sp/>=<sp/><ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex&lt;RealType&gt;</ref>;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>using<sp/>erfcx(complex)<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>replace<sp/>with<sp/>an<sp/>implementation<sp/>of<sp/>erfcx(real)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>CmplxType<sp/>zin<sp/><sp/>=<sp/>CmplxType(x,<sp/>0.0);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>CmplxType<sp/>zout<sp/>=<sp/>erfcx(zin);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>zout.real();</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CmplxType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RealType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="481"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>CmplxType<sp/>cyl_bessel_j0(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmplxType&amp;<sp/>z,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType&amp;<sp/>joint_val<sp/>=<sp/>25,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntType&amp;<sp/>bw_start<sp/><sp/><sp/>=<sp/>70)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>converted<sp/>and<sp/>modified<sp/>from<sp/>the<sp/>corresponding<sp/>Fortran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>CJYNB<sp/>in<sp/>S.<sp/>Zhang<sp/>&amp;<sp/>J.<sp/>Jin<sp/>&quot;Computation<sp/>of<sp/>Special<sp/>Functions&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//(Wiley,<sp/>1996).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Input<sp/>:<sp/><sp/>z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>Complex<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint_val<sp/>---<sp/>Joint<sp/>point<sp/>of<sp/>abs(z)<sp/>separating<sp/>small<sp/>and<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_start<sp/><sp/>---<sp/>Starting<sp/>point<sp/>for<sp/>backward<sp/>recurrence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output:<sp/><sp/>cbj0<sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>J0(z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::fabs;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::pow;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>CmplxType<sp/>cbj0;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/><sp/><sp/><sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>a[12]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-0.703125e-01,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.112152099609375e+00,<sp/><sp/><sp/>-0.5725014209747314e+00,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.6074042001273483e+01,<sp/><sp/>-0.1100171402692467e+03,<sp/>0.3038090510922384e+04,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-0.1188384262567832e+06,<sp/>0.6252951493434797e+07,<sp/><sp/>-0.4259392165047669e+09,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.3646840080706556e+11,<sp/><sp/>-0.3833534661393944e+13,<sp/>0.4854014686852901e+15};</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>b[12]<sp/>=<sp/>{0.732421875e-01,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0.2271080017089844e+00,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.1727727502584457e+01,<sp/>-0.2438052969955606e+02,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5513358961220206e+03,<sp/>-0.1825775547429318e+05,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.8328593040162893e+06,<sp/>-0.5006958953198893e+08,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.3836255180230433e+10,<sp/>-0.3649010818849833e+12,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.4218971570284096e+14,<sp/>-0.5827244631566907e+16};</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>RealType<sp/>r2p<sp/>=<sp/>2.0<sp/>/<sp/>pi;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>RealType<sp/>a0<sp/><sp/>=<sp/>Kokkos::abs(z);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>RealType<sp/>y0<sp/><sp/>=<sp/>fabs(z.imag());</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>CmplxType<sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;<sp/>1e-100)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>z=0<sp/>as<sp/>a<sp/>special<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>cbj0<sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>z1<sp/>=<sp/>-z;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;=<sp/>joint_val)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>backward<sp/>recurrence<sp/>for<sp/>|z|&lt;=joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cbs<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>csu<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>csv<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf2<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf1<sp/>=<sp/>CmplxType(1e-100,<sp/>0.0);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf,<sp/>cs0;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>bw_start;<sp/>k<sp/>&gt;=<sp/>0;<sp/>k--)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Backward<sp/>recurrence<sp/>(default:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>70)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2.0<sp/>*<sp/>(k<sp/>+<sp/>1.0)<sp/>/<sp/>z<sp/>*<sp/>cf1<sp/>-<sp/>cf2;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>tmp_exponent<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RealType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>0)<sp/>cbj0<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((k<sp/>==<sp/>2<sp/>*<sp/>(k<sp/>/<sp/>2))<sp/>&amp;&amp;<sp/>(k<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&lt;=<sp/>1.0)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbs<sp/>=<sp/>cbs<sp/>+<sp/>2.0<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbs<sp/>=<sp/>cbs<sp/>+<sp/>pow(-1.0,<sp/>tmp_exponent)<sp/>*<sp/>2.0<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csu<sp/>=<sp/>csu<sp/>+<sp/>pow(-1.0,<sp/>tmp_exponent)<sp/>*<sp/>cf<sp/>/<sp/>k;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csv<sp/>=<sp/>csv<sp/>+<sp/>pow(-1.0,<sp/>tmp_exponent)<sp/>*<sp/>k<sp/>/<sp/>(k<sp/>*<sp/>k<sp/>-<sp/>1.0)<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf2<sp/>=<sp/>cf1;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf1<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&lt;=<sp/>1.0)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs0<sp/>=<sp/>cbs<sp/>+<sp/>cf;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs0<sp/>=<sp/>(cbs<sp/>+<sp/>cf)<sp/>/<sp/>Kokkos::cos(z);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbj0<sp/>=<sp/>cbj0<sp/>/<sp/>cs0;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>asymptotic<sp/>expansion<sp/>(5.2.5)<sp/>for<sp/>|z|&gt;joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>ct1<sp/>=<sp/>z1<sp/>-<sp/>0.25<sp/>*<sp/>pi;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cp0<sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>12;<sp/>k++)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>(5.2.9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp0<sp/>=<sp/>cp0<sp/>+<sp/>a[k<sp/>-<sp/>1]<sp/>*<sp/>Kokkos::pow(z1,<sp/>-2.0<sp/>*<sp/>k);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cq0<sp/>=<sp/>-0.125<sp/>/<sp/>z1;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>12;<sp/>k++)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>(5.2.10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cq0<sp/>=<sp/>cq0<sp/>+<sp/>b[k<sp/>-<sp/>1]<sp/>*<sp/>Kokkos::pow(z1,<sp/>-2.0<sp/>*<sp/>k<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cu<sp/>=<sp/>Kokkos::sqrt(r2p<sp/>/<sp/>z1);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbj0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cu<sp/>*<sp/>(cp0<sp/>*<sp/>Kokkos::cos(ct1)<sp/>-<sp/>cq0<sp/>*<sp/>Kokkos::sin(ct1));</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbj0;</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CmplxType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RealType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>CmplxType<sp/>cyl_bessel_y0(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmplxType&amp;<sp/>z,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType&amp;<sp/>joint_val<sp/>=<sp/>25,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntType&amp;<sp/>bw_start<sp/><sp/><sp/>=<sp/>70)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>converted<sp/>and<sp/>modified<sp/>from<sp/>the<sp/>corresponding<sp/>Fortran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>CJYNB<sp/>in<sp/>S.<sp/>Zhang<sp/>&amp;<sp/>J.<sp/>Jin<sp/>&quot;Computation<sp/>of<sp/>Special<sp/>Functions&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//(Wiley,<sp/>1996).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Input<sp/>:<sp/><sp/>z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>Complex<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint_val<sp/>---<sp/>Joint<sp/>point<sp/>of<sp/>abs(z)<sp/>separating<sp/>small<sp/>and<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_start<sp/><sp/>---<sp/>Starting<sp/>point<sp/>for<sp/>backward<sp/>recurrence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Output:<sp/><sp/>cby0<sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>Y0(z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::fabs;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity</ref>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::pow;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inf<sp/>=<sp/>infinity&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>CmplxType<sp/>cby0,<sp/>cbj0;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/><sp/><sp/><sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>el<sp/><sp/><sp/><sp/>=<sp/>0.57721566490153286060651209008240;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>a[12]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-0.703125e-01,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.112152099609375e+00,<sp/><sp/><sp/>-0.5725014209747314e+00,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.6074042001273483e+01,<sp/><sp/>-0.1100171402692467e+03,<sp/>0.3038090510922384e+04,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-0.1188384262567832e+06,<sp/>0.6252951493434797e+07,<sp/><sp/>-0.4259392165047669e+09,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.3646840080706556e+11,<sp/><sp/>-0.3833534661393944e+13,<sp/>0.4854014686852901e+15};</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>b[12]<sp/>=<sp/>{0.732421875e-01,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0.2271080017089844e+00,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.1727727502584457e+01,<sp/>-0.2438052969955606e+02,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5513358961220206e+03,<sp/>-0.1825775547429318e+05,</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.8328593040162893e+06,<sp/>-0.5006958953198893e+08,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.3836255180230433e+10,<sp/>-0.3649010818849833e+12,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.4218971570284096e+14,<sp/>-0.5827244631566907e+16};</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>RealType<sp/>r2p<sp/>=<sp/>2.0<sp/>/<sp/>pi;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>RealType<sp/>a0<sp/><sp/>=<sp/>Kokkos::abs(z);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>RealType<sp/>y0<sp/><sp/>=<sp/>fabs(z.imag());</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>CmplxType<sp/>ci<sp/>=<sp/>CmplxType(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>CmplxType<sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;<sp/>1e-100)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>z=0<sp/>as<sp/>a<sp/>special<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>cby0<sp/>=<sp/>-CmplxType(inf,<sp/>0.0);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>z1<sp/>=<sp/>-z;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;=<sp/>joint_val)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>backward<sp/>recurrence<sp/>for<sp/>|z|&lt;=joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cbs<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>csu<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>csv<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf2<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf1<sp/>=<sp/>CmplxType(1e-100,<sp/>0.0);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf,<sp/>cs0,<sp/>ce;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>bw_start;<sp/>k<sp/>&gt;=<sp/>0;<sp/>k--)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Backward<sp/>recurrence<sp/>(default:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>70)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2.0<sp/>*<sp/>(k<sp/>+<sp/>1.0)<sp/>/<sp/>z<sp/>*<sp/>cf1<sp/>-<sp/>cf2;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>tmp_exponent<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RealType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>0)<sp/>cbj0<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((k<sp/>==<sp/>2<sp/>*<sp/>(k<sp/>/<sp/>2))<sp/>&amp;&amp;<sp/>(k<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&lt;=<sp/>1.0)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbs<sp/>=<sp/>cbs<sp/>+<sp/>2.0<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbs<sp/>=<sp/>cbs<sp/>+<sp/>pow(-1.0,<sp/>tmp_exponent)<sp/>*<sp/>2.0<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csu<sp/>=<sp/>csu<sp/>+<sp/>pow(-1.0,<sp/>tmp_exponent)<sp/>*<sp/>cf<sp/>/<sp/>k;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csv<sp/>=<sp/>csv<sp/>+<sp/>pow(-1.0,<sp/>tmp_exponent)<sp/>*<sp/>k<sp/>/<sp/>(k<sp/>*<sp/>k<sp/>-<sp/>1.0)<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf2<sp/>=<sp/>cf1;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf1<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&lt;=<sp/>1.0)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs0<sp/>=<sp/>cbs<sp/>+<sp/>cf;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs0<sp/>=<sp/>(cbs<sp/>+<sp/>cf)<sp/>/<sp/>Kokkos::cos(z);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbj0<sp/>=<sp/>cbj0<sp/>/<sp/>cs0;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ce<sp/><sp/><sp/>=<sp/>Kokkos::log(z<sp/>/<sp/>2.0)<sp/>+<sp/>el;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cby0<sp/>=<sp/>r2p<sp/>*<sp/>(ce<sp/>*<sp/>cbj0<sp/>-<sp/>4.0<sp/>*<sp/>csu<sp/>/<sp/>cs0);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>asymptotic<sp/>expansion<sp/>(5.2.6)<sp/>for<sp/>|z|&gt;joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>ct1<sp/>=<sp/>z1<sp/>-<sp/>0.25<sp/>*<sp/>pi;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cp0<sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>12;<sp/>k++)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>(5.2.9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp0<sp/>=<sp/>cp0<sp/>+<sp/>a[k<sp/>-<sp/>1]<sp/>*<sp/>Kokkos::pow(z1,<sp/>-2.0<sp/>*<sp/>k);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cq0<sp/>=<sp/>-0.125<sp/>/<sp/>z1;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>12;<sp/>k++)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>(5.2.10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cq0<sp/>=<sp/>cq0<sp/>+<sp/>b[k<sp/>-<sp/>1]<sp/>*<sp/>Kokkos::pow(z1,<sp/>-2.0<sp/>*<sp/>k<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cu<sp/>=<sp/>Kokkos::sqrt(r2p<sp/>/<sp/>z1);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbj0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cu<sp/>*<sp/>(cp0<sp/>*<sp/>Kokkos::cos(ct1)<sp/>-<sp/>cq0<sp/>*<sp/>Kokkos::sin(ct1));</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cby0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cu<sp/>*<sp/>(cp0<sp/>*<sp/>Kokkos::sin(ct1)<sp/>+<sp/>cq0<sp/>*<sp/>Kokkos::cos(ct1));</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>(5.4.2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.imag()<sp/>&lt;<sp/>0.0)<sp/>cby0<sp/>=<sp/>cby0<sp/>-<sp/>2.0<sp/>*<sp/>ci<sp/>*<sp/>cbj0;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.imag()<sp/>&gt;=<sp/>0.0)<sp/>cby0<sp/>=<sp/>cby0<sp/>+<sp/>2.0<sp/>*<sp/>ci<sp/>*<sp/>cbj0;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cby0;</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CmplxType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RealType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="670"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>CmplxType<sp/>cyl_bessel_j1(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmplxType&amp;<sp/>z,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType&amp;<sp/>joint_val<sp/>=<sp/>25,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntType&amp;<sp/>bw_start<sp/><sp/><sp/>=<sp/>70)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>converted<sp/>and<sp/>modified<sp/>from<sp/>the<sp/>corresponding<sp/>Fortran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>CJYNB<sp/>in<sp/>S.<sp/>Zhang<sp/>&amp;<sp/>J.<sp/>Jin<sp/>&quot;Computation<sp/>of<sp/>Special<sp/>Functions&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//(Wiley,<sp/>1996).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Input<sp/>:<sp/><sp/>z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>Complex<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint_val<sp/>---<sp/>Joint<sp/>point<sp/>of<sp/>abs(z)<sp/>separating<sp/>small<sp/>and<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_start<sp/><sp/>---<sp/>Starting<sp/>point<sp/>for<sp/>backward<sp/>recurrence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Output:<sp/><sp/>cbj1<sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>J1(z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::fabs;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::pow;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>CmplxType<sp/>cbj1;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/><sp/><sp/><sp/><sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>a1[12]<sp/>=<sp/>{0.1171875e+00,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0.144195556640625e+00,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.6765925884246826e+00,<sp/>-0.6883914268109947e+01,</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.1215978918765359e+03,<sp/>-0.3302272294480852e+04,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.1276412726461746e+06,<sp/>-0.6656367718817688e+07,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.4502786003050393e+09,<sp/>-0.3833857520742790e+11,</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.4011838599133198e+13,<sp/>-0.5060568503314727e+15};</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>b1[12]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-0.1025390625e+00,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.2775764465332031e+00,<sp/><sp/>-0.1993531733751297e+01,</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.2724882731126854e+02,<sp/><sp/>-0.6038440767050702e+03,<sp/>0.1971837591223663e+05,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-0.8902978767070678e+06,<sp/>0.5310411010968522e+08,<sp/><sp/>-0.4043620325107754e+10,</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.3827011346598605e+12,<sp/><sp/>-0.4406481417852278e+14,<sp/>0.6065091351222699e+16};</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>RealType<sp/>r2p<sp/>=<sp/>2.0<sp/>/<sp/>pi;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>RealType<sp/>a0<sp/><sp/>=<sp/>Kokkos::abs(z);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>RealType<sp/>y0<sp/><sp/>=<sp/>fabs(z.imag());</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>CmplxType<sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;<sp/>1e-100)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>z=0<sp/>as<sp/>a<sp/>special<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>cbj1<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>z1<sp/>=<sp/>-z;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;=<sp/>joint_val)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>backward<sp/>recurrence<sp/>for<sp/>|z|&lt;=joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cbs<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>csu<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>csv<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf2<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf1<sp/>=<sp/>CmplxType(1e-100,<sp/>0.0);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf,<sp/>cs0;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>bw_start;<sp/>k<sp/>&gt;=<sp/>0;<sp/>k--)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Backward<sp/>recurrence<sp/>(default:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>70)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2.0<sp/>*<sp/>(k<sp/>+<sp/>1.0)<sp/>/<sp/>z<sp/>*<sp/>cf1<sp/>-<sp/>cf2;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>tmp_exponent<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RealType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>1)<sp/>cbj1<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((k<sp/>==<sp/>2<sp/>*<sp/>(k<sp/>/<sp/>2))<sp/>&amp;&amp;<sp/>(k<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&lt;=<sp/>1.0)</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbs<sp/>=<sp/>cbs<sp/>+<sp/>2.0<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbs<sp/>=<sp/>cbs<sp/>+<sp/>pow(-1.0,<sp/>tmp_exponent)<sp/>*<sp/>2.0<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csu<sp/>=<sp/>csu<sp/>+<sp/>pow(-1.0,<sp/>tmp_exponent)<sp/>*<sp/>cf<sp/>/<sp/>k;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csv<sp/>=<sp/>csv<sp/>+<sp/>pow(-1.0,<sp/>tmp_exponent)<sp/>*<sp/>k<sp/>/<sp/>(k<sp/>*<sp/>k<sp/>-<sp/>1.0)<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf2<sp/>=<sp/>cf1;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf1<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&lt;=<sp/>1.0)</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs0<sp/>=<sp/>cbs<sp/>+<sp/>cf;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs0<sp/>=<sp/>(cbs<sp/>+<sp/>cf)<sp/>/<sp/>Kokkos::cos(z);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbj1<sp/>=<sp/>cbj1<sp/>/<sp/>cs0;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>asymptotic<sp/>expansion<sp/>(5.2.5)<sp/>for<sp/>|z|&gt;joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>ct2<sp/>=<sp/>z1<sp/>-<sp/>0.75<sp/>*<sp/>pi;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cp1<sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>12;<sp/>k++)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>(5.2.11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp1<sp/>=<sp/>cp1<sp/>+<sp/>a1[k<sp/>-<sp/>1]<sp/>*<sp/>Kokkos::pow(z1,<sp/>-2.0<sp/>*<sp/>k);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cq1<sp/>=<sp/>0.375<sp/>/<sp/>z1;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>12;<sp/>k++)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>(5.2.12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cq1<sp/>=<sp/>cq1<sp/>+<sp/>b1[k<sp/>-<sp/>1]<sp/>*<sp/>Kokkos::pow(z1,<sp/>-2.0<sp/>*<sp/>k<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cu<sp/>=<sp/>Kokkos::sqrt(r2p<sp/>/<sp/>z1);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbj1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cu<sp/>*<sp/>(cp1<sp/>*<sp/>Kokkos::cos(ct2)<sp/>-<sp/>cq1<sp/>*<sp/>Kokkos::sin(ct2));</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real(z)<sp/>&lt;<sp/>0.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>(5.4.2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbj1<sp/>=<sp/>-cbj1;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbj1;</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CmplxType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RealType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="762"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>CmplxType<sp/>cyl_bessel_y1(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmplxType&amp;<sp/>z,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType&amp;<sp/>joint_val<sp/>=<sp/>25,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntType&amp;<sp/>bw_start<sp/><sp/><sp/>=<sp/>70)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>converted<sp/>and<sp/>modified<sp/>from<sp/>the<sp/>corresponding<sp/>Fortran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>CJYNB<sp/>in<sp/>S.<sp/>Zhang<sp/>&amp;<sp/>J.<sp/>Jin<sp/>&quot;Computation<sp/>of<sp/>Special<sp/>Functions&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//(Wiley,<sp/>1996).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Input<sp/>:<sp/><sp/>z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>Complex<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint_val<sp/>---<sp/>Joint<sp/>point<sp/>of<sp/>abs(z)<sp/>separating<sp/>small<sp/>and<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_start<sp/><sp/>---<sp/>Starting<sp/>point<sp/>for<sp/>backward<sp/>recurrence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Output:<sp/><sp/>cby1<sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>Y1(z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::fabs;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity</ref>;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::pow;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inf<sp/>=<sp/>infinity&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>CmplxType<sp/>cby1,<sp/>cbj0,<sp/>cbj1,<sp/>cby0;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/><sp/><sp/><sp/><sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>el<sp/><sp/><sp/><sp/><sp/>=<sp/>0.57721566490153286060651209008240;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>a1[12]<sp/>=<sp/>{0.1171875e+00,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0.144195556640625e+00,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.6765925884246826e+00,<sp/>-0.6883914268109947e+01,</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.1215978918765359e+03,<sp/>-0.3302272294480852e+04,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.1276412726461746e+06,<sp/>-0.6656367718817688e+07,</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.4502786003050393e+09,<sp/>-0.3833857520742790e+11,</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.4011838599133198e+13,<sp/>-0.5060568503314727e+15};</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>b1[12]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-0.1025390625e+00,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.2775764465332031e+00,<sp/><sp/>-0.1993531733751297e+01,</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.2724882731126854e+02,<sp/><sp/>-0.6038440767050702e+03,<sp/>0.1971837591223663e+05,</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-0.8902978767070678e+06,<sp/>0.5310411010968522e+08,<sp/><sp/>-0.4043620325107754e+10,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.3827011346598605e+12,<sp/><sp/>-0.4406481417852278e+14,<sp/>0.6065091351222699e+16};</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>RealType<sp/>r2p<sp/>=<sp/>2.0<sp/>/<sp/>pi;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>RealType<sp/>a0<sp/><sp/>=<sp/>Kokkos::abs(z);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>RealType<sp/>y0<sp/><sp/>=<sp/>fabs(z.imag());</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>CmplxType<sp/>ci<sp/>=<sp/>CmplxType(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>CmplxType<sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;<sp/>1e-100)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>z=0<sp/>as<sp/>a<sp/>special<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>cby1<sp/>=<sp/>-CmplxType(inf,<sp/>0.0);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>z1<sp/>=<sp/>-z;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;=<sp/>joint_val)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>backward<sp/>recurrence<sp/>for<sp/>|z|&lt;=joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cbs<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>csu<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>csv<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf2<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf1<sp/>=<sp/>CmplxType(1e-100,<sp/>0.0);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf,<sp/>cs0,<sp/>ce;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>bw_start;<sp/>k<sp/>&gt;=<sp/>0;<sp/>k--)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Backward<sp/>recurrence<sp/>(default:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>70)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2.0<sp/>*<sp/>(k<sp/>+<sp/>1.0)<sp/>/<sp/>z<sp/>*<sp/>cf1<sp/>-<sp/>cf2;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealType<sp/>tmp_exponent<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RealType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>1)<sp/>cbj1<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>0)<sp/>cbj0<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((k<sp/>==<sp/>2<sp/>*<sp/>(k<sp/>/<sp/>2))<sp/>&amp;&amp;<sp/>(k<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&lt;=<sp/>1.0)</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbs<sp/>=<sp/>cbs<sp/>+<sp/>2.0<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbs<sp/>=<sp/>cbs<sp/>+<sp/>pow(-1.0,<sp/>tmp_exponent)<sp/>*<sp/>2.0<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csu<sp/>=<sp/>csu<sp/>+<sp/>pow(-1.0,<sp/>tmp_exponent)<sp/>*<sp/>cf<sp/>/<sp/>k;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csv<sp/>=<sp/>csv<sp/>+<sp/>pow(-1.0,<sp/>tmp_exponent)<sp/>*<sp/>k<sp/>/<sp/>(k<sp/>*<sp/>k<sp/>-<sp/>1.0)<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf2<sp/>=<sp/>cf1;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf1<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&lt;=<sp/>1.0)</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs0<sp/>=<sp/>cbs<sp/>+<sp/>cf;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs0<sp/>=<sp/>(cbs<sp/>+<sp/>cf)<sp/>/<sp/>Kokkos::cos(z);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbj0<sp/>=<sp/>cbj0<sp/>/<sp/>cs0;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ce<sp/><sp/><sp/>=<sp/>Kokkos::log(z<sp/>/<sp/>2.0)<sp/>+<sp/>el;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cby0<sp/>=<sp/>r2p<sp/>*<sp/>(ce<sp/>*<sp/>cbj0<sp/>-<sp/>4.0<sp/>*<sp/>csu<sp/>/<sp/>cs0);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbj1<sp/>=<sp/>cbj1<sp/>/<sp/>cs0;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cby1<sp/>=<sp/>(cbj1<sp/>*<sp/>cby0<sp/>-<sp/>2.0<sp/>/<sp/>(pi<sp/>*<sp/>z))<sp/>/<sp/>cbj0;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>asymptotic<sp/>expansion<sp/>(5.2.5)<sp/>for<sp/>|z|&gt;joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>ct2<sp/>=<sp/>z1<sp/>-<sp/>0.75<sp/>*<sp/>pi;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cp1<sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>12;<sp/>k++)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>(5.2.11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp1<sp/>=<sp/>cp1<sp/>+<sp/>a1[k<sp/>-<sp/>1]<sp/>*<sp/>Kokkos::pow(z1,<sp/>-2.0<sp/>*<sp/>k);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cq1<sp/>=<sp/>0.375<sp/>/<sp/>z1;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>12;<sp/>k++)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>(5.2.12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cq1<sp/>=<sp/>cq1<sp/>+<sp/>b1[k<sp/>-<sp/>1]<sp/>*<sp/>Kokkos::pow(z1,<sp/>-2.0<sp/>*<sp/>k<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cu<sp/>=<sp/>Kokkos::sqrt(r2p<sp/>/<sp/>z1);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbj1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cu<sp/>*<sp/>(cp1<sp/>*<sp/>Kokkos::cos(ct2)<sp/>-<sp/>cq1<sp/>*<sp/>Kokkos::sin(ct2));</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cby1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cu<sp/>*<sp/>(cp1<sp/>*<sp/>Kokkos::sin(ct2)<sp/>+<sp/>cq1<sp/>*<sp/>Kokkos::cos(ct2));</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>(5.4.2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.imag()<sp/>&lt;<sp/>0.0)<sp/>cby1<sp/>=<sp/>-(cby1<sp/>-<sp/>2.0<sp/>*<sp/>ci<sp/>*<sp/>cbj1);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.imag()<sp/>&gt;=<sp/>0.0)<sp/>cby1<sp/>=<sp/>-(cby1<sp/>+<sp/>2.0<sp/>*<sp/>ci<sp/>*<sp/>cbj1);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cby1;</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CmplxType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RealType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="866"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>CmplxType<sp/>cyl_bessel_i0(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmplxType&amp;<sp/>z,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType&amp;<sp/>joint_val<sp/>=<sp/>25,</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntType&amp;<sp/>bw_start<sp/><sp/><sp/>=<sp/>70)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>converted<sp/>and<sp/>modified<sp/>from<sp/>the<sp/>corresponding<sp/>Fortran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>programs<sp/>CIKNB<sp/>and<sp/>CIK01<sp/>in<sp/>S.<sp/>Zhang<sp/>&amp;<sp/>J.<sp/>Jin<sp/>&quot;Computation<sp/>of<sp/>Special</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functions&quot;<sp/>(Wiley,<sp/>1996).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Input<sp/>:<sp/><sp/>z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>Complex<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint_val<sp/>---<sp/>Joint<sp/>point<sp/>of<sp/>abs(z)<sp/>separating<sp/>small<sp/>and<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_start<sp/><sp/>---<sp/>Starting<sp/>point<sp/>for<sp/>backward<sp/>recurrence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Output:<sp/><sp/>cbi0<sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>I0(z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>CmplxType<sp/>cbi0;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/><sp/><sp/><sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>a[12]<sp/>=<sp/>{0.125,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7.03125e-2,</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7.32421875e-2,</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.1215209960938e-1,</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.2710800170898e-1,</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.7250142097473e-1,</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.7277275025845e0,</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6.0740420012735e0,</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.4380529699556e1,</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.1001714026925e2,</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.5133589612202e2,</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.0380905109224e3};</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>RealType<sp/>a0<sp/><sp/>=<sp/>Kokkos::abs(z);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>CmplxType<sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;<sp/>1e-100)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>z=0<sp/>as<sp/>a<sp/>special<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>cbi0<sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>z1<sp/>=<sp/>-z;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;=<sp/>joint_val)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>backward<sp/>recurrence<sp/>for<sp/>|z|&lt;=joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cbs<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CmplxType<sp/>csk0<sp/>=<sp/>CmplxType(0.0,0.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf0<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf1<sp/>=<sp/>CmplxType(1e-100,<sp/>0.0);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf,<sp/>cs0;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>bw_start;<sp/>k<sp/>&gt;=<sp/>0;<sp/>k--)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Backward<sp/>recurrence<sp/>(default:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>70)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf<sp/>=<sp/>2.0<sp/>*<sp/>(k<sp/>+<sp/>1.0)<sp/>*<sp/>cf1<sp/>/<sp/>z1<sp/>+<sp/>cf0;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>0)<sp/>cbi0<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>((k<sp/>==<sp/>2*(k/2))<sp/>&amp;&amp;<sp/>(k<sp/>!=<sp/>0))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>csk0<sp/>=<sp/>csk0+4.0*cf/static_cast&lt;RealType&gt;(k);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbs<sp/>=<sp/>cbs<sp/>+<sp/>2.0<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf0<sp/>=<sp/>cf1;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf1<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs0<sp/><sp/>=<sp/>Kokkos::exp(z1)<sp/>/<sp/>(cbs<sp/>-<sp/>cf);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbi0<sp/>=<sp/>cbi0<sp/>*<sp/>cs0;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>asymptotic<sp/>expansion<sp/>(6.2.1)<sp/>for<sp/>|z|&gt;joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>ca<sp/>=<sp/>Kokkos::exp(z1)<sp/>/<sp/>Kokkos::sqrt(2.0<sp/>*<sp/>pi<sp/>*<sp/>z1);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbi0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>zr<sp/>=<sp/>1.0<sp/>/<sp/>z1;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>12;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbi0<sp/>=<sp/>cbi0<sp/>+<sp/>a[k<sp/>-<sp/>1]<sp/>*<sp/>Kokkos::pow(zr,<sp/>1.0<sp/>*<sp/>k);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbi0<sp/>=<sp/>ca<sp/>*<sp/>cbi0;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbi0;</highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CmplxType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RealType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="936"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>CmplxType<sp/>cyl_bessel_k0(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmplxType&amp;<sp/>z,</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType&amp;<sp/>joint_val<sp/>=<sp/>9,</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntType&amp;<sp/>bw_start<sp/><sp/><sp/>=<sp/>30)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>converted<sp/>and<sp/>modified<sp/>from<sp/>the<sp/>corresponding<sp/>Fortran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>programs<sp/>CIKNB<sp/>and<sp/>CIK01<sp/>in<sp/>S.<sp/>Zhang<sp/>&amp;<sp/>J.<sp/>Jin<sp/>&quot;Computation<sp/>of<sp/>Special</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functions&quot;<sp/>(Wiley,<sp/>1996).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Purpose:<sp/>Compute<sp/>modified<sp/>Bessel<sp/>function<sp/>K0(z)<sp/>of<sp/>the<sp/>second<sp/>kind<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>zero<sp/>for<sp/>a<sp/>complex<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Input<sp/>:<sp/><sp/>z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>Complex<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint_val<sp/>---<sp/>Joint<sp/>point<sp/>of<sp/>abs(z)<sp/>separating<sp/>small<sp/>and<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_start<sp/><sp/>---<sp/>Starting<sp/>point<sp/>for<sp/>backward<sp/>recurrence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Output:<sp/><sp/>cbk0<sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>K0(z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity</ref>;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::pow;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inf<sp/>=<sp/>infinity&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>CmplxType<sp/>cbk0,<sp/>cbi0;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>el<sp/>=<sp/>0.57721566490153286060651209008240;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>RealType<sp/>a0<sp/><sp/>=<sp/>Kokkos::abs(z);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>CmplxType<sp/>ci<sp/>=<sp/>CmplxType(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>CmplxType<sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;<sp/>1e-100)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>z=0<sp/>as<sp/>a<sp/>special<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>cbk0<sp/>=<sp/>CmplxType(inf,<sp/>0.0);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>z1<sp/>=<sp/>-z;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;=<sp/>joint_val)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>backward<sp/>recurrence<sp/>for<sp/>|z|&lt;=joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cbs<sp/><sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>csk0<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf0<sp/><sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf1<sp/><sp/>=<sp/>CmplxType(1e-100,<sp/>0.0);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf,<sp/>cs0;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>bw_start;<sp/>k<sp/>&gt;=<sp/>0;<sp/>k--)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Backward<sp/>recurrence<sp/>(default:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>30)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf<sp/>=<sp/>2.0<sp/>*<sp/>(k<sp/>+<sp/>1.0)<sp/>*<sp/>cf1<sp/>/<sp/>z1<sp/>+<sp/>cf0;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>0)<sp/>cbi0<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((k<sp/>==<sp/>2<sp/>*<sp/>(k<sp/>/<sp/>2))<sp/>&amp;&amp;<sp/>(k<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csk0<sp/>=<sp/>csk0<sp/>+<sp/>4.0<sp/>*<sp/>cf<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RealType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbs<sp/>=<sp/>cbs<sp/>+<sp/>2.0<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf0<sp/>=<sp/>cf1;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf1<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs0<sp/><sp/>=<sp/>Kokkos::exp(z1)<sp/>/<sp/>(cbs<sp/>-<sp/>cf);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbi0<sp/>=<sp/>cbi0<sp/>*<sp/>cs0;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbk0<sp/>=<sp/>-(Kokkos::log(0.5<sp/>*<sp/>z1)<sp/>+<sp/>el)<sp/>*<sp/>cbi0<sp/>+<sp/>cs0<sp/>*<sp/>csk0;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>asymptotic<sp/>expansion<sp/>(6.2.2)<sp/>for<sp/>|z|&gt;joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>ca0<sp/><sp/>=<sp/>Kokkos::sqrt(pi<sp/>/<sp/>(2.0<sp/>*<sp/>z1))<sp/>*<sp/>Kokkos::exp(-z1);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cbkl<sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cr<sp/><sp/><sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>30;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cr<sp/><sp/><sp/>=<sp/>0.125<sp/>*<sp/>cr<sp/>*<sp/>(0.0<sp/>-<sp/>pow(2.0<sp/>*<sp/>k<sp/>-<sp/>1.0,<sp/>2.0))<sp/>/<sp/>(k<sp/>*<sp/>z1);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbkl<sp/>=<sp/>cbkl<sp/>+<sp/>cr;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbk0<sp/>=<sp/>ca0<sp/>*<sp/>cbkl;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>(6.4.4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.imag()<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbk0<sp/>=<sp/>cbk0<sp/>+<sp/>ci<sp/>*<sp/>pi<sp/>*<sp/>cyl_bessel_i0&lt;CmplxType,<sp/>RealType,<sp/>IntType&gt;(z);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.imag()<sp/>&gt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbk0<sp/>=<sp/>cbk0<sp/>-<sp/>ci<sp/>*<sp/>pi<sp/>*<sp/>cyl_bessel_i0&lt;CmplxType,<sp/>RealType,<sp/>IntType&gt;(z);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbk0;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CmplxType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RealType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>CmplxType<sp/>cyl_bessel_i1(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmplxType&amp;<sp/>z,</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType&amp;<sp/>joint_val<sp/>=<sp/>25,</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntType&amp;<sp/>bw_start<sp/><sp/><sp/>=<sp/>70)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>converted<sp/>and<sp/>modified<sp/>from<sp/>the<sp/>corresponding<sp/>Fortran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>programs<sp/>CIKNB<sp/>and<sp/>CIK01<sp/>in<sp/>S.<sp/>Zhang<sp/>&amp;<sp/>J.<sp/>Jin<sp/>&quot;Computation<sp/>of<sp/>Special</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functions&quot;<sp/>(Wiley,<sp/>1996).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Input<sp/>:<sp/><sp/>z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>Complex<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint_val<sp/>---<sp/>Joint<sp/>point<sp/>of<sp/>abs(z)<sp/>separating<sp/>small<sp/>and<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_start<sp/><sp/>---<sp/>Starting<sp/>point<sp/>for<sp/>backward<sp/>recurrence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Output:<sp/><sp/>cbi1<sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>I1(z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>CmplxType<sp/>cbi1;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/><sp/><sp/><sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>b[12]<sp/>=<sp/>{-0.375,</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1.171875e-1,</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1.025390625e-1,</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1.4419555664063e-1,</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2.7757644653320e-1,</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-6.7659258842468e-1,</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1.9935317337513,</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-6.8839142681099,</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2.7248827311269e1,</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1.2159789187654e2,</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-6.0384407670507e2,</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-3.3022722944809e3};</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>RealType<sp/>a0<sp/><sp/>=<sp/>Kokkos::abs(z);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>CmplxType<sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;<sp/>1e-100)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>z=0<sp/>as<sp/>a<sp/>special<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>cbi1<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>z1<sp/>=<sp/>-z;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;=<sp/>joint_val)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>backward<sp/>recurrence<sp/>for<sp/>|z|&lt;=joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cbs<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CmplxType<sp/>csk0<sp/>=<sp/>CmplxType(0.0,0.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf0<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf1<sp/>=<sp/>CmplxType(1e-100,<sp/>0.0);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf,<sp/>cs0;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>bw_start;<sp/>k<sp/>&gt;=<sp/>0;<sp/>k--)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Backward<sp/>recurrence<sp/>(default:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>70)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf<sp/>=<sp/>2.0<sp/>*<sp/>(k<sp/>+<sp/>1.0)<sp/>*<sp/>cf1<sp/>/<sp/>z1<sp/>+<sp/>cf0;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>1)<sp/>cbi1<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>((k<sp/>==<sp/>2*(k/2))<sp/>&amp;&amp;<sp/>(k<sp/>!=<sp/>0))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>csk0<sp/>=<sp/>csk0+4.0*cf/static_cast&lt;RealType&gt;(k);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbs<sp/>=<sp/>cbs<sp/>+<sp/>2.0<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf0<sp/>=<sp/>cf1;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf1<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs0<sp/><sp/>=<sp/>Kokkos::exp(z1)<sp/>/<sp/>(cbs<sp/>-<sp/>cf);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbi1<sp/>=<sp/>cbi1<sp/>*<sp/>cs0;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>asymptotic<sp/>expansion<sp/>(6.2.1)<sp/>for<sp/>|z|&gt;joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>ca<sp/>=<sp/>Kokkos::exp(z1)<sp/>/<sp/>Kokkos::sqrt(2.0<sp/>*<sp/>pi<sp/>*<sp/>z1);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbi1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>zr<sp/>=<sp/>1.0<sp/>/<sp/>z1;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>12;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbi1<sp/>=<sp/>cbi1<sp/>+<sp/>b[k<sp/>-<sp/>1]<sp/>*<sp/>Kokkos::pow(zr,<sp/>1.0<sp/>*<sp/>k);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbi1<sp/>=<sp/>ca<sp/>*<sp/>cbi1;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>(6.4.4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbi1<sp/>=<sp/>-cbi1;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbi1;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CmplxType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RealType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>CmplxType<sp/>cyl_bessel_k1(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmplxType&amp;<sp/>z,</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType&amp;<sp/>joint_val<sp/>=<sp/>9,</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntType&amp;<sp/>bw_start<sp/><sp/><sp/>=<sp/>30)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>converted<sp/>and<sp/>modified<sp/>from<sp/>the<sp/>corresponding<sp/>Fortran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>programs<sp/>CIKNB<sp/>and<sp/>CIK01<sp/>in<sp/>S.<sp/>Zhang<sp/>&amp;<sp/>J.<sp/>Jin<sp/>&quot;Computation<sp/>of<sp/>Special</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functions&quot;<sp/>(Wiley,<sp/>1996).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Input<sp/>:<sp/><sp/>z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>Complex<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint_val<sp/>---<sp/>Joint<sp/>point<sp/>of<sp/>abs(z)<sp/>separating<sp/>small<sp/>and<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_start<sp/><sp/>---<sp/>Starting<sp/>point<sp/>for<sp/>backward<sp/>recurrence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Output:<sp/><sp/>cbk1<sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>K1(z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity</ref>;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::pow;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inf<sp/>=<sp/>infinity&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>CmplxType<sp/>cbk0,<sp/>cbi0,<sp/>cbk1,<sp/>cbi1;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>el<sp/>=<sp/>0.57721566490153286060651209008240;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>RealType<sp/>a0<sp/><sp/>=<sp/>Kokkos::abs(z);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>CmplxType<sp/>ci<sp/>=<sp/>CmplxType(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>CmplxType<sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;<sp/>1e-100)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>z=0<sp/>as<sp/>a<sp/>special<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>cbk1<sp/>=<sp/>CmplxType(inf,<sp/>0.0);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>z1<sp/>=<sp/>-z;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a0<sp/>&lt;=<sp/>joint_val)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>backward<sp/>recurrence<sp/>for<sp/>|z|&lt;=joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cbs<sp/><sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>csk0<sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf0<sp/><sp/>=<sp/>CmplxType(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf1<sp/><sp/>=<sp/>CmplxType(1e-100,<sp/>0.0);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cf,<sp/>cs0;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>bw_start;<sp/>k<sp/>&gt;=<sp/>0;<sp/>k--)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Backward<sp/>recurrence<sp/>(default:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>30)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf<sp/>=<sp/>2.0<sp/>*<sp/>(k<sp/>+<sp/>1.0)<sp/>*<sp/>cf1<sp/>/<sp/>z1<sp/>+<sp/>cf0;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>1)<sp/>cbi1<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>0)<sp/>cbi0<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((k<sp/>==<sp/>2<sp/>*<sp/>(k<sp/>/<sp/>2))<sp/>&amp;&amp;<sp/>(k<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csk0<sp/>=<sp/>csk0<sp/>+<sp/>4.0<sp/>*<sp/>cf<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RealType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbs<sp/>=<sp/>cbs<sp/>+<sp/>2.0<sp/>*<sp/>cf;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf0<sp/>=<sp/>cf1;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf1<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs0<sp/><sp/>=<sp/>Kokkos::exp(z1)<sp/>/<sp/>(cbs<sp/>-<sp/>cf);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbi0<sp/>=<sp/>cbi0<sp/>*<sp/>cs0;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbi1<sp/>=<sp/>cbi1<sp/>*<sp/>cs0;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbk0<sp/>=<sp/>-(Kokkos::log(0.5<sp/>*<sp/>z1)<sp/>+<sp/>el)<sp/>*<sp/>cbi0<sp/>+<sp/>cs0<sp/>*<sp/>csk0;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbk1<sp/>=<sp/>(1.0<sp/>/<sp/>z1<sp/>-<sp/>cbi1<sp/>*<sp/>cbk0)<sp/>/<sp/>cbi0;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>asymptotic<sp/>expansion<sp/>(6.2.2)<sp/>for<sp/>|z|&gt;joint_val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default:9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>ca0<sp/><sp/>=<sp/>Kokkos::sqrt(pi<sp/>/<sp/>(2.0<sp/>*<sp/>z1))<sp/>*<sp/>Kokkos::exp(-z1);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cbkl<sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CmplxType<sp/>cr<sp/><sp/><sp/>=<sp/>CmplxType(1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>30;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cr<sp/><sp/><sp/>=<sp/>0.125<sp/>*<sp/>cr<sp/>*<sp/>(4.0<sp/>-<sp/>pow(2.0<sp/>*<sp/>k<sp/>-<sp/>1.0,<sp/>2.0))<sp/>/<sp/>(k<sp/>*<sp/>z1);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbkl<sp/>=<sp/>cbkl<sp/>+<sp/>cr;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbk1<sp/>=<sp/>ca0<sp/>*<sp/>cbkl;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.real()<sp/>&lt;<sp/>0.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>(6.4.4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.imag()<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbk1<sp/>=<sp/>-cbk1<sp/>-<sp/>ci<sp/>*<sp/>pi<sp/>*<sp/>cyl_bessel_i1&lt;CmplxType,<sp/>RealType,<sp/>IntType&gt;(z);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.imag()<sp/>&gt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbk1<sp/>=<sp/>-cbk1<sp/>+<sp/>ci<sp/>*<sp/>pi<sp/>*<sp/>cyl_bessel_i1&lt;CmplxType,<sp/>RealType,<sp/>IntType&gt;(z);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbk1;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CmplxType&gt;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>CmplxType<sp/>cyl_bessel_h10(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmplxType&amp;<sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>converted<sp/>and<sp/>modified<sp/>from<sp/>the<sp/>corresponding<sp/>Fortran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>programs<sp/>CH12N<sp/>in<sp/>S.<sp/>Zhang<sp/>&amp;<sp/>J.<sp/>Jin<sp/>&quot;Computation<sp/>of<sp/>Special<sp/>Functions&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//(Wiley,<sp/>1996).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">RealType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CmplxType::value_type;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity</ref>;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inf<sp/>=<sp/>infinity&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>CmplxType<sp/>ch10,<sp/>cbk0,<sp/>cbj0,<sp/>cby0;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>CmplxType<sp/>ci<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CmplxType(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((z.real()<sp/>==<sp/>0.0)<sp/>&amp;&amp;<sp/>(z.imag()<sp/>==<sp/>0.0))<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>ch10<sp/>=<sp/>CmplxType(1.0,<sp/>-inf);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.imag()<sp/>&lt;=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>cbj0<sp/>=<sp/>cyl_bessel_j0&lt;CmplxType,<sp/>RealType,<sp/>int&gt;(z);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>cby0<sp/>=<sp/>cyl_bessel_y0&lt;CmplxType,<sp/>RealType,<sp/>int&gt;(z);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>ch10<sp/>=<sp/>cbj0<sp/>+<sp/>ci<sp/>*<sp/>cby0;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//(z.imag()<sp/>&gt;<sp/>0.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>cbk0<sp/>=<sp/>cyl_bessel_k0&lt;CmplxType,<sp/>RealType,<sp/>int&gt;(-ci<sp/>*<sp/>z,<sp/>18.0,<sp/>70);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>ch10<sp/>=<sp/>2.0<sp/>/<sp/>(pi<sp/>*<sp/>ci)<sp/>*<sp/>cbk0;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch10;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CmplxType&gt;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>CmplxType<sp/>cyl_bessel_h11(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmplxType&amp;<sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>converted<sp/>and<sp/>modified<sp/>from<sp/>the<sp/>corresponding<sp/>Fortran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>programs<sp/>CH12N<sp/>in<sp/>S.<sp/>Zhang<sp/>&amp;<sp/>J.<sp/>Jin<sp/>&quot;Computation<sp/>of<sp/>Special<sp/>Functions&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//(Wiley,<sp/>1996).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">RealType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CmplxType::value_type;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity</ref>;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inf<sp/>=<sp/>infinity&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>CmplxType<sp/>ch11,<sp/>cbk1,<sp/>cbj1,<sp/>cby1;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>CmplxType<sp/>ci<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CmplxType(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((z.real()<sp/>==<sp/>0.0)<sp/>&amp;&amp;<sp/>(z.imag()<sp/>==<sp/>0.0))<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>ch11<sp/>=<sp/>CmplxType(0.0,<sp/>-inf);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.imag()<sp/>&lt;=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>cbj1<sp/>=<sp/>cyl_bessel_j1&lt;CmplxType,<sp/>RealType,<sp/>int&gt;(z);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>cby1<sp/>=<sp/>cyl_bessel_y1&lt;CmplxType,<sp/>RealType,<sp/>int&gt;(z);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>ch11<sp/>=<sp/>cbj1<sp/>+<sp/>ci<sp/>*<sp/>cby1;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//(z.imag()<sp/>&gt;<sp/>0.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>cbk1<sp/>=<sp/>cyl_bessel_k1&lt;CmplxType,<sp/>RealType,<sp/>int&gt;(-ci<sp/>*<sp/>z,<sp/>18.0,<sp/>70);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>ch11<sp/>=<sp/>-2.0<sp/>/<sp/>pi<sp/>*<sp/>cbk1;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch11;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CmplxType&gt;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>CmplxType<sp/>cyl_bessel_h20(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmplxType&amp;<sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>converted<sp/>and<sp/>modified<sp/>from<sp/>the<sp/>corresponding<sp/>Fortran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>programs<sp/>CH12N<sp/>in<sp/>S.<sp/>Zhang<sp/>&amp;<sp/>J.<sp/>Jin<sp/>&quot;Computation<sp/>of<sp/>Special<sp/>Functions&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//(Wiley,<sp/>1996).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">RealType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CmplxType::value_type;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity</ref>;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inf<sp/>=<sp/>infinity&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>CmplxType<sp/>ch20,<sp/>cbk0,<sp/>cbj0,<sp/>cby0;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>CmplxType<sp/>ci<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CmplxType(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((z.real()<sp/>==<sp/>0.0)<sp/>&amp;&amp;<sp/>(z.imag()<sp/>==<sp/>0.0))<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>ch20<sp/>=<sp/>CmplxType(1.0,<sp/>inf);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.imag()<sp/>&gt;=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>cbj0<sp/>=<sp/>cyl_bessel_j0&lt;CmplxType,<sp/>RealType,<sp/>int&gt;(z);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>cby0<sp/>=<sp/>cyl_bessel_y0&lt;CmplxType,<sp/>RealType,<sp/>int&gt;(z);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>ch20<sp/>=<sp/>cbj0<sp/>-<sp/>ci<sp/>*<sp/>cby0;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//(z.imag()<sp/>&lt;<sp/>0.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>cbk0<sp/>=<sp/>cyl_bessel_k0&lt;CmplxType,<sp/>RealType,<sp/>int&gt;(ci<sp/>*<sp/>z,<sp/>18.0,<sp/>70);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>ch20<sp/>=<sp/>2.0<sp/>/<sp/>pi<sp/>*<sp/>ci<sp/>*<sp/>cbk0;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch20;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CmplxType&gt;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/>CmplxType<sp/>cyl_bessel_h21(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmplxType&amp;<sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>converted<sp/>and<sp/>modified<sp/>from<sp/>the<sp/>corresponding<sp/>Fortran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>programs<sp/>CH12N<sp/>in<sp/>S.<sp/>Zhang<sp/>&amp;<sp/>J.<sp/>Jin<sp/>&quot;Computation<sp/>of<sp/>Special<sp/>Functions&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//(Wiley,<sp/>1996).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">RealType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CmplxType::value_type;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_experimental_1_1infinity" kindref="compound">Kokkos::Experimental::infinity</ref>;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inf<sp/>=<sp/>infinity&lt;RealType&gt;::value;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>CmplxType<sp/>ch21,<sp/>cbk1,<sp/>cbj1,<sp/>cby1;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RealType<sp/>pi<sp/>=<sp/>M_PI;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>CmplxType<sp/>ci<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CmplxType(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((z.real()<sp/>==<sp/>0.0)<sp/>&amp;&amp;<sp/>(z.imag()<sp/>==<sp/>0.0))<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>ch21<sp/>=<sp/>CmplxType(0.0,<sp/>inf);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z.imag()<sp/>&gt;=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>cbj1<sp/>=<sp/>cyl_bessel_j1&lt;CmplxType,<sp/>RealType,<sp/>int&gt;(z);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>cby1<sp/>=<sp/>cyl_bessel_y1&lt;CmplxType,<sp/>RealType,<sp/>int&gt;(z);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>ch21<sp/>=<sp/>cbj1<sp/>-<sp/>ci<sp/>*<sp/>cby1;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//(z.imag()<sp/>&lt;<sp/>0.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>cbk1<sp/>=<sp/>cyl_bessel_k1&lt;CmplxType,<sp/>RealType,<sp/>int&gt;(ci<sp/>*<sp/>z,<sp/>18.0,<sp/>70);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>ch21<sp/>=<sp/>-2.0<sp/>/<sp/>pi<sp/>*<sp/>cbk1;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch21;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Kokkos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp"/>
  </compounddef>
</doxygen>
