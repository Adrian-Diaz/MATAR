<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_generic_8hpp" kind="file" language="C++">
    <compoundname>Generic.hpp</compoundname>
    <includes local="no">type_traits</includes>
    <includes refid="_common_8hpp" local="yes">desul/atomics/Common.hpp</includes>
    <includes refid="_compare___exchange_8hpp" local="yes">desul/atomics/Compare_Exchange.hpp</includes>
    <includes refid="_lock___array_8hpp" local="yes">desul/atomics/Lock_Array.hpp</includes>
    <includes refid="_macros_8hpp" local="yes">desul/atomics/Macros.hpp</includes>
    <includes refid="_s_y_c_l_8hpp" local="no">desul/atomics/SYCL.hpp</includes>
    <includes refid="_c_u_d_a_8hpp" local="no">desul/atomics/CUDA.hpp</includes>
    <includes refid="_g_c_c_8hpp" local="no">desul/atomics/GCC.hpp</includes>
    <includes refid="_h_i_p_8hpp" local="no">desul/atomics/HIP.hpp</includes>
    <includes refid="_open_m_p_8hpp" local="no">desul/atomics/OpenMP.hpp</includes>
    <includedby refid="atomics_8hpp" local="yes">src/Kokkos/kokkos/core/src/desul/atomics.hpp</includedby>
    <includedby refid="_atomic___ref_8hpp" local="yes">src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp</includedby>
    <incdepgraph>
      <node id="12">
        <label>desul/atomics/CUDA.hpp</label>
        <link refid="_c_u_d_a_8hpp_source"/>
      </node>
      <node id="3">
        <label>desul/atomics/Common.hpp</label>
        <link refid="_common_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>desul/atomics/Compare_Exchange.hpp</label>
        <link refid="_compare___exchange_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>desul/atomics/GCC.hpp</label>
        <link refid="_g_c_c_8hpp_source"/>
      </node>
      <node id="1">
        <label>src/Kokkos/kokkos/core/src/desul/atomics/Generic.hpp</label>
        <link refid="_generic_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>desul/atomics/HIP.hpp</label>
        <link refid="_h_i_p_8hpp_source"/>
      </node>
      <node id="8">
        <label>desul/atomics/Lock_Array.hpp</label>
        <link refid="_lock___array_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>desul/atomics/Lock_Array_Cuda.hpp</label>
        <link refid="_lock___array___cuda_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>desul/atomics/Lock_Array_HIP.hpp</label>
        <link refid="_lock___array___h_i_p_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>desul/atomics/Macros.hpp</label>
        <link refid="_macros_8hpp_source"/>
      </node>
      <node id="15">
        <label>desul/atomics/OpenMP.hpp</label>
        <link refid="_open_m_p_8hpp_source"/>
      </node>
      <node id="11">
        <label>desul/atomics/SYCL.hpp</label>
        <link refid="_s_y_c_l_8hpp_source"/>
      </node>
      <node id="6">
        <label>atomic</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="2">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/Kokkos/kokkos/core/src/desul/atomics.hpp</label>
        <link refid="atomics_8hpp_source"/>
      </node>
      <node id="3">
        <label>src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp</label>
        <link refid="_atomic___ref_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Kokkos/kokkos/core/src/desul/atomics/Generic.hpp</label>
        <link refid="_generic_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structdesul_1_1_impl_1_1_max_oper" prot="public">desul::Impl::MaxOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_min_oper" prot="public">desul::Impl::MinOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1may__exit__early" prot="public">desul::Impl::may_exit_early</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1may__exit__early_3_01_op_00_01_scalar1_00_01_scalar2_00_01decltype_07_opbda65801b6365997fa1eeb12ddf46756" prot="public">desul::Impl::may_exit_early&lt; Op, Scalar1, Scalar2, decltype(Op::check_early_exit(std::declval&lt; Scalar1 const &amp; &gt;(), std::declval&lt; Scalar2 const &amp; &gt;()))&gt;</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_add_oper" prot="public">desul::Impl::AddOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_sub_oper" prot="public">desul::Impl::SubOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_mul_oper" prot="public">desul::Impl::MulOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_div_oper" prot="public">desul::Impl::DivOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_mod_oper" prot="public">desul::Impl::ModOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_and_oper" prot="public">desul::Impl::AndOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_or_oper" prot="public">desul::Impl::OrOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_xor_oper" prot="public">desul::Impl::XorOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_nand_oper" prot="public">desul::Impl::NandOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_l_shift_oper" prot="public">desul::Impl::LShiftOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_r_shift_oper" prot="public">desul::Impl::RShiftOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_store_oper" prot="public">desul::Impl::StoreOper</innerclass>
    <innerclass refid="structdesul_1_1_impl_1_1_load_oper" prot="public">desul::Impl::LoadOper</innerclass>
    <innernamespace refid="namespacedesul">desul</innernamespace>
    <innernamespace refid="namespacedesul_1_1_impl">desul::Impl</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2019,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC</highlight></codeline>
<codeline lineno="3"><highlight class="comment">and<sp/>DESUL<sp/>project<sp/>contributors.<sp/>See<sp/>the<sp/>COPYRIGHT<sp/>file<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Source:<sp/>https://github.com/desul/desul</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">SPDX-License-Identifier:<sp/>(BSD-3-Clause)</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DESUL_ATOMICS_GENERIC_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DESUL_ATOMICS_GENERIC_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wstrict-aliasing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;desul/atomics/Common.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;desul/atomics/Compare_Exchange.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;desul/atomics/Lock_Array.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;desul/atomics/Macros.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Combination<sp/>operands<sp/>to<sp/>be<sp/>used<sp/>in<sp/>an<sp/>Compare<sp/>and<sp/>Exchange<sp/>based<sp/>atomic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">desul<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="25" refid="structdesul_1_1_impl_1_1_max_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_max_oper" kindref="compound">MaxOper</ref><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val1<sp/>&gt;<sp/>val2<sp/>?<sp/>val1<sp/>:<sp/>val2);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_early_exit(Scalar1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>val1,<sp/>Scalar2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>&gt;<sp/>val2;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="37" refid="structdesul_1_1_impl_1_1_min_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_min_oper" kindref="compound">MinOper</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val1<sp/>&lt;<sp/>val2<sp/>?<sp/>val1<sp/>:<sp/>val2);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_early_exit(Scalar1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>val1,<sp/>Scalar2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>&lt;<sp/>val2;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>exit<sp/>early<sp/>optimization<sp/>causes<sp/>weird<sp/>compiler<sp/>errors<sp/>with<sp/>MSVC<sp/>2019</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DESUL_HAVE_MSVC_ATOMICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Op,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="51" refid="structdesul_1_1_impl_1_1may__exit__early" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1may__exit__early" kindref="compound">may_exit_early</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Op,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="54" refid="structdesul_1_1_impl_1_1may__exit__early_3_01_op_00_01_scalar1_00_01_scalar2_00_01decltype_07_opbda65801b6365997fa1eeb12ddf46756" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1may__exit__early" kindref="compound">may_exit_early</ref>&lt;Op,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar1,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar2,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decltype(Op::check_early_exit(std::declval&lt;Scalar1<sp/>const&amp;&gt;(),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;Scalar2<sp/>const&amp;&gt;()))&gt;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Op,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DESUL_FUNCTION<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;may_exit_early&lt;Op,<sp/>Scalar1,<sp/>Scalar2&gt;::value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="63"><highlight class="normal">check_early_exit(Op<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>Scalar1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>val1,<sp/>Scalar2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Op::check_early_exit(val1,<sp/>val2);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Op,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DESUL_FUNCTION<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!may_exit_early&lt;Op,<sp/>Scalar1,<sp/>Scalar2&gt;::value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="69"><highlight class="normal">check_early_exit(Op<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>Scalar1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>Scalar2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="75" refid="structdesul_1_1_impl_1_1_add_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_add_oper" kindref="compound">AddOper</ref><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>+<sp/>val2;<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="81" refid="structdesul_1_1_impl_1_1_sub_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_sub_oper" kindref="compound">SubOper</ref><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>-<sp/>val2;<sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="87" refid="structdesul_1_1_impl_1_1_mul_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_mul_oper" kindref="compound">MulOper</ref><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>*<sp/>val2;<sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="93" refid="structdesul_1_1_impl_1_1_div_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_div_oper" kindref="compound">DivOper</ref><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>/<sp/>val2;<sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal">};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="99" refid="structdesul_1_1_impl_1_1_mod_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_mod_oper" kindref="compound">ModOper</ref><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>%<sp/>val2;<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="105" refid="structdesul_1_1_impl_1_1_and_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_and_oper" kindref="compound">AndOper</ref><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>&amp;<sp/>val2;<sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal">};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="111" refid="structdesul_1_1_impl_1_1_or_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_or_oper" kindref="compound">OrOper</ref><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>|<sp/>val2;<sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="117" refid="structdesul_1_1_impl_1_1_xor_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_xor_oper" kindref="compound">XorOper</ref><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>^<sp/>val2;<sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal">};</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="123" refid="structdesul_1_1_impl_1_1_nand_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_nand_oper" kindref="compound">NandOper</ref><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~(val1<sp/>&amp;<sp/>val2);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal">};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="131" refid="structdesul_1_1_impl_1_1_l_shift_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_l_shift_oper" kindref="compound">LShiftOper</ref><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>&lt;&lt;<sp/>val2;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal">};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="139" refid="structdesul_1_1_impl_1_1_r_shift_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_r_shift_oper" kindref="compound">RShiftOper</ref><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>&gt;&gt;<sp/>val2;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="147" refid="structdesul_1_1_impl_1_1_store_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_store_oper" kindref="compound">StoreOper</ref><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;<sp/>val2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val2;<sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal">};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Scalar2&gt;</highlight></codeline>
<codeline lineno="153" refid="structdesul_1_1_impl_1_1_load_oper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdesul_1_1_impl_1_1_load_oper" kindref="compound">LoadOper</ref><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>DESUL_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar1<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar2&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1;<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal">};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Oper,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MemoryOrder,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MemoryScope,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>equivalent<sp/>to:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>requires<sp/>atomic_always_lock_free(sizeof(T))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>std::enable_if_t&lt;atomic_always_lock_free(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="163"><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="165"><highlight class="normal">atomic_fetch_oper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Oper&amp;<sp/>op,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dont_deduce_this_parameter_t&lt;const<sp/>T&gt;<sp/>val,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">cas_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structdesul_1_1_impl_1_1atomic__compare__exchange__type" kindref="compound">atomic_compare_exchange_type</ref>&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)&gt;::type;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>cas_t<sp/>oldval<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">cas_t&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*dest);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>cas_t<sp/>assume<sp/>=<sp/>oldval;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DESUL_HAVE_MSVC_ATOMICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Impl::check_early_exit(op,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(oldval),<sp/>val))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(oldval);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>assume<sp/>=<sp/>oldval;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>newval<sp/>=<sp/>op.apply(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(assume),<sp/>val);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>oldval<sp/>=<sp/>desul::atomic_compare_exchange(</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">cas_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dest),<sp/>assume,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">cas_t&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newval),<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(assume<sp/>!=<sp/>oldval);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(oldval);</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Oper,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MemoryOrder,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MemoryScope,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>equivalent<sp/>to:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>requires<sp/>atomic_always_lock_free(sizeof(T))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>std::enable_if_t&lt;atomic_always_lock_free(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="191"><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="193"><highlight class="normal">atomic_oper_fetch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Oper&amp;<sp/>op,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dont_deduce_this_parameter_t&lt;const<sp/>T&gt;<sp/>val,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">cas_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>atomic_compare_exchange_type&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)&gt;::type;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>cas_t<sp/>oldval<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">cas_t&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*dest);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>T<sp/>newval<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>cas_t<sp/>assume<sp/>=<sp/>oldval;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DESUL_HAVE_MSVC_ATOMICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Impl::check_early_exit(op,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(oldval),<sp/>val))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(oldval);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>assume<sp/>=<sp/>oldval;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>newval<sp/>=<sp/>op.apply(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(assume),<sp/>val);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>oldval<sp/>=<sp/>desul::atomic_compare_exchange(</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">cas_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dest),<sp/>assume,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">cas_t&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newval),<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(assume<sp/>!=<sp/>oldval);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newval;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Oper,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MemoryOrder,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MemoryScope,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>equivalent<sp/>to:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>requires<sp/>!atomic_always_lock_free(sizeof(T))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>std::enable_if_t&lt;!atomic_always_lock_free(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="219"><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="221"><highlight class="normal">atomic_fetch_oper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Oper&amp;<sp/>op,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dont_deduce_this_parameter_t&lt;const<sp/>T&gt;<sp/>val,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/></highlight><highlight class="comment">/*order*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DESUL_HAVE_FORWARD_PROGRESS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Acquire<sp/>a<sp/>lock<sp/>for<sp/>the<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!Impl::lock_address((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dest,<sp/>scope))<sp/>{}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>atomic_thread_fence(MemoryOrderAcquire(),scope);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>T<sp/>return_val<sp/>=<sp/>*dest;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>*dest<sp/>=<sp/>op.apply(return_val,<sp/>val);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>atomic_thread_fence(MemoryOrderRelease(),scope);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>Impl::unlock_address((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dest,<sp/>scope);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(DESUL_HAVE_GPU_LIKE_PROGRESS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>way<sp/>to<sp/>avoid<sp/>dead<sp/>lock<sp/>in<sp/>a<sp/>warp<sp/>or<sp/>wave<sp/>front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>T<sp/>return_val;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>done<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__HIPCC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>active<sp/>=<sp/>DESUL_IMPL_BALLOT_MASK(1);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>done_active<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(active<sp/>!=<sp/>done_active)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!done)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Impl::lock_address_hip((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dest,<sp/>scope))<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_thread_fence(MemoryOrderAcquire(),<sp/>scope);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_val<sp/>=<sp/>*dest;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest<sp/>=<sp/>op.apply(return_val,<sp/>val);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_thread_fence(MemoryOrderRelease(),<sp/>scope);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Impl::unlock_address_hip((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dest,<sp/>scope);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>done_active<sp/>=<sp/>DESUL_IMPL_BALLOT_MASK(done);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME_SYCL<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SYCL_DEVICE_ONLY__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>(void)<sp/>op;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>(void)<sp/>dest;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>(void)<sp/>scope;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>(void)<sp/>return_val;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>(void)<sp/>done;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/>DESUL_IMPL_ACTIVEMASK;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>active<sp/>=<sp/>DESUL_IMPL_BALLOT_MASK(mask,<sp/>1);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>done_active<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(active<sp/>!=<sp/>done_active)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!done)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Impl::lock_address_cuda((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dest,<sp/>scope))<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_thread_fence(MemoryOrderAcquire(),scope);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_val<sp/>=<sp/>*dest;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest<sp/>=<sp/>op.apply(return_val,<sp/>val);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_thread_fence(MemoryOrderRelease(),scope);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Impl::unlock_address_cuda((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dest,<sp/>scope);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>done_active<sp/>=<sp/>DESUL_IMPL_BALLOT_MASK(mask,<sp/>done);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unimplemented<sp/>lock<sp/>based<sp/>attomic\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Oper,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MemoryOrder,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MemoryScope,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>equivalent<sp/>to:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>requires<sp/>!atomic_always_lock_free(sizeof(T))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>std::enable_if_t&lt;!atomic_always_lock_free(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="296"><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="298"><highlight class="normal">atomic_oper_fetch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Oper&amp;<sp/>op,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dont_deduce_this_parameter_t&lt;const<sp/>T&gt;<sp/>val,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/></highlight><highlight class="comment">/*order*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DESUL_HAVE_FORWARD_PROGRESS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Acquire<sp/>a<sp/>lock<sp/>for<sp/>the<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!Impl::lock_address((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dest,<sp/>scope))<sp/>{}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>atomic_thread_fence(MemoryOrderAcquire(),scope);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>T<sp/>return_val<sp/>=<sp/>op.apply(*dest,<sp/>val);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>*dest<sp/>=<sp/>return_val;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>atomic_thread_fence(MemoryOrderRelease(),scope);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>Impl::unlock_address((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dest,<sp/>scope);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(DESUL_HAVE_GPU_LIKE_PROGRESS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>way<sp/>to<sp/>avoid<sp/>dead<sp/>lock<sp/>in<sp/>a<sp/>warp<sp/>or<sp/>wave<sp/>front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>T<sp/>return_val;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>done<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__HIPCC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>active<sp/>=<sp/>DESUL_IMPL_BALLOT_MASK(1);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>done_active<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(active<sp/>!=<sp/>done_active)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!done)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Impl::lock_address_hip((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dest,<sp/>scope))<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_thread_fence(MemoryOrderAcquire(),<sp/>scope);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_val<sp/>=<sp/>op.apply(*dest,<sp/>val);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest<sp/>=<sp/>return_val;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_thread_fence(MemoryOrderRelease(),<sp/>scope);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Impl::unlock_address_hip((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dest,<sp/>scope);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>done_active<sp/>=<sp/>DESUL_IMPL_BALLOT_MASK(done);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME_SYCL<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SYCL_DEVICE_ONLY__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>(void)<sp/>op;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>(void)<sp/>dest;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>(void)<sp/>scope;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>(void)<sp/>done;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/>DESUL_IMPL_ACTIVEMASK;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>active<sp/>=<sp/>DESUL_IMPL_BALLOT_MASK(mask,<sp/>1);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>done_active<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(active<sp/>!=<sp/>done_active)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!done)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Impl::lock_address_cuda((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dest,<sp/>scope))<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_thread_fence(MemoryOrderAcquire(),scope);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_val<sp/>=<sp/>op.apply(*dest,<sp/>val);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest<sp/>=<sp/>return_val;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_thread_fence(MemoryOrderRelease(),scope);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Impl::unlock_address_cuda((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dest,<sp/>scope);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>done_active<sp/>=<sp/>DESUL_IMPL_BALLOT_MASK(mask,<sp/>done);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unimplemented<sp/>lock<sp/>based<sp/>atomic\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>desul</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">desul<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fetch_Oper<sp/>atomics:<sp/>return<sp/>value<sp/>before<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="376"><highlight class="normal">atomic_fetch_add(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::AddOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="381"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="382"><highlight class="normal">atomic_fetch_sub(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::SubOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="388"><highlight class="normal">atomic_fetch_max(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::MaxOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="394"><highlight class="normal">atomic_fetch_min(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::MinOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="400"><highlight class="normal">atomic_fetch_mul(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::MulOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="406"><highlight class="normal">atomic_fetch_div(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::DivOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="412"><highlight class="normal">atomic_fetch_mod(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::ModOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="418"><highlight class="normal">atomic_fetch_and(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::AndOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="424"><highlight class="normal">atomic_fetch_or(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::OrOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="430"><highlight class="normal">atomic_fetch_xor(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::XorOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="435"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="436"><highlight class="normal">atomic_fetch_nand(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::NandOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T<sp/>atomic_fetch_lshift(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Impl::LShiftOper&lt;T,<sp/>const<sp/>unsigned<sp/>int&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T<sp/>atomic_fetch_rshift(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Impl::RShiftOper&lt;T,<sp/>const<sp/>unsigned<sp/>int&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Oper<sp/>Fetch<sp/>atomics:<sp/>return<sp/>value<sp/>after<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="460"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="461"><highlight class="normal">atomic_add_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::AddOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="466"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="467"><highlight class="normal">atomic_sub_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::SubOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="472"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="473"><highlight class="normal">atomic_max_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::MaxOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="479"><highlight class="normal">atomic_min_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::MinOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="484"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="485"><highlight class="normal">atomic_mul_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::MulOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="490"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="491"><highlight class="normal">atomic_div_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::DivOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="497"><highlight class="normal">atomic_mod_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::ModOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="502"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="503"><highlight class="normal">atomic_and_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::AndOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="508"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="509"><highlight class="normal">atomic_or_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::OrOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="514"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="515"><highlight class="normal">atomic_xor_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::XorOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="520"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="521"><highlight class="normal">atomic_nand_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::NandOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T<sp/>atomic_lshift_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Impl::LShiftOper&lt;T,<sp/>const<sp/>unsigned<sp/>int&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="535"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T<sp/>atomic_rshift_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Impl::RShiftOper&lt;T,<sp/>const<sp/>unsigned<sp/>int&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Other<sp/>atomics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="546"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T<sp/>atomic_load(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::LoadOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dest),<sp/>T(),<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="553"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atomic_store(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>(void)Impl::atomic_fetch_oper(Impl::StoreOper&lt;T,<sp/>const<sp/>T&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="561"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atomic_add(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>(void)atomic_fetch_add(dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atomic_sub(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>(void)atomic_fetch_sub(dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="577"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atomic_mul(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>(void)atomic_fetch_mul(dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="585"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atomic_div(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>(void)atomic_fetch_div(dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="593"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atomic_min(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>(void)atomic_fetch_min(dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="601"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atomic_max(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>(void)atomic_fetch_max(dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="609"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="610"><highlight class="normal">atomic_inc_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_add_fetch(dest,<sp/>T(1),<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="615"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T</highlight></codeline>
<codeline lineno="616"><highlight class="normal">atomic_dec_fetch(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/>MemoryOrder<sp/>order,<sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_sub_fetch(dest,<sp/>T(1),<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="621"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T<sp/>atomic_fetch_inc(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_fetch_add(dest,<sp/>T(1),<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="628"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/>T<sp/>atomic_fetch_dec(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_fetch_sub(dest,<sp/>T(1),<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atomic_inc(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_add(dest,<sp/>T(1),<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryScope&gt;</highlight></codeline>
<codeline lineno="641"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atomic_dec(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryOrder<sp/>order,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_sub(dest,<sp/>T(1),<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SuccessMemoryOrder,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FailureMemoryOrder,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MemoryScope&gt;</highlight></codeline>
<codeline lineno="652"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>atomic_compare_exchange_strong(</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>T&amp;<sp/>expected,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>desired,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>SuccessMemoryOrder<sp/>success,</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>FailureMemoryOrder<sp/></highlight><highlight class="comment">/*failure*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>old<sp/>=<sp/>atomic_compare_exchange(dest,<sp/>expected,<sp/>desired,<sp/>success,<sp/>scope);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old<sp/>!=<sp/>expected)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>expected<sp/>=<sp/>old;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SuccessMemoryOrder,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FailureMemoryOrder,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MemoryScope&gt;</highlight></codeline>
<codeline lineno="672"><highlight class="normal">DESUL_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>atomic_compare_exchange_weak(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T&amp;<sp/>expected,</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>desired,</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SuccessMemoryOrder<sp/>success,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FailureMemoryOrder<sp/>failure,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryScope<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_compare_exchange_strong(</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest,<sp/>expected,<sp/>desired,<sp/>success,<sp/>failure,<sp/>scope);</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>desul</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;desul/atomics/SYCL.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;desul/atomics/CUDA.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;desul/atomics/GCC.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;desul/atomics/HIP.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;desul/atomics/OpenMP.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/Kokkos/kokkos/core/src/desul/atomics/Generic.hpp"/>
  </compounddef>
</doxygen>
