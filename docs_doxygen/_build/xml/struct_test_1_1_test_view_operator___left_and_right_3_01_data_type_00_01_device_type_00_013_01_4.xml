<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4" kind="struct" language="C++" prot="public">
    <compoundname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>class DataType</type>
      </param>
      <param>
        <type>class DeviceType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a2c9ce4eebedfbee9293796cbefb1e9a3" prot="public" static="no">
        <type>DeviceType</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::execution_space =  DeviceType</definition>
        <argsstring></argsstring>
        <name>execution_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::execution_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="441" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1ad83cbc2729d2caedc825a5581545d202" prot="public" static="no">
        <type>typename execution_space::memory_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::memory_space =  typename execution_space::memory_space</definition>
        <argsstring></argsstring>
        <name>memory_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::memory_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="442" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1ae7bedde93ed7d254142ac49dba49a50e" prot="public" static="no">
        <type>typename execution_space::size_type</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::size_type =  typename execution_space::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="443" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a3676e394090f6432b1ec32df2933a264" prot="public" static="no">
        <type>int</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::value_type =  int</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="445" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1aa7400629159aec18b344b00271a7a009" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::left_view =  Kokkos::DynRankView&lt;DataType, Kokkos::LayoutLeft, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>left_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::left_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="456" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a802ec6535c8493b99a6658aaab831e72" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::right_view =  Kokkos::DynRankView&lt;DataType, Kokkos::LayoutRight, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>right_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::right_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="459" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a95d596047bdcd4101aac9fbb11c1951e" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::stride_view =  Kokkos::DynRankView&lt;DataType, Kokkos::LayoutStride, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>stride_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::stride_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="462" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1ad06e714ef03df0946684baf774f4262d" prot="public" static="no">
        <type>typename DeviceType::execution_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::execution_space =  typename DeviceType::execution_space</definition>
        <argsstring></argsstring>
        <name>execution_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::execution_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="508" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a5e4c4813b40db9c5bc58b5a213a9a8ca" prot="public" static="no">
        <type>typename DeviceType::memory_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::memory_space =  typename DeviceType::memory_space</definition>
        <argsstring></argsstring>
        <name>memory_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::memory_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="509" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1ae7bedde93ed7d254142ac49dba49a50e" prot="public" static="no">
        <type>typename execution_space::size_type</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::size_type =  typename execution_space::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="510" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a3676e394090f6432b1ec32df2933a264" prot="public" static="no">
        <type>int</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::value_type =  int</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="512" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a2840e4413cad885cfafee414c83bdd94" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::left_view =  Kokkos::View&lt;DataType, Kokkos::LayoutLeft, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>left_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::left_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="523" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a9e319da82bb6f28b986e88e9c518a282" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::right_view =  Kokkos::View&lt;DataType, Kokkos::LayoutRight, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>right_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::right_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="524" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a91e1e0b1c01e9ad59967ba5232fe5337" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::stride_view =  Kokkos::View&lt;DataType, Kokkos::LayoutStride, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>stride_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::stride_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="526" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="527" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1ad67e4a2bcab0c1bd93435bc3cd217b71" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">left_view</ref></type>
        <definition>left_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::left</definition>
        <argsstring></argsstring>
        <name>left</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::left</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="465" column="13" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a1c12cadfcc9df0603a7e75b561db4530" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">right_view</ref></type>
        <definition>right_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::right</definition>
        <argsstring></argsstring>
        <name>right</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::right</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="466" column="14" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a0a3eb10ddad211072ba9037786d8c920" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">stride_view</ref></type>
        <definition>stride_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::left_stride</definition>
        <argsstring></argsstring>
        <name>left_stride</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::left_stride</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="467" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1aa04f0092d198c3f8b3c811df220fa105" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">stride_view</ref></type>
        <definition>stride_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::right_stride</definition>
        <argsstring></argsstring>
        <name>right_stride</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::right_stride</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="468" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a3801fe9a71f6c546f3507b1343710aa2" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::left_alloc</definition>
        <argsstring></argsstring>
        <name>left_alloc</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::left_alloc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="469" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a0a432be0358b04ff86b09a3fe9ef85c9" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::right_alloc</definition>
        <argsstring></argsstring>
        <name>right_alloc</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::right_alloc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="470" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="470" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a564c3b645048fe4750d2ff29d6c55841" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::join</definition>
        <argsstring>(volatile value_type &amp;update, const volatile value_type &amp;input)</argsstring>
        <name>join</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::join</qualifiedname>
        <param>
          <type>volatile value_type &amp;</type>
          <declname>update</declname>
        </param>
        <param>
          <type>const volatile value_type &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="448" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="448" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a02d21a09cda8d08f8cefdd6810ed18d2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::init</definition>
        <argsstring>(value_type &amp;update)</argsstring>
        <name>init</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::init</qualifiedname>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="454" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="454" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a15d99bd44bd615f76c3b27ba59b46136" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::testit</definition>
        <argsstring>(unsigned N0, unsigned N1, unsigned N2)</argsstring>
        <name>testit</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::testit</qualifiedname>
        <param>
          <type>unsigned</type>
          <declname>N0</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N1</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="480" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="480" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a564c3b645048fe4750d2ff29d6c55841" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::join</definition>
        <argsstring>(volatile value_type &amp;update, const volatile value_type &amp;input)</argsstring>
        <name>join</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::join</qualifiedname>
        <param>
          <type>volatile value_type &amp;</type>
          <declname>update</declname>
        </param>
        <param>
          <type>const volatile value_type &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="515" column="15" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="515" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a02d21a09cda8d08f8cefdd6810ed18d2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::init</definition>
        <argsstring>(value_type &amp;update)</argsstring>
        <name>init</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::init</qualifiedname>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="521" column="15" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="521" bodyend="521"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a7e651435bb293fb9373a84cb0a014a20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::TestViewOperator_LeftAndRight</definition>
        <argsstring>(unsigned N0, unsigned N1, unsigned N2)</argsstring>
        <name>TestViewOperator_LeftAndRight</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::TestViewOperator_LeftAndRight</qualifiedname>
        <param>
          <type>unsigned</type>
          <declname>N0</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N1</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="472" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="472" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1aaaf262564ec5d0656a73ee73add86284" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::operator()</definition>
        <argsstring>(const size_type, value_type &amp;update) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::operator()</qualifiedname>
        <param>
          <type>const</type>
          <declname>size_type</declname>
        </param>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="491" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="491" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1af634f4661885490e73f3b240384c6df0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::TestViewOperator_LeftAndRight</definition>
        <argsstring>()</argsstring>
        <name>TestViewOperator_LeftAndRight</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::TestViewOperator_LeftAndRight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="536" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="536" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a19eaefc1b104c8f15069c4d4c5651488" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::testit</definition>
        <argsstring>()</argsstring>
        <name>testit</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::testit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="544" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="544" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1aaaf262564ec5d0656a73ee73add86284" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::operator()</definition>
        <argsstring>(const size_type, value_type &amp;update) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;::operator()</qualifiedname>
        <param>
          <type>const</type>
          <declname>size_type</declname>
        </param>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="553" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="553" bodyend="596"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>Kokkos::DynRankView&lt; DataType, Kokkos::LayoutLeft, execution_space &gt;</label>
        <link refid="class_kokkos_1_1_dyn_rank_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Kokkos::DynRankView&lt; DataType, Kokkos::LayoutRight, execution_space &gt;</label>
        <link refid="class_kokkos_1_1_dyn_rank_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Kokkos::DynRankView&lt; DataType, Kokkos::LayoutStride, execution_space &gt;</label>
        <link refid="class_kokkos_1_1_dyn_rank_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</label>
        <link refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4"/>
        <childnode refid="2" relation="usage">
          <edgelabel>left</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>right</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>left_stride</edgelabel>
          <edgelabel>right_stride</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Kokkos::ViewTraits&lt; DataType, Properties... &gt;</label>
        <link refid="struct_kokkos_1_1_view_traits"/>
      </node>
    </collaborationgraph>
    <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="440" column="1" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="440" bodyend="535"/>
    <listofallmembers>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a2c9ce4eebedfbee9293796cbefb1e9a3" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>execution_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1ad06e714ef03df0946684baf774f4262d" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>execution_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a02d21a09cda8d08f8cefdd6810ed18d2" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>init</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a02d21a09cda8d08f8cefdd6810ed18d2" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>init</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a564c3b645048fe4750d2ff29d6c55841" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>join</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a564c3b645048fe4750d2ff29d6c55841" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>join</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1ad67e4a2bcab0c1bd93435bc3cd217b71" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>left</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a3801fe9a71f6c546f3507b1343710aa2" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>left_alloc</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a0a3eb10ddad211072ba9037786d8c920" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>left_stride</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1aa7400629159aec18b344b00271a7a009" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>left_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a2840e4413cad885cfafee414c83bdd94" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>left_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1ad83cbc2729d2caedc825a5581545d202" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>memory_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a5e4c4813b40db9c5bc58b5a213a9a8ca" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>memory_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1aaaf262564ec5d0656a73ee73add86284" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>operator()</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1aaaf262564ec5d0656a73ee73add86284" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>operator()</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a1c12cadfcc9df0603a7e75b561db4530" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>right</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a0a432be0358b04ff86b09a3fe9ef85c9" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>right_alloc</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1aa04f0092d198c3f8b3c811df220fa105" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>right_stride</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a802ec6535c8493b99a6658aaab831e72" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>right_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a9e319da82bb6f28b986e88e9c518a282" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>right_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1ae7bedde93ed7d254142ac49dba49a50e" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>size_type</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1ae7bedde93ed7d254142ac49dba49a50e" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>size_type</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a95d596047bdcd4101aac9fbb11c1951e" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>stride_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a91e1e0b1c01e9ad59967ba5232fe5337" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>stride_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a15d99bd44bd615f76c3b27ba59b46136" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>testit</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a19eaefc1b104c8f15069c4d4c5651488" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>testit</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a7e651435bb293fb9373a84cb0a014a20" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>TestViewOperator_LeftAndRight</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1af634f4661885490e73f3b240384c6df0" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>TestViewOperator_LeftAndRight</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a3676e394090f6432b1ec32df2933a264" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>value_type</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_013_01_4_1a3676e394090f6432b1ec32df2933a264" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 3 &gt;</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
