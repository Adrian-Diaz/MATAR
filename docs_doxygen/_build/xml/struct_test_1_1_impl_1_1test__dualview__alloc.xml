<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_test_1_1_impl_1_1test__dualview__alloc" kind="struct" language="C++" prot="public">
    <compoundname>Test::Impl::test_dualview_alloc</compoundname>
    <templateparamlist>
      <param>
        <type>typename Scalar</type>
      </param>
      <param>
        <type>class <ref refid="struct_kokkos_1_1_device" kindref="compound">Device</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_test_1_1_impl_1_1test__dualview__alloc_1a19001b252034d5b427db03d005330442" prot="public" static="no">
        <type>Scalar</type>
        <definition>using Test::Impl::test_dualview_alloc&lt; Scalar, Device &gt;::scalar_type =  Scalar</definition>
        <argsstring></argsstring>
        <name>scalar_type</name>
        <qualifiedname>Test::Impl::test_dualview_alloc::scalar_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="60" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_impl_1_1test__dualview__alloc_1a74390a8aee6cf8bf20010a1bca31da4d" prot="public" static="no">
        <type><ref refid="struct_kokkos_1_1_device" kindref="compound">Device</ref></type>
        <definition>using Test::Impl::test_dualview_alloc&lt; Scalar, Device &gt;::execution_space =  Device</definition>
        <argsstring></argsstring>
        <name>execution_space</name>
        <qualifiedname>Test::Impl::test_dualview_alloc::execution_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="61" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_test_1_1_impl_1_1test__dualview__alloc_1aeb1a3ad2a0a875731755487881f61b7d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Test::Impl::test_dualview_alloc&lt; Scalar, Device &gt;::result</definition>
        <argsstring></argsstring>
        <name>result</name>
        <qualifiedname>Test::Impl::test_dualview_alloc::result</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="83" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_test_1_1_impl_1_1test__dualview__alloc_1a5311134ebc56154d5d1f15cf5f5040e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class_kokkos_1_1_view" kindref="compound">ViewType</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Test::Impl::test_dualview_alloc&lt; Scalar, Device &gt;::run_me</definition>
        <argsstring>(unsigned int n, unsigned int m)</argsstring>
        <name>run_me</name>
        <qualifiedname>Test::Impl::test_dualview_alloc::run_me</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="64" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="64" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_impl_1_1test__dualview__alloc_1aefbefd62843f8ff6ba1782a55d4f880f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Test::Impl::test_dualview_alloc&lt; Scalar, Device &gt;::test_dualview_alloc</definition>
        <argsstring>(unsigned int size)</argsstring>
        <name>test_dualview_alloc</name>
        <qualifiedname>Test::Impl::test_dualview_alloc::test_dualview_alloc</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="85" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="85" bodyend="88"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="59" column="1" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="59" bodyend="89"/>
    <listofallmembers>
      <member refid="struct_test_1_1_impl_1_1test__dualview__alloc_1a74390a8aee6cf8bf20010a1bca31da4d" prot="public" virt="non-virtual"><scope>Test::Impl::test_dualview_alloc</scope><name>execution_space</name></member>
      <member refid="struct_test_1_1_impl_1_1test__dualview__alloc_1aeb1a3ad2a0a875731755487881f61b7d" prot="public" virt="non-virtual"><scope>Test::Impl::test_dualview_alloc</scope><name>result</name></member>
      <member refid="struct_test_1_1_impl_1_1test__dualview__alloc_1a5311134ebc56154d5d1f15cf5f5040e1" prot="public" virt="non-virtual"><scope>Test::Impl::test_dualview_alloc</scope><name>run_me</name></member>
      <member refid="struct_test_1_1_impl_1_1test__dualview__alloc_1a19001b252034d5b427db03d005330442" prot="public" virt="non-virtual"><scope>Test::Impl::test_dualview_alloc</scope><name>scalar_type</name></member>
      <member refid="struct_test_1_1_impl_1_1test__dualview__alloc_1aefbefd62843f8ff6ba1782a55d4f880f" prot="public" virt="non-virtual"><scope>Test::Impl::test_dualview_alloc</scope><name>test_dualview_alloc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
