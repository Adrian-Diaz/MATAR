<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4" kind="struct" language="C++" prot="public">
    <compoundname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>class DataType</type>
      </param>
      <param>
        <type>class DeviceType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1acf244e1322e5c74cc320275d6d2d5dd5" prot="public" static="no">
        <type>DeviceType</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::execution_space =  DeviceType</definition>
        <argsstring></argsstring>
        <name>execution_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::execution_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="104" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1aa5a9af7183e11f83d3ba9d1e408fa35b" prot="public" static="no">
        <type>typename execution_space::memory_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::memory_space =  typename execution_space::memory_space</definition>
        <argsstring></argsstring>
        <name>memory_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::memory_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="105" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a465d4515a37ed951ca38db4b65d649f3" prot="public" static="no">
        <type>typename execution_space::size_type</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::size_type =  typename execution_space::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="106" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a65d28115410fe42e17eb288e232b114c" prot="public" static="no">
        <type>int</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::value_type =  int</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="108" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1aae7aaa8ff808ae8aefa5a325aa7fb35c" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::left_view =  Kokkos::DynRankView&lt;DataType, Kokkos::LayoutLeft, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>left_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::left_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="119" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a4c506072dc7ae74ef0f4d78d660acffa" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::right_view =  Kokkos::DynRankView&lt;DataType, Kokkos::LayoutRight, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>right_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::right_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="122" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1ab4445f28c0f1387818d9f6be4a65733a" prot="public" static="no">
        <type>typename DeviceType::execution_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::execution_space =  typename DeviceType::execution_space</definition>
        <argsstring></argsstring>
        <name>execution_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::execution_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="196" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1ae9119d359db0c274a5da10b6f9aba471" prot="public" static="no">
        <type>typename DeviceType::memory_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::memory_space =  typename DeviceType::memory_space</definition>
        <argsstring></argsstring>
        <name>memory_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::memory_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="197" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a465d4515a37ed951ca38db4b65d649f3" prot="public" static="no">
        <type>typename execution_space::size_type</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::size_type =  typename execution_space::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="198" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a65d28115410fe42e17eb288e232b114c" prot="public" static="no">
        <type>int</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::value_type =  int</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="200" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a0388e9bc1ff0990e8c91ee8c999fcf05" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::left_view =  Kokkos::View&lt;DataType, Kokkos::LayoutLeft, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>left_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::left_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="211" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a1377d2f96a36db441c7bed1d4f894858" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::right_view =  Kokkos::View&lt;DataType, Kokkos::LayoutRight, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>right_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::right_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="212" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a77077ad810c5b5b9bd807275900f502e" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">left_view</ref></type>
        <definition>left_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::left</definition>
        <argsstring></argsstring>
        <name>left</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::left</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="125" column="13" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a1a5ac99a4e9c05355d680fdadf94628f" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">right_view</ref></type>
        <definition>right_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::right</definition>
        <argsstring></argsstring>
        <name>right</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::right</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="126" column="14" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1afb5ccf804cac9178bff0edae3b20bc2b" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::left_alloc</definition>
        <argsstring></argsstring>
        <name>left_alloc</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::left_alloc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="127" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1aff3c0c86950ffcd21b7e68e3fe5822bb" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::right_alloc</definition>
        <argsstring></argsstring>
        <name>right_alloc</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::right_alloc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="128" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a8b01196677f0302ed154d37347013079" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::join</definition>
        <argsstring>(volatile value_type &amp;update, const volatile value_type &amp;input)</argsstring>
        <name>join</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::join</qualifiedname>
        <param>
          <type>volatile value_type &amp;</type>
          <declname>update</declname>
        </param>
        <param>
          <type>const volatile value_type &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="111" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1aca7363f8426c18fc077c320c2c2239ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::init</definition>
        <argsstring>(value_type &amp;update)</argsstring>
        <name>init</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::init</qualifiedname>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="117" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a3a320419288c707c0d995f098b4cd287" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::testit</definition>
        <argsstring>(unsigned N0, unsigned N1, unsigned N2, unsigned N3, unsigned N4, unsigned N5, unsigned N6)</argsstring>
        <name>testit</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::testit</qualifiedname>
        <param>
          <type>unsigned</type>
          <declname>N0</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N1</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N2</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N3</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N4</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N5</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="138" column="15" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="138" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a8b01196677f0302ed154d37347013079" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::join</definition>
        <argsstring>(volatile value_type &amp;update, const volatile value_type &amp;input)</argsstring>
        <name>join</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::join</qualifiedname>
        <param>
          <type>volatile value_type &amp;</type>
          <declname>update</declname>
        </param>
        <param>
          <type>const volatile value_type &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="203" column="15" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1aca7363f8426c18fc077c320c2c2239ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::init</definition>
        <argsstring>(value_type &amp;update)</argsstring>
        <name>init</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::init</qualifiedname>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="209" column="15" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="209" bodyend="209"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a67442d0d03d132167849f7da916b89ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::TestViewOperator_LeftAndRight</definition>
        <argsstring>(unsigned N0, unsigned N1, unsigned N2, unsigned N3, unsigned N4, unsigned N5, unsigned N6)</argsstring>
        <name>TestViewOperator_LeftAndRight</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::TestViewOperator_LeftAndRight</qualifiedname>
        <param>
          <type>unsigned</type>
          <declname>N0</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N1</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N2</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N3</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N4</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N5</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="130" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="130" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a7c793e010e01addd8f2f2790cd720795" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::operator()</definition>
        <argsstring>(const size_type, value_type &amp;update) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::operator()</qualifiedname>
        <param>
          <type>const</type>
          <declname>size_type</declname>
        </param>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="150" column="8" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="150" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1ab77150b20f0bdeee9dc0e225dbafd7ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::TestViewOperator_LeftAndRight</definition>
        <argsstring>()</argsstring>
        <name>TestViewOperator_LeftAndRight</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::TestViewOperator_LeftAndRight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="220" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="220" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1aaf597aa4e171a4bde1e8dbf7669d76a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::testit</definition>
        <argsstring>()</argsstring>
        <name>testit</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::testit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="226" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="226" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a7c793e010e01addd8f2f2790cd720795" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::operator()</definition>
        <argsstring>(const size_type, value_type &amp;update) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;::operator()</qualifiedname>
        <param>
          <type>const</type>
          <declname>size_type</declname>
        </param>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="235" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="235" bodyend="269"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>Kokkos::DynRankView&lt; DataType, Kokkos::LayoutLeft, execution_space &gt;</label>
        <link refid="class_kokkos_1_1_dyn_rank_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Kokkos::DynRankView&lt; DataType, Kokkos::LayoutRight, execution_space &gt;</label>
        <link refid="class_kokkos_1_1_dyn_rank_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</label>
        <link refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4"/>
        <childnode refid="2" relation="usage">
          <edgelabel>left</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>right</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Kokkos::ViewTraits&lt; DataType, Properties... &gt;</label>
        <link refid="struct_kokkos_1_1_view_traits"/>
      </node>
    </collaborationgraph>
    <location file="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" line="103" column="1" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp" bodystart="103" bodyend="185"/>
    <listofallmembers>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1acf244e1322e5c74cc320275d6d2d5dd5" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>execution_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1ab4445f28c0f1387818d9f6be4a65733a" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>execution_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1aca7363f8426c18fc077c320c2c2239ec" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>init</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1aca7363f8426c18fc077c320c2c2239ec" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>init</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a8b01196677f0302ed154d37347013079" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>join</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a8b01196677f0302ed154d37347013079" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>join</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a77077ad810c5b5b9bd807275900f502e" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>left</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1afb5ccf804cac9178bff0edae3b20bc2b" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>left_alloc</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1aae7aaa8ff808ae8aefa5a325aa7fb35c" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>left_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a0388e9bc1ff0990e8c91ee8c999fcf05" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>left_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1aa5a9af7183e11f83d3ba9d1e408fa35b" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>memory_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1ae9119d359db0c274a5da10b6f9aba471" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>memory_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a7c793e010e01addd8f2f2790cd720795" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>operator()</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a7c793e010e01addd8f2f2790cd720795" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>operator()</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a1a5ac99a4e9c05355d680fdadf94628f" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>right</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1aff3c0c86950ffcd21b7e68e3fe5822bb" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>right_alloc</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a4c506072dc7ae74ef0f4d78d660acffa" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>right_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a1377d2f96a36db441c7bed1d4f894858" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>right_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a465d4515a37ed951ca38db4b65d649f3" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>size_type</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a465d4515a37ed951ca38db4b65d649f3" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>size_type</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a3a320419288c707c0d995f098b4cd287" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>testit</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1aaf597aa4e171a4bde1e8dbf7669d76a8" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>testit</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a67442d0d03d132167849f7da916b89ef" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>TestViewOperator_LeftAndRight</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1ab77150b20f0bdeee9dc0e225dbafd7ea" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>TestViewOperator_LeftAndRight</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a65d28115410fe42e17eb288e232b114c" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>value_type</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_017_01_4_1a65d28115410fe42e17eb288e232b114c" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 7 &gt;</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
