<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_test_1_1_test_scan" kind="struct" language="C++" prot="public">
    <compoundname>Test::TestScan</compoundname>
    <templateparamlist>
      <param>
        <type>class ExecSpace</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_test_1_1_test_scan_1a1fc9f04fecd8d5e488355c370ae6defc" prot="public" static="no">
        <type>typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; value_type *, ExecSpace &gt;</type>
        <definition>using Test::TestScan&lt; ExecSpace &gt;::View_1D =  typename Kokkos::View&lt;value_type *, ExecSpace&gt;</definition>
        <argsstring></argsstring>
        <name>View_1D</name>
        <qualifiedname>Test::TestScan::View_1D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test16_ParallelScan.hpp" line="60" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test16_ParallelScan.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_scan_1aba30b72d84b6d2e5109404e416fdddd2" prot="public" static="no">
        <type><ref refid="struct_kokkos_1_1_device" kindref="compound">Device</ref></type>
        <definition>using Test::TestScan&lt; ExecSpace &gt;::execution_space =  Device</definition>
        <argsstring></argsstring>
        <name>execution_space</name>
        <qualifiedname>Test::TestScan::execution_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" line="52" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_scan_1ab7801054d577787b56418f3aad796778" prot="public" static="no">
        <type>int64_t</type>
        <definition>using Test::TestScan&lt; ExecSpace &gt;::value_type =  int64_t</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>Test::TestScan::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" line="53" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_test_1_1_test_scan_1a75e87fcf425b9faa466834c4ca3c699e" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; int, <ref refid="struct_kokkos_1_1_device" kindref="compound">Device</ref>, <ref refid="struct_kokkos_1_1_memory_traits" kindref="compound">Kokkos::MemoryTraits</ref>&lt; Kokkos::Atomic &gt; &gt;</type>
        <definition>Kokkos::View&lt;int, Device, Kokkos::MemoryTraits&lt;Kokkos::Atomic&gt; &gt; Test::TestScan&lt; ExecSpace &gt;::errors</definition>
        <argsstring></argsstring>
        <name>errors</name>
        <qualifiedname>Test::TestScan::errors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" line="55" column="16" bodyfile="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_test_1_1_test_scan_1a03154885c3792808eb176482de56272c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Test::TestScan&lt; ExecSpace &gt;::parallel_scan</definition>
        <argsstring>()</argsstring>
        <name>parallel_scan</name>
        <qualifiedname>Test::TestScan::parallel_scan</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test16_ParallelScan.hpp" line="62" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test16_ParallelScan.hpp" bodystart="62" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_scan_1a4bc81e5af04f4548e9c1b85ea700b0f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::TestScan&lt; ExecSpace &gt;::operator()</definition>
        <argsstring>(const int iwork, value_type &amp;update, const bool final_pass) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Test::TestScan::operator()</qualifiedname>
        <param>
          <type>const int</type>
          <declname>iwork</declname>
        </param>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>final_pass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" line="58" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" bodystart="58" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_scan_1a786e9b2f62665f131294b4c0104b8952" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::TestScan&lt; ExecSpace &gt;::init</definition>
        <argsstring>(value_type &amp;update) const</argsstring>
        <name>init</name>
        <qualifiedname>Test::TestScan::init</qualifiedname>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" line="88" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_scan_1a52c60e4cdc9518b7b81f72854ee7d955" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::TestScan&lt; ExecSpace &gt;::join</definition>
        <argsstring>(volatile value_type &amp;update, volatile const value_type &amp;input) const</argsstring>
        <name>join</name>
        <qualifiedname>Test::TestScan::join</qualifiedname>
        <param>
          <type>volatile value_type &amp;</type>
          <declname>update</declname>
        </param>
        <param>
          <type>volatile const value_type &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" line="91" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_scan_1a4879da23b14781ce2a424778a984b734" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Test::TestScan&lt; ExecSpace &gt;::TestScan</definition>
        <argsstring>(const size_t N)</argsstring>
        <name>TestScan</name>
        <qualifiedname>Test::TestScan::TestScan</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" line="96" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" bodystart="96" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_scan_1a8547140467462af070076a81e287f75c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Test::TestScan&lt; ExecSpace &gt;::TestScan</definition>
        <argsstring>(const size_t Start, const size_t N)</argsstring>
        <name>TestScan</name>
        <qualifiedname>Test::TestScan::TestScan</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>Start</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" line="112" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" bodystart="112" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_scan_1a931b427f2766e6f94525911ca4e2c16f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Test::TestScan&lt; ExecSpace &gt;::check_error</definition>
        <argsstring>()</argsstring>
        <name>check_error</name>
        <qualifiedname>Test::TestScan::check_error</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" line="125" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" bodystart="125" bodyend="129"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_test_1_1_test_scan_1abc4d22bc01693d60e0efbbec69697768" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Test::TestScan&lt; ExecSpace &gt;::test_range</definition>
        <argsstring>(const size_t begin, const size_t end)</argsstring>
        <name>test_range</name>
        <qualifiedname>Test::TestScan::test_range</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" line="131" column="15" bodyfile="src/Kokkos/kokkos/core/unit_test/TestScan.hpp" bodystart="131" bodyend="135"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>Test::TestScan&lt; ExecSpace &gt;</label>
        <link refid="struct_test_1_1_test_scan"/>
        <childnode refid="2" relation="usage">
          <edgelabel>errors</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>Kokkos::View&lt; int, Kokkos::Device, Kokkos::MemoryTraits&lt; Kokkos::Atomic &gt; &gt;</label>
        <link refid="class_kokkos_1_1_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Kokkos::ViewTraits&lt; int, Properties... &gt;</label>
        <link refid="struct_kokkos_1_1_view_traits"/>
      </node>
    </collaborationgraph>
    <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test16_ParallelScan.hpp" line="58" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test16_ParallelScan.hpp" bodystart="58" bodyend="92"/>
    <listofallmembers>
      <member refid="struct_test_1_1_test_scan_1a931b427f2766e6f94525911ca4e2c16f" prot="public" virt="non-virtual"><scope>Test::TestScan</scope><name>check_error</name></member>
      <member refid="struct_test_1_1_test_scan_1a75e87fcf425b9faa466834c4ca3c699e" prot="public" virt="non-virtual"><scope>Test::TestScan</scope><name>errors</name></member>
      <member refid="struct_test_1_1_test_scan_1aba30b72d84b6d2e5109404e416fdddd2" prot="public" virt="non-virtual"><scope>Test::TestScan</scope><name>execution_space</name></member>
      <member refid="struct_test_1_1_test_scan_1a786e9b2f62665f131294b4c0104b8952" prot="public" virt="non-virtual"><scope>Test::TestScan</scope><name>init</name></member>
      <member refid="struct_test_1_1_test_scan_1a52c60e4cdc9518b7b81f72854ee7d955" prot="public" virt="non-virtual"><scope>Test::TestScan</scope><name>join</name></member>
      <member refid="struct_test_1_1_test_scan_1a4bc81e5af04f4548e9c1b85ea700b0f5" prot="public" virt="non-virtual"><scope>Test::TestScan</scope><name>operator()</name></member>
      <member refid="struct_test_1_1_test_scan_1a03154885c3792808eb176482de56272c" prot="public" virt="non-virtual"><scope>Test::TestScan</scope><name>parallel_scan</name></member>
      <member refid="struct_test_1_1_test_scan_1abc4d22bc01693d60e0efbbec69697768" prot="public" virt="non-virtual"><scope>Test::TestScan</scope><name>test_range</name></member>
      <member refid="struct_test_1_1_test_scan_1a4879da23b14781ce2a424778a984b734" prot="public" virt="non-virtual"><scope>Test::TestScan</scope><name>TestScan</name></member>
      <member refid="struct_test_1_1_test_scan_1a8547140467462af070076a81e287f75c" prot="public" virt="non-virtual"><scope>Test::TestScan</scope><name>TestScan</name></member>
      <member refid="struct_test_1_1_test_scan_1ab7801054d577787b56418f3aad796778" prot="public" virt="non-virtual"><scope>Test::TestScan</scope><name>value_type</name></member>
      <member refid="struct_test_1_1_test_scan_1a1fc9f04fecd8d5e488355c370ae6defc" prot="public" virt="non-virtual"><scope>Test::TestScan</scope><name>View_1D</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
