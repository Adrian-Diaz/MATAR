<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_test05_1_1_test_m_d_range_policy" kind="struct" language="C++" prot="public">
    <compoundname>Test05::TestMDRangePolicy</compoundname>
    <templateparamlist>
      <param>
        <type>class ExecSpace</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_test05_1_1_test_m_d_range_policy_1a866ec1273db1b564511bebd04f420e6b" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; value_type **, ExecSpace &gt;</type>
        <definition>using Test05::TestMDRangePolicy&lt; ExecSpace &gt;::View_2D =  Kokkos::View&lt;value_type **, ExecSpace&gt;</definition>
        <argsstring></argsstring>
        <name>View_2D</name>
        <qualifiedname>Test05::TestMDRangePolicy::View_2D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="64" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test05_1_1_test_m_d_range_policy_1a0b45fd592d9036c62d4ffc76acc7d0e2" prot="public" static="no">
        <type>typename <ref refid="class_kokkos_1_1_view_1aa792f904a0197bb45c90c472d64935b1" kindref="member">View_2D::HostMirror</ref></type>
        <definition>using Test05::TestMDRangePolicy&lt; ExecSpace &gt;::Host_View_2D =  typename View_2D::HostMirror</definition>
        <argsstring></argsstring>
        <name>Host_View_2D</name>
        <qualifiedname>Test05::TestMDRangePolicy::Host_View_2D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="65" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test05_1_1_test_m_d_range_policy_1a63aa69d1061631ec8928e4be4fe36f5f" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; value_type ***, ExecSpace &gt;</type>
        <definition>using Test05::TestMDRangePolicy&lt; ExecSpace &gt;::View_3D =  Kokkos::View&lt;value_type ***, ExecSpace&gt;</definition>
        <argsstring></argsstring>
        <name>View_3D</name>
        <qualifiedname>Test05::TestMDRangePolicy::View_3D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="69" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test05_1_1_test_m_d_range_policy_1a61b31267aced1af0de3c2b801d44ad1f" prot="public" static="no">
        <type>typename <ref refid="class_kokkos_1_1_view_1aa792f904a0197bb45c90c472d64935b1" kindref="member">View_3D::HostMirror</ref></type>
        <definition>using Test05::TestMDRangePolicy&lt; ExecSpace &gt;::Host_View_3D =  typename View_3D::HostMirror</definition>
        <argsstring></argsstring>
        <name>Host_View_3D</name>
        <qualifiedname>Test05::TestMDRangePolicy::Host_View_3D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="70" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test05_1_1_test_m_d_range_policy_1a0c7bedccca68ef88db18f6cad756e900" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; value_type ****, ExecSpace &gt;</type>
        <definition>using Test05::TestMDRangePolicy&lt; ExecSpace &gt;::View_4D =  Kokkos::View&lt;value_type ****, ExecSpace&gt;</definition>
        <argsstring></argsstring>
        <name>View_4D</name>
        <qualifiedname>Test05::TestMDRangePolicy::View_4D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="74" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test05_1_1_test_m_d_range_policy_1ada2336d35e6a2bc23c93bdaff9731a40" prot="public" static="no">
        <type>typename <ref refid="class_kokkos_1_1_view_1aa792f904a0197bb45c90c472d64935b1" kindref="member">View_4D::HostMirror</ref></type>
        <definition>using Test05::TestMDRangePolicy&lt; ExecSpace &gt;::Host_View_4D =  typename View_4D::HostMirror</definition>
        <argsstring></argsstring>
        <name>Host_View_4D</name>
        <qualifiedname>Test05::TestMDRangePolicy::Host_View_4D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="75" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test05_1_1_test_m_d_range_policy_1a1cfebe67838ca8bb059e3f2c7150cc86" prot="public" static="no">
        <type>typename ExecSpace::memory_space</type>
        <definition>using Test05::TestMDRangePolicy&lt; ExecSpace &gt;::d_memspace_type =  typename ExecSpace::memory_space</definition>
        <argsstring></argsstring>
        <name>d_memspace_type</name>
        <qualifiedname>Test05::TestMDRangePolicy::d_memspace_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="79" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test05_1_1_test_m_d_range_policy_1a6b2cf6a88815c819126b4af83729576a" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_host_space" kindref="compound">Kokkos::HostSpace</ref></type>
        <definition>using Test05::TestMDRangePolicy&lt; ExecSpace &gt;::h_memspace_type =  Kokkos::HostSpace</definition>
        <argsstring></argsstring>
        <name>h_memspace_type</name>
        <qualifiedname>Test05::TestMDRangePolicy::h_memspace_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="80" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test05_1_1_test_m_d_range_policy_1a97b4d2b419b95f7d74a94874c50eba78" prot="public" static="no">
        <type><ref refid="struct_kokkos_1_1_index_type" kindref="compound">Kokkos::IndexType</ref>&lt; int &gt;</type>
        <definition>using Test05::TestMDRangePolicy&lt; ExecSpace &gt;::int_index =  Kokkos::IndexType&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>int_index</name>
        <qualifiedname>Test05::TestMDRangePolicy::int_index</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="83" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test05_1_1_test_m_d_range_policy_1a38e083be05ca624508b14bfe8d59b9ac" prot="public" static="no">
        <type><ref refid="struct_kokkos_1_1_m_d_range_policy" kindref="compound">Kokkos::MDRangePolicy</ref>&lt; ExecSpace, <ref refid="struct_kokkos_1_1_rank" kindref="compound">Kokkos::Rank</ref>&lt; 2 &gt;, <ref refid="struct_kokkos_1_1_index_type" kindref="compound">int_index</ref> &gt;</type>
        <definition>using Test05::TestMDRangePolicy&lt; ExecSpace &gt;::MDPolicyType_2D =  Kokkos::MDRangePolicy&lt;ExecSpace, Kokkos::Rank&lt;2&gt;, int_index&gt;</definition>
        <argsstring></argsstring>
        <name>MDPolicyType_2D</name>
        <qualifiedname>Test05::TestMDRangePolicy::MDPolicyType_2D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="86" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test05_1_1_test_m_d_range_policy_1a0fdd9772c686d0d83b9e3985431eab0d" prot="public" static="no">
        <type><ref refid="struct_kokkos_1_1_m_d_range_policy" kindref="compound">Kokkos::MDRangePolicy</ref>&lt; ExecSpace, <ref refid="struct_kokkos_1_1_rank" kindref="compound">Kokkos::Rank</ref>&lt; 3 &gt;, <ref refid="struct_kokkos_1_1_index_type" kindref="compound">int_index</ref> &gt;</type>
        <definition>using Test05::TestMDRangePolicy&lt; ExecSpace &gt;::MDPolicyType_3D =  Kokkos::MDRangePolicy&lt;ExecSpace, Kokkos::Rank&lt;3&gt;, int_index&gt;</definition>
        <argsstring></argsstring>
        <name>MDPolicyType_3D</name>
        <qualifiedname>Test05::TestMDRangePolicy::MDPolicyType_3D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="90" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test05_1_1_test_m_d_range_policy_1a8899c18031ca5bccb75ac5d3758261bd" prot="public" static="no">
        <type><ref refid="struct_kokkos_1_1_m_d_range_policy" kindref="compound">Kokkos::MDRangePolicy</ref>&lt; ExecSpace, <ref refid="struct_kokkos_1_1_rank" kindref="compound">Kokkos::Rank</ref>&lt; 4 &gt;, <ref refid="struct_kokkos_1_1_index_type" kindref="compound">int_index</ref> &gt;</type>
        <definition>using Test05::TestMDRangePolicy&lt; ExecSpace &gt;::MDPolicyType_4D =  Kokkos::MDRangePolicy&lt;ExecSpace, Kokkos::Rank&lt;4&gt;, int_index&gt;</definition>
        <argsstring></argsstring>
        <name>MDPolicyType_4D</name>
        <qualifiedname>Test05::TestMDRangePolicy::MDPolicyType_4D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="94" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_test05_1_1_test_m_d_range_policy_1af8007ebf07066ea929e78c25436fb608" prot="public" static="no" mutable="no">
        <type>Host_View_2D</type>
        <definition>Host_View_2D Test05::TestMDRangePolicy&lt; ExecSpace &gt;::hostDataView_2D</definition>
        <argsstring></argsstring>
        <name>hostDataView_2D</name>
        <qualifiedname>Test05::TestMDRangePolicy::hostDataView_2D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="66" column="16" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test05_1_1_test_m_d_range_policy_1ad8a5c6edbf41db4e734cb3d06220a4e1" prot="public" static="no" mutable="no">
        <type>Host_View_3D</type>
        <definition>Host_View_3D Test05::TestMDRangePolicy&lt; ExecSpace &gt;::hostDataView_3D</definition>
        <argsstring></argsstring>
        <name>hostDataView_3D</name>
        <qualifiedname>Test05::TestMDRangePolicy::hostDataView_3D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="71" column="16" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test05_1_1_test_m_d_range_policy_1ae6bbdb65ae14cb9391867c4cd7f524d6" prot="public" static="no" mutable="no">
        <type>Host_View_4D</type>
        <definition>Host_View_4D Test05::TestMDRangePolicy&lt; ExecSpace &gt;::hostDataView_4D</definition>
        <argsstring></argsstring>
        <name>hostDataView_4D</name>
        <qualifiedname>Test05::TestMDRangePolicy::hostDataView_4D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="76" column="16" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_test05_1_1_test_m_d_range_policy_1a1b16a2512db59788decd5e76c234b917" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Test05::TestMDRangePolicy&lt; ExecSpace &gt;::compare_equal_2D</definition>
        <argsstring>()</argsstring>
        <name>compare_equal_2D</name>
        <qualifiedname>Test05::TestMDRangePolicy::compare_equal_2D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="98" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="struct_test05_1_1_test_m_d_range_policy_1a79ccbc1f6e54e47bb7c48b986148527e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Test05::TestMDRangePolicy&lt; ExecSpace &gt;::compare_equal_3D</definition>
        <argsstring>()</argsstring>
        <name>compare_equal_3D</name>
        <qualifiedname>Test05::TestMDRangePolicy::compare_equal_3D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="104" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="104" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="struct_test05_1_1_test_m_d_range_policy_1a8b13eecb98e0213e43a5a48b850fd096" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Test05::TestMDRangePolicy&lt; ExecSpace &gt;::compare_equal_4D</definition>
        <argsstring>()</argsstring>
        <name>compare_equal_4D</name>
        <qualifiedname>Test05::TestMDRangePolicy::compare_equal_4D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="112" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="112" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="struct_test05_1_1_test_m_d_range_policy_1a47b122201043445547f782859763ecf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Test05::TestMDRangePolicy&lt; ExecSpace &gt;::mdRange2D</definition>
        <argsstring>()</argsstring>
        <name>mdRange2D</name>
        <qualifiedname>Test05::TestMDRangePolicy::mdRange2D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="122" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="122" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="struct_test05_1_1_test_m_d_range_policy_1a113d94e833c57dac231804b07a46b07a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Test05::TestMDRangePolicy&lt; ExecSpace &gt;::mdRange3D</definition>
        <argsstring>()</argsstring>
        <name>mdRange3D</name>
        <qualifiedname>Test05::TestMDRangePolicy::mdRange3D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="141" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="141" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="struct_test05_1_1_test_m_d_range_policy_1a77b18c18a8992afb86bc8de3914bced0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Test05::TestMDRangePolicy&lt; ExecSpace &gt;::mdRange4D</definition>
        <argsstring>()</argsstring>
        <name>mdRange4D</name>
        <qualifiedname>Test05::TestMDRangePolicy::mdRange4D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="160" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="160" bodyend="176"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>Kokkos::View&lt; DataType, Properties &gt;</label>
        <link refid="class_kokkos_1_1_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Test05::TestMDRangePolicy&lt; ExecSpace &gt;</label>
        <link refid="struct_test05_1_1_test_m_d_range_policy"/>
        <childnode refid="2" relation="usage">
          <edgelabel>hostDataView_2D</edgelabel>
          <edgelabel>hostDataView_3D</edgelabel>
          <edgelabel>hostDataView_4D</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Kokkos::ViewTraits&lt; DataType, Properties... &gt;</label>
        <link refid="struct_kokkos_1_1_view_traits"/>
      </node>
    </collaborationgraph>
    <location file="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" line="62" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp" bodystart="62" bodyend="177"/>
    <listofallmembers>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a1b16a2512db59788decd5e76c234b917" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>compare_equal_2D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a79ccbc1f6e54e47bb7c48b986148527e" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>compare_equal_3D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a8b13eecb98e0213e43a5a48b850fd096" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>compare_equal_4D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a1cfebe67838ca8bb059e3f2c7150cc86" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>d_memspace_type</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a6b2cf6a88815c819126b4af83729576a" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>h_memspace_type</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a0b45fd592d9036c62d4ffc76acc7d0e2" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>Host_View_2D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a61b31267aced1af0de3c2b801d44ad1f" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>Host_View_3D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1ada2336d35e6a2bc23c93bdaff9731a40" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>Host_View_4D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1af8007ebf07066ea929e78c25436fb608" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>hostDataView_2D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1ad8a5c6edbf41db4e734cb3d06220a4e1" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>hostDataView_3D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1ae6bbdb65ae14cb9391867c4cd7f524d6" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>hostDataView_4D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a97b4d2b419b95f7d74a94874c50eba78" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>int_index</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a38e083be05ca624508b14bfe8d59b9ac" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>MDPolicyType_2D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a0fdd9772c686d0d83b9e3985431eab0d" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>MDPolicyType_3D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a8899c18031ca5bccb75ac5d3758261bd" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>MDPolicyType_4D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a47b122201043445547f782859763ecf2" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>mdRange2D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a113d94e833c57dac231804b07a46b07a" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>mdRange3D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a77b18c18a8992afb86bc8de3914bced0" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>mdRange4D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a866ec1273db1b564511bebd04f420e6b" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>View_2D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a63aa69d1061631ec8928e4be4fe36f5f" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>View_3D</name></member>
      <member refid="struct_test05_1_1_test_m_d_range_policy_1a0c7bedccca68ef88db18f6cad756e900" prot="public" virt="non-virtual"><scope>Test05::TestMDRangePolicy</scope><name>View_4D</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
