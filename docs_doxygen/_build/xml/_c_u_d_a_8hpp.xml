<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_c_u_d_a_8hpp" kind="file" language="C++">
    <compoundname>CUDA.hpp</compoundname>
    <includedby refid="_generic_8hpp" local="no">src/Kokkos/kokkos/core/src/desul/atomics/Generic.hpp</includedby>
    <invincdepgraph>
      <node id="3">
        <label>src/Kokkos/kokkos/core/src/desul/atomics.hpp</label>
        <link refid="atomics_8hpp_source"/>
      </node>
      <node id="4">
        <label>src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp</label>
        <link refid="_atomic___ref_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Kokkos/kokkos/core/src/desul/atomics/CUDA.hpp</label>
        <link refid="_c_u_d_a_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/Kokkos/kokkos/core/src/desul/atomics/Generic.hpp</label>
        <link refid="_generic_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2019,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC</highlight></codeline>
<codeline lineno="3"><highlight class="comment">and<sp/>DESUL<sp/>project<sp/>contributors.<sp/>See<sp/>the<sp/>COPYRIGHT<sp/>file<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Source:<sp/>https://github.com/desul/desul</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">SPDX-License-Identifier:<sp/>(BSD-3-Clause)</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DESUL_ATOMICS_CUDA_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DESUL_ATOMICS_CUDA_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DESUL_HAVE_CUDA_ATOMICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>building<sp/>with<sp/>clang<sp/>we<sp/>need<sp/>to<sp/>include<sp/>the<sp/>device<sp/>functions<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>since<sp/>clang<sp/>must<sp/>see<sp/>a<sp/>consistent<sp/>overload<sp/>set<sp/>in<sp/>both<sp/>device<sp/>and<sp/>host<sp/>compilation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>that<sp/>means<sp/>we<sp/>need<sp/>to<sp/>know<sp/>on<sp/>the<sp/>host<sp/>what<sp/>to<sp/>make<sp/>visible,<sp/>i.e.<sp/>we<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>host<sp/>side<sp/>compile<sp/>knowledge<sp/>of<sp/>architecture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>simply<sp/>can<sp/>say<sp/>DESUL<sp/>proper<sp/>doesn&apos;t<sp/>support<sp/>clang<sp/>CUDA<sp/>build<sp/>pre<sp/>Volta,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Kokkos<sp/>has<sp/>that<sp/>knowledge<sp/>and<sp/>so<sp/>I<sp/>use<sp/>it<sp/>here,<sp/>allowing<sp/>in<sp/>Kokkos<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang<sp/>with<sp/>pre<sp/>Volta<sp/>as<sp/>CUDA<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(__CUDA_ARCH__)<sp/>&amp;&amp;<sp/>(__CUDA_ARCH__&gt;=700))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(!defined(__NVCC__)<sp/>&amp;&amp;<sp/>!defined(KOKKOS_ARCH_KEPLER)<sp/>&amp;&amp;<sp/>!defined(KOKKOS_ARCH_MAXWELL)<sp/>&amp;&amp;<sp/>!defined(KOKKOS_ARCH_PASCAL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DESUL_HAVE_CUDA_ATOMICS_ASM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;desul/atomics/cuda/CUDA_asm.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(__CUDA_ARCH__)<sp/>&amp;&amp;<sp/>(__CUDA_ARCH__&lt;700))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(!defined(__NVCC__)<sp/>&amp;&amp;<sp/>!defined(DESUL_HAVE_CUDA_ATOMICS_ASM))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">desul<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_cuda_atomic_integer_type<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>std::is_same&lt;T,int&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;T,unsigned<sp/>int&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;T,unsigned<sp/>long<sp/>long<sp/>int&gt;::value;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_cuda_atomic_add_type<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>is_cuda_atomic_integer_type&lt;T&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CUDA_ARCH__)<sp/>&amp;&amp;<sp/>(__CUDA_ARCH__<sp/>&gt;=<sp/>600)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;T,double&gt;::value<sp/>||<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;T,float&gt;::value;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_cuda_atomic_sub_type<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>std::is_same&lt;T,int&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;T,unsigned<sp/>int&gt;::value;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Atomic<sp/>Add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_add_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="56"><highlight class="normal">atomic_fetch_add(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrderRelaxed,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomicAdd(dest,val);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_add_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="63"><highlight class="normal">atomic_fetch_add(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>T<sp/>return_val<sp/>=<sp/>atomicAdd(dest,val);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_add_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="73"><highlight class="normal">atomic_fetch_add(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeCore)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_fetch_add(dest,val,MemoryOrder(),MemoryScopeDevice());</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Atomic<sp/>Sub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_sub_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="82"><highlight class="normal">atomic_fetch_sub(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrderRelaxed,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomicSub(dest,val);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_sub_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="89"><highlight class="normal">atomic_fetch_sub(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>T<sp/>return_val<sp/>=<sp/>atomicSub(dest,val);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_sub_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="99"><highlight class="normal">atomic_fetch_sub(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeCore)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_fetch_sub(dest,val,MemoryOrder(),MemoryScopeDevice());</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Atomic<sp/>Inc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atomic_fetch_inc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomicInc(dest,val);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atomic_fetch_inc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>return_val<sp/>=<sp/>atomicInc(dest,val);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atomic_fetch_inc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeCore)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_fetch_inc(dest,val,MemoryOrder(),MemoryScopeDevice());</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Atomic<sp/>Inc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atomic_fetch_dec(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomicDec(dest,val);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atomic_fetch_dec(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>return_val<sp/>=<sp/>atomicDec(dest,val);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atomic_fetch_dec(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeCore)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_fetch_dec(dest,val,MemoryOrder(),MemoryScopeDevice());</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Atomic<sp/>Max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="150"><highlight class="normal">atomic_fetch_max(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrderRelaxed,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomicMax(dest,val);</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="157"><highlight class="normal">atomic_fetch_max(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>T<sp/>return_val<sp/>=<sp/>atomicMax(dest,val);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="167"><highlight class="normal">atomic_fetch_max(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeCore)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_fetch_max(dest,val,MemoryOrder(),MemoryScopeDevice());</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Atomic<sp/>Min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="175"><highlight class="normal">atomic_fetch_min(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrderRelaxed,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomicMin(dest,val);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="182"><highlight class="normal">atomic_fetch_min(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>T<sp/>return_val<sp/>=<sp/>atomicMin(dest,val);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="192"><highlight class="normal">atomic_fetch_min(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeCore)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_fetch_min(dest,val,MemoryOrder(),MemoryScopeDevice());</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Atomic<sp/>And</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="200"><highlight class="normal">atomic_fetch_and(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrderRelaxed,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomicAnd(dest,val);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="207"><highlight class="normal">atomic_fetch_and(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>T<sp/>return_val<sp/>=<sp/>atomicAnd(dest,val);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="217"><highlight class="normal">atomic_fetch_and(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeCore)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_fetch_and(dest,val,MemoryOrder(),MemoryScopeDevice());</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Atomic<sp/>XOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="223"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="225"><highlight class="normal">atomic_fetch_xor(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrderRelaxed,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomicXor(dest,val);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="232"><highlight class="normal">atomic_fetch_xor(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>T<sp/>return_val<sp/>=<sp/>atomicXor(dest,val);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="242"><highlight class="normal">atomic_fetch_xor(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeCore)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_fetch_xor(dest,val,MemoryOrder(),MemoryScopeDevice());</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Atomic<sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="250"><highlight class="normal">atomic_fetch_or(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrderRelaxed,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomicOr(dest,val);</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="255"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="257"><highlight class="normal">atomic_fetch_or(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeDevice)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>T<sp/>return_val<sp/>=<sp/>atomicOr(dest,val);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_val;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MemoryOrder&gt;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Impl::is_cuda_atomic_integer_type&lt;T&gt;::value,T&gt;::type</highlight></codeline>
<codeline lineno="267"><highlight class="normal">atomic_fetch_or(T*<sp/>dest,<sp/>T<sp/>val,<sp/>MemoryOrder,<sp/>MemoryScopeCore)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_fetch_or(dest,val,MemoryOrder(),MemoryScopeDevice());</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>desul</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(__NVCC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functions<sp/>defined<sp/>as<sp/>device<sp/>functions<sp/>in<sp/>CUDA<sp/>which<sp/>don&apos;t<sp/>exist<sp/>in<sp/>the<sp/>GCC<sp/>overload<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">desul<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DESUL_HAVE_CUDA_ATOMICS_ASM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_ADD(TYPE,ORDER,SCOPE)<sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>void<sp/>atomic_add(TYPE*<sp/>const<sp/>dest,<sp/>TYPE<sp/>val,<sp/>ORDER<sp/>order,<sp/>SCOPE<sp/>scope)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(void)<sp/>atomic_fetch_add(dest,<sp/>val,<sp/>order,<sp/>scope);<sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_ADD(int32_t,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_ADD(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);<sp/></highlight><highlight class="comment">//<sp/>only<sp/>for<sp/>ASM?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_ADD(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_ADD(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_ADD(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_ADD(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_SUB(TYPE,ORDER,SCOPE)<sp/>\</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>void<sp/>atomic_sub(TYPE*<sp/>const<sp/>dest,<sp/>TYPE<sp/>val,<sp/>ORDER<sp/>order,<sp/>SCOPE<sp/>scope)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(void)<sp/>atomic_fetch_sub(dest,<sp/>val,<sp/>order,<sp/>scope);<sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_SUB(int32_t,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_SUB(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);<sp/></highlight><highlight class="comment">//<sp/>only<sp/>for<sp/>ASM?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_SUB(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_SUB(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_SUB(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_INC(TYPE,ORDER,SCOPE)<sp/>\</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>void<sp/>atomic_inc(TYPE*<sp/>const<sp/>dest,<sp/>ORDER<sp/>order,<sp/>SCOPE<sp/>scope)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(void)<sp/>atomic_fetch_inc(dest,<sp/>order,<sp/>scope);<sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_INC(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);<sp/></highlight><highlight class="comment">//<sp/>only<sp/>for<sp/>ASM?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_DEC(TYPE,ORDER,SCOPE)<sp/>\</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>void<sp/>atomic_dec(TYPE*<sp/>const<sp/>dest,<sp/>ORDER<sp/>order,<sp/>SCOPE<sp/>scope)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(void)<sp/>atomic_fetch_dec(dest,<sp/>order,<sp/>scope);<sp/>\</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_DEC(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);<sp/></highlight><highlight class="comment">//<sp/>only<sp/>for<sp/>ASM?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DESUL_HAVE_CUDA_ATOMICS_ASM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_ADD(TYPE,ORDER,SCOPE)<sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>TYPE<sp/>atomic_fetch_add(TYPE*<sp/>const<sp/>dest,<sp/>TYPE<sp/>val,<sp/>ORDER<sp/>order,<sp/>SCOPE<sp/>scope)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Impl::atomic_fetch_oper(Impl::AddOper&lt;TYPE,<sp/>const<sp/>TYPE&gt;(),dest,<sp/>val,<sp/>order,<sp/>scope);<sp/>\</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_ADD(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_ADD(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_SUB(TYPE,ORDER,SCOPE)<sp/>\</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>TYPE<sp/>atomic_fetch_sub(TYPE*<sp/>const<sp/>dest,<sp/>TYPE<sp/>val,<sp/>ORDER<sp/>order,<sp/>SCOPE<sp/>scope)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Impl::atomic_fetch_oper(Impl::SubOper&lt;TYPE,<sp/>const<sp/>TYPE&gt;(),dest,<sp/>val,<sp/>order,<sp/>scope);<sp/>\</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_SUB(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_SUB(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_MAX(TYPE,ORDER,SCOPE)<sp/>\</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>TYPE<sp/>atomic_fetch_max(TYPE*<sp/>const<sp/>dest,<sp/>TYPE<sp/>val,<sp/>ORDER<sp/>order,<sp/>SCOPE<sp/>scope)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="329"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Impl::atomic_fetch_oper(Impl::MaxOper&lt;TYPE,<sp/>const<sp/>TYPE&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);<sp/>\</highlight></codeline>
<codeline lineno="330"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_MAX(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_MAX(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);<sp/></highlight><highlight class="comment">//<sp/>only<sp/>for<sp/>ASM?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_MAX(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_MAX(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_MAX(unsigned<sp/>long<sp/>long,MemoryOrderRelaxed,MemoryScopeDevice);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_MIN(TYPE,ORDER,SCOPE)<sp/>\</highlight></codeline>
<codeline lineno="338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>TYPE<sp/>atomic_fetch_min(TYPE*<sp/>const<sp/>dest,<sp/>TYPE<sp/>val,<sp/>ORDER<sp/>order,<sp/>SCOPE<sp/>scope)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Impl::atomic_fetch_oper(Impl::MinOper&lt;TYPE,<sp/>const<sp/>TYPE&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);<sp/>\</highlight></codeline>
<codeline lineno="340"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_MIN(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_MIN(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);<sp/></highlight><highlight class="comment">//<sp/>only<sp/>for<sp/>ASM?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_MIN(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_MIN(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,MemoryOrderRelaxed,MemoryScopeDevice);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>DESUL_IMPL_CUDA_HOST_ATOMIC_FETCH_MIN(unsigned<sp/>long<sp/>long,MemoryOrderRelaxed,MemoryScopeDevice);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>inline<sp/>void<sp/>atomic_fetch_max(int32_t*<sp/>const<sp/>dest,<sp/>int32_t<sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functions<sp/>defined<sp/>int<sp/>the<sp/>GCC<sp/>overload<sp/>set<sp/>but<sp/>not<sp/>in<sp/>the<sp/>device<sp/>overload<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">desul<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_fetch_add(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::AddOper&lt;unsigned<sp/>long<sp/>long,<sp/>const<sp/>unsigned<sp/>long<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_fetch_add(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::AddOper&lt;long<sp/>long,<sp/>const<sp/>long<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_fetch_add(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::AddOper&lt;long,<sp/>const<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_fetch_sub(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::SubOper&lt;long<sp/>long,<sp/>const<sp/>long<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_fetch_sub(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::SubOper&lt;long,<sp/>const<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_fetch_max(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::MaxOper&lt;long,<sp/>const<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_fetch_min(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::MinOper&lt;long,<sp/>const<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_fetch_or(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::OrOper&lt;long,<sp/>const<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_fetch_or(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::OrOper&lt;long<sp/>long,<sp/>const<sp/>long<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_fetch_xor(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::XorOper&lt;long,<sp/>const<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_fetch_xor(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::XorOper&lt;long<sp/>long,<sp/>const<sp/>long<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_fetch_and(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::AndOper&lt;long,<sp/>const<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_fetch_and(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_fetch_oper(Impl::AndOper&lt;long<sp/>long,<sp/>const<sp/>long<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_add_fetch(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::AddOper&lt;unsigned<sp/>long<sp/>long,<sp/>const<sp/>unsigned<sp/>long<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_add_fetch(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::AddOper&lt;long<sp/>long,<sp/>const<sp/>long<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_add_fetch(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::AddOper&lt;long,<sp/>const<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_sub_fetch(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::SubOper&lt;long<sp/>long,<sp/>const<sp/>long<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_sub_fetch(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::SubOper&lt;long,<sp/>const<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_or_fetch(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::OrOper&lt;long<sp/>long,<sp/>const<sp/>long<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_or_fetch(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::OrOper&lt;long,<sp/>const<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_xor_fetch(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::XorOper&lt;long<sp/>long,<sp/>const<sp/>long<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_xor_fetch(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::XorOper&lt;long,<sp/>const<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_and_fetch(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::AndOper&lt;long<sp/>long,<sp/>const<sp/>long<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>__device__<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atomic_and_fetch(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val,<sp/>MemoryOrderRelaxed<sp/>order,<sp/>MemoryScopeDevice<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::atomic_oper_fetch(Impl::AndOper&lt;long,<sp/>const<sp/>long&gt;(),<sp/>dest,<sp/>val,<sp/>order,<sp/>scope);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>DESUL_HAVE_CUDA_ATOMICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/Kokkos/kokkos/core/src/desul/atomics/CUDA.hpp"/>
  </compounddef>
</doxygen>
