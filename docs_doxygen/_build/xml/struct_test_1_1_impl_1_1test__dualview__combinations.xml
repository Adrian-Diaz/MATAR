<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_test_1_1_impl_1_1test__dualview__combinations" kind="struct" language="C++" prot="public">
    <compoundname>Test::Impl::test_dualview_combinations</compoundname>
    <templateparamlist>
      <param>
        <type>typename Scalar</type>
      </param>
      <param>
        <type>class <ref refid="struct_kokkos_1_1_device" kindref="compound">Device</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_test_1_1_impl_1_1test__dualview__combinations_1af285be23157a02ad8550ed3e9e6602e1" prot="public" static="no">
        <type><ref refid="struct_test_1_1_impl_1_1test__dualview__combinations" kindref="compound">test_dualview_combinations</ref>&lt; Scalar, <ref refid="struct_kokkos_1_1_device" kindref="compound">Device</ref> &gt;</type>
        <definition>using Test::Impl::test_dualview_combinations&lt; Scalar, Device &gt;::self_type =  test_dualview_combinations&lt;Scalar, Device&gt;</definition>
        <argsstring></argsstring>
        <name>self_type</name>
        <qualifiedname>Test::Impl::test_dualview_combinations::self_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="93" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_impl_1_1test__dualview__combinations_1a944d3711b07192bb3d7ae1700d8ca0d8" prot="public" static="no">
        <type>Scalar</type>
        <definition>using Test::Impl::test_dualview_combinations&lt; Scalar, Device &gt;::scalar_type =  Scalar</definition>
        <argsstring></argsstring>
        <name>scalar_type</name>
        <qualifiedname>Test::Impl::test_dualview_combinations::scalar_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="95" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_impl_1_1test__dualview__combinations_1af165c44f69993cd9c5df575d887cf798" prot="public" static="no">
        <type><ref refid="struct_kokkos_1_1_device" kindref="compound">Device</ref></type>
        <definition>using Test::Impl::test_dualview_combinations&lt; Scalar, Device &gt;::execution_space =  Device</definition>
        <argsstring></argsstring>
        <name>execution_space</name>
        <qualifiedname>Test::Impl::test_dualview_combinations::execution_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="96" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_test_1_1_impl_1_1test__dualview__combinations_1a43d7839bc9ac41bf9093c15b7ba98ea3" prot="public" static="no" mutable="no">
        <type>Scalar</type>
        <definition>Scalar Test::Impl::test_dualview_combinations&lt; Scalar, Device &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <qualifiedname>Test::Impl::test_dualview_combinations::reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="98" column="10" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_impl_1_1test__dualview__combinations_1a8ef72e41821089203834bf24c56e514c" prot="public" static="no" mutable="no">
        <type>Scalar</type>
        <definition>Scalar Test::Impl::test_dualview_combinations&lt; Scalar, Device &gt;::result</definition>
        <argsstring></argsstring>
        <name>result</name>
        <qualifiedname>Test::Impl::test_dualview_combinations::result</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="99" column="10" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_test_1_1_impl_1_1test__dualview__combinations_1aa57dcf291aa27f4f006b6d6706d099a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class_kokkos_1_1_view" kindref="compound">ViewType</ref></type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar Test::Impl::test_dualview_combinations&lt; Scalar, Device &gt;::run_me</definition>
        <argsstring>(unsigned int n, unsigned int m, bool with_init)</argsstring>
        <name>run_me</name>
        <qualifiedname>Test::Impl::test_dualview_combinations::run_me</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="102" column="10" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="102" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_impl_1_1test__dualview__combinations_1a7a5303cc5febfb9ce0366cc9ca12fc7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Test::Impl::test_dualview_combinations&lt; Scalar, Device &gt;::test_dualview_combinations</definition>
        <argsstring>(unsigned int size, bool with_init)</argsstring>
        <name>test_dualview_combinations</name>
        <qualifiedname>Test::Impl::test_dualview_combinations::test_dualview_combinations</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="143" column="3" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="143" bodyend="146"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" line="92" column="1" bodyfile="src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp" bodystart="92" bodyend="147"/>
    <listofallmembers>
      <member refid="struct_test_1_1_impl_1_1test__dualview__combinations_1af165c44f69993cd9c5df575d887cf798" prot="public" virt="non-virtual"><scope>Test::Impl::test_dualview_combinations</scope><name>execution_space</name></member>
      <member refid="struct_test_1_1_impl_1_1test__dualview__combinations_1a43d7839bc9ac41bf9093c15b7ba98ea3" prot="public" virt="non-virtual"><scope>Test::Impl::test_dualview_combinations</scope><name>reference</name></member>
      <member refid="struct_test_1_1_impl_1_1test__dualview__combinations_1a8ef72e41821089203834bf24c56e514c" prot="public" virt="non-virtual"><scope>Test::Impl::test_dualview_combinations</scope><name>result</name></member>
      <member refid="struct_test_1_1_impl_1_1test__dualview__combinations_1aa57dcf291aa27f4f006b6d6706d099a4" prot="public" virt="non-virtual"><scope>Test::Impl::test_dualview_combinations</scope><name>run_me</name></member>
      <member refid="struct_test_1_1_impl_1_1test__dualview__combinations_1a944d3711b07192bb3d7ae1700d8ca0d8" prot="public" virt="non-virtual"><scope>Test::Impl::test_dualview_combinations</scope><name>scalar_type</name></member>
      <member refid="struct_test_1_1_impl_1_1test__dualview__combinations_1af285be23157a02ad8550ed3e9e6602e1" prot="public" virt="non-virtual"><scope>Test::Impl::test_dualview_combinations</scope><name>self_type</name></member>
      <member refid="struct_test_1_1_impl_1_1test__dualview__combinations_1a7a5303cc5febfb9ce0366cc9ca12fc7d" prot="public" virt="non-virtual"><scope>Test::Impl::test_dualview_combinations</scope><name>test_dualview_combinations</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
