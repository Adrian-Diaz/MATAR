<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespace_kokkos_1_1_tools_1_1_experimental_1_1_impl" kind="namespace" language="C++">
    <compoundname>Kokkos::Tools::Experimental::Impl</compoundname>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_dimension_value_extractor" prot="public">Kokkos::Tools::Experimental::Impl::DimensionValueExtractor</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_dimension_value_extractor_3_01_value_hiera4e2e922b0bd62c1f0d631a9a8f45819c" prot="public">Kokkos::Tools::Experimental::Impl::DimensionValueExtractor&lt; ValueHierarchyNode&lt; RootType, Subtype &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_direct_fence_i_d_handle" prot="public">Kokkos::Tools::Experimental::Impl::DirectFenceIDHandle</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1get__space__dimensionality" prot="public">Kokkos::Tools::Experimental::Impl::get_space_dimensionality</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1get__space__dimensionality_3_01std_1_1map_3_01_k_00_01_v_01_4_01_4" prot="public">Kokkos::Tools::Experimental::Impl::get_space_dimensionality&lt; std::map&lt; K, V &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1get__space__dimensionality_3_01std_1_1vector_3_01_t_01_4_01_4" prot="public">Kokkos::Tools::Experimental::Impl::get_space_dimensionality&lt; std::vector&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_get_multidimensional_point" prot="public">Kokkos::Tools::Experimental::Impl::GetMultidimensionalPoint</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_get_multidimensional_point_3_01_value_hier6e3e3890febdcb93cca80f277c2c6333" prot="public">Kokkos::Tools::Experimental::Impl::GetMultidimensionalPoint&lt; ValueHierarchyNode&lt; ValueType, Subtype &gt;, double, Indices... &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_get_multidimensional_point_3_01_value_hier270527afece58de8b35acb4384fc8923" prot="public">Kokkos::Tools::Experimental::Impl::GetMultidimensionalPoint&lt; ValueHierarchyNode&lt; ValueType, void &gt;, double &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_get_point" prot="public">Kokkos::Tools::Experimental::Impl::GetPoint</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_get_point_3_01_point_type_00_01std_1_1arrafd53c7b83f75bf0d5883469722f467c5" prot="public">Kokkos::Tools::Experimental::Impl::GetPoint&lt; PointType, std::array&lt; Kokkos::Tools::Experimental::VariableValue, X &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_map_type_converter" prot="public">Kokkos::Tools::Experimental::Impl::MapTypeConverter</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_map_type_converter_3_01std_1_1map_3_01_k_00_01_v_01_4_01_4" prot="public">Kokkos::Tools::Experimental::Impl::MapTypeConverter&lt; std::map&lt; K, V &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_map_type_converter_3_01std_1_1vector_3_01_t_01_4_01_4" prot="public">Kokkos::Tools::Experimental::Impl::MapTypeConverter&lt; std::vector&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1n__dimensional__sparse__structure" prot="public">Kokkos::Tools::Experimental::Impl::n_dimensional_sparse_structure</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1n__dimensional__sparse__structure_3_01_t_00_011_01_4" prot="public">Kokkos::Tools::Experimental::Impl::n_dimensional_sparse_structure&lt; T, 1 &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_value_hierarchy_constructor" prot="public">Kokkos::Tools::Experimental::Impl::ValueHierarchyConstructor</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_value_hierarchy_constructor_3_01std_1_1map_3_01_k_00_01_v_01_4_01_4" prot="public">Kokkos::Tools::Experimental::Impl::ValueHierarchyConstructor&lt; std::map&lt; K, V &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_value_hierarchy_constructor_3_01std_1_1vector_3_01_t_01_4_01_4" prot="public">Kokkos::Tools::Experimental::Impl::ValueHierarchyConstructor&lt; std::vector&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_value_hierarchy_node" prot="public">Kokkos::Tools::Experimental::Impl::ValueHierarchyNode</innerclass>
    <innerclass refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_value_hierarchy_node_3_01_value_type_00_01void_01_4" prot="public">Kokkos::Tools::Experimental::Impl::ValueHierarchyNode&lt; ValueType, void &gt;</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_kokkos___profiling_8cpp_1aba54feeedef884f23e829356ab84d20f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::Tools::Experimental::Impl::tool_invoked_fence</definition>
        <argsstring>(const uint32_t)</argsstring>
        <name>tool_invoked_fence</name>
        <qualifiedname>Kokkos::Tools::Experimental::Impl::tool_invoked_fence</qualifiedname>
        <param>
          <type>const uint32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Currently the function ignores the device ID, Eventually we want to support fencing only a given stream/resource</para>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Profiling.cpp" line="68" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Profiling.cpp" bodystart="68" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___profiling_8hpp_1af5f0fbce5e0071794dd1b88ab8066557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Space</type>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t Kokkos::Tools::Experimental::Impl::idForInstance</definition>
        <argsstring>(const uintptr_t instance)</argsstring>
        <name>idForInstance</name>
        <qualifiedname>Kokkos::Tools::Experimental::Impl::idForInstance</qualifiedname>
        <param>
          <type>const uintptr_t</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Needed to be a ptr due to initialization order problems</para>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Profiling.hpp" line="147" column="10" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Profiling.hpp" bodystart="147" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___profiling_8hpp_1a34df2b15b8d4b189db6c5b71fe45ce45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Space</type>
          </param>
          <param>
            <type>typename FencingFunctor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::Tools::Experimental::Impl::profile_fence_event</definition>
        <argsstring>(const std::string &amp;name, DirectFenceIDHandle devIDTag, const FencingFunctor &amp;func)</argsstring>
        <name>profile_fence_event</name>
        <qualifiedname>Kokkos::Tools::Experimental::Impl::profile_fence_event</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="struct_kokkos_1_1_tools_1_1_experimental_1_1_impl_1_1_direct_fence_i_d_handle" kindref="compound">DirectFenceIDHandle</ref></type>
          <declname>devIDTag</declname>
        </param>
        <param>
          <type>const FencingFunctor &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Profiling.hpp" line="173" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Profiling.hpp" bodystart="173" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___profiling_8hpp_1a2531d895953d98f48522a19270b013e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t Kokkos::Tools::Experimental::Impl::int_for_synchronization_reason</definition>
        <argsstring>(Kokkos::Tools::Experimental::SpecialSynchronizationCases reason)</argsstring>
        <name>int_for_synchronization_reason</name>
        <qualifiedname>Kokkos::Tools::Experimental::Impl::int_for_synchronization_reason</qualifiedname>
        <param>
          <type>Kokkos::Tools::Experimental::SpecialSynchronizationCases</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Profiling.hpp" line="184" column="17" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Profiling.hpp" bodystart="184" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___profiling_8hpp_1a1f53ad34319f0a0a7c303b7df18b3979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Space</type>
          </param>
          <param>
            <type>typename FencingFunctor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::Tools::Experimental::Impl::profile_fence_event</definition>
        <argsstring>(const std::string &amp;name, Kokkos::Tools::Experimental::SpecialSynchronizationCases reason, const FencingFunctor &amp;func)</argsstring>
        <name>profile_fence_event</name>
        <qualifiedname>Kokkos::Tools::Experimental::Impl::profile_fence_event</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Kokkos::Tools::Experimental::SpecialSynchronizationCases</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>const FencingFunctor &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Profiling.hpp" line="194" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Profiling.hpp" bodystart="194" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___tuners_8hpp_1a31423a294b5097af9c1be4c6ad11cb44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointType</type>
          </param>
          <param>
            <type>class ArrayType</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Kokkos::Tools::Experimental::Impl::get_point_helper</definition>
        <argsstring>(const PointType &amp;in, const ArrayType &amp;indices, std::index_sequence&lt; Is... &gt;)</argsstring>
        <name>get_point_helper</name>
        <qualifiedname>Kokkos::Tools::Experimental::Impl::get_point_helper</qualifiedname>
        <param>
          <type>const PointType &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const ArrayType &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Tuners.hpp" line="271" column="6" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Tuners.hpp" bodystart="271" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___tuners_8hpp_1a4321d088ca42334ed0216d0925e4cc51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointType</type>
          </param>
          <param>
            <type>typename ArrayType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Kokkos::Tools::Experimental::Impl::get_point</definition>
        <argsstring>(const PointType &amp;point, const ArrayType &amp;indices)</argsstring>
        <name>get_point</name>
        <qualifiedname>Kokkos::Tools::Experimental::Impl::get_point</qualifiedname>
        <param>
          <type>const PointType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const ArrayType &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Tuners.hpp" line="293" column="6" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Tuners.hpp" bodystart="293" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___tuners_8hpp_1a01acd168e47a34557cfc74c8dca3b0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::Tools::Experimental::Impl::fill_tile</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;cont, int tile_size)</argsstring>
        <name>fill_tile</name>
        <qualifiedname>Kokkos::Tools::Experimental::Impl::fill_tile</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tile_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Tuners.hpp" line="553" column="6" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Tuners.hpp" bodystart="553" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___tuners_8hpp_1a7c31d7315c529b9dcbae2984655cbbfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Mapped</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::Tools::Experimental::Impl::fill_tile</definition>
        <argsstring>(std::map&lt; T, Mapped &gt; &amp;cont, int tile_size)</argsstring>
        <name>fill_tile</name>
        <qualifiedname>Kokkos::Tools::Experimental::Impl::fill_tile</qualifiedname>
        <param>
          <type>std::map&lt; T, Mapped &gt; &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tile_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Tuners.hpp" line="559" column="6" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Tuners.hpp" bodystart="559" bodyend="563"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Profiling.cpp" line="67" column="1"/>
  </compounddef>
</doxygen>
