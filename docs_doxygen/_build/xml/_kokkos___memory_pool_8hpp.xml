<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_kokkos___memory_pool_8hpp" kind="file" language="C++">
    <compoundname>Kokkos_MemoryPool.hpp</compoundname>
    <includes refid="_kokkos___core__fwd_8hpp" local="no">Kokkos_Core_fwd.hpp</includes>
    <includes refid="_kokkos___parallel_8hpp" local="no">Kokkos_Parallel.hpp</includes>
    <includes refid="_kokkos___atomic_8hpp" local="no">Kokkos_Atomic.hpp</includes>
    <includes refid="_kokkos___concurrent_bitset_8hpp" local="no">impl/Kokkos_ConcurrentBitset.hpp</includes>
    <includes refid="_kokkos___error_8hpp" local="no">impl/Kokkos_Error.hpp</includes>
    <includes refid="_kokkos___shared_alloc_8hpp" local="no">impl/Kokkos_SharedAlloc.hpp</includes>
    <includes local="no">iostream</includes>
    <includedby refid="_kokkos___core_8hpp" local="no">src/Kokkos/kokkos/core/src/Kokkos_Core.hpp</includedby>
    <incdepgraph>
      <node id="48">
        <label>KokkosExp_MDRangePolicy.hpp</label>
        <link refid="_kokkos_exp___m_d_range_policy_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>Kokkos_Array.hpp</label>
        <link refid="_kokkos___array_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>Kokkos_Atomic.hpp</label>
        <link refid="_kokkos___atomic_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Kokkos_Concepts.hpp</label>
        <link refid="_kokkos___concepts_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Kokkos_Core_fwd.hpp</label>
        <link refid="_kokkos___core__fwd_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Kokkos_DetectionIdiom.hpp</label>
        <link refid="_kokkos___detection_idiom_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>Kokkos_ExecPolicy.hpp</label>
        <link refid="_kokkos___exec_policy_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>Kokkos_Extents.hpp</label>
        <link refid="_kokkos___extents_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>Kokkos_HostSpace.hpp</label>
        <link refid="_kokkos___host_space_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Kokkos_Layout.hpp</label>
        <link refid="_kokkos___layout_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Kokkos_Macros.hpp</label>
        <link refid="_kokkos___macros_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp</label>
        <link refid="_kokkos___memory_pool_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>Kokkos_MemoryTraits.hpp</label>
        <link refid="_kokkos___memory_traits_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>Kokkos_NumericTraits.hpp</label>
        <link refid="_kokkos___numeric_traits_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>Kokkos_Pair.hpp</label>
        <link refid="_kokkos___pair_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Kokkos_Parallel.hpp</label>
        <link refid="_kokkos___parallel_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>Kokkos_Parallel_Reduce.hpp</label>
        <link refid="_kokkos___parallel___reduce_8hpp_source"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Kokkos_Rank.hpp</label>
        <link refid="_kokkos___rank_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>Kokkos_Tuners.hpp</label>
        <link refid="_kokkos___tuners_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>Kokkos_View.hpp</label>
        <link refid="_kokkos___view_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>impl/KokkosExp_Host_IterateTile.hpp</label>
        <link refid="_kokkos_exp___host___iterate_tile_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>impl/Kokkos_AnalyzePolicy.hpp</label>
        <link refid="_kokkos___analyze_policy_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>impl/Kokkos_Atomic_Assembly.hpp</label>
        <link refid="_kokkos___atomic___assembly_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>impl/Kokkos_Atomic_Compare_Exchange_Strong.hpp</label>
        <link refid="_kokkos___atomic___compare___exchange___strong_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>impl/Kokkos_Atomic_Decrement.hpp</label>
        <link refid="_kokkos___atomic___decrement_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>impl/Kokkos_Atomic_Exchange.hpp</label>
        <link refid="_kokkos___atomic___exchange_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>impl/Kokkos_Atomic_Fetch_Add.hpp</label>
        <link refid="_kokkos___atomic___fetch___add_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>impl/Kokkos_Atomic_Fetch_And.hpp</label>
        <link refid="_kokkos___atomic___fetch___and_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>impl/Kokkos_Atomic_Fetch_Or.hpp</label>
        <link refid="_kokkos___atomic___fetch___or_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>impl/Kokkos_Atomic_Fetch_Sub.hpp</label>
        <link refid="_kokkos___atomic___fetch___sub_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>impl/Kokkos_Atomic_Generic.hpp</label>
        <link refid="_kokkos___atomic___generic_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>impl/Kokkos_Atomic_Generic_Secondary.hpp</label>
        <link refid="_kokkos___atomic___generic___secondary_8hpp_source"/>
      </node>
      <node id="84">
        <label>impl/Kokkos_Atomic_Increment.hpp</label>
        <link refid="_kokkos___atomic___increment_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>impl/Kokkos_Atomic_Load.hpp</label>
        <link refid="_kokkos___atomic___load_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>impl/Kokkos_Atomic_Memory_Order.hpp</label>
        <link refid="_kokkos___atomic___memory___order_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>impl/Kokkos_Atomic_MinMax.hpp</label>
        <link refid="_kokkos___atomic___min_max_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>impl/Kokkos_Atomic_Store.hpp</label>
        <link refid="_kokkos___atomic___store_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>impl/Kokkos_Atomic_View.hpp</label>
        <link refid="_kokkos___atomic___view_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>impl/Kokkos_BitOps.hpp</label>
        <link refid="_kokkos___bit_ops_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>impl/Kokkos_ClockTic.hpp</label>
        <link refid="_kokkos___clock_tic_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>impl/Kokkos_ConcurrentBitset.hpp</label>
        <link refid="_kokkos___concurrent_bitset_8hpp_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>impl/Kokkos_Error.hpp</label>
        <link refid="_kokkos___error_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>impl/Kokkos_FunctorAdapter.hpp</label>
        <link refid="_kokkos___functor_adapter_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>impl/Kokkos_FunctorAnalysis.hpp</label>
        <link refid="_kokkos___functor_analysis_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>impl/Kokkos_GraphImpl_fwd.hpp</label>
        <link refid="_kokkos___graph_impl__fwd_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>impl/Kokkos_HostSpace_deepcopy.hpp</label>
        <link refid="_kokkos___host_space__deepcopy_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>impl/Kokkos_Memory_Fence.hpp</label>
        <link refid="_kokkos___memory___fence_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>impl/Kokkos_Profiling.hpp</label>
        <link refid="_kokkos___profiling_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>impl/Kokkos_Profiling_C_Interface.h</label>
        <link refid="_kokkos___profiling___c___interface_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>impl/Kokkos_Profiling_DeviceInfo.hpp</label>
        <link refid="_kokkos___profiling___device_info_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>impl/Kokkos_Profiling_Interface.hpp</label>
        <link refid="_kokkos___profiling___interface_8hpp_source"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>impl/Kokkos_SharedAlloc.hpp</label>
        <link refid="_kokkos___shared_alloc_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>impl/Kokkos_Tools.hpp</label>
        <link refid="_kokkos___tools_8hpp_source"/>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>impl/Kokkos_Traits.hpp</label>
        <link refid="_kokkos___traits_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>impl/Kokkos_Utilities.hpp</label>
        <link refid="_kokkos___utilities_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>impl/Kokkos_ViewArray.hpp</label>
        <link refid="_kokkos___view_array_8hpp_source"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>impl/Kokkos_ViewCtor.hpp</label>
        <link refid="_kokkos___view_ctor_8hpp_source"/>
      </node>
      <node id="69">
        <label>impl/Kokkos_ViewMapping.hpp</label>
        <link refid="_kokkos___view_mapping_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>impl/Kokkos_ViewTracker.hpp</label>
        <link refid="_kokkos___view_tracker_8hpp_source"/>
      </node>
      <node id="95">
        <label>impl/Kokkos_ViewUniformType.hpp</label>
        <link refid="_kokkos___view_uniform_type_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>impl/Kokkos_Volatile_Load.hpp</label>
        <link refid="_kokkos___volatile___load_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>traits/Kokkos_ExecutionSpaceTrait.hpp</label>
        <link refid="_kokkos___execution_space_trait_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>traits/Kokkos_GraphKernelTrait.hpp</label>
        <link refid="_kokkos___graph_kernel_trait_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>traits/Kokkos_IndexTypeTrait.hpp</label>
        <link refid="_kokkos___index_type_trait_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>traits/Kokkos_IterationPatternTrait.hpp</label>
        <link refid="_kokkos___iteration_pattern_trait_8hpp_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>traits/Kokkos_LaunchBoundsTrait.hpp</label>
        <link refid="_kokkos___launch_bounds_trait_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>traits/Kokkos_OccupancyControlTrait.hpp</label>
        <link refid="_kokkos___occupancy_control_trait_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>traits/Kokkos_PolicyTraitAdaptor.hpp</label>
        <link refid="_kokkos___policy_trait_adaptor_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>traits/Kokkos_ScheduleTrait.hpp</label>
        <link refid="_kokkos___schedule_trait_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>traits/Kokkos_Traits_fwd.hpp</label>
        <link refid="_kokkos___traits__fwd_8hpp_source"/>
      </node>
      <node id="36">
        <label>traits/Kokkos_WorkItemPropertyTrait.hpp</label>
        <link refid="_kokkos___work_item_property_trait_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>traits/Kokkos_WorkTagTrait.hpp</label>
        <link refid="_kokkos___work_tag_trait_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>KokkosCore_Config_FwdBackend.hpp</label>
      </node>
      <node id="5">
        <label>KokkosCore_Config_SetupBackend.hpp</label>
      </node>
      <node id="4">
        <label>KokkosCore_config.h</label>
      </node>
      <node id="40">
        <label>algorithm</label>
      </node>
      <node id="60">
        <label>array</label>
      </node>
      <node id="77">
        <label>atomic</label>
      </node>
      <node id="64">
        <label>cassert</label>
      </node>
      <node id="100">
        <label>cfloat</label>
      </node>
      <node id="104">
        <label>chrono</label>
      </node>
      <node id="53">
        <label>cinttypes</label>
      </node>
      <node id="21">
        <label>climits</label>
      </node>
      <node id="101">
        <label>cmath</label>
      </node>
      <node id="19">
        <label>cstddef</label>
      </node>
      <node id="10">
        <label>cstdint</label>
      </node>
      <node id="54">
        <label>cstdlib</label>
      </node>
      <node id="42">
        <label>cstring</label>
      </node>
      <node id="12">
        <label>initializer_list</label>
      </node>
      <node id="8">
        <label>iosfwd</label>
      </node>
      <node id="105">
        <label>iostream</label>
      </node>
      <node id="50">
        <label>limits</label>
      </node>
      <node id="63">
        <label>map</label>
      </node>
      <node id="65">
        <label>memory</label>
      </node>
      <node id="67">
        <label>mutex</label>
      </node>
      <node id="59">
        <label>stdbool.h</label>
      </node>
      <node id="57">
        <label>stddef.h</label>
      </node>
      <node id="58">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="61">
        <label>tuple</label>
      </node>
      <node id="11">
        <label>type_traits</label>
      </node>
      <node id="38">
        <label>typeinfo</label>
      </node>
      <node id="66">
        <label>unordered_map</label>
      </node>
      <node id="13">
        <label>utility</label>
      </node>
      <node id="62">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>src/Kokkos/kokkos/algorithms/src/Kokkos_Random.hpp</label>
        <link refid="_kokkos___random_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>src/Kokkos/kokkos/algorithms/src/Kokkos_Sort.hpp</label>
        <link refid="_kokkos___sort_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/Kokkos/kokkos/algorithms/unit_tests/TestRandom.hpp</label>
        <link refid="_test_random_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/Kokkos/kokkos/algorithms/unit_tests/TestRandomCommon.hpp</label>
        <link refid="_test_random_common_8hpp_source"/>
      </node>
      <node id="6">
        <label>src/Kokkos/kokkos/algorithms/unit_tests/TestSort.hpp</label>
        <link refid="_test_sort_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/Kokkos/kokkos/algorithms/unit_tests/TestSortCommon.hpp</label>
        <link refid="_test_sort_common_8hpp_source"/>
      </node>
      <node id="11">
        <label>src/Kokkos/kokkos/benchmarks/bytes_and_flops/bench.hpp</label>
        <link refid="bench_8hpp_source"/>
      </node>
      <node id="9">
        <label>src/Kokkos/kokkos/benchmarks/gather/gather.hpp</label>
        <link refid="gather_8hpp_source"/>
      </node>
      <node id="8">
        <label>src/Kokkos/kokkos/benchmarks/gather/gather_unroll.hpp</label>
        <link refid="gather__unroll_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>src/Kokkos/kokkos/benchmarks/policy_performance/policy_perf_test.hpp</label>
        <link refid="policy__perf__test_8hpp_source"/>
      </node>
      <node id="13">
        <label>src/Kokkos/kokkos/containers/performance_tests/TestDynRankView.hpp</label>
        <link refid="_test_dyn_rank_view_8hpp_source"/>
      </node>
      <node id="14">
        <label>src/Kokkos/kokkos/containers/performance_tests/TestGlobal2LocalIds.hpp</label>
        <link refid="_test_global2_local_ids_8hpp_source"/>
      </node>
      <node id="36">
        <label>src/Kokkos/kokkos/containers/performance_tests/TestScatterView.hpp</label>
        <link refid="performance__tests_2_test_scatter_view_8hpp_source"/>
      </node>
      <node id="15">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_Bitset.hpp</label>
        <link refid="_kokkos___bitset_8hpp_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_DualView.hpp</label>
        <link refid="_kokkos___dual_view_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp</label>
        <link refid="_kokkos___dyn_rank_view_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_DynamicView.hpp</label>
        <link refid="_kokkos___dynamic_view_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_ErrorReporter.hpp</label>
        <link refid="_kokkos___error_reporter_8hpp_source"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp</label>
        <link refid="_kokkos___offset_view_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp</label>
        <link refid="_kokkos___scatter_view_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_UnorderedMap.hpp</label>
        <link refid="_kokkos___unordered_map_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>src/Kokkos/kokkos/containers/src/Kokkos_Vector.hpp</label>
        <link refid="_kokkos___vector_8hpp_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestBitset.hpp</label>
        <link refid="_test_bitset_8hpp_source"/>
      </node>
      <node id="24">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDualView.hpp</label>
        <link refid="_test_dual_view_8hpp_source"/>
      </node>
      <node id="26">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI.hpp</label>
        <link refid="_test_dyn_view_a_p_i_8hpp_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI_generic.hpp</label>
        <link refid="_test_dyn_view_a_p_i__generic_8hpp_source"/>
      </node>
      <node id="28">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI_rank12345.hpp</label>
        <link refid="_test_dyn_view_a_p_i__rank12345_8hpp_source"/>
      </node>
      <node id="29">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynViewAPI_rank67.hpp</label>
        <link refid="_test_dyn_view_a_p_i__rank67_8hpp_source"/>
      </node>
      <node id="32">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestDynamicView.hpp</label>
        <link refid="_test_dynamic_view_8hpp_source"/>
      </node>
      <node id="21">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestErrorReporter.hpp</label>
        <link refid="_test_error_reporter_8hpp_source"/>
      </node>
      <node id="34">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestOffsetView.hpp</label>
        <link refid="_test_offset_view_8hpp_source"/>
      </node>
      <node id="37">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestScatterView.hpp</label>
        <link refid="unit__tests_2_test_scatter_view_8hpp_source"/>
      </node>
      <node id="38">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestStaticCrsGraph.hpp</label>
        <link refid="_test_static_crs_graph_8hpp_source"/>
      </node>
      <node id="17">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestUnorderedMap.hpp</label>
        <link refid="_test_unordered_map_8hpp_source"/>
      </node>
      <node id="23">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestVector.hpp</label>
        <link refid="_test_vector_8hpp_source"/>
      </node>
      <node id="30">
        <label>src/Kokkos/kokkos/containers/unit_tests/TestViewCtorPropEmbeddedDim.hpp</label>
        <link refid="containers_2unit__tests_2_test_view_ctor_prop_embedded_dim_8hpp_source"/>
      </node>
      <node id="39">
        <label>src/Kokkos/kokkos/core/perf_test/PerfTest_ViewCopy.hpp</label>
        <link refid="_perf_test___view_copy_8hpp_source"/>
      </node>
      <node id="40">
        <label>src/Kokkos/kokkos/core/perf_test/PerfTest_ViewFill.hpp</label>
        <link refid="_perf_test___view_fill_8hpp_source"/>
      </node>
      <node id="41">
        <label>src/Kokkos/kokkos/core/perf_test/PerfTest_ViewResize.hpp</label>
        <link refid="_perf_test___view_resize_8hpp_source"/>
      </node>
      <node id="42">
        <label>src/Kokkos/kokkos/core/src/Kokkos_AcquireUniqueTokenImpl.hpp</label>
        <link refid="_kokkos___acquire_unique_token_impl_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/Kokkos/kokkos/core/src/Kokkos_Core.hpp</label>
        <link refid="_kokkos___core_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp</label>
        <link refid="_kokkos___memory_pool_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Instance.hpp</label>
        <link refid="_kokkos___open_m_p_target___instance_8hpp_source"/>
      </node>
      <node id="44">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations.hpp</label>
        <link refid="_test_atomic_operations_8hpp_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_complexdouble.hpp</label>
        <link refid="_test_atomic_operations__complexdouble_8hpp_source"/>
      </node>
      <node id="46">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_complexfloat.hpp</label>
        <link refid="_test_atomic_operations__complexfloat_8hpp_source"/>
      </node>
      <node id="47">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_double.hpp</label>
        <link refid="_test_atomic_operations__double_8hpp_source"/>
      </node>
      <node id="48">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_float.hpp</label>
        <link refid="_test_atomic_operations__float_8hpp_source"/>
      </node>
      <node id="49">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_int.hpp</label>
        <link refid="_test_atomic_operations__int_8hpp_source"/>
      </node>
      <node id="50">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_longint.hpp</label>
        <link refid="_test_atomic_operations__longint_8hpp_source"/>
      </node>
      <node id="51">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_longlongint.hpp</label>
        <link refid="_test_atomic_operations__longlongint_8hpp_source"/>
      </node>
      <node id="52">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_unsignedint.hpp</label>
        <link refid="_test_atomic_operations__unsignedint_8hpp_source"/>
      </node>
      <node id="53">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicOperations_unsignedlongint.hpp</label>
        <link refid="_test_atomic_operations__unsignedlongint_8hpp_source"/>
      </node>
      <node id="55">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomicViews.hpp</label>
        <link refid="_test_atomic_views_8hpp_source"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>src/Kokkos/kokkos/core/unit_test/TestAtomics.hpp</label>
        <link refid="_test_atomics_8hpp_source"/>
      </node>
      <node id="57">
        <label>src/Kokkos/kokkos/core/unit_test/TestBlockSizeDeduction.hpp</label>
        <link refid="_test_block_size_deduction_8hpp_source"/>
      </node>
      <node id="58">
        <label>src/Kokkos/kokkos/core/unit_test/TestCXX11.hpp</label>
        <link refid="_test_c_x_x11_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>src/Kokkos/kokkos/core/unit_test/TestCXX11Deduction.hpp</label>
        <link refid="_test_c_x_x11_deduction_8hpp_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>src/Kokkos/kokkos/core/unit_test/TestCompilerMacros.hpp</label>
        <link refid="_test_compiler_macros_8hpp_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>src/Kokkos/kokkos/core/unit_test/TestComplex.hpp</label>
        <link refid="_test_complex_8hpp_source"/>
      </node>
      <node id="65">
        <label>src/Kokkos/kokkos/core/unit_test/TestConcepts.hpp</label>
        <link refid="_test_concepts_8hpp_source"/>
      </node>
      <node id="66">
        <label>src/Kokkos/kokkos/core/unit_test/TestCrs.hpp</label>
        <link refid="_test_crs_8hpp_source"/>
      </node>
      <node id="67">
        <label>src/Kokkos/kokkos/core/unit_test/TestDeepCopyAlignment.hpp</label>
        <link refid="_test_deep_copy_alignment_8hpp_source"/>
      </node>
      <node id="68">
        <label>src/Kokkos/kokkos/core/unit_test/TestDefaultDeviceTypeInit.hpp</label>
        <link refid="_test_default_device_type_init_8hpp_source"/>
      </node>
      <node id="69">
        <label>src/Kokkos/kokkos/core/unit_test/TestExecSpacePartitioning.hpp</label>
        <link refid="_test_exec_space_partitioning_8hpp_source"/>
      </node>
      <node id="70">
        <label>src/Kokkos/kokkos/core/unit_test/TestExecutionSpace.hpp</label>
        <link refid="_test_execution_space_8hpp_source"/>
      </node>
      <node id="71">
        <label>src/Kokkos/kokkos/core/unit_test/TestFunctorAnalysis.hpp</label>
        <link refid="_test_functor_analysis_8hpp_source"/>
      </node>
      <node id="72">
        <label>src/Kokkos/kokkos/core/unit_test/TestGraph.hpp</label>
        <link refid="_test_graph_8hpp_source"/>
      </node>
      <node id="73">
        <label>src/Kokkos/kokkos/core/unit_test/TestHostSharedPtrAccessOnDevice.hpp</label>
        <link refid="_test_host_shared_ptr_access_on_device_8hpp_source"/>
      </node>
      <node id="63">
        <label>src/Kokkos/kokkos/core/unit_test/TestInit.hpp</label>
        <link refid="_test_init_8hpp_source"/>
      </node>
      <node id="74">
        <label>src/Kokkos/kokkos/core/unit_test/TestIrregularLayout.hpp</label>
        <link refid="_test_irregular_layout_8hpp_source"/>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>src/Kokkos/kokkos/core/unit_test/TestLocalDeepCopy.hpp</label>
        <link refid="_test_local_deep_copy_8hpp_source"/>
      </node>
      <node id="77">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange.hpp</label>
        <link refid="_test_m_d_range_8hpp_source"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_a.hpp</label>
        <link refid="_test_m_d_range__a_8hpp_source"/>
      </node>
      <node id="79">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_b.hpp</label>
        <link refid="_test_m_d_range__b_8hpp_source"/>
      </node>
      <node id="80">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_c.hpp</label>
        <link refid="_test_m_d_range__c_8hpp_source"/>
      </node>
      <node id="81">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_d.hpp</label>
        <link refid="_test_m_d_range__d_8hpp_source"/>
      </node>
      <node id="82">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_e.hpp</label>
        <link refid="_test_m_d_range__e_8hpp_source"/>
      </node>
      <node id="83">
        <label>src/Kokkos/kokkos/core/unit_test/TestMDRange_f.hpp</label>
        <link refid="_test_m_d_range__f_8hpp_source"/>
      </node>
      <node id="84">
        <label>src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp</label>
        <link refid="_test_mathematical_functions_8hpp_source"/>
      </node>
      <node id="85">
        <label>src/Kokkos/kokkos/core/unit_test/TestMathematicalSpecialFunctions.hpp</label>
        <link refid="_test_mathematical_special_functions_8hpp_source"/>
      </node>
      <node id="86">
        <label>src/Kokkos/kokkos/core/unit_test/TestNonTrivialScalarTypes.hpp</label>
        <link refid="_test_non_trivial_scalar_types_8hpp_source"/>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>src/Kokkos/kokkos/core/unit_test/TestNumericTraits.hpp</label>
        <link refid="_test_numeric_traits_8hpp_source"/>
      </node>
      <node id="59">
        <label>src/Kokkos/kokkos/core/unit_test/TestOther.hpp</label>
        <link refid="_test_other_8hpp_source"/>
      </node>
      <node id="92">
        <label>src/Kokkos/kokkos/core/unit_test/TestPolicyConstruction.hpp</label>
        <link refid="_test_policy_construction_8hpp_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>src/Kokkos/kokkos/core/unit_test/TestRange.hpp</label>
        <link refid="_test_range_8hpp_source"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>src/Kokkos/kokkos/core/unit_test/TestRangePolicy.hpp</label>
        <link refid="_test_range_policy_8hpp_source"/>
      </node>
      <node id="95">
        <label>src/Kokkos/kokkos/core/unit_test/TestRangePolicyRequire.hpp</label>
        <link refid="_test_range_policy_require_8hpp_source"/>
      </node>
      <node id="96">
        <label>src/Kokkos/kokkos/core/unit_test/TestReduce.hpp</label>
        <link refid="_test_reduce_8hpp_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>src/Kokkos/kokkos/core/unit_test/TestReduceCombinatorical.hpp</label>
        <link refid="_test_reduce_combinatorical_8hpp_source"/>
      </node>
      <node id="98">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers.hpp</label>
        <link refid="_test_reducers_8hpp_source"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers_a.hpp</label>
        <link refid="_test_reducers__a_8hpp_source"/>
      </node>
      <node id="100">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers_b.hpp</label>
        <link refid="_test_reducers__b_8hpp_source"/>
      </node>
      <node id="101">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers_c.hpp</label>
        <link refid="_test_reducers__c_8hpp_source"/>
      </node>
      <node id="87">
        <label>src/Kokkos/kokkos/core/unit_test/TestReducers_d.hpp</label>
        <link refid="_test_reducers__d_8hpp_source"/>
      </node>
      <node id="61">
        <label>src/Kokkos/kokkos/core/unit_test/TestReductions.hpp</label>
        <link refid="_test_reductions_8hpp_source"/>
      </node>
      <node id="102">
        <label>src/Kokkos/kokkos/core/unit_test/TestReductions_DeviceView.hpp</label>
        <link refid="_test_reductions___device_view_8hpp_source"/>
      </node>
      <node id="103">
        <label>src/Kokkos/kokkos/core/unit_test/TestResize.hpp</label>
        <link refid="_test_resize_8hpp_source"/>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>src/Kokkos/kokkos/core/unit_test/TestScan.hpp</label>
        <link refid="_test_scan_8hpp_source"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>src/Kokkos/kokkos/core/unit_test/TestSharedAlloc.hpp</label>
        <link refid="_test_shared_alloc_8hpp_source"/>
      </node>
      <node id="107">
        <label>src/Kokkos/kokkos/core/unit_test/TestStackTrace.hpp</label>
        <link refid="_test_stack_trace_8hpp_source"/>
      </node>
      <node id="134">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_a.hpp</label>
        <link refid="_test_sub_view__a_8hpp_source"/>
      </node>
      <node id="135">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_b.hpp</label>
        <link refid="_test_sub_view__b_8hpp_source"/>
      </node>
      <node id="136">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c01.hpp</label>
        <link refid="_test_sub_view__c01_8hpp_source"/>
      </node>
      <node id="137">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c02.hpp</label>
        <link refid="_test_sub_view__c02_8hpp_source"/>
      </node>
      <node id="138">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c03.hpp</label>
        <link refid="_test_sub_view__c03_8hpp_source"/>
      </node>
      <node id="139">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c04.hpp</label>
        <link refid="_test_sub_view__c04_8hpp_source"/>
      </node>
      <node id="140">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c05.hpp</label>
        <link refid="_test_sub_view__c05_8hpp_source"/>
      </node>
      <node id="141">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c06.hpp</label>
        <link refid="_test_sub_view__c06_8hpp_source"/>
      </node>
      <node id="142">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c07.hpp</label>
        <link refid="_test_sub_view__c07_8hpp_source"/>
      </node>
      <node id="143">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c08.hpp</label>
        <link refid="_test_sub_view__c08_8hpp_source"/>
      </node>
      <node id="144">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c09.hpp</label>
        <link refid="_test_sub_view__c09_8hpp_source"/>
      </node>
      <node id="145">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c10.hpp</label>
        <link refid="_test_sub_view__c10_8hpp_source"/>
      </node>
      <node id="146">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c11.hpp</label>
        <link refid="_test_sub_view__c11_8hpp_source"/>
      </node>
      <node id="147">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c12.hpp</label>
        <link refid="_test_sub_view__c12_8hpp_source"/>
      </node>
      <node id="148">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c13.hpp</label>
        <link refid="_test_sub_view__c13_8hpp_source"/>
      </node>
      <node id="149">
        <label>src/Kokkos/kokkos/core/unit_test/TestSubView_c14.hpp</label>
        <link refid="_test_sub_view__c14_8hpp_source"/>
      </node>
      <node id="108">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeam.hpp</label>
        <link refid="_test_team_8hpp_source"/>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamBasic.hpp</label>
        <link refid="_test_team_basic_8hpp_source"/>
      </node>
      <node id="109">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamReductionScan.hpp</label>
        <link refid="_test_team_reduction_scan_8hpp_source"/>
      </node>
      <node id="111">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamScan.hpp</label>
        <link refid="_test_team_scan_8hpp_source"/>
      </node>
      <node id="110">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamScratch.hpp</label>
        <link refid="_test_team_scratch_8hpp_source"/>
      </node>
      <node id="112">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamTeamSize.hpp</label>
        <link refid="_test_team_team_size_8hpp_source"/>
      </node>
      <node id="88">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamVector.hpp</label>
        <link refid="_test_team_vector_8hpp_source"/>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>src/Kokkos/kokkos/core/unit_test/TestTeamVectorRange.hpp</label>
        <link refid="_test_team_vector_range_8hpp_source"/>
      </node>
      <node id="114">
        <label>src/Kokkos/kokkos/core/unit_test/TestTemplateMetaFunctions.hpp</label>
        <link refid="_test_template_meta_functions_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="115">
        <label>src/Kokkos/kokkos/core/unit_test/TestUniqueToken.hpp</label>
        <link refid="_test_unique_token_8hpp_source"/>
      </node>
      <node id="116">
        <label>src/Kokkos/kokkos/core/unit_test/TestUtilities.hpp</label>
        <link refid="_test_utilities_8hpp_source"/>
      </node>
      <node id="117">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp</label>
        <link refid="_test_view_a_p_i_8hpp_source"/>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_a.hpp</label>
        <link refid="_test_view_a_p_i__a_8hpp_source"/>
      </node>
      <node id="119">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_b.hpp</label>
        <link refid="_test_view_a_p_i__b_8hpp_source"/>
      </node>
      <node id="120">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_c.hpp</label>
        <link refid="_test_view_a_p_i__c_8hpp_source"/>
      </node>
      <node id="121">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_d.hpp</label>
        <link refid="_test_view_a_p_i__d_8hpp_source"/>
      </node>
      <node id="122">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewAPI_e.hpp</label>
        <link refid="_test_view_a_p_i__e_8hpp_source"/>
      </node>
      <node id="123">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewCopy_a.hpp</label>
        <link refid="_test_view_copy__a_8hpp_source"/>
      </node>
      <node id="124">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewCopy_b.hpp</label>
        <link refid="_test_view_copy__b_8hpp_source"/>
      </node>
      <node id="125">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewCtorPropEmbeddedDim.hpp</label>
        <link refid="core_2unit__test_2_test_view_ctor_prop_embedded_dim_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewIsAssignable.hpp</label>
        <link refid="_test_view_is_assignable_8hpp_source"/>
        <childnode refid="122" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewLayoutStrideAssignment.hpp</label>
        <link refid="_test_view_layout_stride_assignment_8hpp_source"/>
      </node>
      <node id="127">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewLayoutTiled.hpp</label>
        <link refid="_test_view_layout_tiled_8hpp_source"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="128">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewMapping_a.hpp</label>
        <link refid="_test_view_mapping__a_8hpp_source"/>
      </node>
      <node id="129">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewMapping_b.hpp</label>
        <link refid="_test_view_mapping__b_8hpp_source"/>
      </node>
      <node id="130">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewMapping_subview.hpp</label>
        <link refid="_test_view_mapping__subview_8hpp_source"/>
      </node>
      <node id="131">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewOfClass.hpp</label>
        <link refid="_test_view_of_class_8hpp_source"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewResize.hpp</label>
        <link refid="_test_view_resize_8hpp_source"/>
      </node>
      <node id="132">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewSpaceAssign.hpp</label>
        <link refid="_test_view_space_assign_8hpp_source"/>
      </node>
      <node id="133">
        <label>src/Kokkos/kokkos/core/unit_test/TestViewSubview.hpp</label>
        <link refid="_test_view_subview_8hpp_source"/>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="150">
        <label>src/Kokkos/kokkos/core/unit_test/TestView_64bit.hpp</label>
        <link refid="_test_view__64bit_8hpp_source"/>
      </node>
      <node id="151">
        <label>src/Kokkos/kokkos/core/unit_test/TestWorkGraph.hpp</label>
        <link refid="_test_work_graph_8hpp_source"/>
      </node>
      <node id="152">
        <label>src/Kokkos/kokkos/core/unit_test/Test_InterOp_Streams.hpp</label>
        <link refid="_test___inter_op___streams_8hpp_source"/>
      </node>
      <node id="153">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test01_execspace.hpp</label>
        <link refid="_test01__execspace_8hpp_source"/>
      </node>
      <node id="154">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test02_atomic_host.hpp</label>
        <link refid="_test02__atomic__host_8hpp_source"/>
      </node>
      <node id="155">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test03a_MemorySpace_malloc.hpp</label>
        <link refid="_test03a___memory_space__malloc_8hpp_source"/>
      </node>
      <node id="156">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test03b_MemorySpace_free.hpp</label>
        <link refid="_test03b___memory_space__free_8hpp_source"/>
      </node>
      <node id="157">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test04_ParallelFor_RangePolicy.hpp</label>
        <link refid="_test04___parallel_for___range_policy_8hpp_source"/>
      </node>
      <node id="158">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test05_ParallelReduce_RangePolicy.hpp</label>
        <link refid="_test05___parallel_reduce___range_policy_8hpp_source"/>
      </node>
      <node id="159">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test06_ParallelFor_MDRangePolicy.hpp</label>
        <link refid="_test06___parallel_for___m_d_range_policy_8hpp_source"/>
      </node>
      <node id="160">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test08_deep_copy.hpp</label>
        <link refid="_test08__deep__copy_8hpp_source"/>
      </node>
      <node id="161">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test10_HierarchicalBasics.hpp</label>
        <link refid="_test10___hierarchical_basics_8hpp_source"/>
      </node>
      <node id="162">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test11a_ParallelFor_TeamThreadRange.hpp</label>
        <link refid="_test11a___parallel_for___team_thread_range_8hpp_source"/>
      </node>
      <node id="163">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test11b_ParallelFor_TeamVectorRange.hpp</label>
        <link refid="_test11b___parallel_for___team_vector_range_8hpp_source"/>
      </node>
      <node id="164">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test11c_ParallelFor_ThreadVectorRange.hpp</label>
        <link refid="_test11c___parallel_for___thread_vector_range_8hpp_source"/>
      </node>
      <node id="165">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test12a_ThreadScratch.hpp</label>
        <link refid="_test12a___thread_scratch_8hpp_source"/>
      </node>
      <node id="166">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test12b_TeamScratch.hpp</label>
        <link refid="_test12b___team_scratch_8hpp_source"/>
      </node>
      <node id="167">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test13a_ParallelRed_TeamThreadRange.hpp</label>
        <link refid="_test13a___parallel_red___team_thread_range_8hpp_source"/>
      </node>
      <node id="168">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test13b_ParallelRed_TeamVectorRange.hpp</label>
        <link refid="_test13b___parallel_red___team_vector_range_8hpp_source"/>
      </node>
      <node id="169">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test13c_ParallelRed_ThreadVectorRange.hpp</label>
        <link refid="_test13c___parallel_red___thread_vector_range_8hpp_source"/>
      </node>
      <node id="170">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test14_MDRangeReduce.hpp</label>
        <link refid="_test14___m_d_range_reduce_8hpp_source"/>
      </node>
      <node id="171">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test16_ParallelScan.hpp</label>
        <link refid="_test16___parallel_scan_8hpp_source"/>
      </node>
      <node id="172">
        <label>src/Kokkos/kokkos/core/unit_test/incremental/Test17_CompleteAtomic.hpp</label>
        <link refid="_test17___complete_atomic_8hpp_source"/>
      </node>
      <node id="54">
        <label>src/Kokkos/kokkos/core/unit_test/openmp/TestOpenMP.hpp</label>
        <link refid="_test_open_m_p_8hpp_source"/>
      </node>
      <node id="90">
        <label>src/Kokkos/kokkos/core/unit_test/openmptarget/TestOpenMPTarget.hpp</label>
        <link refid="_test_open_m_p_target_8hpp_source"/>
      </node>
      <node id="173">
        <label>src/Kokkos/kokkos/core/unit_test/tools/TestEventCorrectness.hpp</label>
        <link refid="_test_event_correctness_8hpp_source"/>
      </node>
      <node id="174">
        <label>src/Kokkos/kokkos/core/unit_test/tools/TestLogicalSpaces.hpp</label>
        <link refid="_test_logical_spaces_8hpp_source"/>
      </node>
      <node id="175">
        <label>src/Kokkos/kokkos/example/virtual_functions/classes.hpp</label>
        <link refid="classes_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_kokkos_1_1_memory_pool" prot="public">Kokkos::MemoryPool</innerclass>
    <innerclass refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics" prot="public">Kokkos::MemoryPool::usage_statistics</innerclass>
    <innernamespace refid="namespace_kokkos">Kokkos</innernamespace>
    <innernamespace refid="namespace_kokkos_1_1_impl">Kokkos::Impl</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos<sp/>v.<sp/>3.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>(2020)<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC<sp/>(NTESS).</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>the<sp/>U.S.<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//<sp/>met:</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Corporation<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>NTESS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>NTESS<sp/>OR<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>Christian<sp/>R.<sp/>Trott<sp/>(crtrott@sandia.gov)</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//<sp/>************************************************************************</highlight></codeline>
<codeline lineno="42"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="43"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>KOKKOS_MEMORYPOOL_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KOKKOS_MEMORYPOOL_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Kokkos_Core_fwd.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_kokkos___parallel_8hpp" kindref="compound">Kokkos_Parallel.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_kokkos___atomic_8hpp" kindref="compound">Kokkos_Atomic.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;impl/Kokkos_ConcurrentBitset.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;impl/Kokkos_Error.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;impl/Kokkos_SharedAlloc.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Kokkos<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Report<sp/>violation<sp/>of<sp/>size<sp/>constraints:</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/><sp/>min_block_alloc_size<sp/>&lt;=<sp/>max_block_alloc_size</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/><sp/>max_block_alloc_size<sp/>&lt;=<sp/>min_superblock_size</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/><sp/>min_superblock_size<sp/><sp/>&lt;=<sp/>max_superblock_size</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/><sp/>min_superblock_size<sp/><sp/>&lt;=<sp/>min_total_alloc_size</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/><sp/>min_superblock_size<sp/><sp/>&lt;=<sp/>min_block_alloc_size<sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_block_per_superblock</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>memory_pool_bounds_verification(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_block_alloc_size,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_block_alloc_size,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_superblock_size,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_superblock_size,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_block_per_superblock,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_total_alloc_size);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Kokkos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Kokkos<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_print_memory_pool_state(std::ostream<sp/>&amp;s,<sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*sb_state_ptr,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>sb_count,<sp/>uint32_t<sp/>sb_size_lg2,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sb_state_size,<sp/>uint32_t<sp/>state_shift,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>state_used_mask);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DeviceType&gt;</highlight></codeline>
<codeline lineno="88" refid="class_kokkos_1_1_memory_pool" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_impl_1_1concurrent__bitset" kindref="compound">CB</ref><sp/>=<sp/><ref refid="struct_kokkos_1_1_impl_1_1concurrent__bitset" kindref="compound">Kokkos::Impl::concurrent_bitset</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>enum<sp/>:<sp/>uint32_t<sp/>{<sp/>bits_per_int_lg2<sp/>=<sp/>CB::bits_per_int_lg2<sp/>};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>enum<sp/>:<sp/>uint32_t<sp/>{<sp/>state_shift<sp/>=<sp/>CB::state_shift<sp/>};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>enum<sp/>:<sp/>uint32_t<sp/>{<sp/>state_used_mask<sp/>=<sp/>CB::state_used_mask<sp/>};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>enum<sp/>:<sp/>uint32_t<sp/>{<sp/>state_header_mask<sp/>=<sp/>CB::state_header_mask<sp/>};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>enum<sp/>:<sp/>uint32_t<sp/>{<sp/>max_bit_count_lg2<sp/>=<sp/>CB::max_bit_count_lg2<sp/>};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>enum<sp/>:<sp/>uint32_t<sp/>{<sp/>max_bit_count<sp/>=<sp/>CB::max_bit_count<sp/>};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>enum<sp/>:<sp/>uint32_t<sp/>{<sp/>HINT_PER_BLOCK_SIZE<sp/>=<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>Each<sp/>superblock<sp/>has<sp/>a<sp/>concurrent<sp/>bitset<sp/>state</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>which<sp/>is<sp/>an<sp/>array<sp/>of<sp/>uint32_t<sp/>integers.</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>[<sp/>{<sp/>block_count_lg2<sp/><sp/>:<sp/>state_shift<sp/>bits</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>used_block_count<sp/>:<sp/>(<sp/>32<sp/>-<sp/>state_shift<sp/>)<sp/>bits</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>,<sp/>{<sp/>block<sp/>allocation<sp/>bit<sp/>set<sp/>}*<sp/>]</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>As<sp/>superblocks<sp/>are<sp/>assigned<sp/>(allocated)<sp/>to<sp/>a<sp/>block<sp/>size</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>and<sp/>released<sp/>(deallocated)<sp/>back<sp/>to<sp/>empty<sp/>the<sp/>superblock<sp/>state</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>is<sp/>concurrently<sp/>updated.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>Mapping<sp/>between<sp/>block_size<sp/>&lt;-&gt;<sp/>block_state</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>block_state<sp/>=<sp/>(<sp/>m_sb_size_lg2<sp/>-<sp/>block_size_lg2<sp/>)<sp/>&lt;&lt;<sp/>state_shift</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>block_size<sp/><sp/>=<sp/>m_sb_size_lg2<sp/>-<sp/>(<sp/>block_state<sp/>&gt;&gt;<sp/>state_shift<sp/>)</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>Thus<sp/>A_block_size<sp/>&lt;<sp/>B_block_size<sp/><sp/>&lt;=&gt;<sp/><sp/>A_block_state<sp/>&gt;<sp/>B_block_state</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">base_memory_space<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DeviceType::memory_space;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>accessible<sp/>=<sp/><ref refid="struct_kokkos_1_1_impl_1_1_memory_space_access" kindref="compound">Kokkos::Impl::MemorySpaceAccess</ref>&lt;<ref refid="class_kokkos_1_1_host_space" kindref="compound">Kokkos::HostSpace</ref>,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base_memory_space&gt;::accessible</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="union_kokkos_1_1_impl_1_1_shared_allocation_tracker" kindref="compound">Tracker</ref><sp/>=<sp/><ref refid="union_kokkos_1_1_impl_1_1_shared_allocation_tracker" kindref="compound">Kokkos::Impl::SharedAllocationTracker</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="class_kokkos_1_1_impl_1_1_shared_allocation_record" kindref="compound">Record</ref><sp/><sp/>=<sp/><ref refid="class_kokkos_1_1_impl_1_1_shared_allocation_record" kindref="compound">Kokkos::Impl::SharedAllocationRecord&lt;base_memory_space&gt;</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="union_kokkos_1_1_impl_1_1_shared_allocation_tracker" kindref="compound">Tracker</ref><sp/>m_tracker;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>uint32_t<sp/>*m_sb_state_array;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>uint32_t<sp/>m_sb_state_size;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>uint32_t<sp/>m_sb_size_lg2;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>uint32_t<sp/>m_max_block_size_lg2;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>uint32_t<sp/>m_min_block_size_lg2;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>int32_t<sp/>m_sb_count;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>int32_t<sp/>m_hint_offset;<sp/><sp/></highlight><highlight class="comment">//<sp/>Offset<sp/>to<sp/>K<sp/>*<sp/>#block_size<sp/>array<sp/>of<sp/>hints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>int32_t<sp/>m_data_offset;<sp/><sp/></highlight><highlight class="comment">//<sp/>Offset<sp/>to<sp/>0th<sp/>superblock<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>int32_t<sp/>m_unused_padding;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">memory_space<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DeviceType::memory_space;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>enum<sp/>:<sp/>uint32_t<sp/>{<sp/>max_superblock_size<sp/>=<sp/>1LU<sp/>&lt;&lt;<sp/>31<sp/></highlight><highlight class="comment">/*<sp/>2<sp/>gigabytes<sp/>*/</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>enum<sp/>:<sp/>uint32_t<sp/>{<sp/>max_block_per_superblock<sp/>=<sp/>max_bit_count<sp/>};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>KOKKOS_INLINE_FUNCTION</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(<ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_sb_state_array<sp/>==<sp/>other.m_sb_state_array;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>KOKKOS_INLINE_FUNCTION</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_t(m_sb_count)<sp/>&lt;&lt;<sp/>m_sb_size_lg2;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>KOKKOS_INLINE_FUNCTION</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_block_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1LU<sp/>&lt;&lt;<sp/>m_min_block_size_lg2);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>KOKKOS_INLINE_FUNCTION</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_block_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1LU<sp/>&lt;&lt;<sp/>m_max_block_size_lg2);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics" kindref="compound">usage_statistics</ref><sp/>{</highlight></codeline>
<codeline lineno="172" refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1ab7af5958abf4898db27405e6cf1973b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1ab7af5958abf4898db27405e6cf1973b0" kindref="member">capacity_bytes</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173" refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1af42f904be7bddcc9cf7230f5debdcfed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1af42f904be7bddcc9cf7230f5debdcfed" kindref="member">superblock_bytes</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174" refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1ae51f7e0110b5d64660a38eec9646a2f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1ae51f7e0110b5d64660a38eec9646a2f5" kindref="member">max_block_bytes</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="175" refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1a41db60d8c29b10a11527057bd2e14c1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1a41db60d8c29b10a11527057bd2e14c1e" kindref="member">min_block_bytes</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="176" refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1aadf85b87d816d18634f14ee516b89d6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1aadf85b87d816d18634f14ee516b89d6c" kindref="member">capacity_superblocks</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="177" refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1af2ef391e45ce6d66f9c470312d890f89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1af2ef391e45ce6d66f9c470312d890f89" kindref="member">consumed_superblocks</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="178" refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1a740f8efc581f9d09aedec56f6ff1a8b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1a740f8efc581f9d09aedec56f6ff1a8b5" kindref="member">consumed_blocks</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="179" refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1a60078c9eb38b9e34ba2c5aacec2fa136" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1a60078c9eb38b9e34ba2c5aacec2fa136" kindref="member">consumed_bytes</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="180" refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1aa1e5768685b0a146539d4a12a1ba0b31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1aa1e5768685b0a146539d4a12a1ba0b31" kindref="member">reserved_blocks</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="181" refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1aec9316446371ab4d7988acbf282a9fd6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1aec9316446371ab4d7988acbf282a9fd6" kindref="member">reserved_bytes</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>get_usage_statistics(<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics" kindref="compound">usage_statistics</ref><sp/>&amp;stats)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_kokkos_1_1_host_space" kindref="compound">Kokkos::HostSpace</ref><sp/>host;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alloc_size<sp/>=<sp/>m_hint_offset<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sb_state_array<sp/>=</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accessible<sp/>?<sp/>m_sb_state_array<sp/>:<sp/>(uint32_t<sp/>*)host.allocate(alloc_size);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!accessible)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_kokkos_1_1_impl_1_1_deep_copy" kindref="compound">Kokkos::Impl::DeepCopy&lt;Kokkos::HostSpace, base_memory_space&gt;</ref>(</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_array,<sp/>m_sb_state_array,<sp/>alloc_size);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1af42f904be7bddcc9cf7230f5debdcfed" kindref="member">superblock_bytes</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>(1LU<sp/>&lt;&lt;<sp/>m_sb_size_lg2);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1ae51f7e0110b5d64660a38eec9646a2f5" kindref="member">max_block_bytes</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1LU<sp/>&lt;&lt;<sp/>m_max_block_size_lg2);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1a41db60d8c29b10a11527057bd2e14c1e" kindref="member">min_block_bytes</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1LU<sp/>&lt;&lt;<sp/>m_min_block_size_lg2);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1ab7af5958abf4898db27405e6cf1973b0" kindref="member">capacity_bytes</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1af42f904be7bddcc9cf7230f5debdcfed" kindref="member">superblock_bytes</ref><sp/>*<sp/>m_sb_count;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1aadf85b87d816d18634f14ee516b89d6c" kindref="member">capacity_superblocks</ref><sp/>=<sp/>m_sb_count;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1af2ef391e45ce6d66f9c470312d890f89" kindref="member">consumed_superblocks</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1a740f8efc581f9d09aedec56f6ff1a8b5" kindref="member">consumed_blocks</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1a60078c9eb38b9e34ba2c5aacec2fa136" kindref="member">consumed_bytes</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1aa1e5768685b0a146539d4a12a1ba0b31" kindref="member">reserved_blocks</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1aec9316446371ab4d7988acbf282a9fd6" kindref="member">reserved_bytes</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*sb_state_ptr<sp/>=<sp/>sb_state_array;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_sb_count;<sp/>++i,<sp/>sb_state_ptr<sp/>+=<sp/>m_sb_state_size)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_count_lg2<sp/>=<sp/>(*sb_state_ptr)<sp/>&gt;&gt;<sp/>state_shift;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block_count_lg2)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_count<sp/><sp/><sp/><sp/>=<sp/>1u<sp/>&lt;&lt;<sp/>block_count_lg2;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_size_lg2<sp/>=<sp/>m_sb_size_lg2<sp/>-<sp/>block_count_lg2;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_size<sp/><sp/><sp/><sp/><sp/>=<sp/>1u<sp/>&lt;&lt;<sp/>block_size_lg2;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_used<sp/><sp/><sp/><sp/><sp/>=<sp/>(*sb_state_ptr)<sp/>&amp;<sp/>state_used_mask;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1af2ef391e45ce6d66f9c470312d890f89" kindref="member">consumed_superblocks</ref>++;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1a740f8efc581f9d09aedec56f6ff1a8b5" kindref="member">consumed_blocks</ref><sp/>+=<sp/>block_used;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1a60078c9eb38b9e34ba2c5aacec2fa136" kindref="member">consumed_bytes</ref><sp/>+=<sp/>block_used<sp/>*<sp/>block_size;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1aa1e5768685b0a146539d4a12a1ba0b31" kindref="member">reserved_blocks</ref><sp/>+=<sp/>block_count<sp/>-<sp/>block_used;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.<ref refid="struct_kokkos_1_1_memory_pool_1_1usage__statistics_1aec9316446371ab4d7988acbf282a9fd6" kindref="member">reserved_bytes</ref><sp/>+=<sp/>(block_count<sp/>-<sp/>block_used)<sp/>*<sp/>block_size;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!accessible)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host.deallocate(sb_state_array,<sp/>alloc_size);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_state(std::ostream<sp/>&amp;s)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_kokkos_1_1_host_space" kindref="compound">Kokkos::HostSpace</ref><sp/>host;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alloc_size<sp/>=<sp/>m_hint_offset<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sb_state_array<sp/>=</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accessible<sp/>?<sp/>m_sb_state_array<sp/>:<sp/>(uint32_t<sp/>*)host.allocate(alloc_size);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!accessible)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_kokkos_1_1_impl_1_1_deep_copy" kindref="compound">Kokkos::Impl::DeepCopy&lt;Kokkos::HostSpace, base_memory_space&gt;</ref>(</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_array,<sp/>m_sb_state_array,<sp/>alloc_size);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>Impl::_print_memory_pool_state(s,<sp/>sb_state_array,<sp/>m_sb_count,<sp/>m_sb_size_lg2,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_state_size,<sp/>state_shift,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_used_mask);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!accessible)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host.deallocate(sb_state_array,<sp/>alloc_size);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>KOKKOS_DEFAULTED_FUNCTION<sp/><ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref>(<ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref><sp/>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>KOKKOS_DEFAULTED_FUNCTION<sp/><ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>KOKKOS_DEFAULTED_FUNCTION<sp/><ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref><sp/>&amp;operator=(<ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref><sp/>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>KOKKOS_DEFAULTED_FUNCTION<sp/><ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref><sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>KOKKOS_INLINE_FUNCTION<sp/><ref refid="class_kokkos_1_1_memory_pool" kindref="compound">MemoryPool</ref>()</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_tracker(),</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_state_array(nullptr),</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_state_size(0),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_size_lg2(0),</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_max_block_size_lg2(0),</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_min_block_size_lg2(0),</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_count(0),</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_hint_offset(0),</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_data_offset(0),</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_unused_padding(0)<sp/>{}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="class_kokkos_1_1_memory_pool_1a2d441a6c471aee54071b200cc2bce4a2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_kokkos_1_1_memory_pool_1a2d441a6c471aee54071b200cc2bce4a2" kindref="member">MemoryPool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base_memory_space<sp/>&amp;memspace,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_total_alloc_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_block_alloc_size<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_block_alloc_size<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_superblock_size<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_tracker(),</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_state_array(nullptr),</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_state_size(0),</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_size_lg2(0),</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_max_block_size_lg2(0),</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_min_block_size_lg2(0),</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_count(0),</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_hint_offset(0),</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_data_offset(0),</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_unused_padding(0)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>int_align_lg2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>3;<sp/></highlight><highlight class="comment">/*<sp/>align<sp/>as<sp/>int[8]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>int_align_mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1u<sp/>&lt;&lt;<sp/>int_align_lg2)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>default_min_block_size<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1u<sp/>&lt;&lt;<sp/>6;<sp/><sp/></highlight><highlight class="comment">/*<sp/>64<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>default_max_block_size<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1u<sp/>&lt;&lt;<sp/>12;<sp/></highlight><highlight class="comment">/*<sp/>4k<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>default_min_superblock_size<sp/>=<sp/>1u<sp/>&lt;&lt;<sp/>20;<sp/></highlight><highlight class="comment">/*<sp/>1M<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>block<sp/>and<sp/>superblock<sp/>sizes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>min_block_alloc_size)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>all<sp/>sizes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_superblock_size<sp/>=</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::min(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(default_min_superblock_size),<sp/>min_total_alloc_size);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_block_alloc_size<sp/>=</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::min(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(default_min_block_size),<sp/>min_superblock_size);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_block_alloc_size<sp/>=</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::min(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(default_max_block_size),<sp/>min_superblock_size);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>min_superblock_size)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Choose<sp/>superblock<sp/>size<sp/>as<sp/>minimum<sp/>of:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>max_block_per_superblock<sp/>*<sp/>min_block_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>max_superblock_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>min_total_alloc_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_superblock<sp/>=</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_block_alloc_size<sp/>*<sp/>max_block_per_superblock;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_superblock_size<sp/>=</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::min(max_superblock,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::min(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(max_superblock_size),<sp/>min_total_alloc_size));</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>max_block_alloc_size)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_block_alloc_size<sp/>=<sp/>min_superblock_size;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enforce<sp/>size<sp/>constraints:</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>min_block_alloc_size<sp/>&lt;=<sp/>max_block_alloc_size</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>max_block_alloc_size<sp/>&lt;=<sp/>min_superblock_size</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>min_superblock_size<sp/><sp/>&lt;=<sp/>max_superblock_size</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>min_superblock_size<sp/><sp/>&lt;=<sp/>min_total_alloc_size</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>min_superblock_size<sp/><sp/>&lt;=<sp/>min_block_alloc_size<sp/>*</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_block_per_superblock</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>Kokkos::Impl::memory_pool_bounds_verification(</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_block_alloc_size,<sp/>max_block_alloc_size,<sp/>min_superblock_size,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_superblock_size,<sp/>max_block_per_superblock,<sp/>min_total_alloc_size);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>and<sp/>superblock<sp/>size<sp/>is<sp/>power<sp/>of<sp/>two:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>value<sp/>is<sp/>&apos;max_superblock_size&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>m_min_block_size_lg2<sp/>=</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Impl::integral_power_of_two_that_contains(min_block_alloc_size);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>m_max_block_size_lg2<sp/>=</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Impl::integral_power_of_two_that_contains(max_block_alloc_size);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>m_sb_size_lg2<sp/>=</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Impl::integral_power_of_two_that_contains(min_superblock_size);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>superblocks<sp/>is<sp/>multiple<sp/>of<sp/>superblock<sp/>size<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>hold<sp/>min_total_alloc_size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>sb_size_mask<sp/>=<sp/>(1LU<sp/>&lt;&lt;<sp/>m_sb_size_lg2)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_count<sp/>=<sp/>(min_total_alloc_size<sp/>+<sp/>sb_size_mask)<sp/>&gt;&gt;<sp/>m_sb_size_lg2;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>superblock<sp/>can<sp/>be<sp/>assigned<sp/>to<sp/>the<sp/>smallest<sp/>size<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Size<sp/>the<sp/>block<sp/>bitset<sp/>to<sp/>maximum<sp/>number<sp/>of<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>max_block_count_lg2<sp/>=<sp/>m_sb_size_lg2<sp/>-<sp/>m_min_block_size_lg2;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_state_size<sp/>=</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CB::buffer_bound_lg2(max_block_count_lg2)<sp/>+<sp/>int_align_mask)<sp/>&amp;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~int_align_mask;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>all<sp/>superblock<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>all_sb_state_size<sp/>=</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_sb_count<sp/>*<sp/>m_sb_state_size<sp/>+<sp/>int_align_mask)<sp/>&amp;<sp/>~int_align_mask;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>block<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>number_block_sizes<sp/>=</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>+<sp/>m_max_block_size_lg2<sp/>-<sp/>m_min_block_size_lg2;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>length<sp/>for<sp/>possible<sp/>block<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hint<sp/>array<sp/>is<sp/>one<sp/>uint32_t<sp/>per<sp/>block<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>block_size_array_size<sp/>=</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(number_block_sizes<sp/>+<sp/>int_align_mask)<sp/>&amp;<sp/>~int_align_mask;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>m_hint_offset<sp/>=<sp/>all_sb_state_size;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>m_data_offset<sp/>=<sp/>m_hint_offset<sp/>+<sp/>block_size_array_size<sp/>*<sp/>HINT_PER_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>header_size<sp/>=<sp/>m_data_offset<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alloc_size<sp/>=</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header_size<sp/>+<sp/>(size_t(m_sb_count)<sp/>&lt;&lt;<sp/>m_sb_size_lg2);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_kokkos_1_1_impl_1_1_shared_allocation_record" kindref="compound">Record</ref><sp/>*rec<sp/>=<sp/>Record::allocate(memspace,<sp/></highlight><highlight class="stringliteral">&quot;Kokkos::MemoryPool&quot;</highlight><highlight class="normal">,<sp/>alloc_size);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tracker.<ref refid="union_kokkos_1_1_impl_1_1_shared_allocation_tracker_1ae2ff378cc8452048184619e981dd662a" kindref="member">assign_allocated_record_to_uninitialized</ref>(rec);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>m_sb_state_array<sp/>=<sp/>(uint32_t<sp/>*)rec-&gt;data();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_kokkos_1_1_host_space" kindref="compound">Kokkos::HostSpace</ref><sp/>host;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sb_state_array<sp/>=</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accessible<sp/>?<sp/>m_sb_state_array<sp/>:<sp/>(uint32_t<sp/>*)host.allocate(header_size);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_data_offset;<sp/>++i)<sp/>sb_state_array[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initial<sp/>assignment<sp/>of<sp/>empty<sp/>superblocks<sp/>to<sp/>block<sp/>sizes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_block_sizes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_size_lg2<sp/><sp/>=<sp/>i<sp/>+<sp/>m_min_block_size_lg2;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_count_lg2<sp/>=<sp/>m_sb_size_lg2<sp/>-<sp/>block_size_lg2;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_state<sp/><sp/><sp/><sp/><sp/>=<sp/>block_count_lg2<sp/>&lt;&lt;<sp/>state_shift;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>hint_begin<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_hint_offset<sp/>+<sp/>i<sp/>*<sp/>HINT_PER_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>block<sp/>size<sp/>index<sp/>&apos;i&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>sb_id_hint<sp/><sp/>=<sp/>sb_state_array[<sp/>hint_begin<sp/>];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>sb_id_begin<sp/>=<sp/>sb_state_array[<sp/>hint_begin<sp/>+<sp/>1<sp/>];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>jbeg<sp/>=<sp/>(i<sp/>*<sp/>m_sb_count)<sp/>/<sp/>number_block_sizes;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>jend<sp/>=<sp/>((i<sp/>+<sp/>1)<sp/>*<sp/>m_sb_count)<sp/>/<sp/>number_block_sizes;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_array[hint_begin]<sp/><sp/><sp/><sp/><sp/>=<sp/>uint32_t(jbeg);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_array[hint_begin<sp/>+<sp/>1]<sp/>=<sp/>uint32_t(jbeg);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>j<sp/>=<sp/>jbeg;<sp/>j<sp/>&lt;<sp/>jend;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_array[j<sp/>*<sp/>m_sb_state_size]<sp/>=<sp/>block_state;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>out<sp/>initialized<sp/>state:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!accessible)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_kokkos_1_1_impl_1_1_deep_copy" kindref="compound">Kokkos::Impl::DeepCopy&lt;base_memory_space, Kokkos::HostSpace&gt;</ref>(</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_state_array,<sp/>sb_state_array,<sp/>header_size);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host.deallocate(sb_state_array,<sp/>header_size);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::memory_fence();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Given<sp/>a<sp/>size<sp/>&apos;n&apos;<sp/>get<sp/>the<sp/>block<sp/>size<sp/>in<sp/>which<sp/>it<sp/>can<sp/>be<sp/>allocated.</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Restrict<sp/>lower<sp/>bound<sp/>to<sp/>minimum<sp/>block<sp/>size.</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>KOKKOS_FORCEINLINE_FUNCTION</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>uint32_t<sp/>get_block_size_lg2(uint32_t<sp/>n)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>Kokkos::Impl::integral_power_of_two_that_contains(n);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>&lt;<sp/>m_min_block_size_lg2<sp/>?<sp/>m_min_block_size_lg2<sp/>:<sp/>i;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>0<sp/>for<sp/>invalid<sp/>block<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>KOKKOS_INLINE_FUNCTION</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>uint32_t<sp/>allocate_block_size(uint64_t<sp/>alloc_size)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alloc_size<sp/>&lt;=<sp/>(1UL<sp/>&lt;&lt;<sp/>m_max_block_size_lg2)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(1UL<sp/>&lt;&lt;<sp/>get_block_size_lg2(uint32_t(alloc_size)))</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="491"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION</highlight></codeline>
<codeline lineno="492" refid="class_kokkos_1_1_memory_pool_1af2e8d0ed9ba38afdf714acb9f87652ab" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="class_kokkos_1_1_memory_pool_1af2e8d0ed9ba38afdf714acb9f87652ab" kindref="member">allocate</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alloc_size,<sp/>int32_t<sp/>attempt_limit<sp/>=<sp/>1)<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(1LU<sp/>&lt;&lt;<sp/>m_max_block_size_lg2)<sp/>&lt;<sp/>alloc_size)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::abort(</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Kokkos<sp/>MemoryPool<sp/>allocation<sp/>request<sp/>exceeded<sp/>specified<sp/>maximum<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;allocation<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>alloc_size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_size_lg2<sp/>=<sp/>get_block_size_lg2(alloc_size);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>will<sp/>fit<sp/>within<sp/>a<sp/>superblock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>has<sp/>block<sp/>sizes<sp/>(<sp/>1<sp/>&lt;&lt;<sp/>block_size_lg2<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_count_lg2<sp/>=<sp/>m_sb_size_lg2<sp/>-<sp/>block_size_lg2;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_state<sp/><sp/><sp/><sp/><sp/>=<sp/>block_count_lg2<sp/>&lt;&lt;<sp/>state_shift;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_count<sp/><sp/><sp/><sp/><sp/>=<sp/>1u<sp/>&lt;&lt;<sp/>block_count_lg2;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Superblock<sp/>hints<sp/>for<sp/>this<sp/>block<sp/>size:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>hint_sb_id_ptr[0]<sp/>is<sp/>the<sp/>dynamically<sp/>changing<sp/>hint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>hint_sb_id_ptr[1]<sp/>is<sp/>the<sp/>static<sp/>start<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hint_sb_id_ptr<sp/>=</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_state_array<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>memory<sp/>pool<sp/>state<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>m_hint_offset<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>offset<sp/>to<sp/>hint<sp/>portion<sp/>of<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>HINT_PER_BLOCK_SIZE<sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>hints<sp/>per<sp/>block<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(block_size_lg2<sp/>-<sp/>m_min_block_size_lg2);<sp/></highlight><highlight class="comment">/*<sp/>block<sp/>size<sp/>id<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>sb_id_begin<sp/>=<sp/>int32_t(hint_sb_id_ptr[1]);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fast<sp/>query<sp/>clock<sp/>register<sp/>&apos;tic&apos;<sp/>to<sp/>pseudo-randomize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>guess<sp/>for<sp/>which<sp/>block<sp/>within<sp/>a<sp/>superblock<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>claimed.<sp/><sp/>If<sp/>not<sp/>available<sp/>then<sp/>a<sp/>search<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(KOKKOS_ENABLE_SYCL)<sp/>&amp;&amp;<sp/>!defined(KOKKOS_ARCH_INTEL_GPU)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_id_hint<sp/>=<sp/>alloc_size;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_id_hint<sp/>=</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)(Kokkos::Impl::clock_tic()</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_CUDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Spread<sp/>out<sp/>potentially<sp/>concurrent<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>threads<sp/>within<sp/>a<sp/>warp<sp/>or<sp/>thread<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(threadIdx.x<sp/>+<sp/>blockDim.x<sp/>*<sp/>threadIdx.y)</highlight></codeline>
<codeline lineno="536"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expected<sp/>state<sp/>of<sp/>superblock<sp/>for<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>sb_state<sp/>=<sp/>block_state;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>sb_id<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*sb_state_array<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(attempt_limit)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>hint_sb_id<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb_id<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>superblock<sp/>specified,<sp/>try<sp/>the<sp/>hint<sp/>for<sp/>this<sp/>block<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_id<sp/>=<sp/>hint_sb_id<sp/>=<sp/>int32_t(*hint_sb_id_ptr);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_array<sp/>=<sp/>m_sb_state_array<sp/>+<sp/>(sb_id<sp/>*<sp/>m_sb_state_size);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Require:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>0<sp/>&lt;=<sp/>sb_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>sb_state_array<sp/>==<sp/>m_sb_state_array<sp/>+<sp/>m_sb_state_size<sp/>*<sp/>sb_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb_state<sp/>==<sp/>(state_header_mask<sp/>&amp;<sp/>*sb_state_array))<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>superblock<sp/>state<sp/>is<sp/>as<sp/>expected,<sp/>for<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempt<sp/>to<sp/>claim<sp/>a<sp/>bit.<sp/><sp/>The<sp/>attempt<sp/>updates<sp/>the<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>have<sp/>already<sp/>made<sp/>sure<sp/>the<sp/>state<sp/>header<sp/>is<sp/>as<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>count_lg2<sp/>=<sp/>sb_state<sp/>&gt;&gt;<sp/>state_shift;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>mask<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1u<sp/>&lt;&lt;<sp/>count_lg2)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_kokkos_1_1pair" kindref="compound">Kokkos::pair&lt;int, int&gt;</ref><sp/>result<sp/>=<sp/><ref refid="struct_kokkos_1_1_impl_1_1concurrent__bitset_1acd6a838453795687e7792eab52159907" kindref="member">CB::acquire_bounded_lg2</ref>(</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_array,<sp/>count_lg2,<sp/>block_id_hint<sp/>&amp;<sp/>mask,<sp/>sb_state);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>result.first<sp/>&lt;<sp/>0<sp/>then<sp/>failed<sp/>to<sp/>acquire</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>due<sp/>to<sp/>either<sp/>full<sp/>or<sp/>buffer<sp/>was<sp/>wrong<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Could<sp/>be<sp/>wrong<sp/>state<sp/>if<sp/>a<sp/>deallocation<sp/>raced<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>superblock<sp/>to<sp/>empty<sp/>before<sp/>the<sp/>acquire<sp/>could<sp/>succeed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>&lt;=<sp/>result.<ref refid="struct_kokkos_1_1pair_1a0e373ffe96458360bf3703301efeb140" kindref="member">first</ref>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>acquired<sp/>a<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>size_lg2<sp/>=<sp/>m_sb_size_lg2<sp/>-<sp/>count_lg2;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>allocated<sp/>block<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(m_sb_state_array<sp/>+<sp/>m_data_offset))<sp/>+</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint64_t(sb_id)<sp/>&lt;&lt;<sp/>m_sb_size_lg2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>superblock<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(uint64_t(result.<ref refid="struct_kokkos_1_1pair_1a0e373ffe96458360bf3703301efeb140" kindref="member">first</ref>)<sp/>&lt;&lt;<sp/>size_lg2);<sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Arrive<sp/>here<sp/>if<sp/>failed<sp/>to<sp/>acquire<sp/>a<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Must<sp/>find<sp/>a<sp/>new<sp/>superblock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Start<sp/>searching<sp/>at<sp/>designated<sp/>index<sp/>for<sp/>this<sp/>block<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Look<sp/>for<sp/>superblock<sp/>that,<sp/>in<sp/>preferential<sp/>order,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>1)<sp/>part-full<sp/>superblock<sp/>of<sp/>this<sp/>block<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>2)<sp/>empty<sp/>superblock<sp/>to<sp/>claim<sp/>for<sp/>this<sp/>block<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>3)<sp/>part-full<sp/>superblock<sp/>of<sp/>the<sp/>next<sp/>larger<sp/>block<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_state<sp/>=<sp/>block_state;<sp/><sp/></highlight><highlight class="comment">//<sp/>Expect<sp/>to<sp/>find<sp/>the<sp/>desired<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_id<sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>update_hint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>sb_id_empty<sp/><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>sb_id_large<sp/><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sb_state_large<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_array<sp/>=<sp/>m_sb_state_array<sp/>+<sp/>sb_id_begin<sp/>*<sp/>m_sb_state_size;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>sb_id_begin;<sp/>i<sp/>&lt;<sp/>m_sb_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Query<sp/>state<sp/>of<sp/>the<sp/>candidate<sp/>superblock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Note<sp/>that<sp/>the<sp/>state<sp/>may<sp/>change<sp/>at<sp/>any<sp/>moment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>as<sp/>concurrent<sp/>allocations<sp/>and<sp/>deallocations<sp/>occur.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>full_state<sp/>=<sp/>*sb_state_array;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>used<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>full_state<sp/>&amp;<sp/>state_used_mask;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>state<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>full_state<sp/>&amp;<sp/>state_header_mask;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>block_state)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Superblock<sp/>is<sp/>assigned<sp/>to<sp/>this<sp/>block<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(used<sp/>&lt;<sp/>block_count)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>room<sp/>to<sp/>allocate<sp/>one<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_id<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>there<sp/>room<sp/>to<sp/>allocate<sp/>more<sp/>than<sp/>one<sp/>block?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_hint<sp/>=<sp/>used<sp/>+<sp/>1<sp/>&lt;<sp/>block_count;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>used)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Superblock<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(-1<sp/>==<sp/>sb_id_empty)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Superblock<sp/>is<sp/>not<sp/>assigned<sp/>to<sp/>this<sp/>block<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>is<sp/>the<sp/>first<sp/>empty<sp/>superblock<sp/>encountered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>this<sp/>id<sp/>to<sp/>use<sp/>if<sp/>a<sp/>partfull<sp/>superblock<sp/>is<sp/>not<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_id_empty<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((-1<sp/>==<sp/>sb_id_empty<sp/></highlight><highlight class="comment">/*<sp/>have<sp/>not<sp/>found<sp/>an<sp/>empty<sp/>*/</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1<sp/>==<sp/>sb_id_large<sp/></highlight><highlight class="comment">/*<sp/>have<sp/>not<sp/>found<sp/>a<sp/>larger<sp/>*/</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>&lt;<sp/>block_state<sp/></highlight><highlight class="comment">/*<sp/>a<sp/>larger<sp/>block<sp/>*/</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>full:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(used<sp/>&lt;<sp/>(1u<sp/>&lt;&lt;<sp/>(state<sp/>&gt;&gt;<sp/>state_shift))))<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>First<sp/>superblock<sp/>encountered<sp/>that<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>larger<sp/>than<sp/>this<sp/>block<sp/>size<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>has<sp/>room<sp/>for<sp/>an<sp/>allocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Save<sp/>this<sp/>id<sp/>to<sp/>use<sp/>of<sp/>partfull<sp/>or<sp/>empty<sp/>superblock<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_id_large<sp/><sp/><sp/><sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_large<sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>around<sp/>the<sp/>superblock<sp/>array:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>m_sb_count)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_array<sp/>+=<sp/>m_sb_state_size;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_array<sp/>=<sp/>m_sb_state_array;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;<sp/><sp/>search<sp/>m_sb_count(%d)<sp/>sb_id(%d)<sp/>sb_id_empty(%d)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sb_id_large(%d)\n&quot;<sp/>,<sp/>m_sb_count<sp/>,<sp/>sb_id<sp/>,<sp/>sb_id_empty<sp/>,<sp/>sb_id_large);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb_id<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Did<sp/>not<sp/>find<sp/>a<sp/>partfull<sp/>superblock<sp/>for<sp/>this<sp/>block<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>&lt;=<sp/>sb_id_empty)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Found<sp/>first<sp/>empty<sp/>superblock<sp/>following<sp/>designated<sp/>superblock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Attempt<sp/>to<sp/>claim<sp/>it<sp/>for<sp/>this<sp/>block<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>If<sp/>the<sp/>claim<sp/>fails<sp/>assume<sp/>that<sp/>another<sp/>thread<sp/>claimed<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for<sp/>this<sp/>block<sp/>size<sp/>and<sp/>try<sp/>to<sp/>use<sp/>it<sp/>anyway,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>but<sp/>do<sp/>not<sp/>update<sp/>hint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_id<sp/>=<sp/>sb_id_empty;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_array<sp/>=<sp/>m_sb_state_array<sp/>+<sp/>(sb_id<sp/>*<sp/>m_sb_state_size);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>If<sp/>successfully<sp/>changed<sp/>assignment<sp/>of<sp/>empty<sp/>superblock<sp/>&apos;sb_id&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>to<sp/>this<sp/>block_size<sp/>then<sp/>update<sp/>the<sp/>hint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>state_empty<sp/>=<sp/>state_header_mask<sp/>&amp;<sp/>*sb_state_array;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>thread<sp/>claims<sp/>the<sp/>empty<sp/>block<sp/>then<sp/>update<sp/>the<sp/>hint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_hint<sp/>=</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_empty<sp/>==<sp/>Kokkos::atomic_compare_exchange(</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_array,<sp/>state_empty,<sp/>block_state);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>&lt;=<sp/>sb_id_large)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>a<sp/>larger<sp/>superblock<sp/>with<sp/>space<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_id<sp/><sp/><sp/><sp/>=<sp/>sb_id_large;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_state<sp/>=<sp/>sb_state_large;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_state_array<sp/>=<sp/>m_sb_state_array<sp/>+<sp/>(sb_id<sp/>*<sp/>m_sb_state_size);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Did<sp/>not<sp/>find<sp/>a<sp/>potentially<sp/>usable<sp/>superblock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--attempt_limit;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(update_hint)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::atomic_compare_exchange(hint_sb_id_ptr,<sp/>uint32_t(hint_sb_id),</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t(sb_id));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>allocation<sp/>attempt<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>allocate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>KOKKOS_INLINE_FUNCTION</highlight></codeline>
<codeline lineno="725" refid="class_kokkos_1_1_memory_pool_1a7b23620698fdea955ccc296d23061937" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_kokkos_1_1_memory_pool_1a7b23620698fdea955ccc296d23061937" kindref="member">deallocate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>alloc_size<sp/>*/</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>==<sp/>p)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>which<sp/>superblock<sp/>and<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ptrdiff_t<sp/>d<sp/>=</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p)<sp/>-</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_sb_state_array<sp/>+<sp/>m_data_offset);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>contained<sp/>within<sp/>the<sp/>memory<sp/>pool&apos;s<sp/>superblocks:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ok_contains<sp/>=</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0<sp/>&lt;=<sp/>d)<sp/>&amp;&amp;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(d)<sp/>&lt;<sp/>(size_t(m_sb_count)<sp/>&lt;&lt;<sp/>m_sb_size_lg2));</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ok_block_aligned<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ok_dealloc_once<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok_contains)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb_id<sp/>=<sp/>d<sp/>&gt;&gt;<sp/>m_sb_size_lg2;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>State<sp/>array<sp/>for<sp/>the<sp/>superblock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sb_state_array<sp/>=</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_state_array<sp/>+<sp/>(sb_id<sp/>*<sp/>m_sb_state_size);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_state<sp/>=<sp/>(*sb_state_array)<sp/>&amp;<sp/>state_header_mask;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_size_lg2<sp/>=</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sb_size_lg2<sp/>-<sp/>(block_state<sp/>&gt;&gt;<sp/>state_shift);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok_block_aligned<sp/>=<sp/>0<sp/>==<sp/>(d<sp/>&amp;<sp/>((1UL<sp/>&lt;&lt;<sp/>block_size_lg2)<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok_block_aligned)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>address<sp/>to<sp/>block&apos;s<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mask<sp/>into<sp/>superblock<sp/>and<sp/>then<sp/>shift<sp/>down<sp/>for<sp/>block<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bit<sp/>=</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(d<sp/>&amp;<sp/>(ptrdiff_t(1LU<sp/>&lt;&lt;<sp/>m_sb_size_lg2)<sp/>-<sp/>1))<sp/>&gt;&gt;<sp/>block_size_lg2;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="struct_kokkos_1_1_impl_1_1concurrent__bitset_1adc82a753ca9f1533e643cc9b35dd83d4" kindref="member">CB::release</ref>(sb_state_array,<sp/>bit,<sp/>block_state);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok_dealloc_once<sp/>=<sp/>0<sp/>&lt;=<sp/>result;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok_contains<sp/>||<sp/>!ok_block_aligned<sp/>||<sp/>!ok_dealloc_once)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::abort(</highlight><highlight class="stringliteral">&quot;Kokkos<sp/>MemoryPool::deallocate<sp/>given<sp/>erroneous<sp/>pointer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>deallocate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>KOKKOS_INLINE_FUNCTION</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_superblocks()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_sb_count;<sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>KOKKOS_INLINE_FUNCTION</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>superblock_state(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;block_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;block_count_capacity,</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;block_count_used)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>block_size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>block_count_capacity<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>block_count_used<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_kokkos_1_1_impl_1_1_memory_space_access" kindref="compound">Kokkos::Impl::MemorySpaceAccess</ref>&lt;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Impl::ActiveExecutionMemorySpace,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base_memory_space&gt;::accessible)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>access<sp/>the<sp/>state<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>state<sp/>=</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*)m_sb_state_array)[sb_id<sp/>*<sp/>m_sb_state_size];</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_count_lg2<sp/>=<sp/>state<sp/>&gt;&gt;<sp/>state_shift;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>block_used<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>state<sp/>&amp;<sp/>state_used_mask;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>block_size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1LU<sp/>&lt;&lt;<sp/>(m_sb_size_lg2<sp/>-<sp/>block_count_lg2);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>block_count_capacity<sp/>=<sp/>1LU<sp/>&lt;&lt;<sp/>block_count_lg2;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>block_count_used<sp/><sp/><sp/><sp/><sp/>=<sp/>block_used;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal">};</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Kokkos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifndef<sp/>KOKKOS_MEMORYPOOL_HPP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryPool.hpp"/>
  </compounddef>
</doxygen>
