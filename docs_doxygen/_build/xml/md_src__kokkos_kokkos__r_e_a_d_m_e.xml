<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="md_src__kokkos_kokkos__r_e_a_d_m_e" kind="page">
    <compoundname>md_src_Kokkos_kokkos_README</compoundname>
    <title>README</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><image type="html" name="https://avatars2.githubusercontent.com/u/10199860?s=200&amp;v=4" alt="Kokkos" inline="yes"></image>
</para>
<sect1 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md106">
<title>Kokkos: Core Libraries</title>
<para>Kokkos Core implements a programming model in C++ for writing performance portable applications targeting all major HPC platforms. For that purpose it provides abstractions for both parallel execution of code and data management. Kokkos is designed to target complex node architectures with N-level memory hierarchies and multiple types of execution resources. It currently can use CUDA, HIP, SYCL, HPX, OpenMP and C++ threads as backend programming models with several other backends in development.</para>
<para>Kokkos Core is part of the Kokkos C++ Performance Portability Programming EcoSystem, which also provides math kernels (<ulink url="https://github.com/kokkos/kokkos-kernels">https://github.com/kokkos/kokkos-kernels</ulink>), as well as profiling and debugging tools (<ulink url="https://github.com/kokkos/kokkos-tools">https://github.com/kokkos/kokkos-tools</ulink>).</para>
</sect1>
<sect1 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md107">
<title>Learning about Kokkos</title>
<para>The best way to start learning about Kokkos is going through the Kokkos Lectures. They are online available at <ulink url="https://kokkos.link/the-lectures">https://kokkos.link/the-lectures</ulink> and contain a mix of lecture videos and hands-on exercises covering all the important Kokkos Ecosystem capabilities.</para>
<para>A programming guide and API reference can be found on the Wiki (<ulink url="https://github.com/kokkos/kokkos/wiki">https://github.com/kokkos/kokkos/wiki</ulink>).</para>
<para>For questions find us on Slack: <ulink url="https://kokkosteam.slack.com">https://kokkosteam.slack.com</ulink> or open a github issue.</para>
<para>For non-public questions send an email to crtrott(at)sandia.gov</para>
</sect1>
<sect1 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md108">
<title>Contributing to Kokkos</title>
<para>We are open and try to encourage contributions from external developers. To do so please first open an issue describing the contribution and then issue a pull request against the develop branch. For larger features it may be good to get guidance from the core development team first through the github issue.</para>
<para>Note that Kokkos Core is licensed under standard 3-clause BSD terms of use. Which means contributing to Kokkos allows anyone else to use your contributions not just for public purposes but also for closed source commercial projects. For specifics see the LICENSE file contained in the repository or distribution.</para>
</sect1>
<sect1 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md109">
<title>Requirements</title>
<sect3 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md110">
<title>Minimum Compiler Versions</title>
<para>Generally Kokkos should work with all compiler versions newer than the minimum. However as in all sufficiently complex enough code, we have to work around compiler bugs with almost all compilers. So compiler versions we don&apos;t test may have issues we are unaware off.</para>
<para><itemizedlist>
<listitem><para>GCC: 5.3.0</para>
</listitem><listitem><para>Clang: 4.0.0</para>
</listitem><listitem><para>Intel: 17.0.1</para>
</listitem><listitem><para>NVCC: 9.2.88</para>
</listitem><listitem><para>NVC++: 21.5</para>
</listitem><listitem><para>ROCM: 4.3</para>
</listitem><listitem><para>MSVC: 19.29</para>
</listitem><listitem><para>IBM XL: 16.1.1</para>
</listitem><listitem><para>Fujitsu: 4.5.0</para>
</listitem><listitem><para>ARM/Clang 20.1</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md111">
<title>Primary Tested Compilers</title>
<para><itemizedlist>
<listitem><para>GCC: 5.3.0, 6.1.0, 7.3.0, 8.3, 9.2, 10.0</para>
</listitem><listitem><para>NVCC: 9.2.88, 10.1, 11.0</para>
</listitem><listitem><para>Clang: 8.0.0, 9.0.0, 10.0.0, 12.0.0</para>
</listitem><listitem><para>Intel 17.4, 18.1, 19.5</para>
</listitem><listitem><para>MSVC: 19.29</para>
</listitem><listitem><para>ARM/Clang: 20.1</para>
</listitem><listitem><para>IBM XL: 16.1.1</para>
</listitem><listitem><para>ROCM: 4.3.0</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md112">
<title>Build system:</title>
<para><itemizedlist>
<listitem><para>CMake &gt;= 3.16: required</para>
</listitem><listitem><para>CMake &gt;= 3.18: Fortran linkage. This does not affect most mixed Fortran/Kokkos builds. See <ulink url="BUILD.md#KnownIssues">build issues</ulink>.</para>
</listitem><listitem><para>CMake &gt;= 3.21.1 for NVC++</para>
</listitem></itemizedlist>
</para>
<para>Primary tested compiler are passing in release mode with warnings as errors. They also are tested with a comprehensive set of backend combinations (i.e. OpenMP, Pthreads, Serial, OpenMP+Serial, ...). We are using the following set of flags:<itemizedlist>
<listitem><para>GCC: <programlisting><codeline><highlight class="normal">-Wall<sp/>-Wunused-parameter<sp/>-Wshadow<sp/>-pedantic</highlight></codeline>
<codeline><highlight class="normal">-Werror<sp/>-Wsign-compare<sp/>-Wtype-limits</highlight></codeline>
<codeline><highlight class="normal">-Wignored-qualifiers<sp/>-Wempty-body</highlight></codeline>
<codeline><highlight class="normal">-Wclobbered<sp/>-Wuninitialized</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Intel: <programlisting><codeline><highlight class="normal">-Wall<sp/>-Wunused-parameter<sp/>-Wshadow<sp/>-pedantic</highlight></codeline>
<codeline><highlight class="normal">-Werror<sp/>-Wsign-compare<sp/>-Wtype-limits</highlight></codeline>
<codeline><highlight class="normal">-Wuninitialized</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Clang: <programlisting><codeline><highlight class="normal">-Wall<sp/>-Wunused-parameter<sp/>-Wshadow<sp/>-pedantic</highlight></codeline>
<codeline><highlight class="normal">-Werror<sp/>-Wsign-compare<sp/>-Wtype-limits</highlight></codeline>
<codeline><highlight class="normal">-Wuninitialized</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>NVCC: <programlisting><codeline><highlight class="normal">-Wall<sp/>-Wunused-parameter<sp/>-Wshadow<sp/>-pedantic</highlight></codeline>
<codeline><highlight class="normal">-Werror<sp/>-Wsign-compare<sp/>-Wtype-limits</highlight></codeline>
<codeline><highlight class="normal">-Wuninitialized</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para>Other compilers are tested occasionally, in particular when pushing from develop to master branch. These are tested less rigorously without <computeroutput>-Werror</computeroutput> and only for a select set of backends.</para>
</sect3>
</sect1>
<sect1 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md113">
<title>Building and Installing Kokkos</title>
<para>Kokkos provide a CMake build system and a raw Makefile build system. The CMake build system is strongly encouraged and will be the most rigorously supported in future releases. Full details are given in the <ref refid="md_src__kokkos_kokkos__b_u_i_l_d" kindref="compound">build instructions</ref>. Basic setups are shown here:</para>
<sect2 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md114">
<title>CMake</title>
<para>The best way to install Kokkos is using the CMake build system. Assuming Kokkos lives in <computeroutput>$srcdir</computeroutput>: <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>$srcdir<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-DCMAKE_CXX_COMPILER=$path_to_compiler<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-DCMAKE_INSTALL_PREFIX=$path_to_install<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-DKokkos_ENABLE_OPENMP=On<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-DKokkos_ARCH_HSW=On<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-DKokkos_HWLOC_DIR=$path_to_hwloc</highlight></codeline>
</programlisting> then simply type <computeroutput>make install</computeroutput>. The Kokkos CMake package will then be installed in <computeroutput>$path_to_install</computeroutput> to be used by downstream packages.</para>
<para>To validate the Kokkos build, configure with <programlisting><codeline><highlight class="normal">-DKokkos_ENABLE_TESTS=On</highlight></codeline>
</programlisting> and run <computeroutput>make test</computeroutput> after completing the build.</para>
<para>For your CMake project using Kokkos, code such as the following:</para>
<para><programlisting filename=".cmake"><codeline><highlight class="normal">find_package(Kokkos)</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">target_link_libraries(myTarget<sp/>Kokkos::kokkos)</highlight></codeline>
</programlisting> should be added to your CMakeLists.txt. Your configure should additionally include <programlisting><codeline><highlight class="normal">-DKokkos_DIR=$path_to_install/cmake/lib/Kokkos</highlight></codeline>
</programlisting> or <programlisting><codeline><highlight class="normal">-DKokkos_ROOT=$path_to_install</highlight></codeline>
</programlisting> for the install location given above.</para>
</sect2>
<sect2 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md115">
<title>Spack</title>
<para>An alternative to manually building with the CMake is to use the Spack package manager. To get started, download the Spack <ulink url="https://github.com/spack/spack">repo</ulink>. <programlisting><codeline><highlight class="normal">A<sp/>basic<sp/>installation<sp/>would<sp/>be<sp/>done<sp/>as:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>spack<sp/>install<sp/>kokkos</highlight></codeline>
</programlisting> Spack allows options and and compilers to be tuned in the install command. <programlisting filename=".bash"><codeline><highlight class="normal">&gt;<sp/>spack<sp/>install<sp/>kokkos@3.0<sp/>%gcc@7.3.0<sp/>+openmp</highlight></codeline>
</programlisting> This example illustrates the three most common parameters to Spack:<itemizedlist>
<listitem><para>Variants: specified with, e.g. <computeroutput>+openmp</computeroutput>, this activates (or deactivates with, e.g. <computeroutput>~openmp</computeroutput>) certain options.</para>
</listitem><listitem><para>Version: immediately following <computeroutput>kokkos</computeroutput> the <computeroutput>@version</computeroutput> can specify a particular Kokkos to build</para>
</listitem><listitem><para>Compiler: a default compiler will be chosen if not specified, but an exact compiler version can be given with the <computeroutput>%</computeroutput>option.</para>
</listitem></itemizedlist>
</para>
<para>For a complete list of Kokkos options, run: <programlisting filename=".bash"><codeline><highlight class="normal">&gt;<sp/>spack<sp/>info<sp/>kokkos</highlight></codeline>
</programlisting> Spack currently installs packages to a location determined by a unique hash. This hash name is not really &quot;human readable&quot;. Generally, Spack usage should never really require you to reference the computer-generated unique install folder. More details are given in the <ref refid="md_src__kokkos_kokkos__b_u_i_l_d" kindref="compound">build instructions</ref>. If you must know, you can locate Spack Kokkos installations with: <programlisting filename=".bash"><codeline><highlight class="normal">&gt;<sp/>spack<sp/>find<sp/>-p<sp/>kokkos<sp/>...</highlight></codeline>
</programlisting> where <computeroutput>...</computeroutput> is the unique spec identifying the particular Kokkos configuration and version. Some more details can found in the Kokkos spack <ref refid="md_src__kokkos_kokkos__spack" kindref="compound">documentation</ref> or the Spack <ulink url="https://spack.readthedocs.io/en/latest">website</ulink>.</para>
</sect2>
<sect2 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md116">
<title>Raw Makefile</title>
<para>Raw Makefiles are only supported via inline builds. See below.</para>
</sect2>
<sect2 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md117">
<title>Inline Builds vs. Installed Package</title>
<para>For individual projects, it may be preferable to build Kokkos inline rather than link to an installed package. The main reason is that you may otherwise need many different configurations of Kokkos installed depending on the required compile time features an application needs. For example there is only one default execution space, which means you need different installations to have OpenMP or Pthreads as the default space. Also for the CUDA backend there are certain choices, such as allowing relocatable device code, which must be made at installation time. Building Kokkos inline uses largely the same process as compiling an application against an installed Kokkos library.</para>
<para>For CMake, this means copying over the Kokkos source code into your project and adding <computeroutput>add_subdirectory(kokkos)</computeroutput> to your CMakeLists.txt.</para>
<para>For raw Makefiles, see the example benchmarks/bytes_and_flops/Makefile which can be used with an installed library and or an inline build.</para>
</sect2>
</sect1>
<sect1 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md118">
<title>Kokkos and CUDA UVM</title>
<para>Kokkos does support UVM as a specific memory space called CudaUVMSpace. Allocations made with that space are accessible from host and device. You can tell Kokkos to use that as the default space for Cuda allocations. In either case UVM comes with a number of restrictions:<itemizedlist>
<listitem><para>You can&apos;t access allocations on the host while a kernel is potentially running. This will lead to segfaults. To avoid that you either need to call Kokkos::Cuda::fence() (or just Kokkos::fence()), after kernels, or you can set the environment variable CUDA_LAUNCH_BLOCKING=1.</para>
</listitem><listitem><para>In multi socket multi GPU machines without NVLINK, UVM defaults to using zero copy allocations for technical reasons related to using multiple GPUs from the same process. If an executable doesn&apos;t do that (e.g. each MPI rank of an application uses a single GPU [can be the same GPU for multiple MPI ranks]) you can set CUDA_MANAGED_FORCE_DEVICE_ALLOC=1. This will enforce proper UVM allocations, but can lead to errors if more than a single GPU is used by a single process.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md119">
<title>Citing Kokkos</title>
<para>If you publish work which mentions Kokkos, please cite the following paper:</para>
<para><programlisting filename=".BibTex"><codeline><highlight class="normal">@ARTICLE{9485033,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author={Trott,<sp/>Christian<sp/>R.<sp/>and<sp/>Lebrun-Grandié,<sp/>Damien<sp/>and<sp/>Arndt,<sp/>Daniel<sp/>and<sp/>Ciesko,<sp/>Jan<sp/>and<sp/>Dang,<sp/>Vinh<sp/>and<sp/>Ellingwood,<sp/>Nathan<sp/>and<sp/>Gayatri,<sp/>Rahulkumar<sp/>and<sp/>Harvey,<sp/>Evan<sp/>and<sp/>Hollman,<sp/>Daisy<sp/>S.<sp/>and<sp/>Ibanez,<sp/>Dan<sp/>and<sp/>Liber,<sp/>Nevin<sp/>and<sp/>Madsen,<sp/>Jonathan<sp/>and<sp/>Miles,<sp/>Jeff<sp/>and<sp/>Poliakoff,<sp/>David<sp/>and<sp/>Powell,<sp/>Amy<sp/>and<sp/>Rajamanickam,<sp/>Sivasankaran<sp/>and<sp/>Simberg,<sp/>Mikael<sp/>and<sp/>Sunderland,<sp/>Dan<sp/>and<sp/>Turcksin,<sp/>Bruno<sp/>and<sp/>Wilke,<sp/>Jeremiah},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>journal={IEEE<sp/>Transactions<sp/>on<sp/>Parallel<sp/>and<sp/>Distributed<sp/>Systems},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title={Kokkos<sp/>3:<sp/>Programming<sp/>Model<sp/>Extensions<sp/>for<sp/>the<sp/>Exascale<sp/>Era},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year={2022},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>volume={33},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>number={4},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pages={805-817},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>doi={10.1109/TPDS.2021.3097283}}</highlight></codeline>
</programlisting></para>
<para>If you use more than one Kokkos EcoSystem package, please also cite:</para>
<para><programlisting filename=".BibTex"><codeline><highlight class="normal">@ARTICLE{9502936,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author={Trott,<sp/>Christian<sp/>and<sp/>Berger-Vergiat,<sp/>Luc<sp/>and<sp/>Poliakoff,<sp/>David<sp/>and<sp/>Rajamanickam,<sp/>Sivasankaran<sp/>and<sp/>Lebrun-Grandie,<sp/>Damien<sp/>and<sp/>Madsen,<sp/>Jonathan<sp/>and<sp/>Al<sp/>Awar,<sp/>Nader<sp/>and<sp/>Gligoric,<sp/>Milos<sp/>and<sp/>Shipman,<sp/>Galen<sp/>and<sp/>Womeldorff,<sp/>Geoff},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>journal={Computing<sp/>in<sp/>Science<sp/><sp/><sp/>Engineering},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title={The<sp/>Kokkos<sp/>EcoSystem:<sp/>Comprehensive<sp/>Performance<sp/>Portability<sp/>for<sp/>High<sp/>Performance<sp/>Computing},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year={2021},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>volume={23},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>number={5},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pages={10-18},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>doi={10.1109/MCSE.2021.3098509}}</highlight></codeline>
</programlisting></para>
<para>And if you feel generous: feel free to cite the original Kokkos paper which describes most of the basic Kokkos concepts:</para>
<para><programlisting filename=".BibTeX"><codeline><highlight class="normal">@article{CarterEdwards20143202,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title<sp/>=<sp/>&quot;Kokkos:<sp/>Enabling<sp/>manycore<sp/>performance<sp/>portability<sp/>through<sp/>polymorphic<sp/>memory<sp/>access<sp/>patterns<sp/>&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>journal<sp/>=<sp/>&quot;Journal<sp/>of<sp/>Parallel<sp/>and<sp/>Distributed<sp/>Computing<sp/>&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>volume<sp/>=<sp/>&quot;74&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>number<sp/>=<sp/>&quot;12&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pages<sp/>=<sp/>&quot;3202<sp/>-<sp/>3216&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year<sp/>=<sp/>&quot;2014&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>note<sp/>=<sp/>&quot;Domain-Specific<sp/>Languages<sp/>and<sp/>High-Level<sp/>Frameworks<sp/>for<sp/>High-Performance<sp/>Computing<sp/>&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>issn<sp/>=<sp/>&quot;0743-7315&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>doi<sp/>=<sp/>&quot;https://doi.org/10.1016/j.jpdc.2014.07.003&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url<sp/>=<sp/>&quot;http://www.sciencedirect.com/science/article/pii/S0743731514001257&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author<sp/>=<sp/>&quot;H.<sp/>Carter<sp/>Edwards<sp/>and<sp/>Christian<sp/>R.<sp/>Trott<sp/>and<sp/>Daniel<sp/>Sunderland&quot;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><anchor id="md_src__kokkos_kokkos__r_e_a_d_m_e_1autotoc_md120"/> <heading level="5"><ulink url="https://github.com/kokkos/kokkos/blob/master/LICENSE">LICENSE</ulink></heading>
</para>
<para><ulink url="https://opensource.org/licenses/BSD-3-Clause"><image type="html" name="https://img.shields.io/badge/License-BSD%203--Clause-blue.svg" alt="License" inline="yes"></image>
</ulink></para>
<para>Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains certain rights in this software. </para>
</sect1>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/README.md"/>
  </compounddef>
</doxygen>
