<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4" kind="struct" language="C++" prot="public">
    <compoundname>Kokkos::pair&lt; T1 &amp;, T2 &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>class T1</type>
      </param>
      <param>
        <type>class T2</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1adfdec8135602f5ec78979509a4842673" prot="public" static="no">
        <type>T1 &amp;</type>
        <definition>using Kokkos::pair&lt; T1 &amp;, T2 &gt;::first_type =  T1&amp;</definition>
        <argsstring></argsstring>
        <name>first_type</name>
        <qualifiedname>Kokkos::pair&lt; T1 &amp;, T2 &gt;::first_type</qualifiedname>
        <briefdescription>
<para>The first template parameter of this class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="273" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1a272faef39042785b6fd89c44c9a3cc4f" prot="public" static="no">
        <type>T2</type>
        <definition>using Kokkos::pair&lt; T1 &amp;, T2 &gt;::second_type =  T2</definition>
        <argsstring></argsstring>
        <name>second_type</name>
        <qualifiedname>Kokkos::pair&lt; T1 &amp;, T2 &gt;::second_type</qualifiedname>
        <briefdescription>
<para>The second template parameter of this class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="275" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1a38d2d3e00634d61caceb172d99370385" prot="public" static="no" mutable="no">
        <type><ref refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1adfdec8135602f5ec78979509a4842673" kindref="member">first_type</ref></type>
        <definition>first_type Kokkos::pair&lt; T1 &amp;, T2 &gt;::first</definition>
        <argsstring></argsstring>
        <name>first</name>
        <qualifiedname>Kokkos::pair&lt; T1 &amp;, T2 &gt;::first</qualifiedname>
        <briefdescription>
<para>The first element of the pair. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="278" column="14" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1ab2b83f4b6f50c01d658383f3606c450d" prot="public" static="no" mutable="no">
        <type><ref refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1a272faef39042785b6fd89c44c9a3cc4f" kindref="member">second_type</ref></type>
        <definition>second_type Kokkos::pair&lt; T1 &amp;, T2 &gt;::second</definition>
        <argsstring></argsstring>
        <name>second</name>
        <qualifiedname>Kokkos::pair&lt; T1 &amp;, T2 &gt;::second</qualifiedname>
        <briefdescription>
<para>The second element of the pair. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="280" column="15" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="280" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1a836a3f2794fefaf27c3a6a7ce3166c2a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr Kokkos::pair&lt; T1 &amp;, T2 &gt;::pair</definition>
        <argsstring>(first_type f, second_type const &amp;s)</argsstring>
        <name>pair</name>
        <qualifiedname>Kokkos::pair&lt; T1 &amp;, T2 &gt;::pair</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1adfdec8135602f5ec78979509a4842673" kindref="member">first_type</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1a272faef39042785b6fd89c44c9a3cc4f" kindref="member">second_type</ref> const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Constructor that takes both elements of the pair. </para>
        </briefdescription>
        <detaileddescription>
<para>This calls the copy constructors of T1 and T2. It won&apos;t compile if those copy constructors are not defined and public. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="286" column="41" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="286" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1ace2a8c44c179fd66deda457a7b753330" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr Kokkos::pair&lt; T1 &amp;, T2 &gt;::pair</definition>
        <argsstring>(const pair&lt; U, V &gt; &amp;p)</argsstring>
        <name>pair</name>
        <qualifiedname>Kokkos::pair&lt; T1 &amp;, T2 &gt;::pair</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; U, V &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>This calls the copy constructors of T1 and T2. It won&apos;t compile if those copy constructors are not defined and public. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="294" column="41" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="294" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1a0c7a1388176a9af92f20a0dfa1e95480" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Kokkos::pair&lt; T1 &amp;, T2 &gt;::pair</definition>
        <argsstring>(const std::pair&lt; U, V &gt; &amp;p)</argsstring>
        <name>pair</name>
        <qualifiedname>Kokkos::pair&lt; T1 &amp;, T2 &gt;::pair</qualifiedname>
        <param>
          <type>const std::pair&lt; U, V &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="299" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1aa9c17771bad672ca6d6855490fb9872b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; <ref refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1adfdec8135602f5ec78979509a4842673" kindref="member">first_type</ref>, <ref refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1a272faef39042785b6fd89c44c9a3cc4f" kindref="member">second_type</ref> &gt; &amp;</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION pair&lt; first_type, second_type &gt; &amp; Kokkos::pair&lt; T1 &amp;, T2 &gt;::operator=</definition>
        <argsstring>(const pair&lt; U, V &gt; &amp;p)</argsstring>
        <name>operator=</name>
        <qualifiedname>Kokkos::pair&lt; T1 &amp;, T2 &gt;::operator=</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; U, V &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This calls the assignment operators of T1 and T2. It won&apos;t compile if the assignment operators are not defined and public. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="306" column="36" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="306" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1ad52cd230b2ebdf1a67b9508e2fcd0cf5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; T1, T2 &gt;</type>
        <definition>std::pair&lt; T1, T2 &gt; Kokkos::pair&lt; T1 &amp;, T2 &gt;::to_std_pair</definition>
        <argsstring>() const</argsstring>
        <name>to_std_pair</name>
        <qualifiedname>Kokkos::pair&lt; T1 &amp;, T2 &gt;::to_std_pair</qualifiedname>
        <briefdescription>
<para>Return the std::pair version of this object. </para>
        </briefdescription>
        <detaileddescription>
<para>This is <emphasis>not</emphasis> a device function; you may not call it on a CUDA device. It is meant to be called on the host, if the user wants an std::pair instead of a <ref refid="struct_kokkos_1_1pair" kindref="compound">Kokkos::pair</ref>.</para>
<para><simplesect kind="note"><para>This is not a conversion operator, since defining a conversion operator made the relational operators have ambiguous definitions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="322" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="322" bodyend="324"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="271" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="271" bodyend="325"/>
    <listofallmembers>
      <member refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1a38d2d3e00634d61caceb172d99370385" prot="public" virt="non-virtual"><scope>Kokkos::pair&lt; T1 &amp;, T2 &gt;</scope><name>first</name></member>
      <member refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1adfdec8135602f5ec78979509a4842673" prot="public" virt="non-virtual"><scope>Kokkos::pair&lt; T1 &amp;, T2 &gt;</scope><name>first_type</name></member>
      <member refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1aa9c17771bad672ca6d6855490fb9872b" prot="public" virt="non-virtual"><scope>Kokkos::pair&lt; T1 &amp;, T2 &gt;</scope><name>operator=</name></member>
      <member refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1a836a3f2794fefaf27c3a6a7ce3166c2a" prot="public" virt="non-virtual"><scope>Kokkos::pair&lt; T1 &amp;, T2 &gt;</scope><name>pair</name></member>
      <member refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1ace2a8c44c179fd66deda457a7b753330" prot="public" virt="non-virtual"><scope>Kokkos::pair&lt; T1 &amp;, T2 &gt;</scope><name>pair</name></member>
      <member refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1a0c7a1388176a9af92f20a0dfa1e95480" prot="public" virt="non-virtual"><scope>Kokkos::pair&lt; T1 &amp;, T2 &gt;</scope><name>pair</name></member>
      <member refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1ab2b83f4b6f50c01d658383f3606c450d" prot="public" virt="non-virtual"><scope>Kokkos::pair&lt; T1 &amp;, T2 &gt;</scope><name>second</name></member>
      <member refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1a272faef39042785b6fd89c44c9a3cc4f" prot="public" virt="non-virtual"><scope>Kokkos::pair&lt; T1 &amp;, T2 &gt;</scope><name>second_type</name></member>
      <member refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4_1ad52cd230b2ebdf1a67b9508e2fcd0cf5" prot="public" virt="non-virtual"><scope>Kokkos::pair&lt; T1 &amp;, T2 &gt;</scope><name>to_std_pair</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
