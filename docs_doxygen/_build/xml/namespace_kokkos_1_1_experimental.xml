<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespace_kokkos_1_1_experimental" kind="namespace" language="C++">
    <compoundname>Kokkos::Experimental</compoundname>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_acquire_team_unique_token" prot="public">Kokkos::Experimental::AcquireTeamUniqueToken</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_acquire_unique_token" prot="public">Kokkos::Experimental::AcquireUniqueToken</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_append_extent" prot="public">Kokkos::Experimental::AppendExtent</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_append_extent_3_01_extents_3_01_exts_8_8_8_01_4_00_01_new_extent_01_4" prot="public">Kokkos::Experimental::AppendExtent&lt; Extents&lt; Exts... &gt;, NewExtent &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_default_memory_space_namer" prot="public">Kokkos::Experimental::DefaultMemorySpaceNamer</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_desired_occupancy" prot="public">Kokkos::Experimental::DesiredOccupancy</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1digits" prot="public">Kokkos::Experimental::digits</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1digits10" prot="public">Kokkos::Experimental::digits10</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_dynamic_view" prot="public">Kokkos::Experimental::DynamicView</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1epsilon" prot="public">Kokkos::Experimental::epsilon</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_error_reporter" prot="public">Kokkos::Experimental::ErrorReporter</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_extents" prot="public">Kokkos::Experimental::Extents</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1finite__max" prot="public">Kokkos::Experimental::finite_max</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1finite__min" prot="public">Kokkos::Experimental::finite_min</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_graph" prot="public">Kokkos::Experimental::Graph</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_graph_node_ref" prot="public">Kokkos::Experimental::GraphNodeRef</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_h_i_p_raw_memory_allocation_failure" prot="public">Kokkos::Experimental::HIPRawMemoryAllocationFailure</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1infinity" prot="public">Kokkos::Experimental::infinity</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1is__offset__view" prot="public">Kokkos::Experimental::is_offset_view</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1is__offset__view_3_01const_01_offset_view_3_01_d_00_01_p_8_8_8_01_4_01_4" prot="public">Kokkos::Experimental::is_offset_view&lt; const OffsetView&lt; D, P... &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1is__offset__view_3_01_offset_view_3_01_d_00_01_p_8_8_8_01_4_01_4" prot="public">Kokkos::Experimental::is_offset_view&lt; OffsetView&lt; D, P... &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1is__work__item__property" prot="public">Kokkos::Experimental::is_work_item_property</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_layout_tiled" prot="public">Kokkos::Experimental::LayoutTiled</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_logical_memory_space" prot="public">Kokkos::Experimental::LogicalMemorySpace</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_logical_space_shares_access" prot="public">Kokkos::Experimental::LogicalSpaceSharesAccess</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1max__digits10" prot="public">Kokkos::Experimental::max_digits10</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1max__exponent" prot="public">Kokkos::Experimental::max_exponent</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1max__exponent10" prot="public">Kokkos::Experimental::max_exponent10</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_maximize_occupancy" prot="public">Kokkos::Experimental::MaximizeOccupancy</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1min__exponent" prot="public">Kokkos::Experimental::min_exponent</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1min__exponent10" prot="public">Kokkos::Experimental::min_exponent10</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1norm__min" prot="public">Kokkos::Experimental::norm_min</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_offset_view" prot="public">Kokkos::Experimental::OffsetView</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_prepend_extent" prot="public">Kokkos::Experimental::PrependExtent</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_prepend_extent_3_01_extents_3_01_exts_8_8_8_01_4_00_01_new_extent_01_4" prot="public">Kokkos::Experimental::PrependExtent&lt; Extents&lt; Exts... &gt;, NewExtent &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1python__view__type" prot="public">Kokkos::Experimental::python_view_type</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1radix" prot="public">Kokkos::Experimental::radix</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_raw_memory_allocation_failure" prot="public">Kokkos::Experimental::RawMemoryAllocationFailure</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1round__error" prot="public">Kokkos::Experimental::round_error</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_scatter_access" prot="public">Kokkos::Experimental::ScatterAccess</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_scatter_access_3_01_data_type_00_01_op_00_01_device_type_00_017b07e4b1af3e99bab5598329b69f7e79" prot="public">Kokkos::Experimental::ScatterAccess&lt; DataType, Op, DeviceType, Layout, ScatterDuplicated, Contribution, OverrideContribution &gt;</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_scatter_access_3_01_data_type_00_01_op_00_01_device_type_00_01a7400a4d5c2765975b5eb4b6f9824195" prot="public">Kokkos::Experimental::ScatterAccess&lt; DataType, Op, DeviceType, Layout, ScatterNonDuplicated, Contribution, OverrideContribution &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_scatter_atomic" prot="public">Kokkos::Experimental::ScatterAtomic</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_scatter_duplicated" prot="public">Kokkos::Experimental::ScatterDuplicated</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_scatter_max" prot="public">Kokkos::Experimental::ScatterMax</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_scatter_min" prot="public">Kokkos::Experimental::ScatterMin</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_scatter_non_atomic" prot="public">Kokkos::Experimental::ScatterNonAtomic</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_scatter_non_duplicated" prot="public">Kokkos::Experimental::ScatterNonDuplicated</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_scatter_prod" prot="public">Kokkos::Experimental::ScatterProd</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_scatter_sum" prot="public">Kokkos::Experimental::ScatterSum</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_scatter_view" prot="public">Kokkos::Experimental::ScatterView</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_scatter_view_3_01_data_type_00_01_kokkos_1_1_layout_left_00_01a3b6ebb2c73c795865893bfc05478aba" prot="public">Kokkos::Experimental::ScatterView&lt; DataType, Kokkos::LayoutLeft, DeviceType, Op, ScatterDuplicated, Contribution &gt;</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_scatter_view_3_01_data_type_00_01_kokkos_1_1_layout_right_00_039d48b362220c00a0cd1899653985dde" prot="public">Kokkos::Experimental::ScatterView&lt; DataType, Kokkos::LayoutRight, DeviceType, Op, ScatterDuplicated, Contribution &gt;</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_scatter_view_3_01_data_type_00_01_layout_00_01_device_type_00_409a5fbc737b0890b5a2b8c7d57d6447" prot="public">Kokkos::Experimental::ScatterView&lt; DataType, Layout, DeviceType, Op, ScatterNonDuplicated, Contribution &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_type_erased_tag" prot="public">Kokkos::Experimental::TypeErasedTag</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_unique_token" prot="public">Kokkos::Experimental::UniqueToken</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_unique_token_3_01_execution_space_00_01_unique_token_scope_1_1_instance_01_4" prot="public">Kokkos::Experimental::UniqueToken&lt; ExecutionSpace, UniqueTokenScope::Instance &gt;</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_unique_token_3_01_h_i_p_00_01_unique_token_scope_1_1_global_01_4" prot="public">Kokkos::Experimental::UniqueToken&lt; HIP, UniqueTokenScope::Global &gt;</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_unique_token_3_01_h_i_p_00_01_unique_token_scope_1_1_instance_01_4" prot="public">Kokkos::Experimental::UniqueToken&lt; HIP, UniqueTokenScope::Instance &gt;</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_unique_token_3_01_s_y_c_l_00_01_unique_token_scope_1_1_global_01_4" prot="public">Kokkos::Experimental::UniqueToken&lt; SYCL, UniqueTokenScope::Global &gt;</innerclass>
    <innerclass refid="class_kokkos_1_1_experimental_1_1_unique_token_3_01_s_y_c_l_00_01_unique_token_scope_1_1_instance_01_4" prot="public">Kokkos::Experimental::UniqueToken&lt; SYCL, UniqueTokenScope::Instance &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_experimental_1_1_work_item_property" prot="public">Kokkos::Experimental::WorkItemProperty</innerclass>
    <innernamespace refid="namespace_kokkos_1_1_experimental_1_1_impl">Kokkos::Experimental::Impl</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_kokkos___unique_token_8hpp_1adb99c5cc89a6e873c99f7b679584577e" prot="public" static="no" strong="yes">
        <type>int</type>
        <name>UniqueTokenScope</name>
        <qualifiedname>Kokkos::Experimental::UniqueTokenScope</qualifiedname>
        <enumvalue id="_kokkos___unique_token_8hpp_1adb99c5cc89a6e873c99f7b679584577ead9a17c1c9e8ef6866e4dbeef41c741b2" prot="public">
          <name>Instance</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_kokkos___unique_token_8hpp_1adb99c5cc89a6e873c99f7b679584577ea4cc6684df7b4a92b1dec6fce3264fac8" prot="public">
          <name>Global</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_UniqueToken.hpp" line="55" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_UniqueToken.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_kokkos___offset_view_8hpp_1abc1866bd28bea1987b64f15944afdf65" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_integral&lt; iType &gt;::value &amp;&amp;std::is_signed&lt; iType &gt;::value, iType &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_array" kindref="compound">Kokkos::Array</ref>&lt; iType, 2 &gt;</type>
        <definition>using Kokkos::Experimental::IndexRange = typedef Kokkos::Array&lt;iType, 2&gt;</definition>
        <argsstring></argsstring>
        <name>IndexRange</name>
        <qualifiedname>Kokkos::Experimental::IndexRange</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="41" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___offset_view_8hpp_1af9a41ebd86fc65f29fe05755fd0525df" prot="public" static="no">
        <type>std::initializer_list&lt; int64_t &gt;</type>
        <definition>using Kokkos::Experimental::index_list_type = typedef std::initializer_list&lt;int64_t&gt;</definition>
        <argsstring></argsstring>
        <name>index_list_type</name>
        <qualifiedname>Kokkos::Experimental::index_list_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="43" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___half_8hpp_1a497c996d5d2a2ad291def38c90becb03" prot="public" static="no">
        <type>Kokkos::Impl::half_impl_t::type</type>
        <definition>using Kokkos::Experimental::half_t = typedef Kokkos::Impl::half_impl_t::type</definition>
        <argsstring></argsstring>
        <name>half_t</name>
        <qualifiedname>Kokkos::Experimental::half_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" line="70" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos_exp___inter_op_8hpp_1a357347410963f17bb7d4a27972105a63" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ViewT</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_kokkos_1_1_experimental_1_1python__view__type" kindref="compound">python_view_type</ref>&lt; ViewT &gt;::type</type>
        <definition>using Kokkos::Experimental::python_view_type_t = typedef typename python_view_type&lt;ViewT&gt;::type</definition>
        <argsstring></argsstring>
        <name>python_view_type_t</name>
        <qualifiedname>Kokkos::Experimental::python_view_type_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/KokkosExp_InterOp.hpp" line="137" column="1" bodyfile="src/Kokkos/kokkos/core/src/KokkosExp_InterOp.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_kokkos___extents_8hpp_1a87f6656349fee242fbb776e22567795f" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr ptrdiff_t</type>
        <definition>constexpr ptrdiff_t Kokkos::Experimental::dynamic_extent</definition>
        <argsstring></argsstring>
        <name>dynamic_extent</name>
        <qualifiedname>Kokkos::Experimental::dynamic_extent</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Extents.hpp" line="54" column="21" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Extents.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1ae38f24932720f256fbc67dfee46344dc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION constexpr unsigned</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr unsigned Kokkos::Experimental::rank</definition>
        <argsstring>(const OffsetView&lt; D, P... &gt; &amp;V)</argsstring>
        <name>rank</name>
        <qualifiedname>Kokkos::Experimental::rank</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">OffsetView</ref>&lt; D, P... &gt; &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
<para>Temporary free function rank() until rank() is implemented in the <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1284" column="43" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1284" bodyend="1286"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1ab77fd6fc8617770498cfa0332eb896b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class D</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_experimental_1_1_impl_1_1_get_offset_view_type_from_view_type" kindref="compound">Kokkos::Experimental::Impl::GetOffsetViewTypeFromViewType</ref>&lt; typenameKokkos::Impl::ViewMapping&lt; void, <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; D, P... &gt;, Args... &gt;::type &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::Experimental::Impl::GetOffsetViewTypeFromViewType&lt; typenameKokkos::Impl::ViewMapping&lt; void, ViewTraits&lt; D, P... &gt;, Args... &gt;::type &gt;::type Kokkos::Experimental::subview</definition>
        <argsstring>(const OffsetView&lt; D, P... &gt; &amp;src, Args... args)</argsstring>
        <name>subview</name>
        <qualifiedname>Kokkos::Experimental::subview</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">OffsetView</ref>&lt; D, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1730" column="5" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1730" bodyend="1736"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1a950f76ba40d650904cf923d7f05d5efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>LP</declname>
            <defname>LP</defname>
          </param>
          <param>
            <type>class RT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::Experimental::operator==</definition>
        <argsstring>(const OffsetView&lt; LT, LP... &gt; &amp;lhs, const OffsetView&lt; RT, RP... &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::Experimental::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">OffsetView</ref>&lt; LT, LP... &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">OffsetView</ref>&lt; RT, RP... &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1746" column="29" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1746" bodyend="1768"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1aa2fde139822fbda9a8d871b34c2a451c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>LP</declname>
            <defname>LP</defname>
          </param>
          <param>
            <type>class RT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::Experimental::operator!=</definition>
        <argsstring>(const OffsetView&lt; LT, LP... &gt; &amp;lhs, const OffsetView&lt; RT, RP... &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>Kokkos::Experimental::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">OffsetView</ref>&lt; LT, LP... &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">OffsetView</ref>&lt; RT, RP... &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1771" column="29" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1771" bodyend="1774"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1a4529ac3b30196979366aec0ab9668ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>LP</declname>
            <defname>LP</defname>
          </param>
          <param>
            <type>class RT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::Experimental::operator==</definition>
        <argsstring>(const View&lt; LT, LP... &gt; &amp;lhs, const OffsetView&lt; RT, RP... &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::Experimental::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; LT, LP... &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">OffsetView</ref>&lt; RT, RP... &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1777" column="29" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1777" bodyend="1795"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1ae4f2a92ae3954dd13cf575243323b569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>LP</declname>
            <defname>LP</defname>
          </param>
          <param>
            <type>class RT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::Experimental::operator==</definition>
        <argsstring>(const OffsetView&lt; LT, LP... &gt; &amp;lhs, const View&lt; RT, RP... &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::Experimental::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">OffsetView</ref>&lt; LT, LP... &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; RT, RP... &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1798" column="29" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1798" bodyend="1801"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___scatter_view_8hpp_1a8e9bac5dd6bc45f057a6e74ecda74a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Op</type>
            <defval><ref refid="struct_kokkos_1_1_experimental_1_1_scatter_sum" kindref="compound">Kokkos::Experimental::ScatterSum</ref></defval>
          </param>
          <param>
            <type>typename Duplication</type>
            <defval>void</defval>
          </param>
          <param>
            <type>typename Contribution</type>
            <defval>void</defval>
          </param>
          <param>
            <type>typename RT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_experimental_1_1_scatter_view" kindref="compound">ScatterView</ref>&lt; RT, typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; RT, RP... &gt;::array_layout, typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; RT, RP... &gt;::device_type, Op, std::conditional_t&lt; std::is_same&lt; Duplication, void &gt;::value, typename <ref refid="struct_kokkos_1_1_impl_1_1_experimental_1_1_default_duplication" kindref="compound">Kokkos::Impl::Experimental::DefaultDuplication</ref>&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; RT, RP... &gt;::execution_space &gt;::type, Duplication &gt;, std::conditional_t&lt; std::is_same&lt; Contribution, void &gt;::value, typename <ref refid="struct_kokkos_1_1_impl_1_1_experimental_1_1_default_contribution" kindref="compound">Kokkos::Impl::Experimental::DefaultContribution</ref>&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; RT, RP... &gt;::execution_space, typename std::conditional_t&lt; std::is_same&lt; Duplication, void &gt;::value, typename <ref refid="struct_kokkos_1_1_impl_1_1_experimental_1_1_default_duplication" kindref="compound">Kokkos::Impl::Experimental::DefaultDuplication</ref>&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; RT, RP... &gt;::execution_space &gt;::type, Duplication &gt; &gt;::type, Contribution &gt; &gt;</type>
        <definition>ScatterView&lt; RT, typename ViewTraits&lt; RT, RP... &gt;::array_layout, typename ViewTraits&lt; RT, RP... &gt;::device_type, Op, std::conditional_t&lt; std::is_same&lt; Duplication, void &gt;::value, typename Kokkos::Impl::Experimental::DefaultDuplication&lt; typename ViewTraits&lt; RT, RP... &gt;::execution_space &gt;::type, Duplication &gt;, std::conditional_t&lt; std::is_same&lt; Contribution, void &gt;::value, typename Kokkos::Impl::Experimental::DefaultContribution&lt; typename ViewTraits&lt; RT, RP... &gt;::execution_space, typename std::conditional_t&lt; std::is_same&lt; Duplication, void &gt;::value, typename Kokkos::Impl::Experimental::DefaultDuplication&lt; typename ViewTraits&lt; RT, RP... &gt;::execution_space &gt;::type, Duplication &gt; &gt;::type, Contribution &gt; &gt; Kokkos::Experimental::create_scatter_view</definition>
        <argsstring>(View&lt; RT, RP... &gt; const &amp;original_view)</argsstring>
        <name>create_scatter_view</name>
        <qualifiedname>Kokkos::Experimental::create_scatter_view</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; RT, RP... &gt; const &amp;</type>
          <declname>original_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" line="1457" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" bodystart="1457" bodyend="1459"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___scatter_view_8hpp_1a2b69a1986e4e6648034c913d10984a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Op</type>
          </param>
          <param>
            <type>typename RT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_experimental_1_1_scatter_view" kindref="compound">ScatterView</ref>&lt; RT, typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; RT, RP... &gt;::array_layout, typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; RT, RP... &gt;::device_type, Op, typename <ref refid="struct_kokkos_1_1_impl_1_1_experimental_1_1_default_duplication" kindref="compound">Kokkos::Impl::Experimental::DefaultDuplication</ref>&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; RT, RP... &gt;::execution_space &gt;::type, typename <ref refid="struct_kokkos_1_1_impl_1_1_experimental_1_1_default_contribution" kindref="compound">Kokkos::Impl::Experimental::DefaultContribution</ref>&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; RT, RP... &gt;::execution_space, typename <ref refid="struct_kokkos_1_1_impl_1_1_experimental_1_1_default_duplication" kindref="compound">Kokkos::Impl::Experimental::DefaultDuplication</ref>&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; RT, RP... &gt;::execution_space &gt;::type &gt;::type &gt;</type>
        <definition>ScatterView&lt; RT, typename ViewTraits&lt; RT, RP... &gt;::array_layout, typename ViewTraits&lt; RT, RP... &gt;::device_type, Op, typename Kokkos::Impl::Experimental::DefaultDuplication&lt; typename ViewTraits&lt; RT, RP... &gt;::execution_space &gt;::type, typename Kokkos::Impl::Experimental::DefaultContribution&lt; typename ViewTraits&lt; RT, RP... &gt;::execution_space, typename Kokkos::Impl::Experimental::DefaultDuplication&lt; typename ViewTraits&lt; RT, RP... &gt;::execution_space &gt;::type &gt;::type &gt; Kokkos::Experimental::create_scatter_view</definition>
        <argsstring>(Op, View&lt; RT, RP... &gt; const &amp;original_view)</argsstring>
        <name>create_scatter_view</name>
        <qualifiedname>Kokkos::Experimental::create_scatter_view</qualifiedname>
        <param>
          <type>Op</type>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; RT, RP... &gt; const &amp;</type>
          <declname>original_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" line="1471" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" bodystart="1471" bodyend="1473"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___scatter_view_8hpp_1a1ac598ac1946d4f6a1e15592228e57ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Op</type>
          </param>
          <param>
            <type>typename Duplication</type>
          </param>
          <param>
            <type>typename Contribution</type>
          </param>
          <param>
            <type>typename RT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_experimental_1_1_scatter_view" kindref="compound">ScatterView</ref>&lt; RT, typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; RT, RP... &gt;::array_layout, typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; RT, RP... &gt;::device_type, Op, Duplication, Contribution &gt;</type>
        <definition>ScatterView&lt; RT, typename ViewTraits&lt; RT, RP... &gt;::array_layout, typename ViewTraits&lt; RT, RP... &gt;::device_type, Op, Duplication, Contribution &gt; Kokkos::Experimental::create_scatter_view</definition>
        <argsstring>(Op, Duplication, Contribution, View&lt; RT, RP... &gt; const &amp;original_view)</argsstring>
        <name>create_scatter_view</name>
        <qualifiedname>Kokkos::Experimental::create_scatter_view</qualifiedname>
        <param>
          <type>Op</type>
        </param>
        <param>
          <type>Duplication</type>
        </param>
        <param>
          <type>Contribution</type>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; RT, RP... &gt; const &amp;</type>
          <declname>original_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" line="1480" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" bodystart="1480" bodyend="1483"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___scatter_view_8hpp_1a3a10fa6a8196be329b15a0efefd8b98f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DT1</type>
          </param>
          <param>
            <type>typename DT2</type>
          </param>
          <param>
            <type>typename LY</type>
          </param>
          <param>
            <type>typename ES</type>
          </param>
          <param>
            <type>typename OP</type>
          </param>
          <param>
            <type>typename CT</type>
          </param>
          <param>
            <type>typename DP</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>VP</declname>
            <defname>VP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::Experimental::contribute</definition>
        <argsstring>(typename ES::execution_space const &amp;exec_space, View&lt; DT1, VP... &gt; &amp;dest, Kokkos::Experimental::ScatterView&lt; DT2, LY, ES, OP, CT, DP &gt; const &amp;src)</argsstring>
        <name>contribute</name>
        <qualifiedname>Kokkos::Experimental::contribute</qualifiedname>
        <param>
          <type>typename ES::execution_space const &amp;</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT1, VP... &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1_experimental_1_1_scatter_view" kindref="compound">Kokkos::Experimental::ScatterView</ref>&lt; DT2, LY, ES, OP, CT, DP &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" line="1493" column="6" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" bodystart="1493" bodyend="1497"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___scatter_view_8hpp_1a0433de7837c8280cd04ec59fa1a5512a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DT1</type>
          </param>
          <param>
            <type>typename DT2</type>
          </param>
          <param>
            <type>typename LY</type>
          </param>
          <param>
            <type>typename ES</type>
          </param>
          <param>
            <type>typename OP</type>
          </param>
          <param>
            <type>typename CT</type>
          </param>
          <param>
            <type>typename DP</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>VP</declname>
            <defname>VP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::Experimental::contribute</definition>
        <argsstring>(View&lt; DT1, VP... &gt; &amp;dest, Kokkos::Experimental::ScatterView&lt; DT2, LY, ES, OP, CT, DP &gt; const &amp;src)</argsstring>
        <name>contribute</name>
        <qualifiedname>Kokkos::Experimental::contribute</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT1, VP... &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1_experimental_1_1_scatter_view" kindref="compound">Kokkos::Experimental::ScatterView</ref>&lt; DT2, LY, ES, OP, CT, DP &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" line="1501" column="6" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" bodystart="1501" bodyend="1506"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___cuda___instance_8hpp_1a7b03d3f6360cba1ad5e7aa1382534fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; Cuda &gt;</type>
        <definition>std::vector&lt; Cuda &gt; Kokkos::Experimental::partition_space</definition>
        <argsstring>(const Cuda &amp;, Args...)</argsstring>
        <name>partition_space</name>
        <qualifiedname>Kokkos::Experimental::partition_space</qualifiedname>
        <param>
          <type>const Cuda &amp;</type>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Cuda/Kokkos_Cuda_Instance.hpp" line="227" column="13" bodyfile="src/Kokkos/kokkos/core/src/Cuda/Kokkos_Cuda_Instance.hpp" bodystart="227" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___cuda___instance_8hpp_1a1b566e0a3bcc0121e6b872c58c83b913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; Cuda &gt;</type>
        <definition>std::vector&lt; Cuda &gt; Kokkos::Experimental::partition_space</definition>
        <argsstring>(const Cuda &amp;, std::vector&lt; T &gt; &amp;weights)</argsstring>
        <name>partition_space</name>
        <qualifiedname>Kokkos::Experimental::partition_space</qualifiedname>
        <param>
          <type>const Cuda &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Cuda/Kokkos_Cuda_Instance.hpp" line="239" column="13" bodyfile="src/Kokkos/kokkos/core/src/Cuda/Kokkos_Cuda_Instance.hpp" bodystart="239" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___h_i_p___instance_8hpp_1a72271f6325255337e088832080f5ce08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; HIP &gt;</type>
        <definition>std::vector&lt; HIP &gt; Kokkos::Experimental::partition_space</definition>
        <argsstring>(const HIP &amp;, Args...)</argsstring>
        <name>partition_space</name>
        <qualifiedname>Kokkos::Experimental::partition_space</qualifiedname>
        <param>
          <type>const HIP &amp;</type>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_Instance.hpp" line="193" column="13" bodyfile="src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_Instance.hpp" bodystart="193" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___h_i_p___instance_8hpp_1acf0e948b0c6dfa389427255900eb6a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; HIP &gt;</type>
        <definition>std::vector&lt; HIP &gt; Kokkos::Experimental::partition_space</definition>
        <argsstring>(const HIP &amp;, std::vector&lt; T &gt; &amp;weights)</argsstring>
        <name>partition_space</name>
        <qualifiedname>Kokkos::Experimental::partition_space</qualifiedname>
        <param>
          <type>const HIP &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_Instance.hpp" line="206" column="13" bodyfile="src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_Instance.hpp" bodystart="206" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___h_i_p___vectorization_8hpp_1a9a0f1c3d3553ff2ab68dc2f3663dd6e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__device__ T</type>
        <definition>__device__ T Kokkos::Experimental::shfl</definition>
        <argsstring>(const T &amp;val, const int &amp;srcLane, const int &amp;width)</argsstring>
        <name>shfl</name>
        <qualifiedname>Kokkos::Experimental::shfl</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>srcLane</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_Vectorization.hpp" line="190" column="21" bodyfile="src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_Vectorization.hpp" bodystart="190" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___h_i_p___vectorization_8hpp_1aecd019f4bafa25064639fb0d12e85bcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__device__ T</type>
        <definition>__device__ T Kokkos::Experimental::shfl_down</definition>
        <argsstring>(const T &amp;val, int delta, int width)</argsstring>
        <name>shfl_down</name>
        <qualifiedname>Kokkos::Experimental::shfl_down</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_Vectorization.hpp" line="198" column="21" bodyfile="src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_Vectorization.hpp" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___h_i_p___vectorization_8hpp_1aeb69d4655aca8032026547eba8ba23bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__device__ T</type>
        <definition>__device__ T Kokkos::Experimental::shfl_up</definition>
        <argsstring>(const T &amp;val, int delta, int width)</argsstring>
        <name>shfl_up</name>
        <qualifiedname>Kokkos::Experimental::shfl_up</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_Vectorization.hpp" line="206" column="21" bodyfile="src/Kokkos/kokkos/core/src/HIP/Kokkos_HIP_Vectorization.hpp" bodystart="206" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___graph_impl_8hpp_1a86fd664d47906c01595823c29f60a28b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="class_kokkos_1_1_range_policy" kindref="compound">Policy</ref></type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto Kokkos::Experimental::require</definition>
        <argsstring>(Policy const &amp;policy, Kokkos::Impl::KernelInGraphProperty)</argsstring>
        <name>require</name>
        <qualifiedname>Kokkos::Experimental::require</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_range_policy" kindref="compound">Policy</ref> const &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type><ref refid="struct_kokkos_1_1_impl_1_1_kernel_in_graph_property" kindref="compound">Kokkos::Impl::KernelInGraphProperty</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_GraphImpl.hpp" line="145" column="16" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_GraphImpl.hpp" bodystart="145" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___concepts_8hpp_1a90bfd62fecd48563a0a4bfd337dcd31c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned long</type>
            <declname>pv1</declname>
            <defname>pv1</defname>
          </param>
          <param>
            <type>unsigned long</type>
            <declname>pv2</declname>
            <defname>pv2</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="struct_kokkos_1_1_experimental_1_1_work_item_property_1_1_impl_work_item_property" kindref="compound">WorkItemProperty::ImplWorkItemProperty</ref>&lt; pv1|pv2 &gt;</type>
        <definition>constexpr WorkItemProperty::ImplWorkItemProperty&lt; pv1|pv2 &gt; Kokkos::Experimental::operator|</definition>
        <argsstring>(WorkItemProperty::ImplWorkItemProperty&lt; pv1 &gt;, WorkItemProperty::ImplWorkItemProperty&lt; pv2 &gt;)</argsstring>
        <name>operator|</name>
        <qualifiedname>Kokkos::Experimental::operator|</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1_experimental_1_1_work_item_property_1_1_impl_work_item_property" kindref="compound">WorkItemProperty::ImplWorkItemProperty</ref>&lt; pv1 &gt;</type>
        </param>
        <param>
          <type><ref refid="struct_kokkos_1_1_experimental_1_1_work_item_property_1_1_impl_work_item_property" kindref="compound">WorkItemProperty::ImplWorkItemProperty</ref>&lt; pv2 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" line="106" column="57" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" bodystart="106" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___concepts_8hpp_1a8ca29d427feddea5b49bdd304f273125" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned long</type>
            <declname>pv1</declname>
            <defname>pv1</defname>
          </param>
          <param>
            <type>unsigned long</type>
            <declname>pv2</declname>
            <defname>pv2</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="struct_kokkos_1_1_experimental_1_1_work_item_property_1_1_impl_work_item_property" kindref="compound">WorkItemProperty::ImplWorkItemProperty</ref>&lt; pv1 &amp;pv2 &gt;</type>
        <definition>constexpr WorkItemProperty::ImplWorkItemProperty&lt; pv1 &amp;pv2 &gt; Kokkos::Experimental::operator&amp;</definition>
        <argsstring>(WorkItemProperty::ImplWorkItemProperty&lt; pv1 &gt;, WorkItemProperty::ImplWorkItemProperty&lt; pv2 &gt;)</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>Kokkos::Experimental::operator&amp;</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1_experimental_1_1_work_item_property_1_1_impl_work_item_property" kindref="compound">WorkItemProperty::ImplWorkItemProperty</ref>&lt; pv1 &gt;</type>
        </param>
        <param>
          <type><ref refid="struct_kokkos_1_1_experimental_1_1_work_item_property_1_1_impl_work_item_property" kindref="compound">WorkItemProperty::ImplWorkItemProperty</ref>&lt; pv2 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" line="113" column="57" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" bodystart="113" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___concepts_8hpp_1aef162fa8308d8506485af9225dfaaf45" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned long</type>
            <declname>pv1</declname>
            <defname>pv1</defname>
          </param>
          <param>
            <type>unsigned long</type>
            <declname>pv2</declname>
            <defname>pv2</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool Kokkos::Experimental::operator==</definition>
        <argsstring>(WorkItemProperty::ImplWorkItemProperty&lt; pv1 &gt;, WorkItemProperty::ImplWorkItemProperty&lt; pv2 &gt;)</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::Experimental::operator==</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1_experimental_1_1_work_item_property_1_1_impl_work_item_property" kindref="compound">WorkItemProperty::ImplWorkItemProperty</ref>&lt; pv1 &gt;</type>
        </param>
        <param>
          <type><ref refid="struct_kokkos_1_1_experimental_1_1_work_item_property_1_1_impl_work_item_property" kindref="compound">WorkItemProperty::ImplWorkItemProperty</ref>&lt; pv2 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" line="120" column="23" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a3f9759d9aa90def6a0abe55ff3f60a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy_contiguous</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src)</argsstring>
        <name>local_deep_copy_contiguous</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy_contiguous</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>A local deep copy between views of the default specialization, compatible type, same non-zero rank. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1734" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1734" bodyend="1738"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a4cb0e560a3f4752187876a78d6f0f070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy_contiguous</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src)</argsstring>
        <name>local_deep_copy_contiguous</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy_contiguous</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1741" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1741" bodyend="1746"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a03ef5b57f5df5497a590aef802d237be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==1 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==1)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==1 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==1)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1749" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1749" bodyend="1765"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a00212b46189d91ab05cf0d2c5fc51000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==2 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==2)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==2 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==2)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1768" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1768" bodyend="1793"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a756d2c95639669bf8e21e867cb905892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==3 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==3)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==3 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==3)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1796" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1796" bodyend="1823"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1ac39c5263a039dc14fcc9411497129bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==4 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==4)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==4 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==4)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1826" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1826" bodyend="1856"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1ad6ac122724d7518bb964d931222f7c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==5 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==5)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==5 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==5)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1859" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1859" bodyend="1891"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a7be4a034fc3d21b5c5cf306774161183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==6 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==6)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==6 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==6)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1894" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1894" bodyend="1928"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1ad034887e655a7069f9d37dbaf10ee960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==7 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==7)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==7 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==7)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1931" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1931" bodyend="1968"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1af4a6536cea01dfbd6a7c8854d2ee7b65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==1 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==1)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==1 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==1)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1971" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1971" bodyend="1985"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a783b6d3c4adddcdb516c530d28c2fa64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==2 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==2)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==2 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==2)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1988" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1988" bodyend="2003"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a0f0f7cba089fb2e47ebf5ad51f6f40ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==3 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==3)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==3 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==3)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2006" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2006" bodyend="2023"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a8dc6421f970620d740aa2f84122cdf60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==4 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==4)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==4 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==4)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2026" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2026" bodyend="2044"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a4240288e6739204b701aef3c4c41cd94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==5 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==5)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==5 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==5)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2047" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2047" bodyend="2066"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a1fa37c396ec1d6363b31360eb6be61a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==6 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==6)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==6 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==6)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2069" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2069" bodyend="2089"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1af16fe5288088aa987ebbfa4f1fd795b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==7 &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==7)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==7 &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==7)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2092" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2092" bodyend="2114"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a3c9af38b8fc3bf845647b6e00cb7542e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy_contiguous</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy_contiguous</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy_contiguous</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Deep copy a value into a view. <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2119" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2119" bodyend="2127"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a150f3ef57dce9a1f9fab6a9a59f034d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy_contiguous</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy_contiguous</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy_contiguous</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2130" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2130" bodyend="2139"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a073030fd471e317b4dbebbbeab62e94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==1)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==1)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2142" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2142" bodyend="2157"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a33ab371fd62c78daca8bfdff9c619248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==2)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==2)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2160" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2160" bodyend="2184"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1aca710b89addbdc7e38544455c599c65f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==3)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==3)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2187" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2187" bodyend="2213"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a15cb7a844db653111c45d6af35f26713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==4)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==4)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2216" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2216" bodyend="2245"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a21813dbac0f959af69881363c4d989d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==5)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==5)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2248" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2248" bodyend="2279"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a606878b4a6709fa706ad83a6a02e9912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==6)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==6)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2282" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2282" bodyend="2315"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a6ad8348bbf6752113cb16d1724d80bc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TeamType</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const TeamType &amp;team, const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==7)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const TeamType &amp;</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==7)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2318" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2318" bodyend="2354"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a12942d1e972c2a8f1f670cbdcc087a63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==1)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==1)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2357" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2357" bodyend="2371"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a3086725694e13e800821379df9eb1ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==2)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==2)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2374" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2374" bodyend="2389"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1ad427a54f4515efc9c6dae9da31ef3df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==3)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==3)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2392" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2392" bodyend="2408"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1adea3ac818326cda099b9e875451a8d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==4)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==4)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2411" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2411" bodyend="2429"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1aa36768000c36b4c4cd1a08b457818c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==5)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==5)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2432" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2432" bodyend="2451"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a3ed69021f6c24e6fe3a6d8c0e3cccd6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==6)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==6)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2454" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2454" bodyend="2474"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a28d53e9316eb72d9595e044277c77e7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void KOKKOS_INLINE_FUNCTION</type>
        <definition>void KOKKOS_INLINE_FUNCTION Kokkos::Experimental::local_deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==7)&gt;::type *=nullptr)</argsstring>
        <name>local_deep_copy</name>
        <qualifiedname>Kokkos::Experimental::local_deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==7)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2477" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2477" bodyend="2498"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8hpp_1a3f846ad11d17cdf5970cb8ee9282f944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecSpace</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; ExecSpace &gt;</type>
        <definition>std::vector&lt; ExecSpace &gt; Kokkos::Experimental::partition_space</definition>
        <argsstring>(ExecSpace space, Args...)</argsstring>
        <name>partition_space</name>
        <qualifiedname>Kokkos::Experimental::partition_space</qualifiedname>
        <param>
          <type>ExecSpace</type>
          <declname>space</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" line="288" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" bodystart="288" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8hpp_1af561727adcb2b1deb8afd45954763926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecSpace</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; ExecSpace &gt;</type>
        <definition>std::vector&lt; ExecSpace &gt; Kokkos::Experimental::partition_space</definition>
        <argsstring>(ExecSpace space, std::vector&lt; T &gt; &amp;weights)</argsstring>
        <name>partition_space</name>
        <qualifiedname>Kokkos::Experimental::partition_space</qualifiedname>
        <param>
          <type>ExecSpace</type>
          <declname>space</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" line="303" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" bodystart="303" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___graph_8hpp_1a0515d65f92e0615e06074161fa329a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>PredecessorRefs</declname>
            <defname>PredecessorRefs</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Kokkos::Experimental::when_all</definition>
        <argsstring>(PredecessorRefs &amp;&amp;... arg_pred_refs)</argsstring>
        <name>when_all</name>
        <qualifiedname>Kokkos::Experimental::when_all</qualifiedname>
        <param>
          <type>PredecessorRefs &amp;&amp;...</type>
          <declname>arg_pred_refs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Graph.hpp" line="132" column="6" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Graph.hpp" bodystart="132" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___graph_8hpp_1af23e6747127b1e058475102fa8af57af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecutionSpace</type>
          </param>
          <param>
            <type>class Closure</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_experimental_1_1_graph" kindref="compound">Graph</ref>&lt; ExecutionSpace &gt;</type>
        <definition>Graph&lt; ExecutionSpace &gt; Kokkos::Experimental::create_graph</definition>
        <argsstring>(ExecutionSpace ex, Closure &amp;&amp;arg_closure)</argsstring>
        <name>create_graph</name>
        <qualifiedname>Kokkos::Experimental::create_graph</qualifiedname>
        <param>
          <type>ExecutionSpace</type>
          <declname>ex</declname>
        </param>
        <param>
          <type>Closure &amp;&amp;</type>
          <declname>arg_closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Graph.hpp" line="157" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Graph.hpp" bodystart="157" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___graph_8hpp_1a74659c4ca864d9b80201ff6ca406512c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecutionSpace</type>
            <defval>DefaultExecutionSpace</defval>
          </param>
          <param>
            <type>class Closure</type>
            <defval>Kokkos::Impl::DoNotExplicitlySpecifyThisTemplateParameter</defval>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_experimental_1_1_graph" kindref="compound">Graph</ref>&lt; ExecutionSpace &gt;</type>
        <definition>Graph&lt; ExecutionSpace &gt; Kokkos::Experimental::create_graph</definition>
        <argsstring>(Closure &amp;&amp;arg_closure)</argsstring>
        <name>create_graph</name>
        <qualifiedname>Kokkos::Experimental::create_graph</qualifiedname>
        <param>
          <type>Closure &amp;&amp;</type>
          <declname>arg_closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Graph.hpp" line="174" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Graph.hpp" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___half_8hpp_1acc74047c62a61208728de3d3e13e1992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION half_t</type>
        <definition>KOKKOS_INLINE_FUNCTION half_t Kokkos::Experimental::cast_to_half</definition>
        <argsstring>(float val)</argsstring>
        <name>cast_to_half</name>
        <qualifiedname>Kokkos::Experimental::cast_to_half</qualifiedname>
        <param>
          <type>float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" line="74" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___half_8hpp_1afca60b0979b90c132f1a4671e14a416b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION half_t</type>
        <definition>KOKKOS_INLINE_FUNCTION half_t Kokkos::Experimental::cast_to_half</definition>
        <argsstring>(bool val)</argsstring>
        <name>cast_to_half</name>
        <qualifiedname>Kokkos::Experimental::cast_to_half</qualifiedname>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" line="76" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___half_8hpp_1aa64444d1be119d901acee35e9db1687b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION half_t</type>
        <definition>KOKKOS_INLINE_FUNCTION half_t Kokkos::Experimental::cast_to_half</definition>
        <argsstring>(double val)</argsstring>
        <name>cast_to_half</name>
        <qualifiedname>Kokkos::Experimental::cast_to_half</qualifiedname>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" line="78" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___half_8hpp_1a05161774d77070d7f59502e9ca866240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION half_t</type>
        <definition>KOKKOS_INLINE_FUNCTION half_t Kokkos::Experimental::cast_to_half</definition>
        <argsstring>(short val)</argsstring>
        <name>cast_to_half</name>
        <qualifiedname>Kokkos::Experimental::cast_to_half</qualifiedname>
        <param>
          <type>short</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" line="80" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___half_8hpp_1a6f9956ae0a799a012338335d9e488e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION half_t</type>
        <definition>KOKKOS_INLINE_FUNCTION half_t Kokkos::Experimental::cast_to_half</definition>
        <argsstring>(unsigned short val)</argsstring>
        <name>cast_to_half</name>
        <qualifiedname>Kokkos::Experimental::cast_to_half</qualifiedname>
        <param>
          <type>unsigned short</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" line="82" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___half_8hpp_1afff4f0c708b009173fd2a444f6b3533d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION half_t</type>
        <definition>KOKKOS_INLINE_FUNCTION half_t Kokkos::Experimental::cast_to_half</definition>
        <argsstring>(int val)</argsstring>
        <name>cast_to_half</name>
        <qualifiedname>Kokkos::Experimental::cast_to_half</qualifiedname>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" line="84" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___half_8hpp_1a8dc5398d72fc222df0a0239df2fd78bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION half_t</type>
        <definition>KOKKOS_INLINE_FUNCTION half_t Kokkos::Experimental::cast_to_half</definition>
        <argsstring>(unsigned int val)</argsstring>
        <name>cast_to_half</name>
        <qualifiedname>Kokkos::Experimental::cast_to_half</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" line="86" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___half_8hpp_1afa318fd59042c9e3198ad435a30b3836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION half_t</type>
        <definition>KOKKOS_INLINE_FUNCTION half_t Kokkos::Experimental::cast_to_half</definition>
        <argsstring>(long val)</argsstring>
        <name>cast_to_half</name>
        <qualifiedname>Kokkos::Experimental::cast_to_half</qualifiedname>
        <param>
          <type>long</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" line="88" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___half_8hpp_1a2479611e0bb4369e403f6ab5b564ac06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION half_t</type>
        <definition>KOKKOS_INLINE_FUNCTION half_t Kokkos::Experimental::cast_to_half</definition>
        <argsstring>(unsigned long val)</argsstring>
        <name>cast_to_half</name>
        <qualifiedname>Kokkos::Experimental::cast_to_half</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" line="90" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___half_8hpp_1a68f9072ec2b678adf770c8ccc09a65ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION half_t</type>
        <definition>KOKKOS_INLINE_FUNCTION half_t Kokkos::Experimental::cast_to_half</definition>
        <argsstring>(long long val)</argsstring>
        <name>cast_to_half</name>
        <qualifiedname>Kokkos::Experimental::cast_to_half</qualifiedname>
        <param>
          <type>long long</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" line="92" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___half_8hpp_1abb30ccb1d86ce8d263fc38ddb597e314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION half_t</type>
        <definition>KOKKOS_INLINE_FUNCTION half_t Kokkos::Experimental::cast_to_half</definition>
        <argsstring>(unsigned long long val)</argsstring>
        <name>cast_to_half</name>
        <qualifiedname>Kokkos::Experimental::cast_to_half</qualifiedname>
        <param>
          <type>unsigned long long</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" line="94" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___half_8hpp_1a46db88463235539c5e633f1e85a55730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_same&lt; T, float &gt;::value||std::is_same&lt; T, bool &gt;::value||std::is_same&lt; T, double &gt;::value||std::is_same&lt; T, short &gt;::value||std::is_same&lt; T, unsigned short &gt;::value||std::is_same&lt; T, int &gt;::value||std::is_same&lt; T, unsigned int &gt;::value||std::is_same&lt; T, long &gt;::value||std::is_same&lt; T, unsigned long &gt;::value||std::is_same&lt; T, long long &gt;::value||std::is_same&lt; T, unsigned long long &gt;::value, T &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_same&lt; T, float &gt;::value||std::is_same&lt; T, bool &gt;::value|| std::is_same&lt; T, double &gt;::value||std::is_same&lt; T, short &gt;::value|| std::is_same&lt; T, unsigned short &gt;::value||std::is_same&lt; T, int &gt;::value|| std::is_same&lt; T, unsigned int &gt;::value||std::is_same&lt; T, long &gt;::value|| std::is_same&lt; T, unsigned long &gt;::value|| std::is_same&lt; T, long long &gt;::value|| std::is_same&lt; T, unsigned long long &gt;::value, T &gt; Kokkos::Experimental::cast_from_half</definition>
        <argsstring>(half_t val)</argsstring>
        <name>cast_from_half</name>
        <qualifiedname>Kokkos::Experimental::cast_from_half</qualifiedname>
        <param>
          <type>half_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" line="109" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Half.hpp" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a52132209a7de3ba925be69f18f40876c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION int</type>
        <definition>KOKKOS_INLINE_FUNCTION int Kokkos::Experimental::abs</definition>
        <argsstring>(int n)</argsstring>
        <name>abs</name>
        <qualifiedname>Kokkos::Experimental::abs</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="250" column="28" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a7334c11a9c07a7426812835d485c7bdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long</type>
        <definition>KOKKOS_INLINE_FUNCTION long Kokkos::Experimental::abs</definition>
        <argsstring>(long n)</argsstring>
        <name>abs</name>
        <qualifiedname>Kokkos::Experimental::abs</qualifiedname>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="254" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a65433a168ee7d19e9b0194e54c8b8a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long long</type>
        <definition>KOKKOS_INLINE_FUNCTION long long Kokkos::Experimental::abs</definition>
        <argsstring>(long long n)</argsstring>
        <name>abs</name>
        <qualifiedname>Kokkos::Experimental::abs</qualifiedname>
        <param>
          <type>long long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="258" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a36dcd2a8c9645358fcb641ff7f084d74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::abs</definition>
        <argsstring>(float x)</argsstring>
        <name>abs</name>
        <qualifiedname>Kokkos::Experimental::abs</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="262" column="30" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a531fb8695dc3228068ca249468852c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::abs</definition>
        <argsstring>(double x)</argsstring>
        <name>abs</name>
        <qualifiedname>Kokkos::Experimental::abs</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="266" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1adccceb372fe910ce39326406639aade7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::abs</definition>
        <argsstring>(long double x)</argsstring>
        <name>abs</name>
        <qualifiedname>Kokkos::Experimental::abs</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="271" column="36" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a476c0941a7472412ae65f5866296b5a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::fabs</definition>
        <argsstring>(float x)</argsstring>
        <name>fabs</name>
        <qualifiedname>Kokkos::Experimental::fabs</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="276" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a2dd4fec6c3f57fd7d7fd5f23285cbdb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::fabs</definition>
        <argsstring>(double x)</argsstring>
        <name>fabs</name>
        <qualifiedname>Kokkos::Experimental::fabs</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="276" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1abedb29859e70bcd19f0b3e44bbf10455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::fabs</definition>
        <argsstring>(long double x)</argsstring>
        <name>fabs</name>
        <qualifiedname>Kokkos::Experimental::fabs</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="276" column="210" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1af3904ff02a02b4e3c44f471a3c08ee52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::fabsf</definition>
        <argsstring>(float x)</argsstring>
        <name>fabsf</name>
        <qualifiedname>Kokkos::Experimental::fabsf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="276" column="297" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a9b7c2da45d81c5548fbd57267a0c9cfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::fabsl</definition>
        <argsstring>(long double x)</argsstring>
        <name>fabsl</name>
        <qualifiedname>Kokkos::Experimental::fabsl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="276" column="389" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a526eb9984b69f0e4caa3eff168902e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::fabs</definition>
        <argsstring>(T x)</argsstring>
        <name>fabs</name>
        <qualifiedname>Kokkos::Experimental::fabs</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="276" column="504" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a00e0c6f2afa9ad7c1bdfdd3f0c00468a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::fmod</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>fmod</name>
        <qualifiedname>Kokkos::Experimental::fmod</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="277" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ae9f2849acd5529ff026d428626e2c086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::fmod</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>fmod</name>
        <qualifiedname>Kokkos::Experimental::fmod</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="277" column="123" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a35f5704d004c0630344e12d8d161ec4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::fmod</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>fmod</name>
        <qualifiedname>Kokkos::Experimental::fmod</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="277" column="220" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ab9e0e992fc3d8106033a7f13a19542f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::fmodf</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>fmodf</name>
        <qualifiedname>Kokkos::Experimental::fmodf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="277" column="313" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a82be9fe4d1b4c62a11858dd634965e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::fmodl</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>fmodl</name>
        <qualifiedname>Kokkos::Experimental::fmodl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="277" column="410" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aab0eb7f173f2a07d966e82b88f583bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp;std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp; std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt; Kokkos::Experimental::fmod</definition>
        <argsstring>(T1 x, T2 y)</argsstring>
        <name>fmod</name>
        <qualifiedname>Kokkos::Experimental::fmod</qualifiedname>
        <param>
          <type>T1</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="277" column="534" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aa9a452b568a6c862eb60c9e09f8cf6a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::remainder</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>remainder</name>
        <qualifiedname>Kokkos::Experimental::remainder</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="278" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="278" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a91e7e50984ac1a4ddeadb9c59ba33904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::remainder</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>remainder</name>
        <qualifiedname>Kokkos::Experimental::remainder</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="278" column="138" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="278" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a6def470c577203ae96e0a02382d778ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::remainder</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>remainder</name>
        <qualifiedname>Kokkos::Experimental::remainder</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="278" column="250" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="278" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1adfbfad922d1473ec886495e16649226d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::remainderf</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>remainderf</name>
        <qualifiedname>Kokkos::Experimental::remainderf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="278" column="358" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="278" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a2aadad0979c14a7bdeb373e82d8aa7da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::remainderl</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>remainderl</name>
        <qualifiedname>Kokkos::Experimental::remainderl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="278" column="470" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="278" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ae12504d01a60ccf6ab680e5c49529db3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp;std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp; std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt; Kokkos::Experimental::remainder</definition>
        <argsstring>(T1 x, T2 y)</argsstring>
        <name>remainder</name>
        <qualifiedname>Kokkos::Experimental::remainder</qualifiedname>
        <param>
          <type>T1</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="278" column="609" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="278" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a35e7b774d72ccba2606807d0e8387204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::fmin</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>fmin</name>
        <qualifiedname>Kokkos::Experimental::fmin</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="279" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a97db41aa0c7c1409c396c2f25e7c723a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::fmin</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>fmin</name>
        <qualifiedname>Kokkos::Experimental::fmin</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="279" column="123" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ad4fa4187b958d1ae6a416a73ed6ce489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::fmin</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>fmin</name>
        <qualifiedname>Kokkos::Experimental::fmin</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="279" column="220" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1afe3faec602c07ab773719c02cc23903e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::fminf</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>fminf</name>
        <qualifiedname>Kokkos::Experimental::fminf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="279" column="313" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ab6c1f118497cd3404472dd1b2b1eec02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::fminl</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>fminl</name>
        <qualifiedname>Kokkos::Experimental::fminl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="279" column="410" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a921f90c44fadd7c153b20b2aa1626abb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp;std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp; std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt; Kokkos::Experimental::fmin</definition>
        <argsstring>(T1 x, T2 y)</argsstring>
        <name>fmin</name>
        <qualifiedname>Kokkos::Experimental::fmin</qualifiedname>
        <param>
          <type>T1</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="279" column="534" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a7373363bba8a32e05576982f7fa15620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::fmax</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>fmax</name>
        <qualifiedname>Kokkos::Experimental::fmax</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="280" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a24f4e619758c32c67ef63426d354c7b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::fmax</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>fmax</name>
        <qualifiedname>Kokkos::Experimental::fmax</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="280" column="123" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a57586070ee0cb1214ce9dddb4df9f6f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::fmax</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>fmax</name>
        <qualifiedname>Kokkos::Experimental::fmax</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="280" column="220" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a2e12527734fb8705c0380f6e686bd9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::fmaxf</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>fmaxf</name>
        <qualifiedname>Kokkos::Experimental::fmaxf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="280" column="313" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a7ff16fd529073ccd044c5ab538c3abfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::fmaxl</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>fmaxl</name>
        <qualifiedname>Kokkos::Experimental::fmaxl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="280" column="410" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a50dbea522233839c6730f02fee50f158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp;std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp; std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt; Kokkos::Experimental::fmax</definition>
        <argsstring>(T1 x, T2 y)</argsstring>
        <name>fmax</name>
        <qualifiedname>Kokkos::Experimental::fmax</qualifiedname>
        <param>
          <type>T1</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="280" column="534" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a4bafefc6b60d5245495842823c9c7588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::fdim</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>fdim</name>
        <qualifiedname>Kokkos::Experimental::fdim</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="281" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a3afbfce5a42688ccee2b6376beb208aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::fdim</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>fdim</name>
        <qualifiedname>Kokkos::Experimental::fdim</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="281" column="123" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a424a2a7f0b8c3fa7ad4900ea2b92da55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::fdim</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>fdim</name>
        <qualifiedname>Kokkos::Experimental::fdim</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="281" column="220" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a64e0db5ba858a0952fbfd8db1b97bbdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::fdimf</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>fdimf</name>
        <qualifiedname>Kokkos::Experimental::fdimf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="281" column="313" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a7044f6082a236c13eaac44de26e2c491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::fdiml</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>fdiml</name>
        <qualifiedname>Kokkos::Experimental::fdiml</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="281" column="410" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a4e2ef2864896626bd83fd386ead43616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp;std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp; std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt; Kokkos::Experimental::fdim</definition>
        <argsstring>(T1 x, T2 y)</argsstring>
        <name>fdim</name>
        <qualifiedname>Kokkos::Experimental::fdim</qualifiedname>
        <param>
          <type>T1</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="281" column="534" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a368ffd6c4148e32ea766a01b7f48cbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::nanf</definition>
        <argsstring>(char const *arg)</argsstring>
        <name>nanf</name>
        <qualifiedname>Kokkos::Experimental::nanf</qualifiedname>
        <param>
          <type>char const *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="283" column="30" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="283" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ab40ebeb8ec6faae69202871ef011f342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::nan</definition>
        <argsstring>(char const *arg)</argsstring>
        <name>nan</name>
        <qualifiedname>Kokkos::Experimental::nan</qualifiedname>
        <param>
          <type>char const *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="284" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="284" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a6cc04800e5a4d9b71e2ae6700c42ddb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::nanl</definition>
        <argsstring>(char const *arg)</argsstring>
        <name>nanl</name>
        <qualifiedname>Kokkos::Experimental::nanl</qualifiedname>
        <param>
          <type>char const *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="286" column="36" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="286" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a6f952e4b7c13230631fd69a439b23273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::pow</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>pow</name>
        <qualifiedname>Kokkos::Experimental::pow</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="297" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a4c8ebd23f35ba1a1ea1e9fad1fd3c91d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::pow</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>pow</name>
        <qualifiedname>Kokkos::Experimental::pow</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="297" column="120" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a9bd66e2267f4dca562b26fc0d3686cd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::pow</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>pow</name>
        <qualifiedname>Kokkos::Experimental::pow</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="297" column="214" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a074c8d7e1acb83c3c7a0261c8f6e03ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::powf</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>powf</name>
        <qualifiedname>Kokkos::Experimental::powf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="297" column="304" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a3572a5ecdf126a3ad357c1c0b18908fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::powl</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>powl</name>
        <qualifiedname>Kokkos::Experimental::powl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="297" column="398" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a72fa62b63b8315f17dff551f881a745e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp;std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp; std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt; Kokkos::Experimental::pow</definition>
        <argsstring>(T1 x, T2 y)</argsstring>
        <name>pow</name>
        <qualifiedname>Kokkos::Experimental::pow</qualifiedname>
        <param>
          <type>T1</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="297" column="519" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ab4a691b143e0094dadd2e79d89263f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::sqrt</definition>
        <argsstring>(float x)</argsstring>
        <name>sqrt</name>
        <qualifiedname>Kokkos::Experimental::sqrt</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="298" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="298" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a5614f01c918a2d94db850156c198c768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::sqrt</definition>
        <argsstring>(double x)</argsstring>
        <name>sqrt</name>
        <qualifiedname>Kokkos::Experimental::sqrt</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="298" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="298" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a51ea11aed904b85536d8d38b0aac7158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::sqrt</definition>
        <argsstring>(long double x)</argsstring>
        <name>sqrt</name>
        <qualifiedname>Kokkos::Experimental::sqrt</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="298" column="210" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="298" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ace911a36ac4f109db435a1ffe9597a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::sqrtf</definition>
        <argsstring>(float x)</argsstring>
        <name>sqrtf</name>
        <qualifiedname>Kokkos::Experimental::sqrtf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="298" column="297" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="298" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a12ff7ffe9df6bef3db1b03bda2ae930f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::sqrtl</definition>
        <argsstring>(long double x)</argsstring>
        <name>sqrtl</name>
        <qualifiedname>Kokkos::Experimental::sqrtl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="298" column="389" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="298" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a61799d2f8de9276c67e2505cfccac4f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::sqrt</definition>
        <argsstring>(T x)</argsstring>
        <name>sqrt</name>
        <qualifiedname>Kokkos::Experimental::sqrt</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="298" column="504" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="298" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a67a9f784d126c6ad5abb9554146adac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::cbrt</definition>
        <argsstring>(float x)</argsstring>
        <name>cbrt</name>
        <qualifiedname>Kokkos::Experimental::cbrt</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="299" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a91e7161fd689577e688455dae9301b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::cbrt</definition>
        <argsstring>(double x)</argsstring>
        <name>cbrt</name>
        <qualifiedname>Kokkos::Experimental::cbrt</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="299" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a41e0a3ec082cc50ee252b9b8f43a0ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::cbrt</definition>
        <argsstring>(long double x)</argsstring>
        <name>cbrt</name>
        <qualifiedname>Kokkos::Experimental::cbrt</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="299" column="210" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a94b8a4e61c51a2a8f99b4d084cfc77ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::cbrtf</definition>
        <argsstring>(float x)</argsstring>
        <name>cbrtf</name>
        <qualifiedname>Kokkos::Experimental::cbrtf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="299" column="297" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a1c4c0cb99bdad89335571ab0b5b657d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::cbrtl</definition>
        <argsstring>(long double x)</argsstring>
        <name>cbrtl</name>
        <qualifiedname>Kokkos::Experimental::cbrtl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="299" column="389" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ada20d3044febbbb660f1be242bbc16b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::cbrt</definition>
        <argsstring>(T x)</argsstring>
        <name>cbrt</name>
        <qualifiedname>Kokkos::Experimental::cbrt</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="299" column="504" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ada6bdcc73d40bcaf121a0263cec4ef57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::hypot</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>hypot</name>
        <qualifiedname>Kokkos::Experimental::hypot</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="300" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aec4796afb215541840c2188b9cea8f2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::hypot</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>hypot</name>
        <qualifiedname>Kokkos::Experimental::hypot</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="300" column="126" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a85f7e6e3aa0eaa464cff9149ab1fbc18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::hypot</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>hypot</name>
        <qualifiedname>Kokkos::Experimental::hypot</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="300" column="226" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a3a10bfef45fd0c1020e5e59a83adc42f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::hypotf</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>hypotf</name>
        <qualifiedname>Kokkos::Experimental::hypotf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="300" column="322" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a30a55cb881208b5aac5c93a97696e6e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::hypotl</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>hypotl</name>
        <qualifiedname>Kokkos::Experimental::hypotl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="300" column="422" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a42f7152aa628ce1c51333aad2c388776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp;std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp; std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt; Kokkos::Experimental::hypot</definition>
        <argsstring>(T1 x, T2 y)</argsstring>
        <name>hypot</name>
        <qualifiedname>Kokkos::Experimental::hypot</qualifiedname>
        <param>
          <type>T1</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="300" column="549" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aec5ae8f9fff35f64d851e95b800c38c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::exp</definition>
        <argsstring>(float x)</argsstring>
        <name>exp</name>
        <qualifiedname>Kokkos::Experimental::exp</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="302" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1adcadff02e5c6ad2ca7f54a1983d565db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::exp</definition>
        <argsstring>(double x)</argsstring>
        <name>exp</name>
        <qualifiedname>Kokkos::Experimental::exp</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="302" column="115" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a8b8652e5eb225e35e1d93093d2cb8035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::exp</definition>
        <argsstring>(long double x)</argsstring>
        <name>exp</name>
        <qualifiedname>Kokkos::Experimental::exp</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="302" column="204" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a2607e7a9f725c4cf5c82154359346821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::expf</definition>
        <argsstring>(float x)</argsstring>
        <name>expf</name>
        <qualifiedname>Kokkos::Experimental::expf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="302" column="288" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1abe0805ba31f82154c6b32d36c786add5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::expl</definition>
        <argsstring>(long double x)</argsstring>
        <name>expl</name>
        <qualifiedname>Kokkos::Experimental::expl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="302" column="377" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ad4c8788e4894ac2b0523dc145ca019bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::exp</definition>
        <argsstring>(T x)</argsstring>
        <name>exp</name>
        <qualifiedname>Kokkos::Experimental::exp</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="302" column="489" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ae4de0be5628b5536e2d812fb4c4a144f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::exp2</definition>
        <argsstring>(float x)</argsstring>
        <name>exp2</name>
        <qualifiedname>Kokkos::Experimental::exp2</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="303" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="303" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1abc55fa39d3b536e208755cba87c02c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::exp2</definition>
        <argsstring>(double x)</argsstring>
        <name>exp2</name>
        <qualifiedname>Kokkos::Experimental::exp2</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="303" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="303" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a8b7ffb8c08a1d06453a9185a080d06e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::exp2</definition>
        <argsstring>(long double x)</argsstring>
        <name>exp2</name>
        <qualifiedname>Kokkos::Experimental::exp2</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="303" column="210" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="303" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a45529c293294ac47cab136010b7c2808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::exp2f</definition>
        <argsstring>(float x)</argsstring>
        <name>exp2f</name>
        <qualifiedname>Kokkos::Experimental::exp2f</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="303" column="297" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="303" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1afbab8824bfceba21fcd6accfd66909b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::exp2l</definition>
        <argsstring>(long double x)</argsstring>
        <name>exp2l</name>
        <qualifiedname>Kokkos::Experimental::exp2l</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="303" column="389" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="303" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ae3f7a8dc9e6fc8a77c7fec6303701d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::exp2</definition>
        <argsstring>(T x)</argsstring>
        <name>exp2</name>
        <qualifiedname>Kokkos::Experimental::exp2</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="303" column="504" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="303" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aa734660e3a4ddae0b3376a3690826c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::expm1</definition>
        <argsstring>(float x)</argsstring>
        <name>expm1</name>
        <qualifiedname>Kokkos::Experimental::expm1</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="304" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1afb2dac74709c61955bedfa82f9d73dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::expm1</definition>
        <argsstring>(double x)</argsstring>
        <name>expm1</name>
        <qualifiedname>Kokkos::Experimental::expm1</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="304" column="121" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ad1c5e88dd0de4d645675d7d6b6f4c242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::expm1</definition>
        <argsstring>(long double x)</argsstring>
        <name>expm1</name>
        <qualifiedname>Kokkos::Experimental::expm1</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="304" column="216" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ab2dccb9b4162ce98defb8b40517e9fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::expm1f</definition>
        <argsstring>(float x)</argsstring>
        <name>expm1f</name>
        <qualifiedname>Kokkos::Experimental::expm1f</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="304" column="306" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1acfefd72c01af6f0a73795cddb31c76eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::expm1l</definition>
        <argsstring>(long double x)</argsstring>
        <name>expm1l</name>
        <qualifiedname>Kokkos::Experimental::expm1l</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="304" column="401" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a0733bd3673028a46f9202fe202441ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::expm1</definition>
        <argsstring>(T x)</argsstring>
        <name>expm1</name>
        <qualifiedname>Kokkos::Experimental::expm1</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="304" column="519" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a9d98849cf31771d4cb1acf31bad02d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::log</definition>
        <argsstring>(float x)</argsstring>
        <name>log</name>
        <qualifiedname>Kokkos::Experimental::log</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="305" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="305" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ae44a290b2e600b93620b9393a5df44f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::log</definition>
        <argsstring>(double x)</argsstring>
        <name>log</name>
        <qualifiedname>Kokkos::Experimental::log</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="305" column="115" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="305" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1abbed21e583e8f02da4c5b631b592dc4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::log</definition>
        <argsstring>(long double x)</argsstring>
        <name>log</name>
        <qualifiedname>Kokkos::Experimental::log</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="305" column="204" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="305" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a2b7486bd5db43eaa2a616a7354820729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::logf</definition>
        <argsstring>(float x)</argsstring>
        <name>logf</name>
        <qualifiedname>Kokkos::Experimental::logf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="305" column="288" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="305" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1abf152e4b0a338c09eeacce42b17e147b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::logl</definition>
        <argsstring>(long double x)</argsstring>
        <name>logl</name>
        <qualifiedname>Kokkos::Experimental::logl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="305" column="377" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="305" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a7ef5aa8db677243ede88e0fe3892ee16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::log</definition>
        <argsstring>(T x)</argsstring>
        <name>log</name>
        <qualifiedname>Kokkos::Experimental::log</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="305" column="489" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="305" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aaa0275ae5b956fbdda1d25cebc3d8230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::log10</definition>
        <argsstring>(float x)</argsstring>
        <name>log10</name>
        <qualifiedname>Kokkos::Experimental::log10</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="306" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a88f86fbbd35098b81b073387c71e8df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::log10</definition>
        <argsstring>(double x)</argsstring>
        <name>log10</name>
        <qualifiedname>Kokkos::Experimental::log10</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="306" column="121" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a9755fcb2b4ff2c371707bbbe43863051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::log10</definition>
        <argsstring>(long double x)</argsstring>
        <name>log10</name>
        <qualifiedname>Kokkos::Experimental::log10</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="306" column="216" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a64e451ae416218f7ef3c406a21c3078b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::log10f</definition>
        <argsstring>(float x)</argsstring>
        <name>log10f</name>
        <qualifiedname>Kokkos::Experimental::log10f</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="306" column="306" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ab4daa4a70ba84649950c12f80ed0ed1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::log10l</definition>
        <argsstring>(long double x)</argsstring>
        <name>log10l</name>
        <qualifiedname>Kokkos::Experimental::log10l</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="306" column="401" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a9419b59df5507c65649055fa59ba59fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::log10</definition>
        <argsstring>(T x)</argsstring>
        <name>log10</name>
        <qualifiedname>Kokkos::Experimental::log10</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="306" column="519" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1acf0bc6138ff6319b87196c42e59a2c0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::log2</definition>
        <argsstring>(float x)</argsstring>
        <name>log2</name>
        <qualifiedname>Kokkos::Experimental::log2</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="307" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="307" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a21bbc97e9cd55bbd535bf06335a6c708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::log2</definition>
        <argsstring>(double x)</argsstring>
        <name>log2</name>
        <qualifiedname>Kokkos::Experimental::log2</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="307" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="307" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a4073c9df3f9da61331d6fee0c8ab6ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::log2</definition>
        <argsstring>(long double x)</argsstring>
        <name>log2</name>
        <qualifiedname>Kokkos::Experimental::log2</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="307" column="210" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="307" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a7b5a26a63ce5ec93558c5cb82b1224c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::log2f</definition>
        <argsstring>(float x)</argsstring>
        <name>log2f</name>
        <qualifiedname>Kokkos::Experimental::log2f</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="307" column="297" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="307" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a5934e7acd24976312c516c638035624c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::log2l</definition>
        <argsstring>(long double x)</argsstring>
        <name>log2l</name>
        <qualifiedname>Kokkos::Experimental::log2l</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="307" column="389" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="307" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aed4c361547ddde0ab5d18929642cdec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::log2</definition>
        <argsstring>(T x)</argsstring>
        <name>log2</name>
        <qualifiedname>Kokkos::Experimental::log2</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="307" column="504" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="307" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a70f079145b78a090879b28e95456c8d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::log1p</definition>
        <argsstring>(float x)</argsstring>
        <name>log1p</name>
        <qualifiedname>Kokkos::Experimental::log1p</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="308" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a301fe1803cfcd4dbe38c9445e9c57352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::log1p</definition>
        <argsstring>(double x)</argsstring>
        <name>log1p</name>
        <qualifiedname>Kokkos::Experimental::log1p</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="308" column="121" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a91ee66369494d4e432b1682025da6198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::log1p</definition>
        <argsstring>(long double x)</argsstring>
        <name>log1p</name>
        <qualifiedname>Kokkos::Experimental::log1p</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="308" column="216" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a8c76230772e9a70742a487465590b9b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::log1pf</definition>
        <argsstring>(float x)</argsstring>
        <name>log1pf</name>
        <qualifiedname>Kokkos::Experimental::log1pf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="308" column="306" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a0ff5171d1c4f160c1b95a09c6e331c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::log1pl</definition>
        <argsstring>(long double x)</argsstring>
        <name>log1pl</name>
        <qualifiedname>Kokkos::Experimental::log1pl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="308" column="401" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a18495126b887590a019d044523a9fce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::log1p</definition>
        <argsstring>(T x)</argsstring>
        <name>log1p</name>
        <qualifiedname>Kokkos::Experimental::log1p</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="308" column="519" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a9dea2febf9faadb6c9da3829ced601c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::sin</definition>
        <argsstring>(float x)</argsstring>
        <name>sin</name>
        <qualifiedname>Kokkos::Experimental::sin</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="310" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="310" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a67a3d8dfb7a89c57c3d296560fc28db7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::sin</definition>
        <argsstring>(double x)</argsstring>
        <name>sin</name>
        <qualifiedname>Kokkos::Experimental::sin</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="310" column="115" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="310" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ae5d970e1cc09c28ef4a89e1cade947ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::sin</definition>
        <argsstring>(long double x)</argsstring>
        <name>sin</name>
        <qualifiedname>Kokkos::Experimental::sin</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="310" column="204" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="310" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aaf0d509cf0e4004b964e6cb10c477e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::sinf</definition>
        <argsstring>(float x)</argsstring>
        <name>sinf</name>
        <qualifiedname>Kokkos::Experimental::sinf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="310" column="288" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="310" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ab65081dda9a9d7289b4dca211aa5df24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::sinl</definition>
        <argsstring>(long double x)</argsstring>
        <name>sinl</name>
        <qualifiedname>Kokkos::Experimental::sinl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="310" column="377" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="310" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aed8f486caca6365d4de575c640da2fc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::sin</definition>
        <argsstring>(T x)</argsstring>
        <name>sin</name>
        <qualifiedname>Kokkos::Experimental::sin</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="310" column="489" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="310" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a4e44562f9b9b536495966391a95592f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::cos</definition>
        <argsstring>(float x)</argsstring>
        <name>cos</name>
        <qualifiedname>Kokkos::Experimental::cos</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="311" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="311" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a172931f4e97c32476436f81feb6652b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::cos</definition>
        <argsstring>(double x)</argsstring>
        <name>cos</name>
        <qualifiedname>Kokkos::Experimental::cos</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="311" column="115" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="311" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1af5b55322cfc3aa4d98e34e778ca7cd75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::cos</definition>
        <argsstring>(long double x)</argsstring>
        <name>cos</name>
        <qualifiedname>Kokkos::Experimental::cos</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="311" column="204" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="311" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a26a658fe45b4b4f1a949e4c87dce16be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::cosf</definition>
        <argsstring>(float x)</argsstring>
        <name>cosf</name>
        <qualifiedname>Kokkos::Experimental::cosf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="311" column="288" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="311" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1acfe663195932018c619b63e762200771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::cosl</definition>
        <argsstring>(long double x)</argsstring>
        <name>cosl</name>
        <qualifiedname>Kokkos::Experimental::cosl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="311" column="377" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="311" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a1b1b7dd86ae448702b0074c3b6bf6b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::cos</definition>
        <argsstring>(T x)</argsstring>
        <name>cos</name>
        <qualifiedname>Kokkos::Experimental::cos</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="311" column="489" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="311" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a05c754b643b4a1e36d47f10b3ee5d038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::tan</definition>
        <argsstring>(float x)</argsstring>
        <name>tan</name>
        <qualifiedname>Kokkos::Experimental::tan</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="312" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="312" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a1093a5d8f9ab1688187629918b5e598d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::tan</definition>
        <argsstring>(double x)</argsstring>
        <name>tan</name>
        <qualifiedname>Kokkos::Experimental::tan</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="312" column="115" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="312" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ac1e63692600db4478149e59871ceeeba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::tan</definition>
        <argsstring>(long double x)</argsstring>
        <name>tan</name>
        <qualifiedname>Kokkos::Experimental::tan</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="312" column="204" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="312" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a5bac5523ca7d7d862dffbea7bdf87a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::tanf</definition>
        <argsstring>(float x)</argsstring>
        <name>tanf</name>
        <qualifiedname>Kokkos::Experimental::tanf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="312" column="288" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="312" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a558b4b216f3351652f7edd8d3e6842a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::tanl</definition>
        <argsstring>(long double x)</argsstring>
        <name>tanl</name>
        <qualifiedname>Kokkos::Experimental::tanl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="312" column="377" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="312" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ac4e7b4bd17a85903327336bf3567ac30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::tan</definition>
        <argsstring>(T x)</argsstring>
        <name>tan</name>
        <qualifiedname>Kokkos::Experimental::tan</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="312" column="489" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="312" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1abfd5073d95da649d37a10455c63fa3fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::asin</definition>
        <argsstring>(float x)</argsstring>
        <name>asin</name>
        <qualifiedname>Kokkos::Experimental::asin</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="313" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1abe5ee5e29d0bf4410a16a0e0ee11989f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::asin</definition>
        <argsstring>(double x)</argsstring>
        <name>asin</name>
        <qualifiedname>Kokkos::Experimental::asin</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="313" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1afaab175f9f3328d86bdf7ffb98171d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::asin</definition>
        <argsstring>(long double x)</argsstring>
        <name>asin</name>
        <qualifiedname>Kokkos::Experimental::asin</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="313" column="210" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a3900cd39ff4ff0e90e911d2bcc1e3bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::asinf</definition>
        <argsstring>(float x)</argsstring>
        <name>asinf</name>
        <qualifiedname>Kokkos::Experimental::asinf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="313" column="297" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a50caed114e055545df1cc96bb5a6c979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::asinl</definition>
        <argsstring>(long double x)</argsstring>
        <name>asinl</name>
        <qualifiedname>Kokkos::Experimental::asinl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="313" column="389" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a42896b10a9cd3c205e3e3c0edef00b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::asin</definition>
        <argsstring>(T x)</argsstring>
        <name>asin</name>
        <qualifiedname>Kokkos::Experimental::asin</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="313" column="504" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a32ad8b7d9f9183341ff473f4a0dd02c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::acos</definition>
        <argsstring>(float x)</argsstring>
        <name>acos</name>
        <qualifiedname>Kokkos::Experimental::acos</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="314" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="314" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ab02aa40bf30baa36d6eefee91f57e726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::acos</definition>
        <argsstring>(double x)</argsstring>
        <name>acos</name>
        <qualifiedname>Kokkos::Experimental::acos</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="314" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="314" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1acd43fb6adb2048ba4deb1b68930b41e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::acos</definition>
        <argsstring>(long double x)</argsstring>
        <name>acos</name>
        <qualifiedname>Kokkos::Experimental::acos</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="314" column="210" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="314" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1af98822200e9e4686f1336e3d2d002f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::acosf</definition>
        <argsstring>(float x)</argsstring>
        <name>acosf</name>
        <qualifiedname>Kokkos::Experimental::acosf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="314" column="297" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="314" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a2d29ea92c2c4b51f3cddc8610585f99e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::acosl</definition>
        <argsstring>(long double x)</argsstring>
        <name>acosl</name>
        <qualifiedname>Kokkos::Experimental::acosl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="314" column="389" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="314" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a929f4ac4ddd07e535ec1a4fce73ff202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::acos</definition>
        <argsstring>(T x)</argsstring>
        <name>acos</name>
        <qualifiedname>Kokkos::Experimental::acos</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="314" column="504" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="314" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ac2eea03cfd885ba791ffd35f265140c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::atan</definition>
        <argsstring>(float x)</argsstring>
        <name>atan</name>
        <qualifiedname>Kokkos::Experimental::atan</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="315" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ae490683ecff0fea1aeef8cb856ab974f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::atan</definition>
        <argsstring>(double x)</argsstring>
        <name>atan</name>
        <qualifiedname>Kokkos::Experimental::atan</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="315" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1abf6f1c00b34b5567fee675fa08aa5007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::atan</definition>
        <argsstring>(long double x)</argsstring>
        <name>atan</name>
        <qualifiedname>Kokkos::Experimental::atan</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="315" column="210" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a67c28f30204d072bd25383cd821cb2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::atanf</definition>
        <argsstring>(float x)</argsstring>
        <name>atanf</name>
        <qualifiedname>Kokkos::Experimental::atanf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="315" column="297" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aeff8686810498bdf2438e09cf456bf4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::atanl</definition>
        <argsstring>(long double x)</argsstring>
        <name>atanl</name>
        <qualifiedname>Kokkos::Experimental::atanl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="315" column="389" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aa41f05d33e165b23c4b89c8c295c8fa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::atan</definition>
        <argsstring>(T x)</argsstring>
        <name>atan</name>
        <qualifiedname>Kokkos::Experimental::atan</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="315" column="504" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aadd1a2e00dca42c2af47a4c9a145408b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::atan2</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>atan2</name>
        <qualifiedname>Kokkos::Experimental::atan2</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="316" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a1d22e61d8e7c281af60982fe3a37e091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::atan2</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>atan2</name>
        <qualifiedname>Kokkos::Experimental::atan2</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="316" column="126" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a57c3e8385df42887ca04c151f490d81e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::atan2</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>atan2</name>
        <qualifiedname>Kokkos::Experimental::atan2</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="316" column="226" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aa8720283cc1fc70809591ce4bedb3448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::atan2f</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>atan2f</name>
        <qualifiedname>Kokkos::Experimental::atan2f</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="316" column="322" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a8860b33327e7d7fd5026a8dcd9cb80ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::atan2l</definition>
        <argsstring>(long double x, long double y)</argsstring>
        <name>atan2l</name>
        <qualifiedname>Kokkos::Experimental::atan2l</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="316" column="422" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a6aa42f20559f2eb3b415d2d5329b887e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp;std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_arithmetic&lt; T1 &gt;::value &amp;&amp; std::is_arithmetic&lt; T2 &gt;::value, Kokkos::Impl::promote_2_t&lt; T1, T2 &gt; &gt; Kokkos::Experimental::atan2</definition>
        <argsstring>(T1 x, T2 y)</argsstring>
        <name>atan2</name>
        <qualifiedname>Kokkos::Experimental::atan2</qualifiedname>
        <param>
          <type>T1</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="316" column="549" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a34f19c59e8b79ad4cd27c6750a59c433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::sinh</definition>
        <argsstring>(float x)</argsstring>
        <name>sinh</name>
        <qualifiedname>Kokkos::Experimental::sinh</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="318" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a0ecdc05bd850bbe7c28dfc1c8510ff4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::sinh</definition>
        <argsstring>(double x)</argsstring>
        <name>sinh</name>
        <qualifiedname>Kokkos::Experimental::sinh</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="318" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1adcafc4ea7aec8f4d0ad424d24253acc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::sinh</definition>
        <argsstring>(long double x)</argsstring>
        <name>sinh</name>
        <qualifiedname>Kokkos::Experimental::sinh</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="318" column="210" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a2a5a571254fb51e7e23bd522d586b4f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::sinhf</definition>
        <argsstring>(float x)</argsstring>
        <name>sinhf</name>
        <qualifiedname>Kokkos::Experimental::sinhf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="318" column="297" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a047b33c08c6c44215b6d0bca2534808a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::sinhl</definition>
        <argsstring>(long double x)</argsstring>
        <name>sinhl</name>
        <qualifiedname>Kokkos::Experimental::sinhl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="318" column="389" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a839f7d195e3b845bd3e53df692430820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::sinh</definition>
        <argsstring>(T x)</argsstring>
        <name>sinh</name>
        <qualifiedname>Kokkos::Experimental::sinh</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="318" column="504" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a3803a9a60640b3f54137106ab33e4b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::cosh</definition>
        <argsstring>(float x)</argsstring>
        <name>cosh</name>
        <qualifiedname>Kokkos::Experimental::cosh</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="319" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="319" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a7d77e611ba518383710ac652ebb8821b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::cosh</definition>
        <argsstring>(double x)</argsstring>
        <name>cosh</name>
        <qualifiedname>Kokkos::Experimental::cosh</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="319" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="319" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1abb4d72bbcffc0b175ae9f0da8ed84ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::cosh</definition>
        <argsstring>(long double x)</argsstring>
        <name>cosh</name>
        <qualifiedname>Kokkos::Experimental::cosh</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="319" column="210" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="319" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a72c2f292edfb950f4f4651d86402e93d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::coshf</definition>
        <argsstring>(float x)</argsstring>
        <name>coshf</name>
        <qualifiedname>Kokkos::Experimental::coshf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="319" column="297" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="319" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ab85515e949310f5444f0467d90ec93e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::coshl</definition>
        <argsstring>(long double x)</argsstring>
        <name>coshl</name>
        <qualifiedname>Kokkos::Experimental::coshl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="319" column="389" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="319" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1adf71208f887a3d4b1eb3e11edf025153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::cosh</definition>
        <argsstring>(T x)</argsstring>
        <name>cosh</name>
        <qualifiedname>Kokkos::Experimental::cosh</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="319" column="504" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="319" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aa8cb733abda32ccf286fc7678fdd92a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::tanh</definition>
        <argsstring>(float x)</argsstring>
        <name>tanh</name>
        <qualifiedname>Kokkos::Experimental::tanh</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="320" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a16fa6301c41fbd5c3ef74643655d7237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::tanh</definition>
        <argsstring>(double x)</argsstring>
        <name>tanh</name>
        <qualifiedname>Kokkos::Experimental::tanh</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="320" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ade3b12283d877d2cb7384e030724251c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::tanh</definition>
        <argsstring>(long double x)</argsstring>
        <name>tanh</name>
        <qualifiedname>Kokkos::Experimental::tanh</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="320" column="210" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a180c78ccaafc060ee2c1e14fa0a002cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::tanhf</definition>
        <argsstring>(float x)</argsstring>
        <name>tanhf</name>
        <qualifiedname>Kokkos::Experimental::tanhf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="320" column="297" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a616780370e9526f0d05e61692899505a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::tanhl</definition>
        <argsstring>(long double x)</argsstring>
        <name>tanhl</name>
        <qualifiedname>Kokkos::Experimental::tanhl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="320" column="389" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a63f3e8dc0377ef5ddcb79f7985a07c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::tanh</definition>
        <argsstring>(T x)</argsstring>
        <name>tanh</name>
        <qualifiedname>Kokkos::Experimental::tanh</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="320" column="504" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1abaa729063120e1078525284faf60d040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::asinh</definition>
        <argsstring>(float x)</argsstring>
        <name>asinh</name>
        <qualifiedname>Kokkos::Experimental::asinh</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="321" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="321" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a8b4f4276d97360986f2e22831bb681a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::asinh</definition>
        <argsstring>(double x)</argsstring>
        <name>asinh</name>
        <qualifiedname>Kokkos::Experimental::asinh</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="321" column="121" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="321" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ac62b89407f6517fd6fa8ef026b582381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::asinh</definition>
        <argsstring>(long double x)</argsstring>
        <name>asinh</name>
        <qualifiedname>Kokkos::Experimental::asinh</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="321" column="216" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="321" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ae414cfeb38902b806a567e3385bd752e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::asinhf</definition>
        <argsstring>(float x)</argsstring>
        <name>asinhf</name>
        <qualifiedname>Kokkos::Experimental::asinhf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="321" column="306" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="321" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a03b4d0a565c9ac2eff491964aff8a1d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::asinhl</definition>
        <argsstring>(long double x)</argsstring>
        <name>asinhl</name>
        <qualifiedname>Kokkos::Experimental::asinhl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="321" column="401" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="321" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1af6f8fdbe473fab34bfac7fdef0600e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::asinh</definition>
        <argsstring>(T x)</argsstring>
        <name>asinh</name>
        <qualifiedname>Kokkos::Experimental::asinh</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="321" column="519" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="321" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a21704b6141ca11276ea9d1280da3c665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::acosh</definition>
        <argsstring>(float x)</argsstring>
        <name>acosh</name>
        <qualifiedname>Kokkos::Experimental::acosh</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="322" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a5416d47e615845bf6dd236ec59bd7685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::acosh</definition>
        <argsstring>(double x)</argsstring>
        <name>acosh</name>
        <qualifiedname>Kokkos::Experimental::acosh</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="322" column="121" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a53afb0a85c676fa181c02ab06d519573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::acosh</definition>
        <argsstring>(long double x)</argsstring>
        <name>acosh</name>
        <qualifiedname>Kokkos::Experimental::acosh</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="322" column="216" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a30d7037750a7e9f7b686213681333f1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::acoshf</definition>
        <argsstring>(float x)</argsstring>
        <name>acoshf</name>
        <qualifiedname>Kokkos::Experimental::acoshf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="322" column="306" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a7434172c776bad86f9a51f33c499e651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::acoshl</definition>
        <argsstring>(long double x)</argsstring>
        <name>acoshl</name>
        <qualifiedname>Kokkos::Experimental::acoshl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="322" column="401" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aafc0e884d5c447d009cd9f7cb0b3616c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::acosh</definition>
        <argsstring>(T x)</argsstring>
        <name>acosh</name>
        <qualifiedname>Kokkos::Experimental::acosh</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="322" column="519" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aeac546cacc9b276a3de716c3ddcf8a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::atanh</definition>
        <argsstring>(float x)</argsstring>
        <name>atanh</name>
        <qualifiedname>Kokkos::Experimental::atanh</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="323" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="323" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a9b62842614fda1d1e0f8ae1f27351b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::atanh</definition>
        <argsstring>(double x)</argsstring>
        <name>atanh</name>
        <qualifiedname>Kokkos::Experimental::atanh</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="323" column="121" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="323" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a09d5c87289f73ca2379573861f0500fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::atanh</definition>
        <argsstring>(long double x)</argsstring>
        <name>atanh</name>
        <qualifiedname>Kokkos::Experimental::atanh</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="323" column="216" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="323" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ae293ee8fbee05c41e53fa7abe695e2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::atanhf</definition>
        <argsstring>(float x)</argsstring>
        <name>atanhf</name>
        <qualifiedname>Kokkos::Experimental::atanhf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="323" column="306" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="323" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a6fde2e2c5d6af088ff7e2557f18ba5a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::atanhl</definition>
        <argsstring>(long double x)</argsstring>
        <name>atanhl</name>
        <qualifiedname>Kokkos::Experimental::atanhl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="323" column="401" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="323" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a93a5badce5d7a9cfa70adc7e3c956fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::atanh</definition>
        <argsstring>(T x)</argsstring>
        <name>atanh</name>
        <qualifiedname>Kokkos::Experimental::atanh</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="323" column="519" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="323" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a1421640e6996e8e18802e66ec0821258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::erf</definition>
        <argsstring>(float x)</argsstring>
        <name>erf</name>
        <qualifiedname>Kokkos::Experimental::erf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="325" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="325" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a4576beaa1b6f51774f42a4fd5b677275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::erf</definition>
        <argsstring>(double x)</argsstring>
        <name>erf</name>
        <qualifiedname>Kokkos::Experimental::erf</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="325" column="115" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="325" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ab6adf6315bc6e15646d90d47c2de7bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::erf</definition>
        <argsstring>(long double x)</argsstring>
        <name>erf</name>
        <qualifiedname>Kokkos::Experimental::erf</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="325" column="204" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="325" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a47c1f267e3a551b8f5ad1c27de92f353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::erff</definition>
        <argsstring>(float x)</argsstring>
        <name>erff</name>
        <qualifiedname>Kokkos::Experimental::erff</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="325" column="288" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="325" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1af9da0dc43fbceb850a371a1250e1d5b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::erfl</definition>
        <argsstring>(long double x)</argsstring>
        <name>erfl</name>
        <qualifiedname>Kokkos::Experimental::erfl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="325" column="377" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="325" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ac38ee8606f2e04fc0de4c78f180879ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::erf</definition>
        <argsstring>(T x)</argsstring>
        <name>erf</name>
        <qualifiedname>Kokkos::Experimental::erf</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="325" column="489" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="325" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1abfb56ec49e81cd1d8917a99fdb690b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::erfc</definition>
        <argsstring>(float x)</argsstring>
        <name>erfc</name>
        <qualifiedname>Kokkos::Experimental::erfc</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="326" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a9a2cfc7e8266b11d1a9a6df943a5a96e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::erfc</definition>
        <argsstring>(double x)</argsstring>
        <name>erfc</name>
        <qualifiedname>Kokkos::Experimental::erfc</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="326" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a8622a8ec795d5d007962e21027e048b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::erfc</definition>
        <argsstring>(long double x)</argsstring>
        <name>erfc</name>
        <qualifiedname>Kokkos::Experimental::erfc</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="326" column="210" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1abb706552ff27e48e287fbc3fd37679ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::erfcf</definition>
        <argsstring>(float x)</argsstring>
        <name>erfcf</name>
        <qualifiedname>Kokkos::Experimental::erfcf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="326" column="297" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a7f7245e37457538303cc5a4079b48f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::erfcl</definition>
        <argsstring>(long double x)</argsstring>
        <name>erfcl</name>
        <qualifiedname>Kokkos::Experimental::erfcl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="326" column="389" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a51c9ebb4496e43a4f87123917cb7112a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::erfc</definition>
        <argsstring>(T x)</argsstring>
        <name>erfc</name>
        <qualifiedname>Kokkos::Experimental::erfc</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="326" column="504" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1acb8a9da28ff212cd58c6b83d5abc47dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::tgamma</definition>
        <argsstring>(float x)</argsstring>
        <name>tgamma</name>
        <qualifiedname>Kokkos::Experimental::tgamma</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="327" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="327" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a86abf914fc131d99f59f9b0c336af109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::tgamma</definition>
        <argsstring>(double x)</argsstring>
        <name>tgamma</name>
        <qualifiedname>Kokkos::Experimental::tgamma</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="327" column="124" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="327" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ae97d4f980435c97f8a91e6fef443aa68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::tgamma</definition>
        <argsstring>(long double x)</argsstring>
        <name>tgamma</name>
        <qualifiedname>Kokkos::Experimental::tgamma</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="327" column="222" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="327" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a8e84cd179bb35d60b2859c111e23894a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::tgammaf</definition>
        <argsstring>(float x)</argsstring>
        <name>tgammaf</name>
        <qualifiedname>Kokkos::Experimental::tgammaf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="327" column="315" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="327" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1afef1161a7876eb1605c61994979582d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::tgammal</definition>
        <argsstring>(long double x)</argsstring>
        <name>tgammal</name>
        <qualifiedname>Kokkos::Experimental::tgammal</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="327" column="413" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="327" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a8896ef2a5b1b6355080ec6f32509885e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::tgamma</definition>
        <argsstring>(T x)</argsstring>
        <name>tgamma</name>
        <qualifiedname>Kokkos::Experimental::tgamma</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="327" column="534" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="327" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a2bf36de3d7574ebebd3e2769b9fa6169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::lgamma</definition>
        <argsstring>(float x)</argsstring>
        <name>lgamma</name>
        <qualifiedname>Kokkos::Experimental::lgamma</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="328" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a775819b736508686bff66e1872a1eacd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::lgamma</definition>
        <argsstring>(double x)</argsstring>
        <name>lgamma</name>
        <qualifiedname>Kokkos::Experimental::lgamma</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="328" column="124" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aa2c40e2d823d110cf4581efda9650ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::lgamma</definition>
        <argsstring>(long double x)</argsstring>
        <name>lgamma</name>
        <qualifiedname>Kokkos::Experimental::lgamma</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="328" column="222" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aaf9982b0633b6c59279ec2fc4a940cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::lgammaf</definition>
        <argsstring>(float x)</argsstring>
        <name>lgammaf</name>
        <qualifiedname>Kokkos::Experimental::lgammaf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="328" column="315" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a009554c0863a5f12d8f9c5b436915721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::lgammal</definition>
        <argsstring>(long double x)</argsstring>
        <name>lgammal</name>
        <qualifiedname>Kokkos::Experimental::lgammal</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="328" column="413" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1aa4ada237f48d1866ba991536c3d0e059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::lgamma</definition>
        <argsstring>(T x)</argsstring>
        <name>lgamma</name>
        <qualifiedname>Kokkos::Experimental::lgamma</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="328" column="534" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a0227f30e91e7915aff5a7ba4f777aa2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::ceil</definition>
        <argsstring>(float x)</argsstring>
        <name>ceil</name>
        <qualifiedname>Kokkos::Experimental::ceil</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="330" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="330" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a51447f12cc8c73402b21bcc471e28d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::ceil</definition>
        <argsstring>(double x)</argsstring>
        <name>ceil</name>
        <qualifiedname>Kokkos::Experimental::ceil</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="330" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="330" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a52bc36f3f186ec0497c3732acec1bbb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::ceil</definition>
        <argsstring>(long double x)</argsstring>
        <name>ceil</name>
        <qualifiedname>Kokkos::Experimental::ceil</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="330" column="210" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="330" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a1a1de13213fe047bba3e7360f87ea6a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::ceilf</definition>
        <argsstring>(float x)</argsstring>
        <name>ceilf</name>
        <qualifiedname>Kokkos::Experimental::ceilf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="330" column="297" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="330" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1af10d6786659527e49d7ba87cd12fcd2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::ceill</definition>
        <argsstring>(long double x)</argsstring>
        <name>ceill</name>
        <qualifiedname>Kokkos::Experimental::ceill</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="330" column="389" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="330" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a8c72a17272fd916b52fc46b08ce83291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::ceil</definition>
        <argsstring>(T x)</argsstring>
        <name>ceil</name>
        <qualifiedname>Kokkos::Experimental::ceil</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="330" column="504" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="330" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ad50f7c37ffa622dbd791a00f0f368b83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::floor</definition>
        <argsstring>(float x)</argsstring>
        <name>floor</name>
        <qualifiedname>Kokkos::Experimental::floor</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="331" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="331" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ad4e982899fbdcbc8767df6008c9a02b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::floor</definition>
        <argsstring>(double x)</argsstring>
        <name>floor</name>
        <qualifiedname>Kokkos::Experimental::floor</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="331" column="121" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="331" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a2864da1ad006eed8909f414d76ae5646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::floor</definition>
        <argsstring>(long double x)</argsstring>
        <name>floor</name>
        <qualifiedname>Kokkos::Experimental::floor</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="331" column="216" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="331" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a431d7bd57915a27d07761c68ec547f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::floorf</definition>
        <argsstring>(float x)</argsstring>
        <name>floorf</name>
        <qualifiedname>Kokkos::Experimental::floorf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="331" column="306" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="331" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a4c46b3faf28151e2ac5c55bcdd001e44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::floorl</definition>
        <argsstring>(long double x)</argsstring>
        <name>floorl</name>
        <qualifiedname>Kokkos::Experimental::floorl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="331" column="401" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="331" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a738f3139b6a71e89d171350388509234" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::floor</definition>
        <argsstring>(T x)</argsstring>
        <name>floor</name>
        <qualifiedname>Kokkos::Experimental::floor</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="331" column="519" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="331" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a63593bd2b1ed35b031dfcc94f336798a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::trunc</definition>
        <argsstring>(float x)</argsstring>
        <name>trunc</name>
        <qualifiedname>Kokkos::Experimental::trunc</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="332" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="332" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1ad68a057317b14110cb31644bbbeb2ead" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::trunc</definition>
        <argsstring>(double x)</argsstring>
        <name>trunc</name>
        <qualifiedname>Kokkos::Experimental::trunc</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="332" column="121" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="332" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a71b4c04fe6f5b12f2f085f607af27e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::trunc</definition>
        <argsstring>(long double x)</argsstring>
        <name>trunc</name>
        <qualifiedname>Kokkos::Experimental::trunc</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="332" column="216" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="332" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a5f0d21df867471c93d8cbb7e74d8198d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::truncf</definition>
        <argsstring>(float x)</argsstring>
        <name>truncf</name>
        <qualifiedname>Kokkos::Experimental::truncf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="332" column="306" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="332" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a4c82a9d69ee6d981e7f372ce749806c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::truncl</definition>
        <argsstring>(long double x)</argsstring>
        <name>truncl</name>
        <qualifiedname>Kokkos::Experimental::truncl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="332" column="401" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="332" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a134d435c59745909cede6281ebe0b1bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::trunc</definition>
        <argsstring>(T x)</argsstring>
        <name>trunc</name>
        <qualifiedname>Kokkos::Experimental::trunc</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="332" column="519" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="332" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a4f9aec848ee5342f3ebe3254d960b6b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::nearbyint</definition>
        <argsstring>(float x)</argsstring>
        <name>nearbyint</name>
        <qualifiedname>Kokkos::Experimental::nearbyint</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="335" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="335" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a6ce0b2421458aa895f007531ec1291ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double Kokkos::Experimental::nearbyint</definition>
        <argsstring>(double x)</argsstring>
        <name>nearbyint</name>
        <qualifiedname>Kokkos::Experimental::nearbyint</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="335" column="133" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="335" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a704c1b2e9823955d8c97b4c4f6926077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::nearbyint</definition>
        <argsstring>(long double x)</argsstring>
        <name>nearbyint</name>
        <qualifiedname>Kokkos::Experimental::nearbyint</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="335" column="240" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="335" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a9d834af041d3f2fe8147c68251174258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION float</type>
        <definition>KOKKOS_INLINE_FUNCTION float Kokkos::Experimental::nearbyintf</definition>
        <argsstring>(float x)</argsstring>
        <name>nearbyintf</name>
        <qualifiedname>Kokkos::Experimental::nearbyintf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="335" column="342" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="335" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1afc02dcc6df5ebdca542560d8c2b5b4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION long double</type>
        <definition>KOKKOS_INLINE_FUNCTION long double Kokkos::Experimental::nearbyintl</definition>
        <argsstring>(long double x)</argsstring>
        <name>nearbyintl</name>
        <qualifiedname>Kokkos::Experimental::nearbyintl</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="335" column="449" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="335" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a642ad4f07b4d7fb7b0a5b5dd8be79e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, double &gt; Kokkos::Experimental::nearbyint</definition>
        <argsstring>(T x)</argsstring>
        <name>nearbyint</name>
        <qualifiedname>Kokkos::Experimental::nearbyint</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="335" column="579" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="335" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a2445a049a4602aea2c8cfb613b83603e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::Experimental::isfinite</definition>
        <argsstring>(float x)</argsstring>
        <name>isfinite</name>
        <qualifiedname>Kokkos::Experimental::isfinite</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="338" column="30" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="338" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a9890b7a34f409b0633c5bfd55bae7389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::Experimental::isfinite</definition>
        <argsstring>(double x)</argsstring>
        <name>isfinite</name>
        <qualifiedname>Kokkos::Experimental::isfinite</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="338" column="127" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="338" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a16e47178801e7f020213254d23953e70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::Experimental::isfinite</definition>
        <argsstring>(long double x)</argsstring>
        <name>isfinite</name>
        <qualifiedname>Kokkos::Experimental::isfinite</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="338" column="224" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="338" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a43907acfe2b74b66165e27201a907bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, bool &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, bool &gt; Kokkos::Experimental::isfinite</definition>
        <argsstring>(T x)</argsstring>
        <name>isfinite</name>
        <qualifiedname>Kokkos::Experimental::isfinite</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="338" column="351" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="338" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a14b8294bfcf8805e63cb34bbf6a33561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::Experimental::isinf</definition>
        <argsstring>(float x)</argsstring>
        <name>isinf</name>
        <qualifiedname>Kokkos::Experimental::isinf</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="339" column="30" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a1e8f2dc2a45f0b166e8f4b4a7caf53b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::Experimental::isinf</definition>
        <argsstring>(double x)</argsstring>
        <name>isinf</name>
        <qualifiedname>Kokkos::Experimental::isinf</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="339" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a95aa0a3d04a8212da2b09e6179045b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::Experimental::isinf</definition>
        <argsstring>(long double x)</argsstring>
        <name>isinf</name>
        <qualifiedname>Kokkos::Experimental::isinf</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="339" column="206" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a2f65cbcc4b15a770fd54e30bc0c5ec40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, bool &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, bool &gt; Kokkos::Experimental::isinf</definition>
        <argsstring>(T x)</argsstring>
        <name>isinf</name>
        <qualifiedname>Kokkos::Experimental::isinf</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="339" column="324" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a8ad64cef0edd61a1e36ed08c982a9395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::Experimental::isnan</definition>
        <argsstring>(float x)</argsstring>
        <name>isnan</name>
        <qualifiedname>Kokkos::Experimental::isnan</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="340" column="30" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="340" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a0f10935864bb3a45603900118b9b20cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::Experimental::isnan</definition>
        <argsstring>(double x)</argsstring>
        <name>isnan</name>
        <qualifiedname>Kokkos::Experimental::isnan</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="340" column="118" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="340" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a4d1a0da7b08eb4fd15169f9caac19de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::Experimental::isnan</definition>
        <argsstring>(long double x)</argsstring>
        <name>isnan</name>
        <qualifiedname>Kokkos::Experimental::isnan</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="340" column="206" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="340" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_functions_8hpp_1a0832149aa45a4b810c556c85392c2f44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, bool &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; std::is_integral&lt; T &gt;::value, bool &gt; Kokkos::Experimental::isnan</definition>
        <argsstring>(T x)</argsstring>
        <name>isnan</name>
        <qualifiedname>Kokkos::Experimental::isnan</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" line="340" column="324" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalFunctions.hpp" bodystart="340" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a8337c1877c1332e9530d66a622318a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION RealType</type>
        <definition>KOKKOS_INLINE_FUNCTION RealType Kokkos::Experimental::expint1</definition>
        <argsstring>(RealType x)</argsstring>
        <name>expint1</name>
        <qualifiedname>Kokkos::Experimental::expint1</qualifiedname>
        <param>
          <type>RealType</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Compute exponential integral E1(x) (x &gt; 0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="65" column="33" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="65" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a1ddab0becaf6dd9131ef06487757b8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::Experimental::erf</definition>
        <argsstring>(const Kokkos::complex&lt; RealType &gt; &amp;z)</argsstring>
        <name>erf</name>
        <qualifiedname>Kokkos::Experimental::erf</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Compute error function erf(z) for z=cmplx(x,y). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="105" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="105" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a67253246fb826adf9900d71f57f3b9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::Experimental::erfcx</definition>
        <argsstring>(const Kokkos::complex&lt; RealType &gt; &amp;z)</argsstring>
        <name>erfcx</name>
        <qualifiedname>Kokkos::Experimental::erfcx</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute scaled complementary error function erfcx(z)=exp(z^2)*erfc(z) for z=cmplx(x,y). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="282" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="282" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a0586c1b3f845a7d74d93e6da5c236d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION RealType</type>
        <definition>KOKKOS_INLINE_FUNCTION RealType Kokkos::Experimental::erfcx</definition>
        <argsstring>(RealType x)</argsstring>
        <name>erfcx</name>
        <qualifiedname>Kokkos::Experimental::erfcx</qualifiedname>
        <param>
          <type>RealType</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute scaled complementary error function erfcx(x)=exp(x^2)*erfc(x) for real x </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="469" column="33" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="469" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a843db34b09da3994e1486b553ef3435f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CmplxType</type>
          </param>
          <param>
            <type>class RealType</type>
          </param>
          <param>
            <type>class IntType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION CmplxType</type>
        <definition>KOKKOS_INLINE_FUNCTION CmplxType Kokkos::Experimental::cyl_bessel_j0</definition>
        <argsstring>(const CmplxType &amp;z, const RealType &amp;joint_val=25, const IntType &amp;bw_start=70)</argsstring>
        <name>cyl_bessel_j0</name>
        <qualifiedname>Kokkos::Experimental::cyl_bessel_j0</qualifiedname>
        <param>
          <type>const CmplxType &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const RealType &amp;</type>
          <declname>joint_val</declname>
          <defval>25</defval>
        </param>
        <param>
          <type>const IntType &amp;</type>
          <declname>bw_start</declname>
          <defval>70</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute Bessel function J0(z) of the first kind of order zero for a complex argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="481" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="481" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a80c56ce24cb78321ad4566ec969d2ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CmplxType</type>
          </param>
          <param>
            <type>class RealType</type>
          </param>
          <param>
            <type>class IntType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION CmplxType</type>
        <definition>KOKKOS_INLINE_FUNCTION CmplxType Kokkos::Experimental::cyl_bessel_y0</definition>
        <argsstring>(const CmplxType &amp;z, const RealType &amp;joint_val=25, const IntType &amp;bw_start=70)</argsstring>
        <name>cyl_bessel_y0</name>
        <qualifiedname>Kokkos::Experimental::cyl_bessel_y0</qualifiedname>
        <param>
          <type>const CmplxType &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const RealType &amp;</type>
          <declname>joint_val</declname>
          <defval>25</defval>
        </param>
        <param>
          <type>const IntType &amp;</type>
          <declname>bw_start</declname>
          <defval>70</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute Bessel function Y0(z) of the second kind of order zero for a complex argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="569" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="569" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a0539a7d05a349bcd5b27a06028addae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CmplxType</type>
          </param>
          <param>
            <type>class RealType</type>
          </param>
          <param>
            <type>class IntType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION CmplxType</type>
        <definition>KOKKOS_INLINE_FUNCTION CmplxType Kokkos::Experimental::cyl_bessel_j1</definition>
        <argsstring>(const CmplxType &amp;z, const RealType &amp;joint_val=25, const IntType &amp;bw_start=70)</argsstring>
        <name>cyl_bessel_j1</name>
        <qualifiedname>Kokkos::Experimental::cyl_bessel_j1</qualifiedname>
        <param>
          <type>const CmplxType &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const RealType &amp;</type>
          <declname>joint_val</declname>
          <defval>25</defval>
        </param>
        <param>
          <type>const IntType &amp;</type>
          <declname>bw_start</declname>
          <defval>70</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute Bessel function J1(z) of the first kind of order one for a complex argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="670" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="670" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1acf8d69863ea922c01e1368bcea000f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CmplxType</type>
          </param>
          <param>
            <type>class RealType</type>
          </param>
          <param>
            <type>class IntType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION CmplxType</type>
        <definition>KOKKOS_INLINE_FUNCTION CmplxType Kokkos::Experimental::cyl_bessel_y1</definition>
        <argsstring>(const CmplxType &amp;z, const RealType &amp;joint_val=25, const IntType &amp;bw_start=70)</argsstring>
        <name>cyl_bessel_y1</name>
        <qualifiedname>Kokkos::Experimental::cyl_bessel_y1</qualifiedname>
        <param>
          <type>const CmplxType &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const RealType &amp;</type>
          <declname>joint_val</declname>
          <defval>25</defval>
        </param>
        <param>
          <type>const IntType &amp;</type>
          <declname>bw_start</declname>
          <defval>70</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute Bessel function Y1(z) of the second kind of order one for a complex argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="762" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="762" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a89a83d830bd178ac55794fd2478b0d45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CmplxType</type>
          </param>
          <param>
            <type>class RealType</type>
          </param>
          <param>
            <type>class IntType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION CmplxType</type>
        <definition>KOKKOS_INLINE_FUNCTION CmplxType Kokkos::Experimental::cyl_bessel_i0</definition>
        <argsstring>(const CmplxType &amp;z, const RealType &amp;joint_val=25, const IntType &amp;bw_start=70)</argsstring>
        <name>cyl_bessel_i0</name>
        <qualifiedname>Kokkos::Experimental::cyl_bessel_i0</qualifiedname>
        <param>
          <type>const CmplxType &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const RealType &amp;</type>
          <declname>joint_val</declname>
          <defval>25</defval>
        </param>
        <param>
          <type>const IntType &amp;</type>
          <declname>bw_start</declname>
          <defval>70</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute modified Bessel function I0(z) of the first kind of order zero for a complex argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="866" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="866" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a0f83e786f5ae5cf47559f6fb678671c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CmplxType</type>
          </param>
          <param>
            <type>class RealType</type>
          </param>
          <param>
            <type>class IntType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION CmplxType</type>
        <definition>KOKKOS_INLINE_FUNCTION CmplxType Kokkos::Experimental::cyl_bessel_k0</definition>
        <argsstring>(const CmplxType &amp;z, const RealType &amp;joint_val=9, const IntType &amp;bw_start=30)</argsstring>
        <name>cyl_bessel_k0</name>
        <qualifiedname>Kokkos::Experimental::cyl_bessel_k0</qualifiedname>
        <param>
          <type>const CmplxType &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const RealType &amp;</type>
          <declname>joint_val</declname>
          <defval>9</defval>
        </param>
        <param>
          <type>const IntType &amp;</type>
          <declname>bw_start</declname>
          <defval>30</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute modified Bessel function K0(z) of the second kind of order zero for a complex argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="936" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="936" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a3ad054bcf976fa58bae4ff1fde9702c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CmplxType</type>
          </param>
          <param>
            <type>class RealType</type>
          </param>
          <param>
            <type>class IntType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION CmplxType</type>
        <definition>KOKKOS_INLINE_FUNCTION CmplxType Kokkos::Experimental::cyl_bessel_i1</definition>
        <argsstring>(const CmplxType &amp;z, const RealType &amp;joint_val=25, const IntType &amp;bw_start=70)</argsstring>
        <name>cyl_bessel_i1</name>
        <qualifiedname>Kokkos::Experimental::cyl_bessel_i1</qualifiedname>
        <param>
          <type>const CmplxType &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const RealType &amp;</type>
          <declname>joint_val</declname>
          <defval>25</defval>
        </param>
        <param>
          <type>const IntType &amp;</type>
          <declname>bw_start</declname>
          <defval>70</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute modified Bessel function I1(z) of the first kind of order one for a complex argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="1011" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="1011" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a0ac33fbce3cac1a2516c2daf6502d833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CmplxType</type>
          </param>
          <param>
            <type>class RealType</type>
          </param>
          <param>
            <type>class IntType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION CmplxType</type>
        <definition>KOKKOS_INLINE_FUNCTION CmplxType Kokkos::Experimental::cyl_bessel_k1</definition>
        <argsstring>(const CmplxType &amp;z, const RealType &amp;joint_val=9, const IntType &amp;bw_start=30)</argsstring>
        <name>cyl_bessel_k1</name>
        <qualifiedname>Kokkos::Experimental::cyl_bessel_k1</qualifiedname>
        <param>
          <type>const CmplxType &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const RealType &amp;</type>
          <declname>joint_val</declname>
          <defval>9</defval>
        </param>
        <param>
          <type>const IntType &amp;</type>
          <declname>bw_start</declname>
          <defval>30</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute modified Bessel function K1(z) of the second kind of order one for a complex argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="1084" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="1084" bodyend="1155"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a0f6ae144bf1b4fb0a523b56db468d6c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CmplxType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION CmplxType</type>
        <definition>KOKKOS_INLINE_FUNCTION CmplxType Kokkos::Experimental::cyl_bessel_h10</definition>
        <argsstring>(const CmplxType &amp;z)</argsstring>
        <name>cyl_bessel_h10</name>
        <qualifiedname>Kokkos::Experimental::cyl_bessel_h10</qualifiedname>
        <param>
          <type>const CmplxType &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute Hankel function H10(z) of the first kind of order zero for a complex argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="1160" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="1160" bodyend="1185"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a3287b6b37095055578f68106c70dfa82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CmplxType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION CmplxType</type>
        <definition>KOKKOS_INLINE_FUNCTION CmplxType Kokkos::Experimental::cyl_bessel_h11</definition>
        <argsstring>(const CmplxType &amp;z)</argsstring>
        <name>cyl_bessel_h11</name>
        <qualifiedname>Kokkos::Experimental::cyl_bessel_h11</qualifiedname>
        <param>
          <type>const CmplxType &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute Hankel function H11(z) of the first kind of order one for a complex argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="1190" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="1190" bodyend="1215"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1a0a48e560ed78d30f3e98699a030be41f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CmplxType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION CmplxType</type>
        <definition>KOKKOS_INLINE_FUNCTION CmplxType Kokkos::Experimental::cyl_bessel_h20</definition>
        <argsstring>(const CmplxType &amp;z)</argsstring>
        <name>cyl_bessel_h20</name>
        <qualifiedname>Kokkos::Experimental::cyl_bessel_h20</qualifiedname>
        <param>
          <type>const CmplxType &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute Hankel function H20(z) of the second kind of order zero for a complex argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="1220" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="1220" bodyend="1245"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___mathematical_special_functions_8hpp_1ad5fff157d845f5f34a1df48be8678952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CmplxType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION CmplxType</type>
        <definition>KOKKOS_INLINE_FUNCTION CmplxType Kokkos::Experimental::cyl_bessel_h21</definition>
        <argsstring>(const CmplxType &amp;z)</argsstring>
        <name>cyl_bessel_h21</name>
        <qualifiedname>Kokkos::Experimental::cyl_bessel_h21</qualifiedname>
        <param>
          <type>const CmplxType &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute Hankel function H21(z) of the second kind of order one for a complex argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" line="1250" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MathematicalSpecialFunctions.hpp" bodystart="1250" bodyend="1275"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos_exp___inter_op_8hpp_1ad5bf7921d1f74f8f82ba5589c24b1449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tp</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Kokkos::Experimental::as_python_type</definition>
        <argsstring>(Tp &amp;&amp;_v)</argsstring>
        <name>as_python_type</name>
        <qualifiedname>Kokkos::Experimental::as_python_type</qualifiedname>
        <param>
          <type>Tp &amp;&amp;</type>
          <declname>_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/KokkosExp_InterOp.hpp" line="140" column="6" bodyfile="src/Kokkos/kokkos/core/src/KokkosExp_InterOp.hpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___s_y_c_l___space_8cpp_1afc24afdec26fa3f32c708d789a93597b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * Kokkos::Experimental::allocate_sycl</definition>
        <argsstring>(const char *arg_label, const size_t arg_alloc_size, const size_t arg_logical_size, const Kokkos::Tools::SpaceHandle arg_handle, const RawMemoryAllocationFailure::AllocationMechanism failure_tag, const sycl::usm::alloc allocation_kind, const sycl::queue &amp;queue)</argsstring>
        <name>allocate_sycl</name>
        <qualifiedname>Kokkos::Experimental::allocate_sycl</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>arg_label</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_alloc_size</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_logical_size</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos___profiling___space_handle" kindref="compound">Kokkos::Tools::SpaceHandle</ref></type>
          <declname>arg_handle</declname>
        </param>
        <param>
          <type>const RawMemoryAllocationFailure::AllocationMechanism</type>
          <declname>failure_tag</declname>
        </param>
        <param>
          <type>const sycl::usm::alloc</type>
          <declname>allocation_kind</declname>
        </param>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/SYCL/Kokkos_SYCL_Space.cpp" line="101" column="6" bodyfile="src/Kokkos/kokkos/core/src/SYCL/Kokkos_SYCL_Space.cpp" bodystart="101" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___s_y_c_l___space_8cpp_1adb9b388d472e9ab20990ac7ed13d1529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::Experimental::sycl_deallocate</definition>
        <argsstring>(const char *arg_label, void *const arg_alloc_ptr, const size_t arg_alloc_size, const size_t arg_logical_size, const Kokkos::Tools::SpaceHandle arg_handle, const sycl::queue &amp;queue)</argsstring>
        <name>sycl_deallocate</name>
        <qualifiedname>Kokkos::Experimental::sycl_deallocate</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>arg_label</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>arg_alloc_ptr</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_alloc_size</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_logical_size</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos___profiling___space_handle" kindref="compound">Kokkos::Tools::SpaceHandle</ref></type>
          <declname>arg_handle</declname>
        </param>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/SYCL/Kokkos_SYCL_Space.cpp" line="163" column="6" bodyfile="src/Kokkos/kokkos/core/src/SYCL/Kokkos_SYCL_Space.cpp" bodystart="163" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___occupancy_control_trait_8hpp_1a20c1c2e094c2966e46ee2dad4d6e0beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class_kokkos_1_1_range_policy" kindref="compound">Policy</ref></type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Kokkos::Experimental::prefer</definition>
        <argsstring>(Policy const &amp;p, DesiredOccupancy occ)</argsstring>
        <name>prefer</name>
        <qualifiedname>Kokkos::Experimental::prefer</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_range_policy" kindref="compound">Policy</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="struct_kokkos_1_1_experimental_1_1_desired_occupancy" kindref="compound">DesiredOccupancy</ref></type>
          <declname>occ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/traits/Kokkos_OccupancyControlTrait.hpp" line="183" column="6" bodyfile="src/Kokkos/kokkos/core/src/traits/Kokkos_OccupancyControlTrait.hpp" bodystart="183" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___occupancy_control_trait_8hpp_1a569cdfcfeb39d225fc45c3c364dda6a9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class_kokkos_1_1_range_policy" kindref="compound">Policy</ref></type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto Kokkos::Experimental::prefer</definition>
        <argsstring>(Policy const &amp;p, MaximizeOccupancy)</argsstring>
        <name>prefer</name>
        <qualifiedname>Kokkos::Experimental::prefer</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_range_policy" kindref="compound">Policy</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="struct_kokkos_1_1_experimental_1_1_maximize_occupancy" kindref="compound">MaximizeOccupancy</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/traits/Kokkos_OccupancyControlTrait.hpp" line="193" column="16" bodyfile="src/Kokkos/kokkos/core/src/traits/Kokkos_OccupancyControlTrait.hpp" bodystart="193" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___schedule_trait_8hpp_1a520a5a8a0cb6e2714d4706b2e20ed271" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="class_kokkos_1_1_range_policy" kindref="compound">Policy</ref></type>
          </param>
          <param>
            <type>class ScheduleType</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto Kokkos::Experimental::require</definition>
        <argsstring>(Policy const &amp;p, Kokkos::Schedule&lt; ScheduleType &gt;)</argsstring>
        <name>require</name>
        <qualifiedname>Kokkos::Experimental::require</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_range_policy" kindref="compound">Policy</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="struct_kokkos_1_1_schedule" kindref="compound">Kokkos::Schedule</ref>&lt; ScheduleType &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/traits/Kokkos_ScheduleTrait.hpp" line="107" column="16" bodyfile="src/Kokkos/kokkos/core/src/traits/Kokkos_ScheduleTrait.hpp" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___work_item_property_trait_8hpp_1a65f75117306febe15e0e355fe6b7e0a9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="class_kokkos_1_1_range_policy" kindref="compound">Policy</ref></type>
          </param>
          <param>
            <type>unsigned long</type>
            <declname>Property</declname>
            <defname>Property</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto Kokkos::Experimental::require</definition>
        <argsstring>(const Policy p, WorkItemProperty::ImplWorkItemProperty&lt; Property &gt;)</argsstring>
        <name>require</name>
        <qualifiedname>Kokkos::Experimental::require</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_range_policy" kindref="compound">Policy</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="struct_kokkos_1_1_experimental_1_1_work_item_property_1_1_impl_work_item_property" kindref="compound">WorkItemProperty::ImplWorkItemProperty</ref>&lt; Property &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/traits/Kokkos_WorkItemPropertyTrait.hpp" line="85" column="16" bodyfile="src/Kokkos/kokkos/core/src/traits/Kokkos_WorkItemPropertyTrait.hpp" bodystart="85" bodyend="91"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynamicView.hpp" line="54" column="1"/>
  </compounddef>
</doxygen>
