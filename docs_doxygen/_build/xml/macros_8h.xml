<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="macros_8h" kind="file" language="C++">
    <compoundname>macros.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">limits</includes>
    <includedby refid="matar_8h" local="yes">src/matar.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>limits</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>src/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/matar.h</label>
        <link refid="matar_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="macros_8h_1a84b6103ad91a36ea3dbbacd8f37b31b3" prot="public" static="no">
        <name>GET_MACRO</name>
        <param><defname>_1</defname></param>
        <param><defname>_2</defname></param>
        <param><defname>_3</defname></param>
        <param><defname>_4</defname></param>
        <param><defname>_5</defname></param>
        <param><defname>_6</defname></param>
        <param><defname>_7</defname></param>
        <param><defname>_8</defname></param>
        <param><defname>_9</defname></param>
        <param><defname>_10</defname></param>
        <param><defname>_11</defname></param>
        <param><defname>_12</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>...</defname></param>
        <initializer>NAME</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="62" column="9" bodyfile="src/macros.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1ac2a0a9c56d35a70259a9f1be0f6c360e" prot="public" static="no">
        <name>FOR_ALL_CLASS</name>
        <initializer>FOR_ALL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="609" column="9" bodyfile="src/macros.h" bodystart="609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1abb1f3149984673fffd9f96deb6c535ed" prot="public" static="no">
        <name>REDUCE_SUM_CLASS</name>
        <initializer>REDUCE_SUM</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="610" column="9" bodyfile="src/macros.h" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a449fa6f3e4a670b9f2b7ca60ea415c57" prot="public" static="no">
        <name>REDUCE_MAX_CLASS</name>
        <initializer>REDUCE_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="611" column="9" bodyfile="src/macros.h" bodystart="611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a8aa15bc1c094b67d438fdfbf8d6298db" prot="public" static="no">
        <name>REDUCE_MIN_CLASS</name>
        <initializer>REDUCE_MIN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="612" column="9" bodyfile="src/macros.h" bodystart="612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1acca13adc01286b12a94ed6350013e1a6" prot="public" static="no">
        <name>FOR1D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>fcn</defname></param>
        <initializer>    for_all( (x0), (x1), \
             [&amp;]( const int (i) ){fcn} )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="619" column="9" bodyfile="src/macros.h" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a1dbe240daf222881de71d9b49d9f3fc9" prot="public" static="no">
        <name>FOR2D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>fcn</defname></param>
        <initializer>    for_all( (x0), (x1), (y0), (y1), \
             [&amp;]( const int (i), const int (j) ){fcn} )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="624" column="9" bodyfile="src/macros.h" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1ad05cff8a2c5d3419dae6b849f13bd62d" prot="public" static="no">
        <name>FOR3D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>k</defname></param>
        <param><defname>z0</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>fcn</defname></param>
        <initializer>    for_all( (x0), (x1), (y0), (y1), (z0), (z1), \
             [&amp;]( const int (i), const int (j), const int (k) ) {fcn} )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="629" column="9" bodyfile="src/macros.h" bodystart="629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a82b7239c2454b1362239c23ff4f697b3" prot="public" static="no">
        <name>FOR_ALL</name>
        <param><defname>...</defname></param>
        <initializer>    GET_MACRO(__VA_ARGS__, _12, _11, FOR3D, _9, _8, FOR2D, _6, _5, FOR1D)(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="633" column="9" bodyfile="src/macros.h" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1ada8d788639035cd6bade6d72b7526d59" prot="public" static="no">
        <name>DO1D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>fcn</defname></param>
        <initializer>    for_all( (x0), (x1)+1, \
             [&amp;]( const int (i) ){fcn} )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="640" column="9" bodyfile="src/macros.h" bodystart="640" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a4ccb122a1cfdef6c1cb4d75f732812d8" prot="public" static="no">
        <name>DO2D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>fcn</defname></param>
        <initializer>    for_all( (x0), (x1)+1, (y0), (y1)+1, \
             [&amp;]( const int (i), const int (j) ){fcn} )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="645" column="9" bodyfile="src/macros.h" bodystart="645" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a2bcc5248d9be291629ea9d76742d9ed1" prot="public" static="no">
        <name>DO3D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>k</defname></param>
        <param><defname>z0</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>fcn</defname></param>
        <initializer>    for_all( (x0), (x1)+1, (y0), (y1)+1, (z0), (z1)+1, \
             [&amp;]( const int (i), const int (j), const int (k) ) {fcn} )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="650" column="9" bodyfile="src/macros.h" bodystart="650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a2d026b9206c4acba8d6298246405f218" prot="public" static="no">
        <name>DO_ALL</name>
        <param><defname>...</defname></param>
        <initializer>    GET_MACRO(__VA_ARGS__, _12, _11, DO3D, _9, _8, DO2D, _6, _5, DO1D)(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="654" column="9" bodyfile="src/macros.h" bodystart="654" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a96404197c4f5dea9e1a251a831db947c" prot="public" static="no">
        <name>RSUM1D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_sum( (x0), (x1), (var),  \
                [=]( const int (i), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="660" column="9" bodyfile="src/macros.h" bodystart="660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a2156af709b555cd75b372160926b4772" prot="public" static="no">
        <name>RSUM2D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_sum( (x0), (x1), (y0), (y1), (var),  \
                [=]( const int (i),const int (j), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="665" column="9" bodyfile="src/macros.h" bodystart="665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1aafd0d8938bee99af66bb0aed8345ca4d" prot="public" static="no">
        <name>RSUM3D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>k</defname></param>
        <param><defname>z0</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_sum( (x0), (x1), (y0), (y1), (z0), (z1), (var),  \
                [=]( const int (i), const int (j), const int (k), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="670" column="9" bodyfile="src/macros.h" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1ae7ecd6d0c9b8dc463f460530809f6d7b" prot="public" static="no">
        <name>REDUCE_SUM</name>
        <param><defname>...</defname></param>
        <initializer>    GET_MACRO(__VA_ARGS__, RSUM3D, _11, _10, RSUM2D, _8, _7, RSUM1D)(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="676" column="9" bodyfile="src/macros.h" bodystart="676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1aefa832d10c68ffe1e04935ca533f440f" prot="public" static="no">
        <name>DO_RSUM1D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_sum( (x0), (x1)+1, (var),  \
                [=]( const int (i), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="682" column="9" bodyfile="src/macros.h" bodystart="682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a84e765ce01584a916348faf881b151a9" prot="public" static="no">
        <name>DO_RSUM2D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_sum( (x0), (x1)+1, (y0), (y1)+1, (var),  \
                [=]( const int (i),const int (j), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="687" column="9" bodyfile="src/macros.h" bodystart="687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a5f52ead4eeae00903f23c45188b48270" prot="public" static="no">
        <name>DO_RSUM3D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>k</defname></param>
        <param><defname>z0</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_sum( (x0), (x1)+1, (y0), (y1)+1, (z0), (z1)+1, (var),  \
                [=]( const int (i), const int (j), const int (k), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="692" column="9" bodyfile="src/macros.h" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a2504e3d4b5545464fcf79b3530a4b8fa" prot="public" static="no">
        <name>DO_REDUCE_SUM</name>
        <param><defname>...</defname></param>
        <initializer>    GET_MACRO(__VA_ARGS__, DO_RSUM3D, _11, _10, DO_RSUM2D, _8, _7, DO_RSUM1D)(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="698" column="9" bodyfile="src/macros.h" bodystart="698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1aea77414aa7bbe8b38645a63150945c1b" prot="public" static="no">
        <name>RMAX1D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_max( (x0), (x1), (var),  \
                [=]( const int (i), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="704" column="9" bodyfile="src/macros.h" bodystart="704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a0d97f3c63083366851016ee64ae6666a" prot="public" static="no">
        <name>RMAX2D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_max( (x0), (x1), (y0), (y1), (var),  \
                [=]( const int (i),const int (j), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="709" column="9" bodyfile="src/macros.h" bodystart="709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a788afc3d6cbbc1bcedc7459572999bf3" prot="public" static="no">
        <name>RMAX3D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>k</defname></param>
        <param><defname>z0</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_max( (x0), (x1), (y0), (y1), (z0), (z1), (var),  \
                [=]( const int (i), const int (j), const int (k), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="714" column="9" bodyfile="src/macros.h" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a16b4b8c80d2679239f47f31626509d05" prot="public" static="no">
        <name>REDUCE_MAX</name>
        <param><defname>...</defname></param>
        <initializer>    GET_MACRO(__VA_ARGS__, RMAX3D, _11, _10, RMAX2D, _8, _7, RMAX1D)(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="720" column="9" bodyfile="src/macros.h" bodystart="720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a3a74718bd976e50a42fda90c17f22329" prot="public" static="no">
        <name>DO_RMAX1D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_max( (x0), (x1)+1, (var),  \
                [=]( const int (i), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="726" column="9" bodyfile="src/macros.h" bodystart="726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1af62df601c7239a816ee3baeee6acd654" prot="public" static="no">
        <name>DO_RMAX2D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_max( (x0), (x1)+1, (y0), (y1)+1, (var),  \
                [=]( const int (i),const int (j), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="731" column="9" bodyfile="src/macros.h" bodystart="731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a27e09b38cf20bba694cf0ab54985d717" prot="public" static="no">
        <name>DO_RMAX3D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>k</defname></param>
        <param><defname>z0</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_max( (x0), (x1)+1, (y0), (y1)+1, (z0), (z1)+1, (var),  \
                [=]( const int (i), const int (j), const int (k), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="736" column="9" bodyfile="src/macros.h" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a6925adafd5ec39defa7bb00e6175fb08" prot="public" static="no">
        <name>DO_REDUCE_MAX</name>
        <param><defname>...</defname></param>
        <initializer>    GET_MACRO(__VA_ARGS__, DO_RMAX3D, _11, _10, DO_RMAX2D, _8, _7, DO_RMAX1D)(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="742" column="9" bodyfile="src/macros.h" bodystart="742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1ad1f00ee97a4b7d7096a50c57834d0a6c" prot="public" static="no">
        <name>RMIN1D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_min( (x0), (x1), (var),  \
                [=]( const int (i), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="748" column="9" bodyfile="src/macros.h" bodystart="748" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a1d88e6e3c6e0c317ce0837e97c4aeb13" prot="public" static="no">
        <name>RMIN2D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_min( (x0), (x1), (y0), (y1), (var),  \
                [=]( const int (i),const int (j), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="753" column="9" bodyfile="src/macros.h" bodystart="753" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a237afc4c620b2a1190ee3c45d56ec742" prot="public" static="no">
        <name>RMIN3D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>k</defname></param>
        <param><defname>z0</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_min( (x0), (x1), (y0), (y1), (z0), (z1), (var),  \
                [=]( const int (i), const int (j), const int (k), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="758" column="9" bodyfile="src/macros.h" bodystart="758" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a07eb88ec787f2e4c86756376daf80fd7" prot="public" static="no">
        <name>REDUCE_MIN</name>
        <param><defname>...</defname></param>
        <initializer>    GET_MACRO(__VA_ARGS__, RMIN3D, _11, _10, RMIN2D, _8, _7, RMIN1D)(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="764" column="9" bodyfile="src/macros.h" bodystart="764" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1ad7693774e38a49af238f7f147f88b44d" prot="public" static="no">
        <name>DO_RMIN1D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_min( (x0), (x1)+1, (var),  \
                [=]( const int (i), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="770" column="9" bodyfile="src/macros.h" bodystart="770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1ad86a9a8fecc31c7160f6b6ac969ca3d9" prot="public" static="no">
        <name>DO_RMIN2D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_min( (x0), (x1)+1, (y0), (y1)+1, (var),  \
                [=]( const int (i),const int (j), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="775" column="9" bodyfile="src/macros.h" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a542959c44328d6e2c2a0b12d30fd3a99" prot="public" static="no">
        <name>DO_RMIN3D</name>
        <param><defname>i</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>j</defname></param>
        <param><defname>y0</defname></param>
        <param><defname>y1</defname></param>
        <param><defname>k</defname></param>
        <param><defname>z0</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>var</defname></param>
        <param><defname>fcn</defname></param>
        <param><defname>result</defname></param>
        <initializer>    reduce_min( (x0), (x1)+1, (y0), (y1)+1, (z0), (z1)+1, (var),  \
                [=]( const int (i), const int (j), const int (k), decltype(var) &amp;(var) ){fcn}, \
                (result) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="780" column="9" bodyfile="src/macros.h" bodystart="780" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8h_1a3a36f16897d773782d766289f4ec61c4" prot="public" static="no">
        <name>DO_REDUCE_MIN</name>
        <param><defname>...</defname></param>
        <initializer>    GET_MACRO(__VA_ARGS__, DO_RMIN3D, _11, _10, DO_RMIN2D, _8, _7, DO_RMIN1D)(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="786" column="9" bodyfile="src/macros.h" bodystart="786" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="macros_8h_1a9990a0c765fdd023ba3afbde4d68d912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void for_all</definition>
        <argsstring>(int i_start, int i_end, const F &amp;lambda_fcn)</argsstring>
        <name>for_all</name>
        <param>
          <type>int</type>
          <declname>i_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_end</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>lambda_fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="417" column="6" bodyfile="src/macros.h" bodystart="417" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="macros_8h_1a7a582b0dc380ce3b4a75620cd9582ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void for_all</definition>
        <argsstring>(int i_start, int i_end, int j_start, int j_end, const F &amp;lambda_fcn)</argsstring>
        <name>for_all</name>
        <param>
          <type>int</type>
          <declname>i_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_end</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>lambda_fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="428" column="6" bodyfile="src/macros.h" bodystart="428" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="macros_8h_1a1e912a6edf6f879e8826a6c34dcee453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void for_all</definition>
        <argsstring>(int i_start, int i_end, int j_start, int j_end, int k_start, int k_end, const F &amp;lambda_fcn)</argsstring>
        <name>for_all</name>
        <param>
          <type>int</type>
          <declname>i_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k_end</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>lambda_fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="442" column="6" bodyfile="src/macros.h" bodystart="442" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="macros_8h_1a517c493e5ac36db206d9fbfe1371edc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reduce_sum</definition>
        <argsstring>(int i_start, int i_end, T var, const F &amp;lambda_fcn, T &amp;result)</argsstring>
        <name>reduce_sum</name>
        <param>
          <type>int</type>
          <declname>i_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_end</declname>
        </param>
        <param>
          <type>T</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>lambda_fcn</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="460" column="6" bodyfile="src/macros.h" bodystart="460" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="macros_8h_1a5e7a4e59c0a7b4d6a4b3c19c9096840d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reduce_sum</definition>
        <argsstring>(int i_start, int i_end, int j_start, int j_end, T var, const F &amp;lambda_fcn, T &amp;result)</argsstring>
        <name>reduce_sum</name>
        <param>
          <type>int</type>
          <declname>i_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_end</declname>
        </param>
        <param>
          <type>T</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>lambda_fcn</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="472" column="6" bodyfile="src/macros.h" bodystart="472" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="macros_8h_1ab8e70d505d6cf42005e5d5facb5d11f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reduce_sum</definition>
        <argsstring>(int i_start, int i_end, int j_start, int j_end, int k_start, int k_end, T var, const F &amp;lambda_fcn, T &amp;result)</argsstring>
        <name>reduce_sum</name>
        <param>
          <type>int</type>
          <declname>i_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k_end</declname>
        </param>
        <param>
          <type>T</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>lambda_fcn</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="488" column="6" bodyfile="src/macros.h" bodystart="488" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="macros_8h_1a10986a06c1eb4d9259e60cda5e4bf720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reduce_min</definition>
        <argsstring>(int i_start, int i_end, T var, const F &amp;lambda_fcn, T &amp;result)</argsstring>
        <name>reduce_min</name>
        <param>
          <type>int</type>
          <declname>i_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_end</declname>
        </param>
        <param>
          <type>T</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>lambda_fcn</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="508" column="6" bodyfile="src/macros.h" bodystart="508" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="macros_8h_1a07a62ec30c02cce87f6eb74a99425934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reduce_min</definition>
        <argsstring>(int i_start, int i_end, int j_start, int j_end, T var, const F &amp;lambda_fcn, T &amp;result)</argsstring>
        <name>reduce_min</name>
        <param>
          <type>int</type>
          <declname>i_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_end</declname>
        </param>
        <param>
          <type>T</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>lambda_fcn</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="520" column="6" bodyfile="src/macros.h" bodystart="520" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="macros_8h_1af2117eac449bb5428c22867ab1947af9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reduce_min</definition>
        <argsstring>(int i_start, int i_end, int j_start, int j_end, int k_start, int k_end, T var, const F &amp;lambda_fcn, T &amp;result)</argsstring>
        <name>reduce_min</name>
        <param>
          <type>int</type>
          <declname>i_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k_end</declname>
        </param>
        <param>
          <type>T</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>lambda_fcn</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="536" column="6" bodyfile="src/macros.h" bodystart="536" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="macros_8h_1a4c54580179260515ee230f8aa48d964d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reduce_max</definition>
        <argsstring>(int i_start, int i_end, T var, const F &amp;lambda_fcn, T &amp;result)</argsstring>
        <name>reduce_max</name>
        <param>
          <type>int</type>
          <declname>i_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_end</declname>
        </param>
        <param>
          <type>T</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>lambda_fcn</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="555" column="6" bodyfile="src/macros.h" bodystart="555" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="macros_8h_1a6876766f5f54404afe637c39b8300fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reduce_max</definition>
        <argsstring>(int i_start, int i_end, int j_start, int j_end, T var, const F &amp;lambda_fcn, T &amp;result)</argsstring>
        <name>reduce_max</name>
        <param>
          <type>int</type>
          <declname>i_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_end</declname>
        </param>
        <param>
          <type>T</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>lambda_fcn</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="567" column="6" bodyfile="src/macros.h" bodystart="567" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="macros_8h_1afcebbb33e6e15350916a3c72cd87b8e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reduce_max</definition>
        <argsstring>(int i_start, int i_end, int j_start, int j_end, int k_start, int k_end, T var, const F &amp;lambda_fcn, T &amp;result)</argsstring>
        <name>reduce_max</name>
        <param>
          <type>int</type>
          <declname>i_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k_end</declname>
        </param>
        <param>
          <type>T</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>lambda_fcn</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/macros.h" line="583" column="6" bodyfile="src/macros.h" bodystart="583" bodyend="598"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>This<sp/>file<sp/>has<sp/>suite<sp/>of<sp/>MACROS<sp/>to<sp/>build<sp/>serial<sp/>and<sp/>parallel<sp/>loops<sp/>that<sp/>are<sp/>more<sp/>readable<sp/>and</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>are<sp/>written<sp/>with<sp/>the<sp/>same<sp/>syntax.<sp/>The<sp/>parallel<sp/>loops<sp/>use<sp/>kokkos<sp/>(i.e.,<sp/>the<sp/>MACROS<sp/>hide<sp/>the</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>complexity)<sp/>and<sp/>the<sp/>serial<sp/>loops<sp/>are<sp/>done<sp/>using<sp/>functions<sp/>located<sp/>in<sp/>this<sp/>file.<sp/>The<sp/>goal<sp/>is<sp/>to</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>help<sp/>users<sp/>add<sp/>kokkos<sp/>to<sp/>their<sp/>code<sp/>projects<sp/>for<sp/>performance<sp/>portability<sp/>across<sp/>architectures.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>The<sp/>loop<sp/>order<sp/>with<sp/>the<sp/>MACRO<sp/>enforces<sp/>the<sp/>inner<sp/>loop<sp/>varies<sp/>the<sp/>fastest<sp/>and<sp/>the<sp/>outer<sp/>most</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>loop<sp/>varies<sp/>the<sp/>slowest.<sp/><sp/>Optiminal<sp/>performance<sp/>will<sp/>be<sp/>achieved<sp/>by<sp/>ensureing<sp/>the<sp/>loop<sp/>indices</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>align<sp/>with<sp/>the<sp/>access<sp/>pattern<sp/>of<sp/>the<sp/>MATAR<sp/>datatype.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>1.<sp/><sp/>The<sp/>syntax<sp/>to<sp/>use<sp/>the<sp/>FOR_ALL<sp/>MACRO<sp/>is<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>//<sp/>parallelization<sp/>over<sp/>a<sp/>single<sp/>loop</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>FOR_ALL(k,<sp/>0,<sp/>10,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>loop<sp/>contents<sp/>is<sp/>here<sp/>});</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>//<sp/>parallellization<sp/>over<sp/>two<sp/>loops</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>FOR_ALL(m,<sp/>0,<sp/>3,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n,<sp/>0,<sp/>3,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>loop<sp/>contents<sp/>is<sp/>here<sp/>});</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>//<sp/>parallellization<sp/>over<sp/>two<sp/>loops</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>FOR_ALL(i,<sp/>0,<sp/>3,</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j,<sp/>0,<sp/>3,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k,<sp/>0,<sp/>3,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>loop<sp/>contents<sp/>is<sp/>here<sp/>});</highlight></codeline>
<codeline lineno="27"><highlight class="comment"></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>2.<sp/><sp/>The<sp/>syntax<sp/>to<sp/>use<sp/>the<sp/>FOR_REDUCE<sp/>is<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>//<sp/>reduce<sp/>over<sp/>a<sp/>single<sp/>loop</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>REDUCE_SUM(i,<sp/>0,<sp/>100,</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_answer,</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>loop<sp/>contents<sp/>is<sp/>here<sp/>},<sp/>answer);</highlight></codeline>
<codeline lineno="34"><highlight class="comment"></highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>REDUCE_SUM(i,<sp/>0,<sp/>100,</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j,<sp/>0,<sp/>100,</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_answer,</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>loop<sp/>contents<sp/>is<sp/>here<sp/>},<sp/>answer);</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>REDUCE_SUM(i,<sp/>0,<sp/>100,</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j,<sp/>0,<sp/>100,</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k,<sp/>0,<sp/>100,</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_answer,</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>loop<sp/>contents<sp/>is<sp/>here<sp/>},<sp/>answer);</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>//<sp/>other<sp/>reduces<sp/>are:<sp/>RDUCE_MAX<sp/>and<sp/>REDUCE_MIN</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>**********************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MACROS<sp/>used<sp/>with<sp/>both<sp/>Kokkos<sp/>and<sp/>non-kokkos<sp/>versions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>macro<sp/>to<sp/>select<sp/>the<sp/>name<sp/>of<sp/>a<sp/>macro<sp/>based<sp/>on<sp/>the<sp/>number<sp/>of<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6,<sp/>_7,<sp/>_8,<sp/>_9,<sp/>_10,<sp/>_11,<sp/>_12,<sp/>NAME,...)<sp/>NAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MACROS<sp/>for<sp/>kokkos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_KOKKOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CArray<sp/>nested<sp/>loop<sp/>convention<sp/>use<sp/>Right,<sp/>use<sp/>Left<sp/>for<sp/>outermost<sp/>loop<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_ORDER<sp/>Kokkos::Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FArray<sp/>nested<sp/>loop<sp/>convention<sp/>use<sp/>Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>F_LOOP_ORDER<sp/>Kokkos::Iterate::Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>run<sp/>once<sp/>on<sp/>the<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RUN(fcn)<sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_for(<sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>0,<sp/>1),<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(const<sp/>int<sp/>ijkabc){fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>run<sp/>once<sp/>on<sp/>the<sp/>device<sp/>inside<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RUN_CLASS(fcn)<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_for(<sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>0,<sp/>1),<sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_CLASS_LAMBDA(const<sp/>int<sp/>ijkabc){fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>FOR_ALL<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FOR1D(i,<sp/>x0,<sp/>x1,fcn)<sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_for(<sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>(x0),<sp/>(x1)),<sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i)<sp/>){fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FOR2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,fcn)<sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_for(<sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;2,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0)},<sp/>{(x1),<sp/>(y1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j)<sp/>){fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FOR3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>fcn)<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_for(<sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;3,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0),<sp/>(z0)},<sp/>{(x1),<sp/>(y1),<sp/>(z1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k)<sp/>)<sp/>{fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FOR_ALL(...)<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>_12,<sp/>_11,<sp/>FOR3D,<sp/>_9,<sp/>_8,<sp/>FOR2D,<sp/>_6,<sp/>_5,<sp/>FOR1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>DO_ALL<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO1D(i,<sp/>x0,<sp/>x1,fcn)<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_for(<sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>(x0),<sp/>(x1)+1),<sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i)<sp/>){fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,fcn)<sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_for(<sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;2,F_LOOP_ORDER,<sp/>F_LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0)},<sp/>{(x1)+1,<sp/>(y1)+1}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j)<sp/>){fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>fcn)<sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_for(<sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;3,F_LOOP_ORDER,F_LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0),<sp/>(z0)},<sp/>{(x1)+1,<sp/>(y1)+1,<sp/>(z1)+1}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k)<sp/>)<sp/>{fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_ALL(...)<sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>_12,<sp/>_11,<sp/>DO3D,<sp/>_9,<sp/>_8,<sp/>DO2D,<sp/>_6,<sp/>_5,<sp/>DO1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>REDUCE<sp/>SUM<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RSUM1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>(x0),<sp/>(x1)<sp/>),<sp/><sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)){fcn},<sp/>(result))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RSUM2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;2,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0)},<sp/>{(x1),<sp/>(y1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RSUM3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;3,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0),<sp/>(z0)},<sp/>{(x1),<sp/>(y1),<sp/>(z1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>REDUCE_SUM(...)<sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>RSUM3D,<sp/>_11,<sp/>_10,<sp/>RSUM2D,<sp/>_8,<sp/>_7,<sp/>RSUM1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>DO_REDUCE_SUM<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RSUM1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>(x0),<sp/>(x1)+1<sp/>),<sp/><sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)){fcn},<sp/>(result))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RSUM2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;2,F_LOOP_ORDER,F_LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0)},<sp/>{(x1)+1,<sp/>(y1)+1}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RSUM3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;3,F_LOOP_ORDER,F_LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0),<sp/>(z0)},<sp/>{(x1)+1,<sp/>(y1)+1,<sp/>(z1)+1}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_REDUCE_SUM(...)<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>DO_RSUM3D,<sp/>_11,<sp/>_10,<sp/>DO_RSUM2D,<sp/>_8,<sp/>_7,<sp/>DO_RSUM1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>REDUCE<sp/>MAX<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RMAX1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>(x0),<sp/>(x1)<sp/>),<sp/><sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)){fcn},<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Max&lt;<sp/>decltype(result)<sp/>&gt;<sp/>(<sp/>(result)<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RMAX2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;2,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0)},<sp/>{(x1),<sp/>(y1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Max&lt;<sp/>decltype(result)<sp/>&gt;<sp/>(<sp/>(result)<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RMAX3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;3,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0),<sp/>(z0)},<sp/>{(x1),<sp/>(y1),<sp/>(z1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Max&lt;<sp/>decltype(result)<sp/>&gt;<sp/>(<sp/>(result)<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>REDUCE_MAX(...)<sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>RMAX3D,<sp/>_11,<sp/>_10,<sp/>RMAX2D,<sp/>_8,<sp/>_7,<sp/>RMAX1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>DO_REDUCE_MAX<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RMAX1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>(x0),<sp/>(x1)+1<sp/>),<sp/><sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)){fcn},<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Max&lt;<sp/>decltype(result)<sp/>&gt;<sp/>(<sp/>(result)<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RMAX2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;2,F_LOOP_ORDER,F_LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0)},<sp/>{(x1)+1,<sp/>(y1)+1}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Max&lt;<sp/>decltype(result)<sp/>&gt;<sp/>(<sp/>(result)<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RMAX3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;3,F_LOOP_ORDER,F_LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0),<sp/>(z0)},<sp/>{(x1)+1,<sp/>(y1)+1,<sp/>(z1)+1}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Max&lt;<sp/>decltype(result)<sp/>&gt;<sp/>(<sp/>(result)<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_REDUCE_MAX(...)<sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>DO_RMAX3D,<sp/>_11,<sp/>_10,<sp/>DO_RMAX2D,<sp/>_8,<sp/>_7,<sp/>DO_RMAX1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>REDUCE<sp/>MIN<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RMIN1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>(x0),<sp/>(x1)<sp/>),<sp/><sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Min&lt;<sp/>decltype(result)<sp/>&gt;(result))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RMIN2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;2,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0)},<sp/>{(x1),<sp/>(y1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Min&lt;<sp/>decltype(result)<sp/>&gt;(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RMIN3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;3,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0),<sp/>(z0)},<sp/>{(x1),<sp/>(y1),<sp/>(z1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Min&lt;<sp/>decltype(result)<sp/>&gt;(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>REDUCE_MIN(...)<sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>RMIN3D,<sp/>_11,<sp/>_10,<sp/>RMIN2D,<sp/>_8,<sp/>_7,<sp/>RMIN1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>DO_REDUCE<sp/>MIN<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RMIN1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>(x0),<sp/>(x1)+1<sp/>),<sp/><sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Min&lt;<sp/>decltype(result)<sp/>&gt;(result))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RMIN2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;2,F_LOOP_ORDER,F_LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0)},<sp/>{(x1)+1,<sp/>(y1)+1}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Min&lt;<sp/>decltype(result)<sp/>&gt;(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RMIN3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;3,F_LOOP_ORDER,F_LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0),<sp/>(z0)},<sp/>{(x1)+1,<sp/>(y1)+1,<sp/>(z1)+1}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Min&lt;<sp/>decltype(result)<sp/>&gt;(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_REDUCE_MIN(...)<sp/>\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>DO_RMIN3D,<sp/>_11,<sp/>_10,<sp/>DO_RMIN2D,<sp/>_8,<sp/>_7,<sp/>DO_RMIN1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>FOR_ALL<sp/>loop<sp/>with<sp/>variables<sp/>in<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor">FORCLASS1D(i,<sp/>x0,<sp/>x1,fcn)<sp/>\</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor">Kokkos::parallel_for(<sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>(x0),<sp/>(x1)),<sp/>\</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_CLASS_LAMBDA(<sp/>const<sp/>int<sp/>(i)<sp/>){fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor">FORCLASS2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,fcn)<sp/>\</highlight></codeline>
<codeline lineno="305"><highlight class="preprocessor">Kokkos::parallel_for(<sp/>\</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;2,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0)},<sp/>{(x1),<sp/>(y1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_CLASS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j)<sp/>){fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor">FORCLASS3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>fcn)<sp/>\</highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor">Kokkos::parallel_for(<sp/>\</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;3,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0),<sp/>(z0)},<sp/>{(x1),<sp/>(y1),<sp/>(z1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_CLASS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k)<sp/>)<sp/>{fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor">FOR_ALL_CLASS(...)<sp/>\</highlight></codeline>
<codeline lineno="317"><highlight class="preprocessor">GET_MACRO(__VA_ARGS__,<sp/>_12,<sp/>_11,<sp/>FORCLASS3D,<sp/>_9,<sp/>_8,<sp/>FORCLASS2D,<sp/>_6,<sp/>_5,<sp/>FORCLASS1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>REDUCE<sp/>SUM<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor">RSUMCLASS1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="323"><highlight class="preprocessor">Kokkos::parallel_reduce(<sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>(x0),<sp/>(x1)<sp/>),<sp/><sp/>\</highlight></codeline>
<codeline lineno="324"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_CLASS_LAMBDA(const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)){fcn},<sp/>(result))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="327"><highlight class="preprocessor">RSUMCLASS2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor">Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="329"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;2,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0)},<sp/>{(x1),<sp/>(y1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="330"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_CLASS_LAMBDA(<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="331"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="334"><highlight class="preprocessor">RSUMCLASS3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor">Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;3,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0),<sp/>(z0)},<sp/>{(x1),<sp/>(y1),<sp/>(z1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_CLASS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="341"><highlight class="preprocessor">REDUCE_SUM_CLASS(...)<sp/>\</highlight></codeline>
<codeline lineno="342"><highlight class="preprocessor">GET_MACRO(__VA_ARGS__,<sp/>RSUMCLASS3D,<sp/>_11,<sp/>_10,<sp/>RSUMCLASS2D,<sp/>_8,<sp/>_7,<sp/>RSUMCLASS1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>REDUCE<sp/>MAX<sp/>loop<sp/>with<sp/>variables<sp/>in<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor">RMAXCLASS1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor">Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>(x0),<sp/>(x1)<sp/>),<sp/><sp/>\</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_CLASS_LAMBDA(const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)){fcn},<sp/>\</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Max&lt;<sp/>decltype(result)<sp/>&gt;<sp/>(<sp/>(result)<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="356"><highlight class="preprocessor">RMAXCLASS2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor">Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="358"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;2,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0)},<sp/>{(x1),<sp/>(y1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="359"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_CLASS_LAMBDA(<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="360"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Max&lt;<sp/>decltype(result)<sp/>&gt;<sp/>(<sp/>(result)<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor">RMAXCLASS3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor">Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;3,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0),<sp/>(z0)},<sp/>{(x1),<sp/>(y1),<sp/>(z1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_CLASS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Max&lt;<sp/>decltype(result)<sp/>&gt;<sp/>(<sp/>(result)<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor">REDUCE_MAX_CLASS(...)<sp/>\</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor">GET_MACRO(__VA_ARGS__,<sp/>RMAXCLASS3D,<sp/>_11,<sp/>_10,<sp/>RMAXCLASS2D,<sp/>_8,<sp/>_7,<sp/>RMAXCLASS1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>REDUCE<sp/>MIN<sp/>loop<sp/>with<sp/>variables<sp/>in<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor">RMINCLASS1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="377"><highlight class="preprocessor">Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::RangePolicy&lt;&gt;<sp/>(<sp/>(x0),<sp/>(x1)<sp/>),<sp/><sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_CLASS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Min&lt;<sp/>decltype(result)<sp/>&gt;(result))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor">RMINCLASS2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="preprocessor">Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;2,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0)},<sp/>{(x1),<sp/>(y1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_CLASS_LAMBDA(<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Min&lt;<sp/>decltype(result)<sp/>&gt;(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="390"><highlight class="preprocessor">RMINCLASS3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="391"><highlight class="preprocessor">Kokkos::parallel_reduce(<sp/>\</highlight></codeline>
<codeline lineno="392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::MDRangePolicy&lt;<sp/>Kokkos::Rank&lt;3,LOOP_ORDER,LOOP_ORDER&gt;<sp/>&gt;<sp/>(<sp/>{(x0),<sp/>(y0),<sp/>(z0)},<sp/>{(x1),<sp/>(y1),<sp/>(z1)}<sp/>),<sp/>\</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_CLASS_LAMBDA(<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="394"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::Min&lt;<sp/>decltype(result)<sp/>&gt;(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="397"><highlight class="preprocessor">REDUCE_MIN_CLASS(...)<sp/>\</highlight></codeline>
<codeline lineno="398"><highlight class="preprocessor">GET_MACRO(__VA_ARGS__,<sp/>RMINCLASS3D,<sp/>_11,<sp/>_10,<sp/>RMINCLASS2D,<sp/>_8,<sp/>_7,<sp/>RMINCLASS1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>KOKKOS<sp/>routines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>for_all<sp/>and<sp/>for_reduce<sp/>functions<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>used<sp/>with<sp/>the<sp/>non-kokkos<sp/>MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_KOKKOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>max<sp/>and<sp/>min<sp/>values<sp/>of<sp/>a<sp/>int,<sp/>double,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>for_all<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_end,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;lambda_fcn){</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=i_start;<sp/>i&lt;i_end;<sp/>i++){</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda_fcn(i);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="424"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>end<sp/>for_all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>for_all<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_end,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_end,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;lambda_fcn){</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=i_start;<sp/>i&lt;i_end;<sp/>i++){</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=j_start;<sp/>j&lt;j_end;<sp/>j++){</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda_fcn(i,j);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="438"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>end<sp/>for_all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>for_all<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_end,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_end,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_end,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;lambda_fcn){</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=i_start;<sp/>i&lt;i_end;<sp/>i++){</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=j_start;<sp/>j&lt;j_end;<sp/>j++){</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=k_start;<sp/>k&lt;k_end;<sp/>k++){</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda_fcn(i,j,k);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="455"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>end<sp/>for_all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_sum<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_end,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>var,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;lambda_fcn,<sp/>T<sp/>&amp;result){</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=i_start;<sp/>i&lt;i_end;<sp/>i++){</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda_fcn(i,<sp/>var);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>var;</highlight></codeline>
<codeline lineno="468"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>for_reduce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_sum<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_end,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_end,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>var,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;lambda_fcn,<sp/>T<sp/>&amp;result){</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=i_start;<sp/>i&lt;i_end;<sp/>i++){</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=j_start;<sp/>j&lt;j_end;<sp/>j++){</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda_fcn(i,j,var);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>var;</highlight></codeline>
<codeline lineno="484"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>for_reduce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_sum<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_end,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_end,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_end,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><sp/>var,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;lambda_fcn,<sp/><sp/>T<sp/>&amp;result){</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=i_start;<sp/>i&lt;i_end;<sp/>i++){</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=j_start;<sp/>j&lt;j_end;<sp/>j++){</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=k_start;<sp/>k&lt;k_end;<sp/>k++){</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda_fcn(i,j,k,var);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>var;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>for_reduce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_min<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_end,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>var,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;lambda_fcn,<sp/>T<sp/>&amp;result){</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();<sp/></highlight><highlight class="comment">//2147483647;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=i_start;<sp/>i&lt;i_end;<sp/>i++){</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda_fcn(i,<sp/>var);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>var;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>for_reduce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_min<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_end,</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_end,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>var,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;lambda_fcn,<sp/>T<sp/>&amp;result){</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();<sp/></highlight><highlight class="comment">//2147483647;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=i_start;<sp/>i&lt;i_end;<sp/>i++){</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=j_start;<sp/>j&lt;j_end;<sp/>j++){</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda_fcn(i,j,var);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>var;</highlight></codeline>
<codeline lineno="532"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>for_reduce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_min<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_end,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_end,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_end,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><sp/>var,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;lambda_fcn,<sp/><sp/>T<sp/>&amp;result){</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();<sp/></highlight><highlight class="comment">//2147483647;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=i_start;<sp/>i&lt;i_end;<sp/>i++){</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=j_start;<sp/>j&lt;j_end;<sp/>j++){</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=k_start;<sp/>k&lt;k_end;<sp/>k++){</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda_fcn(i,j,k,var);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>var;</highlight></codeline>
<codeline lineno="551"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>for_reduce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_max<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_end,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>var,</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;lambda_fcn,<sp/>T<sp/>&amp;result){</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();<sp/></highlight><highlight class="comment">//<sp/>-2147483647<sp/>-<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=i_start;<sp/>i&lt;i_end;<sp/>i++){</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda_fcn(i,<sp/>var);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>var;</highlight></codeline>
<codeline lineno="563"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>for_reduce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_max<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_end,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_end,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>var,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;lambda_fcn,<sp/>T<sp/>&amp;result){</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();<sp/></highlight><highlight class="comment">//-2147483647<sp/>-<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=i_start;<sp/>i&lt;i_end;<sp/>i++){</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=j_start;<sp/>j&lt;j_end;<sp/>j++){</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda_fcn(i,j,var);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>var;</highlight></codeline>
<codeline lineno="579"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>for_reduce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_max<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_end,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_end,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_end,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><sp/>var,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;lambda_fcn,<sp/><sp/>T<sp/>&amp;result){</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();<sp/></highlight><highlight class="comment">//<sp/>-2147483647<sp/>-<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=i_start;<sp/>i&lt;i_end;<sp/>i++){</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=j_start;<sp/>j&lt;j_end;<sp/>j++){</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=k_start;<sp/>k&lt;k_end;<sp/>k++){</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda_fcn(i,j,k,var);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>var;</highlight></codeline>
<codeline lineno="598"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>for_reduce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>not<sp/>kokkos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MACROS<sp/>for<sp/>none<sp/>kokkos<sp/>loops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_KOKKOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>replace<sp/>the<sp/>CLASS<sp/>loops<sp/>to<sp/>be<sp/>the<sp/>nominal<sp/>loops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FOR_ALL_CLASS<sp/>FOR_ALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REDUCE_SUM_CLASS<sp/>REDUCE_SUM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REDUCE_MAX_CLASS<sp/>REDUCE_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REDUCE_MIN_CLASS<sp/>REDUCE_MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>FOR_ALL<sp/>loop<sp/>is<sp/>chosen<sp/>based<sp/>on<sp/>the<sp/>number<sp/>of<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>FOR_ALL<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1D<sp/>FOR<sp/>loop<sp/>has<sp/>4<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="619"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FOR1D(i,<sp/>x0,<sp/>x1,<sp/>fcn)<sp/>\</highlight></codeline>
<codeline lineno="620"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for_all(<sp/>(x0),<sp/>(x1),<sp/>\</highlight></codeline>
<codeline lineno="621"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](<sp/>const<sp/>int<sp/>(i)<sp/>){fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2D<sp/>FOR<sp/>loop<sp/>has<sp/>7<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="624"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FOR2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>fcn)<sp/><sp/>\</highlight></codeline>
<codeline lineno="625"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for_all(<sp/>(x0),<sp/>(x1),<sp/>(y0),<sp/>(y1),<sp/>\</highlight></codeline>
<codeline lineno="626"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j)<sp/>){fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment">//<sp/>3D<sp/>FOR<sp/>loop<sp/>has<sp/>10<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="629"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FOR3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>fcn)<sp/>\</highlight></codeline>
<codeline lineno="630"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for_all(<sp/>(x0),<sp/>(x1),<sp/>(y0),<sp/>(y1),<sp/>(z0),<sp/>(z1),<sp/>\</highlight></codeline>
<codeline lineno="631"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k)<sp/>)<sp/>{fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="633"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FOR_ALL(...)<sp/>\</highlight></codeline>
<codeline lineno="634"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>_12,<sp/>_11,<sp/>FOR3D,<sp/>_9,<sp/>_8,<sp/>FOR2D,<sp/>_6,<sp/>_5,<sp/>FOR1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>DO_ALL<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1D<sp/>DOloop<sp/>has<sp/>4<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="640"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO1D(i,<sp/>x0,<sp/>x1,<sp/>fcn)<sp/>\</highlight></codeline>
<codeline lineno="641"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for_all(<sp/>(x0),<sp/>(x1)+1,<sp/>\</highlight></codeline>
<codeline lineno="642"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](<sp/>const<sp/>int<sp/>(i)<sp/>){fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2D<sp/>DO<sp/>loop<sp/>has<sp/>7<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>fcn)<sp/><sp/>\</highlight></codeline>
<codeline lineno="646"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for_all(<sp/>(x0),<sp/>(x1)+1,<sp/>(y0),<sp/>(y1)+1,<sp/>\</highlight></codeline>
<codeline lineno="647"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j)<sp/>){fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>3D<sp/>DO<sp/>loop<sp/>has<sp/>10<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="650"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>fcn)<sp/>\</highlight></codeline>
<codeline lineno="651"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for_all(<sp/>(x0),<sp/>(x1)+1,<sp/>(y0),<sp/>(y1)+1,<sp/>(z0),<sp/>(z1)+1,<sp/>\</highlight></codeline>
<codeline lineno="652"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k)<sp/>)<sp/>{fcn}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="654"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_ALL(...)<sp/>\</highlight></codeline>
<codeline lineno="655"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>_12,<sp/>_11,<sp/>DO3D,<sp/>_9,<sp/>_8,<sp/>DO2D,<sp/>_6,<sp/>_5,<sp/>DO1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>REDUCE<sp/>loops,<sp/>no<sp/>kokkos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="660"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RSUM1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="661"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_sum(<sp/>(x0),<sp/>(x1),<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="662"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="663"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="665"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RSUM2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="666"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_sum(<sp/>(x0),<sp/>(x1),<sp/>(y0),<sp/>(y1),<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="667"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="668"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="670"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RSUM3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="671"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_sum(<sp/>(x0),<sp/>(x1),<sp/>(y0),<sp/>(y1),<sp/>(z0),<sp/>(z1),<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="672"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="673"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="676"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>REDUCE_SUM(...)<sp/>\</highlight></codeline>
<codeline lineno="677"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>RSUM3D,<sp/>_11,<sp/>_10,<sp/>RSUM2D,<sp/>_8,<sp/>_7,<sp/>RSUM1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DO_REDUCE_SUM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="682"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RSUM1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="683"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_sum(<sp/>(x0),<sp/>(x1)+1,<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="684"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="685"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="687"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RSUM2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="688"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_sum(<sp/>(x0),<sp/>(x1)+1,<sp/>(y0),<sp/>(y1)+1,<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="689"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="690"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="692"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RSUM3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="693"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_sum(<sp/>(x0),<sp/>(x1)+1,<sp/>(y0),<sp/>(y1)+1,<sp/>(z0),<sp/>(z1)+1,<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="694"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="695"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="698"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_REDUCE_SUM(...)<sp/>\</highlight></codeline>
<codeline lineno="699"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>DO_RSUM3D,<sp/>_11,<sp/>_10,<sp/>DO_RSUM2D,<sp/>_8,<sp/>_7,<sp/>DO_RSUM1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reduce<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="704"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RMAX1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="705"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_max(<sp/>(x0),<sp/>(x1),<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="706"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="707"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="709"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RMAX2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="710"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_max(<sp/>(x0),<sp/>(x1),<sp/>(y0),<sp/>(y1),<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="711"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="712"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="714"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RMAX3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="715"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_max(<sp/>(x0),<sp/>(x1),<sp/>(y0),<sp/>(y1),<sp/>(z0),<sp/>(z1),<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="716"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="717"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="720"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>REDUCE_MAX(...)<sp/>\</highlight></codeline>
<codeline lineno="721"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>RMAX3D,<sp/>_11,<sp/>_10,<sp/>RMAX2D,<sp/>_8,<sp/>_7,<sp/>RMAX1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DO_REDUCE_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="726"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RMAX1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="727"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_max(<sp/>(x0),<sp/>(x1)+1,<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="728"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="729"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="731"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RMAX2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="732"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_max(<sp/>(x0),<sp/>(x1)+1,<sp/>(y0),<sp/>(y1)+1,<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="733"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="734"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="736"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RMAX3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="737"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_max(<sp/>(x0),<sp/>(x1)+1,<sp/>(y0),<sp/>(y1)+1,<sp/>(z0),<sp/>(z1)+1,<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="738"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="739"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="742"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_REDUCE_MAX(...)<sp/>\</highlight></codeline>
<codeline lineno="743"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>DO_RMAX3D,<sp/>_11,<sp/>_10,<sp/>DO_RMAX2D,<sp/>_8,<sp/>_7,<sp/>DO_RMAX1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reduce<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="748"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RMIN1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="749"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_min(<sp/>(x0),<sp/>(x1),<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="750"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="753"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RMIN2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="754"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_min(<sp/>(x0),<sp/>(x1),<sp/>(y0),<sp/>(y1),<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="755"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="756"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RMIN3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="759"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_min(<sp/>(x0),<sp/>(x1),<sp/>(y0),<sp/>(y1),<sp/>(z0),<sp/>(z1),<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="761"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="764"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>REDUCE_MIN(...)<sp/>\</highlight></codeline>
<codeline lineno="765"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>RMIN3D,<sp/>_11,<sp/>_10,<sp/>RMIN2D,<sp/>_8,<sp/>_7,<sp/>RMIN1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DO_REDUCE_MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="770"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RMIN1D(i,<sp/>x0,<sp/>x1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="771"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_min(<sp/>(x0),<sp/>(x1)+1,<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="772"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="773"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="775"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RMIN2D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="776"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_min(<sp/>(x0),<sp/>(x1)+1,<sp/>(y0),<sp/>(y1)+1,<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="777"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),const<sp/>int<sp/>(j),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="778"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="780"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_RMIN3D(i,<sp/>x0,<sp/>x1,<sp/>j,<sp/>y0,<sp/>y1,<sp/>k,<sp/>z0,<sp/>z1,<sp/>var,<sp/>fcn,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>reduce_min(<sp/>(x0),<sp/>(x1)+1,<sp/>(y0),<sp/>(y1)+1,<sp/>(z0),<sp/>(z1)+1,<sp/>(var),<sp/><sp/>\</highlight></codeline>
<codeline lineno="782"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<sp/>const<sp/>int<sp/>(i),<sp/>const<sp/>int<sp/>(j),<sp/>const<sp/>int<sp/>(k),<sp/>decltype(var)<sp/>&amp;(var)<sp/>){fcn},<sp/>\</highlight></codeline>
<codeline lineno="783"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(result)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>\</highlight></codeline>
<codeline lineno="786"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DO_REDUCE_MIN(...)<sp/>\</highlight></codeline>
<codeline lineno="787"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GET_MACRO(__VA_ARGS__,<sp/>DO_RMIN3D,<sp/>_11,<sp/>_10,<sp/>DO_RMIN2D,<sp/>_8,<sp/>_7,<sp/>DO_RMIN1D)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>not<sp/>kokkos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/macros.h"/>
  </compounddef>
</doxygen>
