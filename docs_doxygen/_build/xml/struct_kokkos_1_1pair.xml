<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_kokkos_1_1pair" kind="struct" language="C++" prot="public">
    <compoundname>Kokkos::pair</compoundname>
    <includes refid="_kokkos___pair_8hpp" local="no">Kokkos_Pair.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T1</type>
      </param>
      <param>
        <type>class T2</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_kokkos_1_1pair_1af36b44574ee76ac29f29e07d0d5f8962" prot="public" static="no">
        <type>T1</type>
        <definition>using Kokkos::pair&lt; T1, T2 &gt;::first_type =  T1</definition>
        <argsstring></argsstring>
        <name>first_type</name>
        <qualifiedname>Kokkos::pair::first_type</qualifiedname>
        <briefdescription>
<para>The first template parameter of this class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="67" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_kokkos_1_1pair_1a0e0759a85151ef2522da1e13fbcccb5d" prot="public" static="no">
        <type>T2</type>
        <definition>using Kokkos::pair&lt; T1, T2 &gt;::second_type =  T2</definition>
        <argsstring></argsstring>
        <name>second_type</name>
        <qualifiedname>Kokkos::pair::second_type</qualifiedname>
        <briefdescription>
<para>The second template parameter of this class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="69" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_kokkos_1_1pair_1a0e373ffe96458360bf3703301efeb140" prot="public" static="no" mutable="no">
        <type><ref refid="struct_kokkos_1_1pair_1af36b44574ee76ac29f29e07d0d5f8962" kindref="member">first_type</ref></type>
        <definition>first_type Kokkos::pair&lt; T1, T2 &gt;::first</definition>
        <argsstring></argsstring>
        <name>first</name>
        <qualifiedname>Kokkos::pair::first</qualifiedname>
        <briefdescription>
<para>The first element of the pair. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="72" column="14" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_kokkos_1_1pair_1ad083c7edc8cef6a6bcc461b8478ca034" prot="public" static="no" mutable="no">
        <type><ref refid="struct_kokkos_1_1pair_1a0e0759a85151ef2522da1e13fbcccb5d" kindref="member">second_type</ref></type>
        <definition>second_type Kokkos::pair&lt; T1, T2 &gt;::second</definition>
        <argsstring></argsstring>
        <name>second</name>
        <qualifiedname>Kokkos::pair::second</qualifiedname>
        <briefdescription>
<para>The second element of the pair. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="74" column="15" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_kokkos_1_1pair_1aeb87edd09de651f134870426817e26e4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION constexpr</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION constexpr Kokkos::pair&lt; T1, T2 &gt;::pair</definition>
        <argsstring>()=default</argsstring>
        <name>pair</name>
        <qualifiedname>Kokkos::pair::pair</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>This calls the default constructors of T1 and T2. It won&apos;t compile if those default constructors are not defined and public. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="81" column="39"/>
      </memberdef>
      <memberdef kind="function" id="struct_kokkos_1_1pair_1a3528957f93dd001973524cbfae1c32e8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr Kokkos::pair&lt; T1, T2 &gt;::pair</definition>
        <argsstring>(first_type const &amp;f, second_type const &amp;s)</argsstring>
        <name>pair</name>
        <qualifiedname>Kokkos::pair::pair</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1pair_1af36b44574ee76ac29f29e07d0d5f8962" kindref="member">first_type</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_kokkos_1_1pair_1a0e0759a85151ef2522da1e13fbcccb5d" kindref="member">second_type</ref> const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Constructor that takes both elements of the pair. </para>
        </briefdescription>
        <detaileddescription>
<para>This calls the copy constructors of T1 and T2. It won&apos;t compile if those copy constructors are not defined and public. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="87" column="41" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="struct_kokkos_1_1pair_1a39437c3664b2084eb3b479f293fb584a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr Kokkos::pair&lt; T1, T2 &gt;::pair</definition>
        <argsstring>(const pair&lt; U, V &gt; &amp;p)</argsstring>
        <name>pair</name>
        <qualifiedname>Kokkos::pair::pair</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; U, V &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>This calls the copy constructors of T1 and T2. It won&apos;t compile if those copy constructors are not defined and public. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="96" column="41" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="96" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="struct_kokkos_1_1pair_1aa9ed474ac645f02892b0bf6d8275730e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr Kokkos::pair&lt; T1, T2 &gt;::pair</definition>
        <argsstring>(const volatile pair&lt; U, V &gt; &amp;p)</argsstring>
        <name>pair</name>
        <qualifiedname>Kokkos::pair::pair</qualifiedname>
        <param>
          <type>const volatile <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; U, V &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>This calls the copy constructors of T1 and T2. It won&apos;t compile if those copy constructors are not defined and public. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="104" column="41" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="104" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="struct_kokkos_1_1pair_1a1fe3f4134e616dfdff65b79412f54cc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt; &amp;</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION pair&lt; T1, T2 &gt; &amp; Kokkos::pair&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(const pair&lt; U, V &gt; &amp;p)</argsstring>
        <name>operator=</name>
        <qualifiedname>Kokkos::pair::operator=</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; U, V &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This calls the assignment operators of T1 and T2. It won&apos;t compile if the assignment operators are not defined and public. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="112" column="36" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="struct_kokkos_1_1pair_1abaf0d3dc271ee2cecfbc1365ed117453" prot="public" static="no" const="no" explicit="no" inline="yes" volatile="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION void</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION void Kokkos::pair&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(const volatile pair&lt; U, V &gt; &amp;p) volatile</argsstring>
        <name>operator=</name>
        <qualifiedname>Kokkos::pair::operator=</qualifiedname>
        <param>
          <type>const volatile <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; U, V &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Assignment operator, for volatile <computeroutput>*this</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] Input; right-hand side of the assignment.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This calls the assignment operators of T1 and T2. It will not compile if the assignment operators are not defined and public.</para>
<para>This operator returns <computeroutput>void</computeroutput> instead of <computeroutput>volatile pair&lt;T1, T2&gt;&amp; </computeroutput>. See Kokkos Issue #177 for the explanation. In practice, this means that you should not chain assignments with volatile lvalues. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="130" column="36" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="130" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="struct_kokkos_1_1pair_1a7da10aca5291cca86e5bfcc0ac61a98e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Kokkos::pair&lt; T1, T2 &gt;::pair</definition>
        <argsstring>(const std::pair&lt; U, V &gt; &amp;p)</argsstring>
        <name>pair</name>
        <qualifiedname>Kokkos::pair::pair</qualifiedname>
        <param>
          <type>const std::pair&lt; U, V &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="140" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="struct_kokkos_1_1pair_1a495714829571d249cda9d9b1c13e7741" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; T1, T2 &gt;</type>
        <definition>std::pair&lt; T1, T2 &gt; Kokkos::pair&lt; T1, T2 &gt;::to_std_pair</definition>
        <argsstring>() const</argsstring>
        <name>to_std_pair</name>
        <qualifiedname>Kokkos::pair::to_std_pair</qualifiedname>
        <briefdescription>
<para>Return the std::pair version of this object. </para>
        </briefdescription>
        <detaileddescription>
<para>This is <emphasis>not</emphasis> a device function; you may not call it on a CUDA device. It is meant to be called on the host, if the user wants an std::pair instead of a <ref refid="struct_kokkos_1_1pair" kindref="compound">Kokkos::pair</ref>.</para>
<para><simplesect kind="note"><para>This is not a conversion operator, since defining a conversion operator made the relational operators have ambiguous definitions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="151" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="151" bodyend="153"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Replacement for std::pair that works on CUDA devices. </para>
    </briefdescription>
    <detaileddescription>
<para>The instance methods of std::pair, including its constructors, are not marked as <computeroutput><bold>device</bold></computeroutput> functions. Thus, they cannot be called on a CUDA device, such as an NVIDIA GPU. This struct implements the same interface as std::pair, but can be used on a CUDA device as well as on the host. </para>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="65" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="65" bodyend="154"/>
    <listofallmembers>
      <member refid="struct_kokkos_1_1pair_1a0e373ffe96458360bf3703301efeb140" prot="public" virt="non-virtual"><scope>Kokkos::pair</scope><name>first</name></member>
      <member refid="struct_kokkos_1_1pair_1af36b44574ee76ac29f29e07d0d5f8962" prot="public" virt="non-virtual"><scope>Kokkos::pair</scope><name>first_type</name></member>
      <member refid="struct_kokkos_1_1pair_1a1fe3f4134e616dfdff65b79412f54cc2" prot="public" virt="non-virtual"><scope>Kokkos::pair</scope><name>operator=</name></member>
      <member refid="struct_kokkos_1_1pair_1abaf0d3dc271ee2cecfbc1365ed117453" prot="public" virt="non-virtual"><scope>Kokkos::pair</scope><name>operator=</name></member>
      <member refid="struct_kokkos_1_1pair_1aeb87edd09de651f134870426817e26e4" prot="public" virt="non-virtual"><scope>Kokkos::pair</scope><name>pair</name></member>
      <member refid="struct_kokkos_1_1pair_1a3528957f93dd001973524cbfae1c32e8" prot="public" virt="non-virtual"><scope>Kokkos::pair</scope><name>pair</name></member>
      <member refid="struct_kokkos_1_1pair_1a39437c3664b2084eb3b479f293fb584a" prot="public" virt="non-virtual"><scope>Kokkos::pair</scope><name>pair</name></member>
      <member refid="struct_kokkos_1_1pair_1aa9ed474ac645f02892b0bf6d8275730e" prot="public" virt="non-virtual"><scope>Kokkos::pair</scope><name>pair</name></member>
      <member refid="struct_kokkos_1_1pair_1a7da10aca5291cca86e5bfcc0ac61a98e" prot="public" virt="non-virtual"><scope>Kokkos::pair</scope><name>pair</name></member>
      <member refid="struct_kokkos_1_1pair_1ad083c7edc8cef6a6bcc461b8478ca034" prot="public" virt="non-virtual"><scope>Kokkos::pair</scope><name>second</name></member>
      <member refid="struct_kokkos_1_1pair_1a0e0759a85151ef2522da1e13fbcccb5d" prot="public" virt="non-virtual"><scope>Kokkos::pair</scope><name>second_type</name></member>
      <member refid="struct_kokkos_1_1pair_1a495714829571d249cda9d9b1c13e7741" prot="public" virt="non-virtual"><scope>Kokkos::pair</scope><name>to_std_pair</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
