<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4" kind="struct" language="C++" prot="public">
    <compoundname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>class DataType</type>
      </param>
      <param>
        <type>class DeviceType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a056668570e175289966cdb964f99a772" prot="public" static="no">
        <type>typename DeviceType::execution_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::execution_space =  typename DeviceType::execution_space</definition>
        <argsstring></argsstring>
        <name>execution_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::execution_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="100" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a2f17d8eabb09259da5d19e8358a0437b" prot="public" static="no">
        <type>typename DeviceType::memory_space</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::memory_space =  typename DeviceType::memory_space</definition>
        <argsstring></argsstring>
        <name>memory_space</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::memory_space</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="101" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1aebbdcf2eb6527c689d2151bc4a3fd3a1" prot="public" static="no">
        <type>typename execution_space::size_type</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::size_type =  typename execution_space::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="102" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1ab4f4a2ecc9d65c6a6661f79ed782c6e4" prot="public" static="no">
        <type>int</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::value_type =  int</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="104" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1ab040ef93902c5eaa485601b6dfcc3cb6" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::left_view =  Kokkos::View&lt;DataType, Kokkos::LayoutLeft, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>left_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::left_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="115" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a5964e0e5777b394038b9a610db32b90e" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::right_view =  Kokkos::View&lt;DataType, Kokkos::LayoutRight, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>right_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::right_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="116" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1af9dc6c35e80024a83d39ab60a26d5950" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; DataType, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref>, execution_space &gt;</type>
        <definition>using Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::stride_view =  Kokkos::View&lt;DataType, Kokkos::LayoutStride, execution_space&gt;</definition>
        <argsstring></argsstring>
        <name>stride_view</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::stride_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="118" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1ae222c4c292bac0022225898eb2fb5406" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">left_view</ref></type>
        <definition>left_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::left</definition>
        <argsstring></argsstring>
        <name>left</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::left</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="121" column="13" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1ab77de09d3abdad395fe548b9ac84ab25" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">right_view</ref></type>
        <definition>right_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::right</definition>
        <argsstring></argsstring>
        <name>right</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::right</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="122" column="14" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a8408c00f2a9c641dcc36eb30fb529c2c" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">stride_view</ref></type>
        <definition>stride_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::left_stride</definition>
        <argsstring></argsstring>
        <name>left_stride</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::left_stride</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="123" column="15" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a383934f56c9e679e9c037c69f427ca11" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">stride_view</ref></type>
        <definition>stride_view Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::right_stride</definition>
        <argsstring></argsstring>
        <name>right_stride</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::right_stride</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="124" column="15" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1af76fa9e9c6d8791056646c5dedefd695" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::left_alloc</definition>
        <argsstring></argsstring>
        <name>left_alloc</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::left_alloc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="125" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a106d5050c25ee46eb45c44772ad46bb6" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::right_alloc</definition>
        <argsstring></argsstring>
        <name>right_alloc</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::right_alloc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="126" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1aaa7a6b44277d71b33d1178dd6aab97d1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::join</definition>
        <argsstring>(volatile value_type &amp;update, const volatile value_type &amp;input)</argsstring>
        <name>join</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::join</qualifiedname>
        <param>
          <type>volatile value_type &amp;</type>
          <declname>update</declname>
        </param>
        <param>
          <type>const volatile value_type &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="107" column="15" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a9407c94eae7fb06f9ed2d8fbd58f6d2c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>static KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::init</definition>
        <argsstring>(value_type &amp;update)</argsstring>
        <name>init</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::init</qualifiedname>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="113" column="15" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="113" bodyend="113"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a02f8beadfe68404cee9566c8d58b63fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::TestViewOperator_LeftAndRight</definition>
        <argsstring>()</argsstring>
        <name>TestViewOperator_LeftAndRight</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::TestViewOperator_LeftAndRight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="128" column="3" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="128" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a195ee62f44c7c7627fef1b6129a8c4e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::testit</definition>
        <argsstring>()</argsstring>
        <name>testit</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::testit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="136" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="136" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a9a773d66381d5590961b95b81109fe52" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::operator()</definition>
        <argsstring>(const size_type, value_type &amp;update) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;::operator()</qualifiedname>
        <param>
          <type>const</type>
          <declname>size_type</declname>
        </param>
        <param>
          <type>value_type &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="145" column="8" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="145" bodyend="191"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</label>
        <link refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4"/>
        <childnode refid="2" relation="usage">
          <edgelabel>left</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>right</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>left_stride</edgelabel>
          <edgelabel>right_stride</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>Kokkos::View&lt; DataType, Kokkos::LayoutLeft, execution_space &gt;</label>
        <link refid="class_kokkos_1_1_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Kokkos::View&lt; DataType, Kokkos::LayoutRight, execution_space &gt;</label>
        <link refid="class_kokkos_1_1_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Kokkos::View&lt; DataType, Kokkos::LayoutStride, execution_space &gt;</label>
        <link refid="class_kokkos_1_1_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Kokkos::ViewTraits&lt; DataType, Properties... &gt;</label>
        <link refid="struct_kokkos_1_1_view_traits"/>
      </node>
    </collaborationgraph>
    <location file="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" line="99" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestViewAPI.hpp" bodystart="99" bodyend="192"/>
    <listofallmembers>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a056668570e175289966cdb964f99a772" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>execution_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a9407c94eae7fb06f9ed2d8fbd58f6d2c" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>init</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1aaa7a6b44277d71b33d1178dd6aab97d1" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>join</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1ae222c4c292bac0022225898eb2fb5406" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>left</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1af76fa9e9c6d8791056646c5dedefd695" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>left_alloc</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a8408c00f2a9c641dcc36eb30fb529c2c" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>left_stride</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1ab040ef93902c5eaa485601b6dfcc3cb6" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>left_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a2f17d8eabb09259da5d19e8358a0437b" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>memory_space</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a9a773d66381d5590961b95b81109fe52" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>operator()</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1ab77de09d3abdad395fe548b9ac84ab25" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>right</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a106d5050c25ee46eb45c44772ad46bb6" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>right_alloc</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a383934f56c9e679e9c037c69f427ca11" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>right_stride</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a5964e0e5777b394038b9a610db32b90e" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>right_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1aebbdcf2eb6527c689d2151bc4a3fd3a1" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>size_type</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1af9dc6c35e80024a83d39ab60a26d5950" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>stride_view</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a195ee62f44c7c7627fef1b6129a8c4e4" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>testit</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1a02f8beadfe68404cee9566c8d58b63fb" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>TestViewOperator_LeftAndRight</name></member>
      <member refid="struct_test_1_1_test_view_operator___left_and_right_3_01_data_type_00_01_device_type_00_018_01_4_1ab4f4a2ecc9d65c6a6661f79ed782c6e4" prot="public" virt="non-virtual"><scope>Test::TestViewOperator_LeftAndRight&lt; DataType, DeviceType, 8 &gt;</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
