<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_spack_8md" kind="file" language="Markdown">
    <compoundname>Spack.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">![Kokkos](https://avatars2.githubusercontent.com/u/10199860?s=200&amp;v=4)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Kokkos<sp/>Spack</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>gives<sp/>instructions<sp/>for<sp/>using<sp/>Spack<sp/>to<sp/>install<sp/>Kokkos<sp/>and<sp/>developing<sp/>packages<sp/>that<sp/>depend<sp/>on<sp/>Kokkos.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Getting<sp/>Started</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Make<sp/>sure<sp/>you<sp/>have<sp/>downloaded<sp/>[Spack](https://github.com/spack/spack).</highlight></codeline>
<codeline><highlight class="normal">The<sp/>easiest<sp/>way<sp/>to<sp/>configure<sp/>the<sp/>Spack<sp/>environment<sp/>is:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>source<sp/>spack/share/spack/setup-env.sh</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">with<sp/>other<sp/>scripts<sp/>available<sp/>for<sp/>other<sp/>shells.</highlight></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>display<sp/>information<sp/>about<sp/>how<sp/>to<sp/>install<sp/>packages<sp/>with:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>spack<sp/>info<sp/>kokkos</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">This<sp/>will<sp/>print<sp/>all<sp/>the<sp/>information<sp/>about<sp/>how<sp/>to<sp/>install<sp/>Kokkos<sp/>with<sp/>Spack.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>detailed<sp/>instructions<sp/>on<sp/>how<sp/>to<sp/>use<sp/>Spack,<sp/>see<sp/>the<sp/>[User<sp/>Manual](https://spack.readthedocs.io).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Setting<sp/>Up<sp/>Spack:<sp/>Avoiding<sp/>the<sp/>Package<sp/>Cascade</highlight></codeline>
<codeline><highlight class="normal">By<sp/>default,<sp/>Spack<sp/>doesn&apos;t<sp/>&apos;see&apos;<sp/>anything<sp/>on<sp/>your<sp/>system<sp/>-<sp/>including<sp/>things<sp/>like<sp/>CMake<sp/>and<sp/>CUDA.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>can<sp/>be<sp/>limited<sp/>by<sp/>adding<sp/>a<sp/>`packages.yaml`<sp/>to<sp/>your<sp/>`$HOME/.spack`<sp/>folder<sp/>that<sp/>includes<sp/>CMake<sp/>(and<sp/>CUDA,<sp/>if<sp/>applicable).<sp/><sp/>For<sp/>example,<sp/>your<sp/>`packages.yaml`<sp/>file<sp/>could<sp/>be:</highlight></codeline>
<codeline><highlight class="normal">````yaml</highlight></codeline>
<codeline><highlight class="normal">packages:</highlight></codeline>
<codeline><highlight class="normal"><sp/>cuda:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>modules:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>cuda@10.1.243:<sp/>[cuda/10.1.243]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>paths:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>cuda@10.1.243:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/opt/local/ppc64le-pwr8-nvidia/cuda/10.1.243</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>buildable:<sp/>false</highlight></codeline>
<codeline><highlight class="normal"><sp/>cmake:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>modules:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>cmake:<sp/>[cmake/3.16.8]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>paths:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>cmake:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/opt/local/ppc64le/cmake/3.16.8</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>buildable:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">The<sp/>`modules`<sp/>entry<sp/>is<sp/>only<sp/>necessary<sp/>on<sp/>systems<sp/>that<sp/>require<sp/>loading<sp/>Modules<sp/>(i.e.<sp/>most<sp/>DOE<sp/>systems).</highlight></codeline>
<codeline><highlight class="normal">The<sp/>`buildable`<sp/>flag<sp/>is<sp/>useful<sp/>to<sp/>make<sp/>sure<sp/>Spack<sp/>crashes<sp/>if<sp/>there<sp/>is<sp/>a<sp/>path<sp/>error,</highlight></codeline>
<codeline><highlight class="normal">rather<sp/>than<sp/>having<sp/>a<sp/>type-o<sp/>and<sp/>Spack<sp/>rebuilding<sp/>everything<sp/>because<sp/>`cmake`<sp/>isn&apos;t<sp/>found.</highlight></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>verify<sp/>your<sp/>environment<sp/>is<sp/>set<sp/>up<sp/>correctly<sp/>by<sp/>running<sp/>`spack<sp/>graph`<sp/>or<sp/>`spack<sp/>spec`.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>example:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>spack<sp/>graph<sp/>kokkos<sp/>+cuda</highlight></codeline>
<codeline><highlight class="normal">o<sp/><sp/>kokkos</highlight></codeline>
<codeline><highlight class="normal">|\</highlight></codeline>
<codeline><highlight class="normal">o<sp/>|<sp/><sp/>cuda</highlight></codeline>
<codeline><highlight class="normal"><sp/>/</highlight></codeline>
<codeline><highlight class="normal">o<sp/><sp/>cmake</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">Without<sp/>the<sp/>existing<sp/>CUDA<sp/>and<sp/>CMake<sp/>being<sp/>identified<sp/>in<sp/>`packages.yaml`,<sp/>a<sp/>(subset!)<sp/>of<sp/>the<sp/>output<sp/>would<sp/>be:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">o<sp/><sp/>kokkos</highlight></codeline>
<codeline><highlight class="normal">|\</highlight></codeline>
<codeline><highlight class="normal">|<sp/>o<sp/><sp/>cmake</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|\</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|\</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|\</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|\</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|\</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>o<sp/>|<sp/>|<sp/>|<sp/><sp/>libarchive</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|\<sp/>\<sp/>\<sp/>\</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|\<sp/>\<sp/>\<sp/>\</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|_|/</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|/|<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>o<sp/><sp/>curl</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|_|_|_|_|_|_|_|_|_|_|/|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|/|<sp/>|<sp/>|<sp/>|_|_|_|_|_|_|_|/</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|/|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>o<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/><sp/>openssl</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|/|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>o<sp/>|<sp/>|<sp/><sp/>libxml2</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|_|_|_|_|_|_|_|/|<sp/>|<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|\<sp/>\<sp/>\</highlight></codeline>
<codeline><highlight class="normal">|<sp/>o<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/><sp/>zlib</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/</highlight></codeline>
<codeline><highlight class="normal">|<sp/>o<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/><sp/>xz</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/</highlight></codeline>
<codeline><highlight class="normal">|<sp/>o<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/><sp/>rhash</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>o<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/><sp/>nettle</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|\<sp/>\<sp/>\<sp/>\<sp/>\<sp/>\<sp/>\</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>o<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/><sp/>libuv</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>o<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/><sp/>autoconf</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|_|/|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>|<sp/>|<sp/>|<sp/>|/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/<sp/>/</highlight></codeline>
<codeline><highlight class="normal">|<sp/>o<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/><sp/>perl</highlight></codeline>
<codeline><highlight class="normal">|<sp/>o<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/><sp/>gdbm</highlight></codeline>
<codeline><highlight class="normal">|<sp/>o<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/><sp/>readline</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Configuring<sp/>Kokkos<sp/>as<sp/>a<sp/>Project<sp/>Dependency</highlight></codeline>
<codeline><highlight class="normal">Say<sp/>you<sp/>have<sp/>a<sp/>project<sp/>&quot;SuperScience&quot;<sp/>which<sp/>needs<sp/>to<sp/>use<sp/>Kokkos.</highlight></codeline>
<codeline><highlight class="normal">In<sp/>your<sp/>`package.py`<sp/>file,<sp/>you<sp/>would<sp/>generally<sp/>include<sp/>something<sp/>like:</highlight></codeline>
<codeline><highlight class="normal">````python</highlight></codeline>
<codeline><highlight class="normal">class<sp/>SuperScience(CMakePackage):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>depends_on(&quot;kokkos&quot;)</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">Often<sp/>projects<sp/>want<sp/>to<sp/>tweak<sp/>behavior<sp/>when<sp/>using<sp/>certain<sp/>features,<sp/>e.g.</highlight></codeline>
<codeline><highlight class="normal">````python</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>depends_on(&quot;kokkos+cuda&quot;,<sp/>when=&quot;+cuda&quot;)</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">if<sp/>your<sp/>project<sp/>needs<sp/>CUDA-specific<sp/>logic<sp/>to<sp/>configure<sp/>and<sp/>build.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>illustrates<sp/>the<sp/>general<sp/>principle<sp/>in<sp/>Spack<sp/>of<sp/>&quot;flowing-up&quot;.</highlight></codeline>
<codeline><highlight class="normal">A<sp/>user<sp/>requests<sp/>a<sp/>feature<sp/>in<sp/>the<sp/>final<sp/>app:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>spack<sp/>install<sp/>superscience+cuda</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">This<sp/>flows<sp/>upstream<sp/>to<sp/>the<sp/>Kokkos<sp/>dependency,<sp/>causing<sp/>the<sp/>`kokkos+cuda`<sp/>variant<sp/>to<sp/>build.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>downstream<sp/>app<sp/>(SuperScience)<sp/>tells<sp/>the<sp/>upstream<sp/>app<sp/>(Kokkos)<sp/>how<sp/>to<sp/>build.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Because<sp/>Kokkos<sp/>is<sp/>a<sp/>performance<sp/>portability<sp/>library,<sp/>it<sp/>somewhat<sp/>inverts<sp/>this<sp/>principle.</highlight></codeline>
<codeline><highlight class="normal">Kokkos<sp/>&quot;flows-down&quot;,<sp/>telling<sp/>your<sp/>application<sp/>how<sp/>best<sp/>to<sp/>configure<sp/>for<sp/>performance.</highlight></codeline>
<codeline><highlight class="normal">Rather<sp/>than<sp/>a<sp/>downstream<sp/>app<sp/>(SuperScience)<sp/>telling<sp/>the<sp/>upstream<sp/>(Kokkos)<sp/>what<sp/>variants<sp/>to<sp/>build,</highlight></codeline>
<codeline><highlight class="normal">a<sp/>pre-built<sp/>Kokkos<sp/>should<sp/>be<sp/>telling<sp/>the<sp/>downstream<sp/>app<sp/>SuperScience<sp/>what<sp/>variants<sp/>to<sp/>use.</highlight></codeline>
<codeline><highlight class="normal">Kokkos<sp/>works<sp/>best<sp/>when<sp/>there<sp/>is<sp/>an<sp/>&quot;expert&quot;<sp/>configuration<sp/>installed<sp/>on<sp/>your<sp/>system.</highlight></codeline>
<codeline><highlight class="normal">Your<sp/>build<sp/>should<sp/>simply<sp/>request<sp/>`-DKokkos_ROOT=&lt;BEST_KOKKOS_FOR_MY_SYSTEM&gt;`<sp/>and<sp/>configure<sp/>appropriately<sp/>based<sp/>on<sp/>the<sp/>Kokkos<sp/>it<sp/>finds.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Kokkos<sp/>has<sp/>many,<sp/>many<sp/>build<sp/>variants.</highlight></codeline>
<codeline><highlight class="normal">Where<sp/>possible,<sp/>projects<sp/>should<sp/>only<sp/>depend<sp/>on<sp/>a<sp/>general<sp/>Kokkos,<sp/>not<sp/>specific<sp/>variants.</highlight></codeline>
<codeline><highlight class="normal">We<sp/>recommend<sp/>instead<sp/>adding<sp/>for<sp/>each<sp/>system<sp/>you<sp/>build<sp/>on<sp/>a<sp/>Kokkos<sp/>configuration<sp/>to<sp/>your<sp/>`packages.yaml`<sp/>file<sp/>(usually<sp/>found<sp/>in<sp/>`~/.spack`<sp/>for<sp/>specific<sp/>users).</highlight></codeline>
<codeline><highlight class="normal">For<sp/>a<sp/>Xeon<sp/>+<sp/>Volta<sp/>system,<sp/>this<sp/>could<sp/>look<sp/>like:</highlight></codeline>
<codeline><highlight class="normal">````yaml</highlight></codeline>
<codeline><highlight class="normal"><sp/>kokkos:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>variants:<sp/>+cuda<sp/>+openmp<sp/>+cuda_lambda<sp/>+wrapper<sp/>^cuda@10.1<sp/>cuda_arch=70</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>compiler:<sp/>[gcc@7.2.0]</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">which<sp/>gives<sp/>the<sp/>&quot;best&quot;<sp/>Kokkos<sp/>configuration<sp/>as<sp/>CUDA+OpenMP<sp/>optimized<sp/>for<sp/>a<sp/>Volta<sp/>70<sp/>architecture<sp/>using<sp/>CUDA<sp/>10.1.</highlight></codeline>
<codeline><highlight class="normal">It<sp/>also<sp/>enables<sp/>support<sp/>for<sp/>CUDA<sp/>Lambdas.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>`+wrapper`<sp/>option<sp/>tells<sp/>Kokkos<sp/>to<sp/>build<sp/>with<sp/>the<sp/>special<sp/>`nvcc_wrapper`<sp/>(more<sp/>below).</highlight></codeline>
<codeline><highlight class="normal">Note<sp/>here<sp/>that<sp/>we<sp/>use<sp/>the<sp/>built-in<sp/>`cuda_arch`<sp/>variant<sp/>of<sp/>Spack<sp/>to<sp/>specify<sp/>the<sp/>archicture.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>a<sp/>Haswell<sp/>system,<sp/>we<sp/>use</highlight></codeline>
<codeline><highlight class="normal">````yaml</highlight></codeline>
<codeline><highlight class="normal"><sp/>kokkos:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>variants:<sp/>+openmp<sp/>std=14<sp/>target=haswell</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>compiler:<sp/>[intel@18]</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">which<sp/>uses<sp/>the<sp/>built-in<sp/>microarchitecture<sp/>variants<sp/>of<sp/>Spack.</highlight></codeline>
<codeline><highlight class="normal">Consult<sp/>the<sp/>Spack<sp/>documentation<sp/>for<sp/>more<sp/>details<sp/>of<sp/>Spack<sp/>microarchitectures</highlight></codeline>
<codeline><highlight class="normal">and<sp/>CUDA<sp/>architectures.</highlight></codeline>
<codeline><highlight class="normal">Spack<sp/>does<sp/>not<sp/>currently<sp/>provide<sp/>an<sp/>AMD<sp/>GPU<sp/>microarchitecture<sp/>option.</highlight></codeline>
<codeline><highlight class="normal">If<sp/>building<sp/>for<sp/>HIP<sp/>or<sp/>an<sp/>AMD<sp/>GPU,<sp/>Kokkos<sp/>provides<sp/>an<sp/>`amd_gpu_arch`<sp/>similar<sp/>to<sp/>`cuda_arch`.</highlight></codeline>
<codeline><highlight class="normal">````yaml</highlight></codeline>
<codeline><highlight class="normal"><sp/>kokkos:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>variants:<sp/>+hip<sp/>amd_gpu_arch=vega900</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Without<sp/>an<sp/>optimal<sp/>default<sp/>in<sp/>your<sp/>`packages.yaml`<sp/>file,<sp/>it<sp/>is<sp/>highly<sp/>likely<sp/>that<sp/>the<sp/>default<sp/>Kokkos<sp/>configuration<sp/>you<sp/>get<sp/>will<sp/>not<sp/>be<sp/>what<sp/>you<sp/>want.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>CUDA<sp/>is<sp/>not<sp/>enabled<sp/>by<sp/>default<sp/>(there<sp/>is<sp/>no<sp/>easy<sp/>logic<sp/>to<sp/>conditionally<sp/>activate<sp/>this<sp/>for<sp/>CUDA-enabled<sp/>systems).</highlight></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>don&apos;t<sp/>specify<sp/>a<sp/>CUDA<sp/>build<sp/>variant<sp/>in<sp/>a<sp/>`packages.yaml`<sp/>and<sp/>you<sp/>build<sp/>your<sp/>Kokkos-dependent<sp/>project:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>spack<sp/>install<sp/>superscience</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">you<sp/>may<sp/>end<sp/>up<sp/>just<sp/>getting<sp/>the<sp/>default<sp/>Kokkos<sp/>(i.e.<sp/>Serial).</highlight></codeline>
<codeline><highlight class="normal">Some<sp/>examples<sp/>are<sp/>included<sp/>in<sp/>the<sp/>`config/yaml`<sp/>folder<sp/>for<sp/>common<sp/>platforms.</highlight></codeline>
<codeline><highlight class="normal">Before<sp/>running<sp/>`spack<sp/>install<sp/>&lt;package&gt;`<sp/>we<sp/>recommend<sp/>running<sp/>`spack<sp/>spec<sp/>&lt;package&gt;`<sp/>to<sp/>confirm<sp/>your<sp/>dependency<sp/>tree<sp/>is<sp/>correct.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>with<sp/>Kokkos<sp/>Kernels:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">kokkos-kernels@3.0%gcc@8.3.0~blas<sp/>build_type=RelWithDebInfo<sp/>~cblas~complex_double~complex_float~cublas~cuda<sp/>cuda_arch=none<sp/>~cusparse~diy+double<sp/>execspace_cuda=auto<sp/>execspace_openmp=auto<sp/>execspace_serial=auto<sp/>execspace_threads=auto<sp/>~float~lapack~lapacke+layoutleft~layoutright<sp/>memspace_cudaspace=auto<sp/>memspace_cudauvmspace=auto<sp/>+memspace_hostspace~mkl+offset_int+offset_size_t~openmp+ordinal_int~ordinal_int64_t~serial~superlu<sp/>arch=linux-rhel7-skylake_avx512</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>^cmake@3.16.2%gcc@8.3.0~doc+ncurses+openssl+ownlibs~qt<sp/>arch=linux-rhel7-skylake_avx512</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>^kokkos@3.0%gcc@8.3.0~aggressive_vectorization~amdavx~armv80~armv81~armv8_thunderx~armv8_tx2~bdw~bgq<sp/>build_type=RelWithDebInfo<sp/>~carrizo~compiler_warnings+cuda<sp/>cuda_arch=none<sp/>+cuda_lambda~cuda_ldg_intrinsic~cuda_relocatable_device_code~cuda_uvm~debug~debug_bounds_check~debug_dualview_modify_check~deprecated_code~diy~epyc~examples~explicit_instantiation~fiji~gfx901~hpx~hpx_async_dispatch~hsw~hwloc~kaveri~kepler30~kepler32~kepler35~kepler37~knc~knl~maxwell50~maxwell52~maxwell53~memkind~numactl+openmp~pascal60~pascal61~power7~power8~power9+profiling~profiling_load_print~pthread~qthread~rocm~ryzen~serial~skx~snb<sp/>std=14<sp/>~tests~turing75~vega+volta70~volta72+wrapper~wsm<sp/>arch=linux-rhel7-skylake_avx512</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>^cuda@10.1%gcc@8.3.0<sp/>arch=linux-rhel7-skylake_avx512</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>^kokkos-nvcc-wrapper@old%gcc@8.3.0<sp/>build_type=RelWithDebInfo<sp/>+mpi<sp/>arch=linux-rhel7-skylake_avx512</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>^openmpi@4.0.2%gcc@8.3.0~cuda+cxx_exceptions<sp/>fabrics=none<sp/>~java~legacylaunchers~memchecker<sp/>patches=073477a76bba780c67c36e959cd3ee6910743e2735c7e76850ffba6791d498e4<sp/>~pmi<sp/>schedulers=none<sp/>~sqlite3~thread_multiple+vt<sp/>arch=linux-rhel7-skylake_avx512</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">The<sp/>output<sp/>can<sp/>be<sp/>very<sp/>verbose,<sp/>but<sp/>we<sp/>can<sp/>verify<sp/>the<sp/>expected<sp/>`kokkos`:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">kokkos@3.0%gcc@8.3.0~aggressive_vectorization~amdavx~armv80~armv81~armv8_thunderx~armv8_tx2~bdw~bgq<sp/>build_type=RelWithDebInfo<sp/>~carrizo~compiler_warnings+cuda<sp/>cuda_arch=none<sp/>+cuda_lambda~cuda_ldg_intrinsic~cuda_relocatable_device_code~cuda_uvm~debug~debug_bounds_check~debug_dualview_modify_check~deprecated_code~diy~epyc~examples~explicit_instantiation~fiji~gfx901~hpx~hpx_async_dispatch~hsw~hwloc~kaveri~kepler30~kepler32~kepler35~kepler37~knc~knl~maxwell50~maxwell52~maxwell53~memkind~numactl+openmp~pascal60~pascal61~power7~power8~power9+profiling~profiling_load_print~pthread~qthread~rocm~ryzen~serial~skx~snb<sp/>std=11<sp/>~tests~turing75~vega+volta70~volta72+wrapper~wsm<sp/>arch=linux-rhel7-skylake_avx512</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">We<sp/>see<sp/>that<sp/>we<sp/>do<sp/>have<sp/>`+volta70`<sp/>and<sp/>`+wrapper`,<sp/>e.g.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Spack<sp/>Environments</highlight></codeline>
<codeline><highlight class="normal">The<sp/>encouraged<sp/>way<sp/>to<sp/>use<sp/>Spack<sp/>is<sp/>with<sp/>Spack<sp/>environments<sp/>([more<sp/>details<sp/>here](https://spack-tutorial.readthedocs.io/en/latest/tutorial_environments.html#dealing-with-many-specs-at-once)).</highlight></codeline>
<codeline><highlight class="normal">Rather<sp/>than<sp/>installing<sp/>packages<sp/>one-at-a-time,<sp/>you<sp/>add<sp/>packages<sp/>to<sp/>an<sp/>environment.</highlight></codeline>
<codeline><highlight class="normal">After<sp/>adding<sp/>all<sp/>packages,<sp/>you<sp/>concretize<sp/>and<sp/>install<sp/>them<sp/>all.</highlight></codeline>
<codeline><highlight class="normal">Using<sp/>environments,<sp/>one<sp/>can<sp/>explicitly<sp/>add<sp/>a<sp/>desired<sp/>Kokkos<sp/>for<sp/>the<sp/>environment,<sp/>e.g.</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>spack<sp/>add<sp/>kokkos<sp/>+cuda<sp/>+cuda_lambda<sp/>+volta70</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>spack<sp/>add<sp/>my_project<sp/>+my_variant</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>...</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>spack<sp/>install</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">All<sp/>packages<sp/>within<sp/>the<sp/>environment<sp/>will<sp/>build<sp/>against<sp/>the<sp/>CUDA-enabled<sp/>Kokkos,</highlight></codeline>
<codeline><highlight class="normal">even<sp/>if<sp/>they<sp/>only<sp/>request<sp/>a<sp/>default<sp/>Kokkos.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>NVCC<sp/>Wrapper</highlight></codeline>
<codeline><highlight class="normal">Kokkos<sp/>is<sp/>a<sp/>C++<sp/>project,<sp/>but<sp/>often<sp/>builds<sp/>for<sp/>the<sp/>CUDA<sp/>backend.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>particularly<sp/>problematic<sp/>with<sp/>CMake.<sp/>At<sp/>this<sp/>point,<sp/>`nvcc`<sp/>does<sp/>not<sp/>accept<sp/>all<sp/>the<sp/>flags<sp/>that<sp/>normally<sp/>get<sp/>passed<sp/>to<sp/>a<sp/>C++<sp/>compiler.</highlight></codeline>
<codeline><highlight class="normal">Kokkos<sp/>provides<sp/>`nvcc_wrapper`<sp/>that<sp/>identifies<sp/>correctly<sp/>as<sp/>a<sp/>C++<sp/>compiler<sp/>to<sp/>CMake<sp/>and<sp/>accepts<sp/>C++<sp/>flags,<sp/>but<sp/>uses<sp/>`nvcc`<sp/>as<sp/>the<sp/>underlying<sp/>compiler.</highlight></codeline>
<codeline><highlight class="normal">`nvcc`<sp/>itself<sp/>also<sp/>uses<sp/>an<sp/>underlying<sp/>host<sp/>compiler,<sp/>e.g.<sp/>GCC.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>Spack,<sp/>the<sp/>underlying<sp/>host<sp/>compiler<sp/>is<sp/>specified<sp/>as<sp/>below,<sp/>e.g.:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>spack<sp/>install<sp/>package<sp/>%gcc@8.0.0</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>still<sp/>valid<sp/>for<sp/>Kokkos.<sp/>To<sp/>use<sp/>the<sp/>special<sp/>wrapper<sp/>for<sp/>CUDA<sp/>builds,<sp/>request<sp/>a<sp/>desired<sp/>compiler<sp/>and<sp/>simply<sp/>add<sp/>the<sp/>`+wrapper`<sp/>variant.</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>spack<sp/>install<sp/>kokkos<sp/>+cuda<sp/>+wrapper<sp/>%gcc@7.2.0</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">Downstream<sp/>projects<sp/>depending<sp/>on<sp/>Kokkos<sp/>need<sp/>to<sp/>override<sp/>their<sp/>compiler.</highlight></codeline>
<codeline><highlight class="normal">Kokkos<sp/>provides<sp/>the<sp/>compiler<sp/>in<sp/>a<sp/>`kokkos_cxx`<sp/>variable,</highlight></codeline>
<codeline><highlight class="normal">which<sp/>points<sp/>to<sp/>either<sp/>`nvcc_wrapper`<sp/>when<sp/>needed<sp/>or<sp/>the<sp/>regular<sp/>compiler<sp/>otherwise.</highlight></codeline>
<codeline><highlight class="normal">Spack<sp/>projects<sp/>already<sp/>do<sp/>this<sp/>to<sp/>use<sp/>MPI<sp/>compiler<sp/>wrappers.</highlight></codeline>
<codeline><highlight class="normal">````python</highlight></codeline>
<codeline><highlight class="normal">def<sp/>cmake_args(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>options<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>options.append(&quot;-DCMAKE_CXX_COMPILER=%s&quot;<sp/>%<sp/>self.spec[&quot;kokkos&quot;].kokkos_cxx)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>options</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">Note:<sp/>`nvcc_wrapper`<sp/>works<sp/>with<sp/>the<sp/>MPI<sp/>compiler<sp/>wrappers.</highlight></codeline>
<codeline><highlight class="normal">If<sp/>building<sp/>your<sp/>project<sp/>with<sp/>MPI,<sp/>do<sp/>NOT<sp/>set<sp/>your<sp/>compiler<sp/>to<sp/>`nvcc_wrapper`.</highlight></codeline>
<codeline><highlight class="normal">Instead<sp/>set<sp/>your<sp/>compiler<sp/>to<sp/>`mpicxx`<sp/>and<sp/>`nvcc_wrapper`<sp/>will<sp/>be<sp/>used<sp/>under<sp/>the<sp/>hood.</highlight></codeline>
<codeline><highlight class="normal">````python</highlight></codeline>
<codeline><highlight class="normal">def<sp/>cmake_args(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>options<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>options.append(&quot;-DCMAKE_CXX_COMPILER=%s&quot;<sp/>%<sp/>self.spec[&quot;mpi&quot;].mpicxx)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>options</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">To<sp/>accomplish<sp/>this,<sp/>`nvcc_wrapper`<sp/>must<sp/>depend<sp/>on<sp/>MPI<sp/>(even<sp/>though<sp/>it<sp/>uses<sp/>no<sp/>MPI).</highlight></codeline>
<codeline><highlight class="normal">This<sp/>has<sp/>the<sp/>unfortunate<sp/>consequence<sp/>that<sp/>Kokkos<sp/>CUDA<sp/>projects<sp/>not<sp/>using<sp/>MPI<sp/>will<sp/>implicitly<sp/>depend<sp/>on<sp/>MPI<sp/>anyway.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>behavior<sp/>is<sp/>necessary<sp/>for<sp/>now,<sp/>but<sp/>will<sp/>hopefully<sp/>be<sp/>removed<sp/>later.</highlight></codeline>
<codeline><highlight class="normal">When<sp/>using<sp/>environments,<sp/>if<sp/>MPI<sp/>is<sp/>not<sp/>needed,<sp/>you<sp/>can<sp/>remove<sp/>the<sp/>MPI<sp/>dependency<sp/>with:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>spack<sp/>add<sp/>kokkos-nvcc-wrapper<sp/>~mpi</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Developing<sp/>With<sp/>Spack</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Spack<sp/>has<sp/>historically<sp/>been<sp/>much<sp/>more<sp/>suited<sp/>to<sp/>*deployment*<sp/>of<sp/>mature<sp/>packages<sp/>than<sp/>active<sp/>testing<sp/>or<sp/>developing.</highlight></codeline>
<codeline><highlight class="normal">However,<sp/>recent<sp/>features<sp/>have<sp/>improved<sp/>support<sp/>for<sp/>development.</highlight></codeline>
<codeline><highlight class="normal">Future<sp/>releases<sp/>are<sp/>likely<sp/>to<sp/>make<sp/>this<sp/>even<sp/>easier<sp/>and<sp/>incorporate<sp/>Git<sp/>integration.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>most<sp/>common<sp/>commands<sp/>will<sp/>do<sp/>a<sp/>full<sp/>build<sp/>and<sp/>install<sp/>of<sp/>the<sp/>packages.</highlight></codeline>
<codeline><highlight class="normal">If<sp/>doing<sp/>development,<sp/>you<sp/>may<sp/>wish<sp/>to<sp/>merely<sp/>set<sp/>up<sp/>a<sp/>build<sp/>environment.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>allows<sp/>you<sp/>to<sp/>modify<sp/>the<sp/>source<sp/>and<sp/>re-build.</highlight></codeline>
<codeline><highlight class="normal">In<sp/>this<sp/>case,<sp/>you<sp/>can<sp/>stop<sp/>after<sp/>configuring.</highlight></codeline>
<codeline><highlight class="normal">Suppose<sp/>you<sp/>have<sp/>Kokkos<sp/>checkout<sp/>in<sp/>the<sp/>folder<sp/>`kokkos-src`:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>spack<sp/>dev-build<sp/>-d<sp/>kokkos-src<sp/>-u<sp/>cmake<sp/>kokkos@develop<sp/>+wrapper<sp/>+openmp</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">This<sp/>sets<sp/>up<sp/>a<sp/>development<sp/>environment<sp/>for<sp/>you<sp/>in<sp/>`kokkos-src`<sp/>which<sp/>you<sp/>can<sp/>use<sp/>(Bash<sp/>example<sp/>shown):</highlight></codeline>
<codeline><highlight class="normal">Note:<sp/>Always<sp/>specify<sp/>`develop`<sp/>as<sp/>the<sp/>version<sp/>when<sp/>doing<sp/>`dev-build`,<sp/>except<sp/>in<sp/>rare<sp/>cases.</highlight></codeline>
<codeline><highlight class="normal">You<sp/>are<sp/>usually<sp/>developing<sp/>a<sp/>feature<sp/>branch<sp/>that<sp/>will<sp/>merge<sp/>into<sp/>`develop`,</highlight></codeline>
<codeline><highlight class="normal">hence<sp/>you<sp/>are<sp/>making<sp/>a<sp/>new<sp/>`develop`<sp/>branch.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>cd<sp/>kokko-src</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>source<sp/>spack-build-env.txt</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>cd<sp/>spack-build</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>make</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">Before<sp/>sourcing<sp/>the<sp/>Spack<sp/>development<sp/>environment,<sp/>you<sp/>may<sp/>wish<sp/>to<sp/>save<sp/>your<sp/>current<sp/>environment:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>declare<sp/>-px<sp/>&gt;<sp/>myenv.sh</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline><highlight class="normal">When<sp/>done<sp/>with<sp/>Spack,<sp/>you<sp/>can<sp/>then<sp/>restore<sp/>your<sp/>original<sp/>environment:</highlight></codeline>
<codeline><highlight class="normal">````bash</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>source<sp/>myenv.sh</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
    </programlisting>
    <location file="src/Kokkos/kokkos/Spack.md"/>
  </compounddef>
</doxygen>
