<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_test_mathematical_functions_8hpp" kind="file" language="C++">
    <compoundname>TestMathematicalFunctions.hpp</compoundname>
    <includes refid="gtest_8h" local="no">gtest/gtest.h</includes>
    <includes refid="_kokkos___core_8hpp" local="no">Kokkos_Core.hpp</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">initializer_list</includes>
    <includes local="no">type_traits</includes>
    <includes refid="_kokkos___exec_policy_8hpp" local="yes">Kokkos_ExecPolicy.hpp</includes>
    <includes refid="_kokkos___parallel___reduce_8hpp" local="yes">Kokkos_Parallel_Reduce.hpp</includes>
    <includes local="no">cfloat</includes>
    <incdepgraph>
      <node id="39">
        <label>Cuda/Kokkos_Cuda_Half.hpp</label>
        <link refid="_kokkos___cuda___half_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>KokkosExp_MDRangePolicy.hpp</label>
        <link refid="_kokkos_exp___m_d_range_policy_8hpp_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="146">
        <label>Kokkos_AcquireUniqueTokenImpl.hpp</label>
        <link refid="_kokkos___acquire_unique_token_impl_8hpp_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>Kokkos_AnonymousSpace.hpp</label>
        <link refid="_kokkos___anonymous_space_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>Kokkos_Array.hpp</label>
        <link refid="_kokkos___array_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>Kokkos_Atomic.hpp</label>
        <link refid="_kokkos___atomic_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>Kokkos_Complex.hpp</label>
        <link refid="_kokkos___complex_8hpp_source"/>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>Kokkos_Concepts.hpp</label>
        <link refid="_kokkos___concepts_8hpp_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="141">
        <label>Kokkos_CopyViews.hpp</label>
        <link refid="_kokkos___copy_views_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Kokkos_Core.hpp</label>
        <link refid="_kokkos___core_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Kokkos_Core_fwd.hpp</label>
        <link refid="_kokkos___core__fwd_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>Kokkos_Crs.hpp</label>
        <link refid="_kokkos___crs_8hpp_source"/>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
      </node>
      <node id="122">
        <label>Kokkos_DetectionIdiom.hpp</label>
        <link refid="_kokkos___detection_idiom_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>Kokkos_ExecPolicy.hpp</label>
        <link refid="_kokkos___exec_policy_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="125">
        <label>Kokkos_Extents.hpp</label>
        <link refid="_kokkos___extents_8hpp_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>Kokkos_Half.hpp</label>
        <link refid="_kokkos___half_8hpp_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>Kokkos_HostSpace.hpp</label>
        <link refid="_kokkos___host_space_8hpp_source"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>Kokkos_Layout.hpp</label>
        <link refid="_kokkos___layout_8hpp"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>Kokkos_LogicalSpaces.hpp</label>
        <link refid="_kokkos___logical_spaces_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Kokkos_Macros.hpp</label>
        <link refid="_kokkos___macros_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>Kokkos_MathematicalFunctions.hpp</label>
        <link refid="_kokkos___mathematical_functions_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>Kokkos_MathematicalSpecialFunctions.hpp</label>
        <link refid="_kokkos___mathematical_special_functions_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>Kokkos_MemoryPool.hpp</label>
        <link refid="_kokkos___memory_pool_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>Kokkos_MemoryTraits.hpp</label>
        <link refid="_kokkos___memory_traits_8hpp_source"/>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>Kokkos_NumericTraits.hpp</label>
        <link refid="_kokkos___numeric_traits_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>Kokkos_Pair.hpp</label>
        <link refid="_kokkos___pair_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>Kokkos_Parallel.hpp</label>
        <link refid="_kokkos___parallel_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
      </node>
      <node id="133">
        <label>Kokkos_Parallel_Reduce.hpp</label>
        <link refid="_kokkos___parallel___reduce_8hpp_source"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>Kokkos_Rank.hpp</label>
        <link refid="_kokkos___rank_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>Kokkos_ScratchSpace.hpp</label>
        <link refid="_kokkos___scratch_space_8hpp_source"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="140">
        <label>Kokkos_TaskScheduler.hpp</label>
        <link refid="_kokkos___task_scheduler_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="139">
        <label>Kokkos_Timer.hpp</label>
        <link refid="_kokkos___timer_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>Kokkos_Tuners.hpp</label>
        <link refid="_kokkos___tuners_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="147">
        <label>Kokkos_UniqueToken.hpp</label>
        <link refid="_kokkos___unique_token_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="137">
        <label>Kokkos_Vectorization.hpp</label>
        <link refid="_kokkos___vectorization_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="123">
        <label>Kokkos_View.hpp</label>
        <link refid="_kokkos___view_8hpp_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
      </node>
      <node id="144">
        <label>Kokkos_WorkGraphPolicy.hpp</label>
        <link refid="_kokkos___work_graph_policy_8hpp_source"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="138">
        <label>Kokkos_hwloc.hpp</label>
        <link refid="_kokkos__hwloc_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>impl/KokkosExp_Host_IterateTile.hpp</label>
        <link refid="_kokkos_exp___host___iterate_tile_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>impl/Kokkos_AnalyzePolicy.hpp</label>
        <link refid="_kokkos___analyze_policy_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>impl/Kokkos_Atomic_Assembly.hpp</label>
        <link refid="_kokkos___atomic___assembly_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>impl/Kokkos_Atomic_Compare_Exchange_Strong.hpp</label>
        <link refid="_kokkos___atomic___compare___exchange___strong_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>impl/Kokkos_Atomic_Decrement.hpp</label>
        <link refid="_kokkos___atomic___decrement_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>impl/Kokkos_Atomic_Exchange.hpp</label>
        <link refid="_kokkos___atomic___exchange_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>impl/Kokkos_Atomic_Fetch_Add.hpp</label>
        <link refid="_kokkos___atomic___fetch___add_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>impl/Kokkos_Atomic_Fetch_And.hpp</label>
        <link refid="_kokkos___atomic___fetch___and_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="112">
        <label>impl/Kokkos_Atomic_Fetch_Or.hpp</label>
        <link refid="_kokkos___atomic___fetch___or_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>impl/Kokkos_Atomic_Fetch_Sub.hpp</label>
        <link refid="_kokkos___atomic___fetch___sub_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>impl/Kokkos_Atomic_Generic.hpp</label>
        <link refid="_kokkos___atomic___generic_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>impl/Kokkos_Atomic_Generic_Secondary.hpp</label>
        <link refid="_kokkos___atomic___generic___secondary_8hpp_source"/>
      </node>
      <node id="109">
        <label>impl/Kokkos_Atomic_Increment.hpp</label>
        <link refid="_kokkos___atomic___increment_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>impl/Kokkos_Atomic_Load.hpp</label>
        <link refid="_kokkos___atomic___load_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>impl/Kokkos_Atomic_Memory_Order.hpp</label>
        <link refid="_kokkos___atomic___memory___order_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>impl/Kokkos_Atomic_MinMax.hpp</label>
        <link refid="_kokkos___atomic___min_max_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="117">
        <label>impl/Kokkos_Atomic_Store.hpp</label>
        <link refid="_kokkos___atomic___store_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="128">
        <label>impl/Kokkos_Atomic_View.hpp</label>
        <link refid="_kokkos___atomic___view_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>impl/Kokkos_BitOps.hpp</label>
        <link refid="_kokkos___bit_ops_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="135">
        <label>impl/Kokkos_ClockTic.hpp</label>
        <link refid="_kokkos___clock_tic_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
      </node>
      <node id="145">
        <label>impl/Kokkos_Combined_Reducer.hpp</label>
        <link refid="_kokkos___combined___reducer_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="134">
        <label>impl/Kokkos_ConcurrentBitset.hpp</label>
        <link refid="_kokkos___concurrent_bitset_8hpp_source"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>impl/Kokkos_Error.hpp</label>
        <link refid="_kokkos___error_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="132">
        <label>impl/Kokkos_FunctorAdapter.hpp</label>
        <link refid="_kokkos___functor_adapter_8hpp_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="131">
        <label>impl/Kokkos_FunctorAnalysis.hpp</label>
        <link refid="_kokkos___functor_analysis_8hpp_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>impl/Kokkos_GraphImpl_fwd.hpp</label>
        <link refid="_kokkos___graph_impl__fwd_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>impl/Kokkos_HostSpace_deepcopy.hpp</label>
        <link refid="_kokkos___host_space__deepcopy_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>impl/Kokkos_MemorySpace.hpp</label>
        <link refid="_kokkos___memory_space_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>impl/Kokkos_Memory_Fence.hpp</label>
        <link refid="_kokkos___memory___fence_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>impl/Kokkos_Profiling.hpp</label>
        <link refid="_kokkos___profiling_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>impl/Kokkos_Profiling_C_Interface.h</label>
        <link refid="_kokkos___profiling___c___interface_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>impl/Kokkos_Profiling_DeviceInfo.hpp</label>
        <link refid="_kokkos___profiling___device_info_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>impl/Kokkos_Profiling_Interface.hpp</label>
        <link refid="_kokkos___profiling___interface_8hpp_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>impl/Kokkos_SharedAlloc.hpp</label>
        <link refid="_kokkos___shared_alloc_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>impl/Kokkos_Tools.hpp</label>
        <link refid="_kokkos___tools_8hpp_source"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>impl/Kokkos_Traits.hpp</label>
        <link refid="_kokkos___traits_8hpp_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>impl/Kokkos_Utilities.hpp</label>
        <link refid="_kokkos___utilities_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="129">
        <label>impl/Kokkos_ViewArray.hpp</label>
        <link refid="_kokkos___view_array_8hpp_source"/>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>impl/Kokkos_ViewCtor.hpp</label>
        <link refid="_kokkos___view_ctor_8hpp_source"/>
      </node>
      <node id="124">
        <label>impl/Kokkos_ViewMapping.hpp</label>
        <link refid="_kokkos___view_mapping_8hpp_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>impl/Kokkos_ViewTracker.hpp</label>
        <link refid="_kokkos___view_tracker_8hpp_source"/>
      </node>
      <node id="130">
        <label>impl/Kokkos_ViewUniformType.hpp</label>
        <link refid="_kokkos___view_uniform_type_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="115">
        <label>impl/Kokkos_Volatile_Load.hpp</label>
        <link refid="_kokkos___volatile___load_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>traits/Kokkos_ExecutionSpaceTrait.hpp</label>
        <link refid="_kokkos___execution_space_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>traits/Kokkos_GraphKernelTrait.hpp</label>
        <link refid="_kokkos___graph_kernel_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>traits/Kokkos_IndexTypeTrait.hpp</label>
        <link refid="_kokkos___index_type_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>traits/Kokkos_IterationPatternTrait.hpp</label>
        <link refid="_kokkos___iteration_pattern_trait_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>traits/Kokkos_LaunchBoundsTrait.hpp</label>
        <link refid="_kokkos___launch_bounds_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>traits/Kokkos_OccupancyControlTrait.hpp</label>
        <link refid="_kokkos___occupancy_control_trait_8hpp_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>traits/Kokkos_PolicyTraitAdaptor.hpp</label>
        <link refid="_kokkos___policy_trait_adaptor_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>traits/Kokkos_ScheduleTrait.hpp</label>
        <link refid="_kokkos___schedule_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>traits/Kokkos_Traits_fwd.hpp</label>
        <link refid="_kokkos___traits__fwd_8hpp_source"/>
      </node>
      <node id="67">
        <label>traits/Kokkos_WorkItemPropertyTrait.hpp</label>
        <link refid="_kokkos___work_item_property_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>traits/Kokkos_WorkTagTrait.hpp</label>
        <link refid="_kokkos___work_tag_trait_8hpp_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp</label>
        <link refid="_test_mathematical_functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>KokkosCore_Config_DeclareBackend.hpp</label>
      </node>
      <node id="37">
        <label>KokkosCore_Config_FwdBackend.hpp</label>
      </node>
      <node id="148">
        <label>KokkosCore_Config_PostInclude.hpp</label>
      </node>
      <node id="31">
        <label>KokkosCore_Config_SetupBackend.hpp</label>
      </node>
      <node id="30">
        <label>KokkosCore_config.h</label>
      </node>
      <node id="72">
        <label>algorithm</label>
      </node>
      <node id="81">
        <label>array</label>
      </node>
      <node id="25">
        <label>assert.h</label>
      </node>
      <node id="102">
        <label>atomic</label>
      </node>
      <node id="84">
        <label>cassert</label>
      </node>
      <node id="94">
        <label>cfloat</label>
      </node>
      <node id="136">
        <label>chrono</label>
      </node>
      <node id="75">
        <label>cinttypes</label>
      </node>
      <node id="53">
        <label>climits</label>
      </node>
      <node id="91">
        <label>cmath</label>
      </node>
      <node id="119">
        <label>complex</label>
      </node>
      <node id="43">
        <label>cstddef</label>
      </node>
      <node id="34">
        <label>cstdint</label>
      </node>
      <node id="46">
        <label>cstdio</label>
      </node>
      <node id="76">
        <label>cstdlib</label>
      </node>
      <node id="88">
        <label>cstring</label>
      </node>
      <node id="6">
        <label>ctype.h</label>
      </node>
      <node id="21">
        <label>float.h</label>
      </node>
      <node id="142">
        <label>functional</label>
      </node>
      <node id="36">
        <label>initializer_list</label>
      </node>
      <node id="22">
        <label>iomanip</label>
      </node>
      <node id="26">
        <label>iosfwd</label>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="24">
        <label>iterator</label>
      </node>
      <node id="3">
        <label>limits</label>
      </node>
      <node id="83">
        <label>map</label>
      </node>
      <node id="85">
        <label>memory</label>
      </node>
      <node id="87">
        <label>mutex</label>
      </node>
      <node id="4">
        <label>ostream</label>
      </node>
      <node id="18">
        <label>regex.h</label>
      </node>
      <node id="23">
        <label>set</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="80">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
      <node id="79">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="17">
        <label>strings.h</label>
      </node>
      <node id="12">
        <label>sys/stat.h</label>
      </node>
      <node id="11">
        <label>sys/types.h</label>
      </node>
      <node id="82">
        <label>tuple</label>
      </node>
      <node id="35">
        <label>type_traits</label>
      </node>
      <node id="19">
        <label>typeinfo</label>
      </node>
      <node id="16">
        <label>unistd.h</label>
      </node>
      <node id="86">
        <label>unordered_map</label>
      </node>
      <node id="20">
        <label>utility</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmath__unary__function__return__type_3_01float_01_4" prot="public">math_unary_function_return_type&lt; float &gt;</innerclass>
    <innerclass refid="structmath__unary__function__return__type_3_01double_01_4" prot="public">math_unary_function_return_type&lt; double &gt;</innerclass>
    <innerclass refid="structmath__unary__function__return__type_3_01long_01double_01_4" prot="public">math_unary_function_return_type&lt; long double &gt;</innerclass>
    <innerclass refid="structmath__unary__function__return__type_3_01bool_01_4" prot="public">math_unary_function_return_type&lt; bool &gt;</innerclass>
    <innerclass refid="structmath__unary__function__return__type_3_01short_01_4" prot="public">math_unary_function_return_type&lt; short &gt;</innerclass>
    <innerclass refid="structmath__unary__function__return__type_3_01unsigned_01short_01_4" prot="public">math_unary_function_return_type&lt; unsigned short &gt;</innerclass>
    <innerclass refid="structmath__unary__function__return__type_3_01int_01_4" prot="public">math_unary_function_return_type&lt; int &gt;</innerclass>
    <innerclass refid="structmath__unary__function__return__type_3_01unsigned_01int_01_4" prot="public">math_unary_function_return_type&lt; unsigned int &gt;</innerclass>
    <innerclass refid="structmath__unary__function__return__type_3_01long_01_4" prot="public">math_unary_function_return_type&lt; long &gt;</innerclass>
    <innerclass refid="structmath__unary__function__return__type_3_01unsigned_01long_01_4" prot="public">math_unary_function_return_type&lt; unsigned long &gt;</innerclass>
    <innerclass refid="structmath__unary__function__return__type_3_01long_01long_01_4" prot="public">math_unary_function_return_type&lt; long long &gt;</innerclass>
    <innerclass refid="structmath__unary__function__return__type_3_01unsigned_01long_01long_01_4" prot="public">math_unary_function_return_type&lt; unsigned long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01float_00_01float_01_4" prot="public">math_binary_function_return_type&lt; float, float &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01float_00_01double_01_4" prot="public">math_binary_function_return_type&lt; float, double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01float_00_01bool_01_4" prot="public">math_binary_function_return_type&lt; float, bool &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01float_00_01short_01_4" prot="public">math_binary_function_return_type&lt; float, short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01float_00_01int_01_4" prot="public">math_binary_function_return_type&lt; float, int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01float_00_01long_01_4" prot="public">math_binary_function_return_type&lt; float, long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01float_00_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; float, long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01float_00_01unsigned_01short_01_4" prot="public">math_binary_function_return_type&lt; float, unsigned short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01float_00_01unsigned_01int_01_4" prot="public">math_binary_function_return_type&lt; float, unsigned int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01float_00_01unsigned_01long_01_4" prot="public">math_binary_function_return_type&lt; float, unsigned long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01float_00_01unsigned_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; float, unsigned long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01double_00_01float_01_4" prot="public">math_binary_function_return_type&lt; double, float &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01double_00_01double_01_4" prot="public">math_binary_function_return_type&lt; double, double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01double_00_01bool_01_4" prot="public">math_binary_function_return_type&lt; double, bool &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01double_00_01short_01_4" prot="public">math_binary_function_return_type&lt; double, short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01double_00_01int_01_4" prot="public">math_binary_function_return_type&lt; double, int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01double_00_01long_01_4" prot="public">math_binary_function_return_type&lt; double, long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01double_00_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; double, long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01double_00_01unsigned_01short_01_4" prot="public">math_binary_function_return_type&lt; double, unsigned short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01double_00_01unsigned_01int_01_4" prot="public">math_binary_function_return_type&lt; double, unsigned int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01double_00_01unsigned_01long_01_4" prot="public">math_binary_function_return_type&lt; double, unsigned long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01double_00_01unsigned_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; double, unsigned long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01short_00_01float_01_4" prot="public">math_binary_function_return_type&lt; short, float &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01short_00_01double_01_4" prot="public">math_binary_function_return_type&lt; short, double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01short_00_01bool_01_4" prot="public">math_binary_function_return_type&lt; short, bool &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01short_00_01short_01_4" prot="public">math_binary_function_return_type&lt; short, short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01short_00_01int_01_4" prot="public">math_binary_function_return_type&lt; short, int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01short_00_01long_01_4" prot="public">math_binary_function_return_type&lt; short, long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01short_00_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; short, long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01short_00_01unsigned_01short_01_4" prot="public">math_binary_function_return_type&lt; short, unsigned short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01short_00_01unsigned_01int_01_4" prot="public">math_binary_function_return_type&lt; short, unsigned int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01short_00_01unsigned_01long_01_4" prot="public">math_binary_function_return_type&lt; short, unsigned long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01short_00_01unsigned_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; short, unsigned long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01int_00_01float_01_4" prot="public">math_binary_function_return_type&lt; int, float &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01int_00_01double_01_4" prot="public">math_binary_function_return_type&lt; int, double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01int_00_01bool_01_4" prot="public">math_binary_function_return_type&lt; int, bool &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01int_00_01short_01_4" prot="public">math_binary_function_return_type&lt; int, short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01int_00_01int_01_4" prot="public">math_binary_function_return_type&lt; int, int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01int_00_01long_01_4" prot="public">math_binary_function_return_type&lt; int, long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01int_00_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; int, long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01int_00_01unsigned_01short_01_4" prot="public">math_binary_function_return_type&lt; int, unsigned short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01int_00_01unsigned_01int_01_4" prot="public">math_binary_function_return_type&lt; int, unsigned int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01int_00_01unsigned_01long_01_4" prot="public">math_binary_function_return_type&lt; int, unsigned long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01int_00_01unsigned_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; int, unsigned long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_00_01float_01_4" prot="public">math_binary_function_return_type&lt; long, float &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_00_01double_01_4" prot="public">math_binary_function_return_type&lt; long, double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_00_01bool_01_4" prot="public">math_binary_function_return_type&lt; long, bool &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_00_01short_01_4" prot="public">math_binary_function_return_type&lt; long, short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_00_01int_01_4" prot="public">math_binary_function_return_type&lt; long, int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_00_01long_01_4" prot="public">math_binary_function_return_type&lt; long, long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_00_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; long, long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_00_01unsigned_01short_01_4" prot="public">math_binary_function_return_type&lt; long, unsigned short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_00_01unsigned_01int_01_4" prot="public">math_binary_function_return_type&lt; long, unsigned int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_00_01unsigned_01long_01_4" prot="public">math_binary_function_return_type&lt; long, unsigned long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_00_01unsigned_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; long, unsigned long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01long_00_01float_01_4" prot="public">math_binary_function_return_type&lt; long long, float &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01long_00_01double_01_4" prot="public">math_binary_function_return_type&lt; long long, double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01long_00_01bool_01_4" prot="public">math_binary_function_return_type&lt; long long, bool &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01long_00_01short_01_4" prot="public">math_binary_function_return_type&lt; long long, short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01long_00_01int_01_4" prot="public">math_binary_function_return_type&lt; long long, int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01long_00_01long_01_4" prot="public">math_binary_function_return_type&lt; long long, long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01long_00_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; long long, long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01long_00_01unsigned_01short_01_4" prot="public">math_binary_function_return_type&lt; long long, unsigned short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01long_00_01unsigned_01int_01_4" prot="public">math_binary_function_return_type&lt; long long, unsigned int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01long_00_01unsigned_01long_01_4" prot="public">math_binary_function_return_type&lt; long long, unsigned long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01long_00_01unsigned_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; long long, unsigned long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01float_01_4" prot="public">math_binary_function_return_type&lt; unsigned short, float &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01double_01_4" prot="public">math_binary_function_return_type&lt; unsigned short, double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01bool_01_4" prot="public">math_binary_function_return_type&lt; unsigned short, bool &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01short_01_4" prot="public">math_binary_function_return_type&lt; unsigned short, short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01int_01_4" prot="public">math_binary_function_return_type&lt; unsigned short, int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned short, long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned short, long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01unsigned_01short_01_4" prot="public">math_binary_function_return_type&lt; unsigned short, unsigned short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01unsigned_01int_01_4" prot="public">math_binary_function_return_type&lt; unsigned short, unsigned int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01unsigned_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned short, unsigned long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01unsigned_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned short, unsigned long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01float_01_4" prot="public">math_binary_function_return_type&lt; unsigned int, float &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01double_01_4" prot="public">math_binary_function_return_type&lt; unsigned int, double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01bool_01_4" prot="public">math_binary_function_return_type&lt; unsigned int, bool &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01short_01_4" prot="public">math_binary_function_return_type&lt; unsigned int, short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01int_01_4" prot="public">math_binary_function_return_type&lt; unsigned int, int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned int, long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned int, long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01unsigned_01short_01_4" prot="public">math_binary_function_return_type&lt; unsigned int, unsigned short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01unsigned_01int_01_4" prot="public">math_binary_function_return_type&lt; unsigned int, unsigned int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01unsigned_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned int, unsigned long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01unsigned_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned int, unsigned long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01float_01_4" prot="public">math_binary_function_return_type&lt; unsigned long, float &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01double_01_4" prot="public">math_binary_function_return_type&lt; unsigned long, double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01bool_01_4" prot="public">math_binary_function_return_type&lt; unsigned long, bool &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01short_01_4" prot="public">math_binary_function_return_type&lt; unsigned long, short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01int_01_4" prot="public">math_binary_function_return_type&lt; unsigned long, int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned long, long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned long, long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01unsigned_01short_01_4" prot="public">math_binary_function_return_type&lt; unsigned long, unsigned short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01unsigned_01int_01_4" prot="public">math_binary_function_return_type&lt; unsigned long, unsigned int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01unsigned_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned long, unsigned long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01unsigned_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned long, unsigned long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01float_01_4" prot="public">math_binary_function_return_type&lt; unsigned long long, float &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01double_01_4" prot="public">math_binary_function_return_type&lt; unsigned long long, double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01bool_01_4" prot="public">math_binary_function_return_type&lt; unsigned long long, bool &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01short_01_4" prot="public">math_binary_function_return_type&lt; unsigned long long, short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01int_01_4" prot="public">math_binary_function_return_type&lt; unsigned long long, int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned long long, long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned long long, long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01unsigned_01short_01_4" prot="public">math_binary_function_return_type&lt; unsigned long long, unsigned short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01unsigned_01int_01_4" prot="public">math_binary_function_return_type&lt; unsigned long long, unsigned int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01unsigned_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned long long, unsigned long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01unsigned_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; unsigned long long, unsigned long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01float_00_01long_01double_01_4" prot="public">math_binary_function_return_type&lt; float, long double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01double_00_01long_01double_01_4" prot="public">math_binary_function_return_type&lt; double, long double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01double_00_01float_01_4" prot="public">math_binary_function_return_type&lt; long double, float &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01double_00_01double_01_4" prot="public">math_binary_function_return_type&lt; long double, double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01double_00_01long_01double_01_4" prot="public">math_binary_function_return_type&lt; long double, long double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01double_00_01bool_01_4" prot="public">math_binary_function_return_type&lt; long double, bool &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01double_00_01short_01_4" prot="public">math_binary_function_return_type&lt; long double, short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01double_00_01int_01_4" prot="public">math_binary_function_return_type&lt; long double, int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01double_00_01long_01_4" prot="public">math_binary_function_return_type&lt; long double, long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01double_00_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; long double, long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01double_00_01unsigned_01short_01_4" prot="public">math_binary_function_return_type&lt; long double, unsigned short &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01double_00_01unsigned_01int_01_4" prot="public">math_binary_function_return_type&lt; long double, unsigned int &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01double_00_01unsigned_01long_01_4" prot="public">math_binary_function_return_type&lt; long double, unsigned long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01double_00_01unsigned_01long_01long_01_4" prot="public">math_binary_function_return_type&lt; long double, unsigned long long &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01short_00_01long_01double_01_4" prot="public">math_binary_function_return_type&lt; short, long double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01int_00_01long_01double_01_4" prot="public">math_binary_function_return_type&lt; int, long double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_00_01long_01double_01_4" prot="public">math_binary_function_return_type&lt; long, long double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01long_01long_00_01long_01double_01_4" prot="public">math_binary_function_return_type&lt; long long, long double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01long_01double_01_4" prot="public">math_binary_function_return_type&lt; unsigned short, long double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01long_01double_01_4" prot="public">math_binary_function_return_type&lt; unsigned int, long double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01long_01double_01_4" prot="public">math_binary_function_return_type&lt; unsigned long, long double &gt;</innerclass>
    <innerclass refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01long_01double_01_4" prot="public">math_binary_function_return_type&lt; unsigned long long, long double &gt;</innerclass>
    <innerclass refid="struct_floating_point_comparison" prot="public">FloatingPointComparison</innerclass>
    <innerclass refid="struct_math_unary_function__exp" prot="public">MathUnaryFunction_exp</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__exp_01_4" prot="public">math_function_name&lt; MathUnaryFunction_exp &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__exp2" prot="public">MathUnaryFunction_exp2</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__exp2_01_4" prot="public">math_function_name&lt; MathUnaryFunction_exp2 &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__expm1" prot="public">MathUnaryFunction_expm1</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__expm1_01_4" prot="public">math_function_name&lt; MathUnaryFunction_expm1 &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__log" prot="public">MathUnaryFunction_log</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__log_01_4" prot="public">math_function_name&lt; MathUnaryFunction_log &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__log10" prot="public">MathUnaryFunction_log10</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__log10_01_4" prot="public">math_function_name&lt; MathUnaryFunction_log10 &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__log2" prot="public">MathUnaryFunction_log2</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__log2_01_4" prot="public">math_function_name&lt; MathUnaryFunction_log2 &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__log1p" prot="public">MathUnaryFunction_log1p</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__log1p_01_4" prot="public">math_function_name&lt; MathUnaryFunction_log1p &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__sqrt" prot="public">MathUnaryFunction_sqrt</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__sqrt_01_4" prot="public">math_function_name&lt; MathUnaryFunction_sqrt &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__cbrt" prot="public">MathUnaryFunction_cbrt</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__cbrt_01_4" prot="public">math_function_name&lt; MathUnaryFunction_cbrt &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__sin" prot="public">MathUnaryFunction_sin</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__sin_01_4" prot="public">math_function_name&lt; MathUnaryFunction_sin &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__cos" prot="public">MathUnaryFunction_cos</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__cos_01_4" prot="public">math_function_name&lt; MathUnaryFunction_cos &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__tan" prot="public">MathUnaryFunction_tan</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__tan_01_4" prot="public">math_function_name&lt; MathUnaryFunction_tan &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__asin" prot="public">MathUnaryFunction_asin</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__asin_01_4" prot="public">math_function_name&lt; MathUnaryFunction_asin &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__acos" prot="public">MathUnaryFunction_acos</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__acos_01_4" prot="public">math_function_name&lt; MathUnaryFunction_acos &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__atan" prot="public">MathUnaryFunction_atan</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__atan_01_4" prot="public">math_function_name&lt; MathUnaryFunction_atan &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__sinh" prot="public">MathUnaryFunction_sinh</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__sinh_01_4" prot="public">math_function_name&lt; MathUnaryFunction_sinh &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__cosh" prot="public">MathUnaryFunction_cosh</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__cosh_01_4" prot="public">math_function_name&lt; MathUnaryFunction_cosh &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__tanh" prot="public">MathUnaryFunction_tanh</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__tanh_01_4" prot="public">math_function_name&lt; MathUnaryFunction_tanh &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__asinh" prot="public">MathUnaryFunction_asinh</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__asinh_01_4" prot="public">math_function_name&lt; MathUnaryFunction_asinh &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__acosh" prot="public">MathUnaryFunction_acosh</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__acosh_01_4" prot="public">math_function_name&lt; MathUnaryFunction_acosh &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__atanh" prot="public">MathUnaryFunction_atanh</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__atanh_01_4" prot="public">math_function_name&lt; MathUnaryFunction_atanh &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__erf" prot="public">MathUnaryFunction_erf</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__erf_01_4" prot="public">math_function_name&lt; MathUnaryFunction_erf &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__erfc" prot="public">MathUnaryFunction_erfc</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__erfc_01_4" prot="public">math_function_name&lt; MathUnaryFunction_erfc &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__tgamma" prot="public">MathUnaryFunction_tgamma</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__tgamma_01_4" prot="public">math_function_name&lt; MathUnaryFunction_tgamma &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__lgamma" prot="public">MathUnaryFunction_lgamma</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__lgamma_01_4" prot="public">math_function_name&lt; MathUnaryFunction_lgamma &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__ceil" prot="public">MathUnaryFunction_ceil</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__ceil_01_4" prot="public">math_function_name&lt; MathUnaryFunction_ceil &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__floor" prot="public">MathUnaryFunction_floor</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__floor_01_4" prot="public">math_function_name&lt; MathUnaryFunction_floor &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__trunc" prot="public">MathUnaryFunction_trunc</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__trunc_01_4" prot="public">math_function_name&lt; MathUnaryFunction_trunc &gt;</innerclass>
    <innerclass refid="struct_math_unary_function__nearbyint" prot="public">MathUnaryFunction_nearbyint</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_unary_function__nearbyint_01_4" prot="public">math_function_name&lt; MathUnaryFunction_nearbyint &gt;</innerclass>
    <innerclass refid="struct_math_binary_function__pow" prot="public">MathBinaryFunction_pow</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_binary_function__pow_01_4" prot="public">math_function_name&lt; MathBinaryFunction_pow &gt;</innerclass>
    <innerclass refid="struct_math_binary_function__hypot" prot="public">MathBinaryFunction_hypot</innerclass>
    <innerclass refid="structmath__function__name_3_01_math_binary_function__hypot_01_4" prot="public">math_function_name&lt; MathBinaryFunction_hypot &gt;</innerclass>
    <innerclass refid="structtype__helper_3_01bool_01_4" prot="public">type_helper&lt; bool &gt;</innerclass>
    <innerclass refid="structtype__helper_3_01int_01_4" prot="public">type_helper&lt; int &gt;</innerclass>
    <innerclass refid="structtype__helper_3_01long_01_4" prot="public">type_helper&lt; long &gt;</innerclass>
    <innerclass refid="structtype__helper_3_01long_01long_01_4" prot="public">type_helper&lt; long long &gt;</innerclass>
    <innerclass refid="structtype__helper_3_01unsigned_01int_01_4" prot="public">type_helper&lt; unsigned int &gt;</innerclass>
    <innerclass refid="structtype__helper_3_01unsigned_01long_01_4" prot="public">type_helper&lt; unsigned long &gt;</innerclass>
    <innerclass refid="structtype__helper_3_01unsigned_01long_01long_01_4" prot="public">type_helper&lt; unsigned long long &gt;</innerclass>
    <innerclass refid="structtype__helper_3_01float_01_4" prot="public">type_helper&lt; float &gt;</innerclass>
    <innerclass refid="structtype__helper_3_01double_01_4" prot="public">type_helper&lt; double &gt;</innerclass>
    <innerclass refid="structtype__helper_3_01long_01double_01_4" prot="public">type_helper&lt; long double &gt;</innerclass>
    <innerclass refid="struct_test_math_unary_function" prot="public">TestMathUnaryFunction</innerclass>
    <innerclass refid="struct_test_math_binary_function" prot="public">TestMathBinaryFunction</innerclass>
    <innerclass refid="struct_test_absolute_value_function" prot="public">TestAbsoluteValueFunction</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_test_mathematical_functions_8hpp_1ad6f3652c84ff26486931816ac75fffbf" prot="public" static="no">
        <name>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="59" column="10" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_test_mathematical_functions_8hpp_1ad6660021d26ca08397406b819cd49033" prot="public" static="no">
        <name>DEFINE_UNARY_FUNCTION_EVAL</name>
        <param><defname>FUNC</defname></param>
        <param><defname>ULP_FACTOR</defname></param>
        <initializer>  struct MathUnaryFunction_##FUNC {                                            \
    template &lt;typename T&gt;                                                      \
    static KOKKOS_FUNCTION auto eval(T x) {                                    \
      static_assert(std::is_same&lt;decltype(Kokkos::Experimental::FUNC((T)0)),   \
                                 math_unary_function_return_type_t&lt;T&gt;&gt;::value, \
                    &quot;&quot;);                                                       \
      return Kokkos::Experimental::FUNC(x);                                    \
    }                                                                          \
    template &lt;typename T&gt;                                                      \
    static auto eval_std(T x) {                                                \
      static_assert(std::is_same&lt;decltype(std::FUNC((T)0)),                    \
                                 math_unary_function_return_type_t&lt;T&gt;&gt;::value, \
                    &quot;&quot;);                                                       \
      return std::FUNC(x);                                                     \
    }                                                                          \
    static KOKKOS_FUNCTION double ulp_factor() { return ULP_FACTOR; }          \
  };                                                                           \
  using kk_##FUNC = MathUnaryFunction_##FUNC;                                  \
  template &lt;&gt;                                                                  \
  struct <ref refid="structmath__function__name" kindref="compound">math_function_name</ref>&lt;MathUnaryFunction_##FUNC&gt; {                        \
    static constexpr char name[] = #FUNC;                                      \
  };                                                                           \
  constexpr char <ref refid="structmath__function__name" kindref="compound">math_function_name</ref>&lt;MathUnaryFunction_##FUNC&gt;::name[]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="292" column="9" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_test_mathematical_functions_8hpp_1a5b9757650f74600ea946db703c2db2ba" prot="public" static="no">
        <name>DEFINE_BINARY_FUNCTION_EVAL</name>
        <param><defname>FUNC</defname></param>
        <param><defname>ULP_FACTOR</defname></param>
        <initializer>  struct MathBinaryFunction_##FUNC {                                     \
    template &lt;typename T, typename U&gt;                                    \
    static KOKKOS_FUNCTION auto eval(T x, U y) {                         \
      static_assert(                                                     \
          std::is_same&lt;decltype(Kokkos::Experimental::FUNC((T)0, (U)0)), \
                       math_binary_function_return_type_t&lt;T, U&gt;&gt;::value, \
          &quot;&quot;);                                                           \
      return Kokkos::Experimental::FUNC(x, y);                           \
    }                                                                    \
    template &lt;typename T, typename U&gt;                                    \
    static auto eval_std(T x, U y) {                                     \
      static_assert(                                                     \
          std::is_same&lt;decltype(std::FUNC((T)0, (U)0)),                  \
                       math_binary_function_return_type_t&lt;T, U&gt;&gt;::value, \
          &quot;&quot;);                                                           \
      return std::FUNC(x, y);                                            \
    }                                                                    \
    static KOKKOS_FUNCTION double ulp_factor() { return ULP_FACTOR; }    \
  };                                                                     \
  using kk_##FUNC = MathBinaryFunction_##FUNC;                           \
  template &lt;&gt;                                                            \
  struct <ref refid="structmath__function__name" kindref="compound">math_function_name</ref>&lt;MathBinaryFunction_##FUNC&gt; {                 \
    static constexpr char name[] = #FUNC;                                \
  };                                                                     \
  constexpr char <ref refid="structmath__function__name" kindref="compound">math_function_name</ref>&lt;MathBinaryFunction_##FUNC&gt;::name[]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="362" column="9" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_test_mathematical_functions_8hpp_1ab813423f5f047fb117813ccb6750b800" prot="public" static="no">
        <name>DEFINE_TYPE_NAME</name>
        <param><defname>T</defname></param>
        <initializer>template &lt;&gt; struct <ref refid="structtype__helper" kindref="compound">type_helper</ref>&lt;T&gt; { static char const * name() { return #T; } };</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="397" column="9" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_test_mathematical_functions_8hpp_1a69061f4d7caa0896dc37da2358781884" prot="public" static="no">
        <name>TEST_MATH_FUNCTION</name>
        <param><defname>FUNC</defname></param>
        <initializer>  do_test_math_unary_function&lt;TEST_EXECSPACE, MathUnaryFunction_##FUNC&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="448" column="9" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="448" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a1cf3fb0357c67b2233cf67fd74fdf8df" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>&lt; T &gt;::type</type>
        <definition>using math_unary_function_return_type_t =  typename math_unary_function_return_type&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>math_unary_function_return_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="82" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1ac3c8feed23d1fc5753a9fd7cea576142" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt; T, U &gt;::type</type>
        <definition>using math_binary_function_return_type_t =  typename math_binary_function_return_type&lt;T, U&gt;::type</definition>
        <argsstring></argsstring>
        <name>math_binary_function_return_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="220" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a1eae14941f50565ac77c5a2d849b41d0" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__exp" kindref="compound">MathUnaryFunction_exp</ref></type>
        <definition>using kk_exp =  MathUnaryFunction_exp</definition>
        <argsstring></argsstring>
        <name>kk_exp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="320" column="31" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a8f40824a698f98c44813dd68fbe5c194" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__exp2" kindref="compound">MathUnaryFunction_exp2</ref></type>
        <definition>using kk_exp2 =  MathUnaryFunction_exp2</definition>
        <argsstring></argsstring>
        <name>kk_exp2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="321" column="32" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1aa38c834e6c463ce7ef33cf0ad3fc77ee" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__expm1" kindref="compound">MathUnaryFunction_expm1</ref></type>
        <definition>using kk_expm1 =  MathUnaryFunction_expm1</definition>
        <argsstring></argsstring>
        <name>kk_expm1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="322" column="33" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a5f10bfc9d8c1393166848048d0d00686" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__log" kindref="compound">MathUnaryFunction_log</ref></type>
        <definition>using kk_log =  MathUnaryFunction_log</definition>
        <argsstring></argsstring>
        <name>kk_log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="323" column="31" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1aed1cdc20e1c9389578c7d5c42decd163" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__log10" kindref="compound">MathUnaryFunction_log10</ref></type>
        <definition>using kk_log10 =  MathUnaryFunction_log10</definition>
        <argsstring></argsstring>
        <name>kk_log10</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="324" column="33" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1ae1be2af500f86425e16a7b9bf949c809" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__log2" kindref="compound">MathUnaryFunction_log2</ref></type>
        <definition>using kk_log2 =  MathUnaryFunction_log2</definition>
        <argsstring></argsstring>
        <name>kk_log2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="325" column="32" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a82148e26f0b8150ff8561e12b2634d45" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__log1p" kindref="compound">MathUnaryFunction_log1p</ref></type>
        <definition>using kk_log1p =  MathUnaryFunction_log1p</definition>
        <argsstring></argsstring>
        <name>kk_log1p</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="326" column="33" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a6b2918c7e7bdb988efdb449507f6266f" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__sqrt" kindref="compound">MathUnaryFunction_sqrt</ref></type>
        <definition>using kk_sqrt =  MathUnaryFunction_sqrt</definition>
        <argsstring></argsstring>
        <name>kk_sqrt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="328" column="32" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1afce3c94911dc02ed97c04cca5f0dd3c0" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__cbrt" kindref="compound">MathUnaryFunction_cbrt</ref></type>
        <definition>using kk_cbrt =  MathUnaryFunction_cbrt</definition>
        <argsstring></argsstring>
        <name>kk_cbrt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="329" column="32" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1aabf68f970bec157bcc35b0039bd76119" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__sin" kindref="compound">MathUnaryFunction_sin</ref></type>
        <definition>using kk_sin =  MathUnaryFunction_sin</definition>
        <argsstring></argsstring>
        <name>kk_sin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="331" column="31" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1adbce44740c2c07729b28f327a7b110c6" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__cos" kindref="compound">MathUnaryFunction_cos</ref></type>
        <definition>using kk_cos =  MathUnaryFunction_cos</definition>
        <argsstring></argsstring>
        <name>kk_cos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="332" column="31" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a701e7e23059451377962f26d8bf08b89" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__tan" kindref="compound">MathUnaryFunction_tan</ref></type>
        <definition>using kk_tan =  MathUnaryFunction_tan</definition>
        <argsstring></argsstring>
        <name>kk_tan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="333" column="31" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1ab5297a8b96f09bae98b6fb10e3811d3a" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__asin" kindref="compound">MathUnaryFunction_asin</ref></type>
        <definition>using kk_asin =  MathUnaryFunction_asin</definition>
        <argsstring></argsstring>
        <name>kk_asin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="334" column="32" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1aabd44111636cd7f43e51a58817ab07a3" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__acos" kindref="compound">MathUnaryFunction_acos</ref></type>
        <definition>using kk_acos =  MathUnaryFunction_acos</definition>
        <argsstring></argsstring>
        <name>kk_acos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="335" column="32" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a96a8f40597eab7b7e207aac38743517b" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__atan" kindref="compound">MathUnaryFunction_atan</ref></type>
        <definition>using kk_atan =  MathUnaryFunction_atan</definition>
        <argsstring></argsstring>
        <name>kk_atan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="336" column="32" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a069fb175731852f8ecafd012591e59d2" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__sinh" kindref="compound">MathUnaryFunction_sinh</ref></type>
        <definition>using kk_sinh =  MathUnaryFunction_sinh</definition>
        <argsstring></argsstring>
        <name>kk_sinh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="338" column="32" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a6646ceb98f17ec7c96e6c063b117fc0c" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__cosh" kindref="compound">MathUnaryFunction_cosh</ref></type>
        <definition>using kk_cosh =  MathUnaryFunction_cosh</definition>
        <argsstring></argsstring>
        <name>kk_cosh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="339" column="32" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a7732314a907883d8c2ebe7ca248cb17d" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__tanh" kindref="compound">MathUnaryFunction_tanh</ref></type>
        <definition>using kk_tanh =  MathUnaryFunction_tanh</definition>
        <argsstring></argsstring>
        <name>kk_tanh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="340" column="32" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1ab93911cee0f5b2f45a7ce2cf4a2323da" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__asinh" kindref="compound">MathUnaryFunction_asinh</ref></type>
        <definition>using kk_asinh =  MathUnaryFunction_asinh</definition>
        <argsstring></argsstring>
        <name>kk_asinh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="341" column="33" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1aedc4cc947a2c457966c2d6ba573f7f42" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__acosh" kindref="compound">MathUnaryFunction_acosh</ref></type>
        <definition>using kk_acosh =  MathUnaryFunction_acosh</definition>
        <argsstring></argsstring>
        <name>kk_acosh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="342" column="33" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1aa86ee8a42218fd48be92702586d33ebf" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__atanh" kindref="compound">MathUnaryFunction_atanh</ref></type>
        <definition>using kk_atanh =  MathUnaryFunction_atanh</definition>
        <argsstring></argsstring>
        <name>kk_atanh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="343" column="33" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a913e6d149f2979626d23741c44688a59" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__erf" kindref="compound">MathUnaryFunction_erf</ref></type>
        <definition>using kk_erf =  MathUnaryFunction_erf</definition>
        <argsstring></argsstring>
        <name>kk_erf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="345" column="31" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a5ec71accf3c04e6a53ad977d91f4d3f8" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__erfc" kindref="compound">MathUnaryFunction_erfc</ref></type>
        <definition>using kk_erfc =  MathUnaryFunction_erfc</definition>
        <argsstring></argsstring>
        <name>kk_erfc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="346" column="32" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a3f7ec0897c289277963594c6d96bfd3d" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__tgamma" kindref="compound">MathUnaryFunction_tgamma</ref></type>
        <definition>using kk_tgamma =  MathUnaryFunction_tgamma</definition>
        <argsstring></argsstring>
        <name>kk_tgamma</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="350" column="34" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a196318ef01693b3fe05fae6bfb9ec525" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__lgamma" kindref="compound">MathUnaryFunction_lgamma</ref></type>
        <definition>using kk_lgamma =  MathUnaryFunction_lgamma</definition>
        <argsstring></argsstring>
        <name>kk_lgamma</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="351" column="34" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1af55e913afbef6d4e130243c045c535e0" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__ceil" kindref="compound">MathUnaryFunction_ceil</ref></type>
        <definition>using kk_ceil =  MathUnaryFunction_ceil</definition>
        <argsstring></argsstring>
        <name>kk_ceil</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="353" column="32" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a7a4d384d39c3fdaaaaec4a18c9b143b5" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__floor" kindref="compound">MathUnaryFunction_floor</ref></type>
        <definition>using kk_floor =  MathUnaryFunction_floor</definition>
        <argsstring></argsstring>
        <name>kk_floor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="354" column="33" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1aca1e093a7b6159594070bd1190c95fde" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__trunc" kindref="compound">MathUnaryFunction_trunc</ref></type>
        <definition>using kk_trunc =  MathUnaryFunction_trunc</definition>
        <argsstring></argsstring>
        <name>kk_trunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="355" column="33" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a556d23c22df412bc26a64a6e84718ae1" prot="public" static="no">
        <type><ref refid="struct_math_unary_function__nearbyint" kindref="compound">MathUnaryFunction_nearbyint</ref></type>
        <definition>using kk_nearbyint =  MathUnaryFunction_nearbyint</definition>
        <argsstring></argsstring>
        <name>kk_nearbyint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="357" column="37" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1a6b6cacc7c22cb3b5d392991f6d353788" prot="public" static="no">
        <type><ref refid="struct_math_binary_function__pow" kindref="compound">MathBinaryFunction_pow</ref></type>
        <definition>using kk_pow =  MathBinaryFunction_pow</definition>
        <argsstring></argsstring>
        <name>kk_pow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="389" column="32" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_test_mathematical_functions_8hpp_1aecaf00844c46faadb7eac4b25f738e6d" prot="public" static="no">
        <type><ref refid="struct_math_binary_function__hypot" kindref="compound">MathBinaryFunction_hypot</ref></type>
        <definition>using kk_hypot =  MathBinaryFunction_hypot</definition>
        <argsstring></argsstring>
        <name>kk_hypot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="390" column="34" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="390" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_test_mathematical_functions_8hpp_1a45fdc906c7baba4903b47eb49a4cbbba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Func</declname>
            <defname>Func</defname>
          </param>
          <param>
            <type>class Arg</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void do_test_math_unary_function</definition>
        <argsstring>(const Arg(&amp;x)[N])</argsstring>
        <name>do_test_math_unary_function</name>
        <param>
          <type>const Arg(&amp;)</type>
          <declname>x</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="443" column="6" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="443" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="_test_mathematical_functions_8hpp_1a44c113467368f53bf15b36f731568bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Func</declname>
            <defname>Func</defname>
          </param>
          <param>
            <type>class Arg1</type>
          </param>
          <param>
            <type>class Arg2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void do_test_math_binary_function</definition>
        <argsstring>(Arg1 arg1, Arg2 arg2)</argsstring>
        <name>do_test_math_binary_function</name>
        <param>
          <type>Arg1</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>Arg2</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="483" column="6" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="483" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="_test_mathematical_functions_8hpp_1ac94bd2e0f3fba602b6b0452197f231e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, mathematical_functions_trigonometric_functions)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>mathematical_functions_trigonometric_functions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="488" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="488" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="_test_mathematical_functions_8hpp_1a9d5bdd890a2e4af089821144864a8d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, mathematical_functions_power_functions)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>mathematical_functions_power_functions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="570" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="570" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="_test_mathematical_functions_8hpp_1ac75d750623d136feec1625affbac8542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, mathematical_functions_exponential_functions)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>mathematical_functions_exponential_functions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="611" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="611" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="_test_mathematical_functions_8hpp_1aa8c0c0898cc66d13b4b66ecb12494ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, mathematical_functions_hyperbolic_functions)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>mathematical_functions_hyperbolic_functions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="703" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="703" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="_test_mathematical_functions_8hpp_1a9b02b7d0f84103087c608d285088f875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, mathematical_functions_error_and_gamma_functions)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>mathematical_functions_error_and_gamma_functions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="777" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="777" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="_test_mathematical_functions_8hpp_1a56e4245f945d5932350be3cc4651ba83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, mathematical_functions_nearest_interger_floating_point_operations)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>mathematical_functions_nearest_interger_floating_point_operations</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="827" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="827" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="_test_mathematical_functions_8hpp_1a2380b1bb5882c949c2f76e29296f8683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_CATEGORY, mathematical_functions_absolute_value)</argsstring>
        <name>TEST</name>
        <param>
          <type>TEST_CATEGORY</type>
        </param>
        <param>
          <type>mathematical_functions_absolute_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" line="942" column="1" bodyfile="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp" bodystart="942" bodyend="944"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos<sp/>v.<sp/>3.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>(2020)<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC<sp/>(NTESS).</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>the<sp/>U.S.<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//<sp/>met:</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Corporation<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>NTESS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>NTESS<sp/>OR<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>Christian<sp/>R.<sp/>Trott<sp/>(crtrott@sandia.gov)</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//<sp/>************************************************************************</highlight></codeline>
<codeline lineno="42"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="43"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Kokkos_Core.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Kokkos_ExecPolicy.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Kokkos_Parallel_Reduce.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cfloat&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(KOKKOS_ENABLE_CUDA)<sp/>||<sp/>defined(KOKKOS_ENABLE_HIP)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(KOKKOS_ENABLE_SYCL)<sp/>||<sp/>defined(KOKKOS_ENABLE_OPENMPTARGET)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="64" refid="structmath__unary__function__return__type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Floating-point<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="structmath__unary__function__return__type_3_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/>float;<sp/>};</highlight></codeline>
<codeline lineno="67" refid="structmath__unary__function__return__type_3_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="structmath__unary__function__return__type_3_01long_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>&lt;long<sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Integral<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="structmath__unary__function__return__type_3_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="73" refid="structmath__unary__function__return__type_3_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="74" refid="structmath__unary__function__return__type_3_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="75" refid="structmath__unary__function__return__type_3_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="76" refid="structmath__unary__function__return__type_3_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="77" refid="structmath__unary__function__return__type_3_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="78" refid="structmath__unary__function__return__type_3_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="79" refid="structmath__unary__function__return__type_3_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="80" refid="structmath__unary__function__return__type_3_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type</ref>&lt;unsigned<sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">math_unary_function_return_type_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structmath__unary__function__return__type" kindref="compound">math_unary_function_return_type&lt;T&gt;::type</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="84" refid="structmath__binary__function__return__type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>;</highlight></codeline>
<codeline lineno="85" refid="structmath__binary__function__return__type_3_01float_00_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/>float;<sp/>};</highlight></codeline>
<codeline lineno="86" refid="structmath__binary__function__return__type_3_01float_00_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="87" refid="structmath__binary__function__return__type_3_01float_00_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="88" refid="structmath__binary__function__return__type_3_01float_00_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="89" refid="structmath__binary__function__return__type_3_01float_00_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="90" refid="structmath__binary__function__return__type_3_01float_00_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="91" refid="structmath__binary__function__return__type_3_01float_00_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="92" refid="structmath__binary__function__return__type_3_01float_00_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="93" refid="structmath__binary__function__return__type_3_01float_00_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="94" refid="structmath__binary__function__return__type_3_01float_00_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="95" refid="structmath__binary__function__return__type_3_01float_00_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/>unsigned<sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="96" refid="structmath__binary__function__return__type_3_01double_00_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="97" refid="structmath__binary__function__return__type_3_01double_00_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="98" refid="structmath__binary__function__return__type_3_01double_00_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="99" refid="structmath__binary__function__return__type_3_01double_00_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="100" refid="structmath__binary__function__return__type_3_01double_00_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="101" refid="structmath__binary__function__return__type_3_01double_00_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="102" refid="structmath__binary__function__return__type_3_01double_00_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="103" refid="structmath__binary__function__return__type_3_01double_00_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double,<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="104" refid="structmath__binary__function__return__type_3_01double_00_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="105" refid="structmath__binary__function__return__type_3_01double_00_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="106" refid="structmath__binary__function__return__type_3_01double_00_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double,<sp/>unsigned<sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="107" refid="structmath__binary__function__return__type_3_01short_00_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="108" refid="structmath__binary__function__return__type_3_01short_00_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="109" refid="structmath__binary__function__return__type_3_01short_00_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="110" refid="structmath__binary__function__return__type_3_01short_00_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="111" refid="structmath__binary__function__return__type_3_01short_00_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="112" refid="structmath__binary__function__return__type_3_01short_00_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="113" refid="structmath__binary__function__return__type_3_01short_00_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="114" refid="structmath__binary__function__return__type_3_01short_00_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short,<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="115" refid="structmath__binary__function__return__type_3_01short_00_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="116" refid="structmath__binary__function__return__type_3_01short_00_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="117" refid="structmath__binary__function__return__type_3_01short_00_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short,<sp/>unsigned<sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="118" refid="structmath__binary__function__return__type_3_01int_00_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="119" refid="structmath__binary__function__return__type_3_01int_00_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="120" refid="structmath__binary__function__return__type_3_01int_00_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="121" refid="structmath__binary__function__return__type_3_01int_00_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="122" refid="structmath__binary__function__return__type_3_01int_00_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="123" refid="structmath__binary__function__return__type_3_01int_00_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="124" refid="structmath__binary__function__return__type_3_01int_00_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="125" refid="structmath__binary__function__return__type_3_01int_00_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="126" refid="structmath__binary__function__return__type_3_01int_00_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="127" refid="structmath__binary__function__return__type_3_01int_00_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="128" refid="structmath__binary__function__return__type_3_01int_00_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/>unsigned<sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="129" refid="structmath__binary__function__return__type_3_01long_00_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="130" refid="structmath__binary__function__return__type_3_01long_00_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="131" refid="structmath__binary__function__return__type_3_01long_00_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="132" refid="structmath__binary__function__return__type_3_01long_00_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="133" refid="structmath__binary__function__return__type_3_01long_00_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="134" refid="structmath__binary__function__return__type_3_01long_00_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="135" refid="structmath__binary__function__return__type_3_01long_00_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="136" refid="structmath__binary__function__return__type_3_01long_00_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long,<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="137" refid="structmath__binary__function__return__type_3_01long_00_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="138" refid="structmath__binary__function__return__type_3_01long_00_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="139" refid="structmath__binary__function__return__type_3_01long_00_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long,<sp/>unsigned<sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="140" refid="structmath__binary__function__return__type_3_01long_01long_00_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="141" refid="structmath__binary__function__return__type_3_01long_01long_00_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="142" refid="structmath__binary__function__return__type_3_01long_01long_00_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="143" refid="structmath__binary__function__return__type_3_01long_01long_00_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="144" refid="structmath__binary__function__return__type_3_01long_01long_00_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="145" refid="structmath__binary__function__return__type_3_01long_01long_00_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="146" refid="structmath__binary__function__return__type_3_01long_01long_00_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="147" refid="structmath__binary__function__return__type_3_01long_01long_00_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="148" refid="structmath__binary__function__return__type_3_01long_01long_00_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="149" refid="structmath__binary__function__return__type_3_01long_01long_00_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="150" refid="structmath__binary__function__return__type_3_01long_01long_00_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long,<sp/>unsigned<sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="151" refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/>unsigned<sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="152" refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/>unsigned<sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="153" refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/>unsigned<sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="154" refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/>unsigned<sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="155" refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/>unsigned<sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="156" refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/>unsigned<sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="157" refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/>unsigned<sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="158" refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/>unsigned<sp/>short,<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="159" refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/>unsigned<sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="160" refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/>unsigned<sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="161" refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/>unsigned<sp/>short,<sp/>unsigned<sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="162" refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="163" refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="164" refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="165" refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="166" refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="167" refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="168" refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="169" refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int,<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="170" refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="171" refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="172" refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int,<sp/>unsigned<sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="173" refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="174" refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="175" refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="176" refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="177" refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="178" refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="179" refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="180" refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long,<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="181" refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="182" refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="183" refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long,<sp/>unsigned<sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="184" refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;unsigned<sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="185" refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;unsigned<sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="186" refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;unsigned<sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="187" refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;unsigned<sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="188" refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;unsigned<sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="189" refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;unsigned<sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="190" refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;unsigned<sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="191" refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;unsigned<sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="192" refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;unsigned<sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="193" refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;unsigned<sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="194" refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;unsigned<sp/>long<sp/>long,<sp/>unsigned<sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="structmath__binary__function__return__type_3_01float_00_01long_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="197" refid="structmath__binary__function__return__type_3_01double_00_01long_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="198" refid="structmath__binary__function__return__type_3_01long_01double_00_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="199" refid="structmath__binary__function__return__type_3_01long_01double_00_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="200" refid="structmath__binary__function__return__type_3_01long_01double_00_01long_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="201" refid="structmath__binary__function__return__type_3_01long_01double_00_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="202" refid="structmath__binary__function__return__type_3_01long_01double_00_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="203" refid="structmath__binary__function__return__type_3_01long_01double_00_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="204" refid="structmath__binary__function__return__type_3_01long_01double_00_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="205" refid="structmath__binary__function__return__type_3_01long_01double_00_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="206" refid="structmath__binary__function__return__type_3_01long_01double_00_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double,<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="207" refid="structmath__binary__function__return__type_3_01long_01double_00_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="208" refid="structmath__binary__function__return__type_3_01long_01double_00_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="209" refid="structmath__binary__function__return__type_3_01long_01double_00_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double,<sp/>unsigned<sp/>long<sp/>long&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="210" refid="structmath__binary__function__return__type_3_01short_00_01long_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="211" refid="structmath__binary__function__return__type_3_01int_00_01long_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="212" refid="structmath__binary__function__return__type_3_01long_00_01long_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="213" refid="structmath__binary__function__return__type_3_01long_01long_00_01long_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="214" refid="structmath__binary__function__return__type_3_01unsigned_01short_00_01long_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/>unsigned<sp/>short,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="215" refid="structmath__binary__function__return__type_3_01unsigned_01int_00_01long_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="216" refid="structmath__binary__function__return__type_3_01unsigned_01long_00_01long_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="217" refid="structmath__binary__function__return__type_3_01unsigned_01long_01long_00_01long_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type</ref>&lt;unsigned<sp/>long<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double&gt;<sp/>{<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/>};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">math_binary_function_return_type_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structmath__binary__function__return__type" kindref="compound">math_binary_function_return_type&lt;T, U&gt;::type</ref>;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="struct_floating_point_comparison" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_floating_point_comparison" kindref="compound">FloatingPointComparison</ref><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps(T)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DBL_EPSILON;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FLT_EPSILON;<sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LDBL_EPSILON;<sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>absolute<sp/>here<sp/>instead<sp/>of<sp/>abs,<sp/>since<sp/>we<sp/>actually<sp/>test<sp/>abs<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_signed&lt;T&gt;::value,<sp/>T&gt;::type</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>absolute(T<sp/>val)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val<sp/>&lt;<sp/>T(0)<sp/>?<sp/>-val<sp/>:<sp/>val;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!std::is_signed&lt;T&gt;::value,<sp/>T&gt;::type</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>absolute(T<sp/>val)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>FPT&gt;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compare_near_zero(FPT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>fpv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ulp)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>abs_tol<sp/>=<sp/>eps(fpv)<sp/>*<sp/>ulp;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ar<sp/>=<sp/>absolute(fpv)<sp/>&lt;<sp/>abs_tol;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ar)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(KOKKOS_ENABLE_SYCL)<sp/>&amp;&amp;<sp/>!defined(KOKKOS_ENABLE_HIP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;absolute<sp/>value<sp/>exceeds<sp/>tolerance<sp/>[|%e|<sp/>&gt;<sp/>%e]\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)fpv,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs_tol);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ar;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Lhs,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Rhs&gt;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compare(Lhs<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/>Rhs<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ulp)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compare_near_zero(rhs,<sp/>ulp);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rhs<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compare_near_zero(lhs,<sp/>ulp);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rel_tol<sp/><sp/><sp/><sp/><sp/>=<sp/>(eps(lhs)<sp/>&lt;<sp/>eps(rhs)<sp/>?<sp/>eps(lhs)<sp/>:<sp/>eps(rhs))<sp/>*<sp/>ulp;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>abs_diff<sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs<sp/>&gt;<sp/>lhs<sp/>?<sp/>rhs<sp/>-<sp/>lhs<sp/>:<sp/>lhs<sp/>-<sp/>rhs);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_denom<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absolute(rhs)<sp/>&lt;<sp/>absolute(lhs)<sp/>?<sp/>absolute(rhs)<sp/>:<sp/>absolute(lhs));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rel_diff<sp/>=<sp/>abs_diff<sp/>/<sp/>min_denom;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rel_diff<sp/>&lt;<sp/>rel_tol;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ar)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(KOKKOS_ENABLE_SYCL)<sp/>&amp;&amp;<sp/>!defined(KOKKOS_ENABLE_HIP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;relative<sp/>difference<sp/>exceeds<sp/>tolerance<sp/>[%e<sp/>&gt;<sp/>%e]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)rel_diff,<sp/>rel_tol);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ar;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal">};</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="290" refid="structmath__function__name" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmath__function__name" kindref="compound">math_function_name</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_UNARY_FUNCTION_EVAL(FUNC,<sp/>ULP_FACTOR)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/>struct<sp/>MathUnaryFunction_##FUNC<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>KOKKOS_FUNCTION<sp/>auto<sp/>eval(T<sp/>x)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_same&lt;decltype(Kokkos::Experimental::FUNC((T)0)),<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>math_unary_function_return_type_t&lt;T&gt;&gt;::value,<sp/>\</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Kokkos::Experimental::FUNC(x);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>auto<sp/>eval_std(T<sp/>x)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_same&lt;decltype(std::FUNC((T)0)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>math_unary_function_return_type_t&lt;T&gt;&gt;::value,<sp/>\</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::FUNC(x);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>KOKKOS_FUNCTION<sp/>double<sp/>ulp_factor()<sp/>{<sp/>return<sp/>ULP_FACTOR;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>using<sp/>kk_##FUNC<sp/>=<sp/>MathUnaryFunction_##FUNC;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>template<sp/>&lt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>struct<sp/>math_function_name&lt;MathUnaryFunction_##FUNC&gt;<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>char<sp/>name[]<sp/>=<sp/>#FUNC;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>constexpr<sp/>char<sp/>math_function_name&lt;MathUnaryFunction_##FUNC&gt;::name[]</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generally<sp/>the<sp/>expected<sp/>ULP<sp/>error<sp/>should<sp/>come<sp/>from<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://www.gnu.org/software/libc/manual/html_node/Errors-in-Math-Functions.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>now<sp/>1s<sp/>largely<sp/>seem<sp/>to<sp/>work<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="structmath__function__name_3_01_math_unary_function__exp_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(exp,<sp/>2);</highlight></codeline>
<codeline lineno="321" refid="structmath__function__name_3_01_math_unary_function__exp2_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(exp2,<sp/>2);</highlight></codeline>
<codeline lineno="322" refid="structmath__function__name_3_01_math_unary_function__expm1_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(expm1,<sp/>2);</highlight></codeline>
<codeline lineno="323" refid="structmath__function__name_3_01_math_unary_function__log_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(log,<sp/>2);</highlight></codeline>
<codeline lineno="324" refid="structmath__function__name_3_01_math_unary_function__log10_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(log10,<sp/>2);</highlight></codeline>
<codeline lineno="325" refid="structmath__function__name_3_01_math_unary_function__log2_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(log2,<sp/>2);</highlight></codeline>
<codeline lineno="326" refid="structmath__function__name_3_01_math_unary_function__log1p_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(log1p,<sp/>2);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="structmath__function__name_3_01_math_unary_function__sqrt_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(sqrt,<sp/>2);</highlight></codeline>
<codeline lineno="329" refid="structmath__function__name_3_01_math_unary_function__cbrt_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(cbrt,<sp/>2);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="structmath__function__name_3_01_math_unary_function__sin_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(sin,<sp/>2);</highlight></codeline>
<codeline lineno="332" refid="structmath__function__name_3_01_math_unary_function__cos_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(cos,<sp/>2);</highlight></codeline>
<codeline lineno="333" refid="structmath__function__name_3_01_math_unary_function__tan_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(tan,<sp/>2);</highlight></codeline>
<codeline lineno="334" refid="structmath__function__name_3_01_math_unary_function__asin_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(asin,<sp/>2);</highlight></codeline>
<codeline lineno="335" refid="structmath__function__name_3_01_math_unary_function__acos_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(acos,<sp/>2);</highlight></codeline>
<codeline lineno="336" refid="structmath__function__name_3_01_math_unary_function__atan_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(atan,<sp/>2);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="structmath__function__name_3_01_math_unary_function__sinh_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(sinh,<sp/>2);</highlight></codeline>
<codeline lineno="339" refid="structmath__function__name_3_01_math_unary_function__cosh_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(cosh,<sp/>2);</highlight></codeline>
<codeline lineno="340" refid="structmath__function__name_3_01_math_unary_function__tanh_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(tanh,<sp/>2);</highlight></codeline>
<codeline lineno="341" refid="structmath__function__name_3_01_math_unary_function__asinh_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(asinh,<sp/>4);</highlight></codeline>
<codeline lineno="342" refid="structmath__function__name_3_01_math_unary_function__acosh_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(acosh,<sp/>2);</highlight></codeline>
<codeline lineno="343" refid="structmath__function__name_3_01_math_unary_function__atanh_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(atanh,<sp/>2);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="structmath__function__name_3_01_math_unary_function__erf_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(erf,<sp/>2);</highlight></codeline>
<codeline lineno="346" refid="structmath__function__name_3_01_math_unary_function__erfc_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(erfc,<sp/>5);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>a<sp/>larger<sp/>error<sp/>due<sp/>to<sp/>some<sp/>impls<sp/>doing<sp/>integer<sp/>exact.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>cast<sp/>always<sp/>to<sp/>double<sp/>leading<sp/>to<sp/>larger<sp/>difference<sp/>when<sp/>comparing<sp/>our</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tgamma<sp/>to<sp/>std::tgamma<sp/>on<sp/>the<sp/>host.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="structmath__function__name_3_01_math_unary_function__tgamma_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(tgamma,<sp/>200);</highlight></codeline>
<codeline lineno="351" refid="structmath__function__name_3_01_math_unary_function__lgamma_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(lgamma,<sp/>2);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="structmath__function__name_3_01_math_unary_function__ceil_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(ceil,<sp/>2);</highlight></codeline>
<codeline lineno="354" refid="structmath__function__name_3_01_math_unary_function__floor_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(floor,<sp/>2);</highlight></codeline>
<codeline lineno="355" refid="structmath__function__name_3_01_math_unary_function__trunc_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(trunc,<sp/>2);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>KOKKOS_ENABLE_SYCL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="structmath__function__name_3_01_math_unary_function__nearbyint_01_4" refkind="compound"><highlight class="normal">DEFINE_UNARY_FUNCTION_EVAL(nearbyint,<sp/>2);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DEFINE_UNARY_FUNCTION_EVAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_BINARY_FUNCTION_EVAL(FUNC,<sp/>ULP_FACTOR)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor"><sp/><sp/>struct<sp/>MathBinaryFunction_##FUNC<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>U&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>KOKKOS_FUNCTION<sp/>auto<sp/>eval(T<sp/>x,<sp/>U<sp/>y)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;decltype(Kokkos::Experimental::FUNC((T)0,<sp/>(U)0)),<sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>math_binary_function_return_type_t&lt;T,<sp/>U&gt;&gt;::value,<sp/>\</highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Kokkos::Experimental::FUNC(x,<sp/>y);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>U&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>auto<sp/>eval_std(T<sp/>x,<sp/>U<sp/>y)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;decltype(std::FUNC((T)0,<sp/>(U)0)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>math_binary_function_return_type_t&lt;T,<sp/>U&gt;&gt;::value,<sp/>\</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::FUNC(x,<sp/>y);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>KOKKOS_FUNCTION<sp/>double<sp/>ulp_factor()<sp/>{<sp/>return<sp/>ULP_FACTOR;<sp/>}<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>using<sp/>kk_##FUNC<sp/>=<sp/>MathBinaryFunction_##FUNC;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>template<sp/>&lt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>struct<sp/>math_function_name&lt;MathBinaryFunction_##FUNC&gt;<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>char<sp/>name[]<sp/>=<sp/>#FUNC;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>constexpr<sp/>char<sp/>math_function_name&lt;MathBinaryFunction_##FUNC&gt;::name[]</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="structmath__function__name_3_01_math_binary_function__pow_01_4" refkind="compound"><highlight class="normal">DEFINE_BINARY_FUNCTION_EVAL(pow,<sp/>2);</highlight></codeline>
<codeline lineno="390" refid="structmath__function__name_3_01_math_binary_function__hypot_01_4" refkind="compound"><highlight class="normal">DEFINE_BINARY_FUNCTION_EVAL(hypot,<sp/>2);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DEFINE_BINARY_FUNCTION_EVAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="396" refid="structtype__helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtype__helper" kindref="compound">type_helper</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_TYPE_NAME(T)<sp/>\</highlight></codeline>
<codeline lineno="398"><highlight class="preprocessor">template<sp/>&lt;&gt;<sp/>struct<sp/>type_helper&lt;T&gt;<sp/>{<sp/>static<sp/>char<sp/>const<sp/>*<sp/>name()<sp/>{<sp/>return<sp/>#T;<sp/>}<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="structtype__helper_3_01bool_01_4" refkind="compound"><highlight class="normal">DEFINE_TYPE_NAME(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="400" refid="structtype__helper_3_01int_01_4" refkind="compound"><highlight class="normal">DEFINE_TYPE_NAME(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="401" refid="structtype__helper_3_01long_01_4" refkind="compound"><highlight class="normal">DEFINE_TYPE_NAME(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="402" refid="structtype__helper_3_01long_01long_01_4" refkind="compound"><highlight class="normal">DEFINE_TYPE_NAME(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="403" refid="structtype__helper_3_01unsigned_01int_01_4" refkind="compound"><highlight class="normal">DEFINE_TYPE_NAME(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="404" refid="structtype__helper_3_01unsigned_01long_01_4" refkind="compound"><highlight class="normal">DEFINE_TYPE_NAME(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="405" refid="structtype__helper_3_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal">DEFINE_TYPE_NAME(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="406" refid="structtype__helper_3_01float_01_4" refkind="compound"><highlight class="normal">DEFINE_TYPE_NAME(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="407" refid="structtype__helper_3_01double_01_4" refkind="compound"><highlight class="normal">DEFINE_TYPE_NAME(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="408" refid="structtype__helper_3_01long_01double_01_4" refkind="compound"><highlight class="normal">DEFINE_TYPE_NAME(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DEFINE_TYPE_NAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Space,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Func,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Arg,<sp/>std::size_t<sp/>N,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret<sp/>=<sp/>math_unary_function_return_type_t&lt;Arg&gt;&gt;</highlight></codeline>
<codeline lineno="414" refid="struct_test_math_unary_function" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_test_math_unary_function" kindref="compound">TestMathUnaryFunction</ref><sp/>:<sp/><ref refid="struct_floating_point_comparison" kindref="compound">FloatingPointComparison</ref><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>Arg<sp/>val_[N];</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>Ret<sp/>res_[N];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><ref refid="struct_test_math_unary_function" kindref="compound">TestMathUnaryFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Arg<sp/>(&amp;val)[N])<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>math_function_name&lt;Func&gt;::name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="structtype__helper" kindref="compound">type_helper&lt;Arg&gt;::name</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(val,<sp/>val<sp/>+<sp/>N,<sp/>val_);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(val,<sp/>val<sp/>+<sp/>N,<sp/>res_,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Func::eval_std(x);<sp/>});</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>run();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run()<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<ref refid="class_kokkos_1_1_range_policy" kindref="compound">Kokkos::RangePolicy&lt;Space&gt;</ref>(0,<sp/>N),<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>errors);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(errors,<sp/>0);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>e)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ar<sp/>=<sp/>compare(Func::eval(val_[i]),<sp/>res_[i],<sp/>Func::ulp_factor());</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ar)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++e;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(KOKKOS_ENABLE_SYCL)<sp/>&amp;&amp;<sp/>!defined(KOKKOS_ENABLE_HIP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;value<sp/>at<sp/>%f<sp/>which<sp/>is<sp/>%f<sp/>was<sp/>expected<sp/>to<sp/>be<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)val_[i],</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Func::eval(val_[i]),<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)res_[i]);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal">};</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Space,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Func,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Arg,<sp/>std::size_t<sp/>N&gt;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_test_math_unary_function(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Arg<sp/>(&amp;x)[N])<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>(void)std::initializer_list&lt;int&gt;{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_test_math_unary_function" kindref="compound">TestMathUnaryFunction&lt;Space, Func, Arg, N&gt;</ref>(x),<sp/>0)...};</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_MATH_FUNCTION(FUNC)<sp/>\</highlight></codeline>
<codeline lineno="449"><highlight class="preprocessor"><sp/><sp/>do_test_math_unary_function&lt;TEST_EXECSPACE,<sp/>MathUnaryFunction_##FUNC&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Space,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Func,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Arg1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Arg2,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret<sp/>=<sp/>math_binary_function_return_type_t&lt;Arg1,<sp/>Arg2&gt;&gt;</highlight></codeline>
<codeline lineno="453" refid="struct_test_math_binary_function" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_test_math_binary_function" kindref="compound">TestMathBinaryFunction</ref><sp/>:<sp/><ref refid="struct_floating_point_comparison" kindref="compound">FloatingPointComparison</ref><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>Arg1<sp/>val1_;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>Arg2<sp/>val2_;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>Ret<sp/>res_;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><ref refid="struct_test_math_binary_function" kindref="compound">TestMathBinaryFunction</ref>(Arg1<sp/>val1,<sp/>Arg2<sp/>val2)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>val1_(val1),<sp/>val2_(val2),<sp/>res_(Func::eval_std(val1,<sp/>val2))<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>math_function_name&lt;Func&gt;::name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="structtype__helper" kindref="compound">type_helper&lt;Arg1&gt;::name</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="structtype__helper" kindref="compound">type_helper&lt;Arg2&gt;::name</ref>()</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>run();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run()<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<ref refid="class_kokkos_1_1_range_policy" kindref="compound">Kokkos::RangePolicy&lt;Space&gt;</ref>(0,<sp/>1),<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>errors);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(errors,<sp/>0);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>e)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ar<sp/>=<sp/>compare(Func::eval(val1_,<sp/>val2_),<sp/>res_,<sp/>Func::ulp_factor());</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ar)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++e;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(KOKKOS_ENABLE_SYCL)<sp/>&amp;&amp;<sp/>!defined(KOKKOS_ENABLE_HIP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;value<sp/>at<sp/>%f,<sp/>%f<sp/>which<sp/>is<sp/>%f<sp/>was<sp/>expected<sp/>to<sp/>be<sp/>%f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)val1_,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)val2_,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Func::eval(val1_,<sp/>val2_),</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)res_);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal">};</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Space,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Func,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Arg1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Arg2&gt;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_test_math_binary_function(Arg1<sp/>arg1,<sp/>Arg2<sp/>arg2)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>(void)std::initializer_list&lt;int&gt;{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_test_math_binary_function" kindref="compound">TestMathBinaryFunction&lt;Space, Func, Arg1, Arg2&gt;</ref>(arg1,<sp/>arg2),<sp/>0)...};</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>mathematical_functions_trigonometric_functions)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sin)({</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sin)({-3,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sin)({-3l,<sp/>-2l,<sp/>-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sin)({-3ll,<sp/>-2ll,<sp/>-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sin)({2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sin)({2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sin)({2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sin)({.1f,<sp/>.2f,<sp/>.3f});</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sin)({.4,<sp/>.5,<sp/>.6});</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sin)({.7l,<sp/>.8l,<sp/>.9l});</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cos)({</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cos)({-3,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cos)({-3l,<sp/>-2l,<sp/>-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cos)({-3ll,<sp/>-2ll,<sp/>-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cos)({2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cos)({2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cos)({2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cos)({.1f,<sp/>.2f,<sp/>.3f});</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cos)({.4,<sp/>.5,<sp/>.6});</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cos)({.7l,<sp/>.8l,<sp/>.9l});</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tan)({</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tan)({-3,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tan)({-3l,<sp/>-2l,<sp/>-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tan)({-3ll,<sp/>-2ll,<sp/>-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tan)({2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tan)({2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tan)({2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tan)({.1f,<sp/>.2f,<sp/>.3f});</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tan)({.4,<sp/>.5,<sp/>.6});</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tan)({.7l,<sp/>.8l,<sp/>.9l});</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asin)({</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asin)({-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asin)({-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asin)({-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asin)({0u,<sp/>1u});</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asin)({0ul,<sp/>1ul});</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asin)({0ull,<sp/>1ull});</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asin)({-1.f,<sp/>.9f,<sp/>-.8f,<sp/>.7f,<sp/>-.6f});</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asin)({-.5,<sp/>.4,<sp/>-.3,<sp/>.2,<sp/>-.1,<sp/>0.});</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asin)({-.5l,<sp/>.3l,<sp/>0.l,<sp/>.2l,<sp/>.4l,<sp/>.6l});</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acos)({</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acos)({-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acos)({-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acos)({-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acos)({0u,<sp/>1u});</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acos)({0ul,<sp/>1ul});</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acos)({0ull,<sp/>1ull});</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acos)({-1.f,<sp/>.9f,<sp/>-.8f,<sp/>.7f,<sp/>-.6f});</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acos)({-.5,<sp/>.4,<sp/>-.3,<sp/>.2,<sp/>-.1,<sp/>0.});</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acos)({-.5l,<sp/>.3l,<sp/>0.l,<sp/>.2l,<sp/>.4l,<sp/>.6l});</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atan)({</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atan)({-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atan)({-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atan)({-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atan)({0u,<sp/>1u});</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atan)({0ul,<sp/>1ul});</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atan)({0ull,<sp/>1ull});</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atan)({-1.5f,<sp/>1.3f,<sp/>-1.1f,<sp/>.9f,<sp/>-.7f,<sp/>.5f});</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atan)({1.4,<sp/>-1.2,<sp/>1.,<sp/>-.8,<sp/>.6,<sp/>-.4,<sp/>.2,<sp/>-0.});</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atan)({-.98l,<sp/>.67l,<sp/>-54.l,<sp/>.34l,<sp/>-.21l});</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>atan2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>mathematical_functions_power_functions)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sqrt)({0,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>7,<sp/>11});</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sqrt)({0l,<sp/>1l,<sp/>2l,<sp/>3l,<sp/>5l,<sp/>7l,<sp/>11l});</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sqrt)({0ll,<sp/>1ll,<sp/>2ll,<sp/>3ll,<sp/>5ll,<sp/>7ll,<sp/>11ll});</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sqrt)({0u,<sp/>1u,<sp/>2u,<sp/>3u,<sp/>5u,<sp/>7u});</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sqrt)({0ul,<sp/>1ul,<sp/>2ul,<sp/>3ul,<sp/>5ul,<sp/>7ul});</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sqrt)({0ull,<sp/>1ull,<sp/>2ull,<sp/>3ull,<sp/>5ull,<sp/>7ull});</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sqrt)({10.f,<sp/>20.f,<sp/>30.f,<sp/>40.f});</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sqrt)({11.1,<sp/>22.2,<sp/>33.3,<sp/>44.4});</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sqrt)({10.l,<sp/>20.l,<sp/>30.l,<sp/>40.l});</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cbrt)({-5,<sp/>-3,<sp/>-1,<sp/>2,<sp/>4,<sp/>6});</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cbrt)({-5l,<sp/>-3l,<sp/>-1l,<sp/>2l,<sp/>4l,<sp/>6l});</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cbrt)({-5ll,<sp/>-3ll,<sp/>-1ll,<sp/>2ll,<sp/>4ll,<sp/>6ll});</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cbrt)({0u,<sp/>1u,<sp/>2u,<sp/>3u,<sp/>4u,<sp/>5u});</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cbrt)({0ul,<sp/>1ul,<sp/>2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul});</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cbrt)({0ull,<sp/>1ull,<sp/>2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull});</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cbrt)({-1.f,<sp/>.2f,<sp/>-3.f,<sp/>.4f,<sp/>-5.f});</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cbrt)({11.1,<sp/>-2.2,<sp/>33.3,<sp/>-4.4,<sp/>55.5});</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cbrt)({-10.l,<sp/>20.l,<sp/>-30.l,<sp/>40.l,<sp/>-50.l});</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>do_test_math_binary_function&lt;TEST_EXECSPACE,<sp/>kk_pow&gt;(2.f,<sp/>3.f);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>do_test_math_binary_function&lt;TEST_EXECSPACE,<sp/>kk_pow&gt;(2.,<sp/>3.);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>do_test_math_binary_function&lt;TEST_EXECSPACE,<sp/>kk_pow&gt;(2.l,<sp/>3.l);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>do_test_math_binary_function&lt;TEST_EXECSPACE,<sp/>kk_hypot&gt;(2.f,<sp/>3.f);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>do_test_math_binary_function&lt;TEST_EXECSPACE,<sp/>kk_hypot&gt;(2.,<sp/>3.);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME:<sp/>fails<sp/>with<sp/>gcc<sp/>on<sp/>Power<sp/>platforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!(defined(KOKKOS_ARCH_POWER8)<sp/>||<sp/>defined(KOKKOS_ARCH_POWER9))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>do_test_math_binary_function&lt;TEST_EXECSPACE,<sp/>kk_hypot&gt;(2.l,<sp/>3.l);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>mathematical_functions_exponential_functions)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp)({-9,<sp/>-8,<sp/>-7,<sp/>-6,<sp/>-5,<sp/>4,<sp/>3,<sp/>2,<sp/>1,<sp/>0});</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp)({-9l,<sp/>-8l,<sp/>-7l,<sp/>-6l,<sp/>-5l,<sp/>4l,<sp/>3l,<sp/>2l,<sp/>1l,<sp/>0l});</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp)({-9ll,<sp/>-8ll,<sp/>-7ll,<sp/>-6ll,<sp/>-5ll,<sp/>4ll,<sp/>3ll,<sp/>2ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp)({0u,<sp/>1u,<sp/>2u,<sp/>3u,<sp/>4u,<sp/>5u});</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp)({0ul,<sp/>1ul,<sp/>2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul});</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp)({0ull,<sp/>1ull,<sp/>2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull});</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp)({-98.f,<sp/>-7.6f,<sp/>-.54f,<sp/>3.2f,<sp/>1.f,<sp/>-0.f});</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp)({-98.,<sp/>-7.6,<sp/>-.54,<sp/>3.2,<sp/>1.,<sp/>-0.});</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp)({-98.l,<sp/>-7.6l,<sp/>-.54l,<sp/>3.2l,<sp/>1.l,<sp/>-0.l});</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp2)({-9,<sp/>-8,<sp/>-7,<sp/>-6,<sp/>-5,<sp/>4,<sp/>3,<sp/>2,<sp/>1,<sp/>0});</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp2)({-9l,<sp/>-8l,<sp/>-7l,<sp/>-6l,<sp/>-5l,<sp/>4l,<sp/>3l,<sp/>2l,<sp/>1l,<sp/>0l});</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp2)({-9ll,<sp/>-8ll,<sp/>-7ll,<sp/>-6ll,<sp/>-5ll,<sp/>4ll,<sp/>3ll,<sp/>2ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp2)({0u,<sp/>1u,<sp/>2u,<sp/>3u,<sp/>4u,<sp/>5u});</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp2)({0ul,<sp/>1ul,<sp/>2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul});</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp2)({0ull,<sp/>1ull,<sp/>2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull});</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp2)({-98.f,<sp/>-7.6f,<sp/>-.54f,<sp/>3.2f,<sp/>1.f,<sp/>-0.f});</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp2)({-98.,<sp/>-7.6,<sp/>-.54,<sp/>3.2,<sp/>1.,<sp/>-0.});</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(exp2)({-98.l,<sp/>-7.6l,<sp/>-.54l,<sp/>3.2l,<sp/>1.l,<sp/>-0.l});</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(expm1)({-9,<sp/>-8,<sp/>-7,<sp/>-6,<sp/>-5,<sp/>4,<sp/>3,<sp/>2,<sp/>1,<sp/>0});</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(expm1)({-9l,<sp/>-8l,<sp/>-7l,<sp/>-6l,<sp/>-5l,<sp/>4l,<sp/>3l,<sp/>2l,<sp/>1l,<sp/>0l});</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(expm1)({-9ll,<sp/>-8ll,<sp/>-7ll,<sp/>-6ll,<sp/>-5ll,<sp/>4ll,<sp/>3ll,<sp/>2ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(expm1)({0u,<sp/>1u,<sp/>2u,<sp/>3u,<sp/>4u,<sp/>5u});</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(expm1)({0ul,<sp/>1ul,<sp/>2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul});</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(expm1)({0ull,<sp/>1ull,<sp/>2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull});</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(expm1)({-98.f,<sp/>-7.6f,<sp/>-.54f,<sp/>3.2f,<sp/>1.f,<sp/>-0.f});</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(expm1)({-98.,<sp/>-7.6,<sp/>-.54,<sp/>3.2,<sp/>1.,<sp/>-0.});</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(expm1)({-98.l,<sp/>-7.6l,<sp/>-.54l,<sp/>3.2l,<sp/>1.l,<sp/>-0.l});</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log)({1,<sp/>23,<sp/>456,<sp/>7890});</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log)({1l,<sp/>23l,<sp/>456l,<sp/>7890l});</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log)({1ll,<sp/>23ll,<sp/>456ll,<sp/>7890ll});</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log)({1u,<sp/>23u,<sp/>456u,<sp/>7890u});</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log)({1ul,<sp/>23ul,<sp/>456ul,<sp/>7890ul});</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log)({1ull,<sp/>23ull,<sp/>456ull,<sp/>7890ull});</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log)({1234.f,<sp/>567.f,<sp/>89.f,<sp/>.1f});</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log)({1234.,<sp/>567.,<sp/>89.,<sp/>.02});</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log)({1234.l,<sp/>567.l,<sp/>89.l,<sp/>.003l});</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log10)({1,<sp/>23,<sp/>456,<sp/>7890});</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log10)({1l,<sp/>23l,<sp/>456l,<sp/>7890l});</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log10)({1ll,<sp/>23ll,<sp/>456ll,<sp/>7890ll});</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log10)({1u,<sp/>23u,<sp/>456u,<sp/>7890u});</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log10)({1ul,<sp/>23ul,<sp/>456ul,<sp/>7890ul});</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log10)({1ull,<sp/>23ull,<sp/>456ull,<sp/>7890ull});</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log10)({1234.f,<sp/>567.f,<sp/>89.f,<sp/>.1f});</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log10)({1234.,<sp/>567.,<sp/>89.,<sp/>.02});</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log10)({1234.l,<sp/>567.l,<sp/>89.l,<sp/>.003l});</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME_OPENMPTARGET<sp/>FIXME_AMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(KOKKOS_ENABLE_OPENMPTARGET)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="674"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(defined(KOKKOS_ARCH_VEGA906)<sp/>||<sp/>defined(KOKKOS_ARCH_VEGA908)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="675"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(KOKKOS_ARCH_VEGA90A))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log2)({1,<sp/>23,<sp/>456,<sp/>7890});</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log2)({1l,<sp/>23l,<sp/>456l,<sp/>7890l});</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log2)({1ll,<sp/>23ll,<sp/>456ll,<sp/>7890ll});</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log2)({1u,<sp/>23u,<sp/>456u,<sp/>7890u});</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log2)({1ul,<sp/>23ul,<sp/>456ul,<sp/>7890ul});</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log2)({1ull,<sp/>23ull,<sp/>456ull,<sp/>7890ull});</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log2)({1234.f,<sp/>567.f,<sp/>89.f,<sp/>.1f});</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log2)({1234.,<sp/>567.,<sp/>89.,<sp/>.02});</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log2)({1234.l,<sp/>567.l,<sp/>89.l,<sp/>.003l});</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log1p)({1,<sp/>23,<sp/>456,<sp/>7890,<sp/>0});</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log1p)({1l,<sp/>23l,<sp/>456l,<sp/>7890l,<sp/>0l});</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log1p)({1ll,<sp/>23ll,<sp/>456ll,<sp/>7890ll,<sp/>0ll});</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log1p)({1u,<sp/>23u,<sp/>456u,<sp/>7890u,<sp/>0u});</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log1p)({1ul,<sp/>23ul,<sp/>456ul,<sp/>7890ul,<sp/>0ul});</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log1p)({1ull,<sp/>23ull,<sp/>456ull,<sp/>7890ull,<sp/>0ull});</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log1p)({1234.f,<sp/>567.f,<sp/>89.f,<sp/>-.9f});</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log1p)({1234.,<sp/>567.,<sp/>89.,<sp/>-.08});</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(log1p)({1234.l,<sp/>567.l,<sp/>89.l,<sp/>-.007l});</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>mathematical_functions_hyperbolic_functions)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sinh)({-3,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sinh)({-3l,<sp/>-2l,<sp/>-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sinh)({-3ll,<sp/>-2ll,<sp/>-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sinh)({2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sinh)({2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sinh)({2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sinh)({.1f,<sp/>-2.f,<sp/>3.f});</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sinh)({-4.,<sp/>.5,<sp/>-.6});</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(sinh)({.7l,<sp/>.8l,<sp/>.9l});</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cosh)({-3,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cosh)({-3l,<sp/>-2l,<sp/>-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cosh)({-3ll,<sp/>-2ll,<sp/>-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cosh)({2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cosh)({2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cosh)({2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cosh)({.1f,<sp/>-2.f,<sp/>3.f});</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cosh)({-4.,<sp/>.5,<sp/>-.6});</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(cosh)({.7l,<sp/>.8l,<sp/>.9l});</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tanh)({-3,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tanh)({-3l,<sp/>-2l,<sp/>-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tanh)({-3ll,<sp/>-2ll,<sp/>-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tanh)({2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tanh)({2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tanh)({2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tanh)({.1f,<sp/>-2.f,<sp/>3.f});</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tanh)({-4.,<sp/>.5,<sp/>-.6});</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tanh)({.7l,<sp/>.8l,<sp/>.9l});</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asinh)({-3,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asinh)({-3l,<sp/>-2l,<sp/>-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asinh)({-3ll,<sp/>-2ll,<sp/>-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asinh)({2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asinh)({2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asinh)({2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asinh)({.1f,<sp/>-2.f,<sp/>3.f});</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asinh)({-4.,<sp/>.5,<sp/>-.6});</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(asinh)({.7l,<sp/>.8l,<sp/>.9l});</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acosh)({1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6});</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acosh)({1l,<sp/>2l,<sp/>3l,<sp/>4l,<sp/>5l,<sp/>6l});</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acosh)({1ll,<sp/>2ll,<sp/>3ll,<sp/>4ll,<sp/>5ll,<sp/>6ll});</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acosh)({1u,<sp/>2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acosh)({1ul,<sp/>2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acosh)({1ull,<sp/>2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acosh)({1.2f,<sp/>34.f,<sp/>56.f,<sp/>789.f});</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acosh)({1.2,<sp/>34.,<sp/>56.,<sp/>789.});</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(acosh)({1.2l,<sp/>34.l,<sp/>56.l,<sp/>789.l});</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atanh)({0});</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atanh)({0l});</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atanh)({0ll});</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atanh)({0u});</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atanh)({0ul});</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atanh)({0ull});</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atanh)({-.97f,<sp/>.86f,<sp/>-.53f,<sp/>.42f,<sp/>-.1f,<sp/>0.f});</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atanh)({-.97,<sp/>.86,<sp/>-.53,<sp/>.42,<sp/>-.1,<sp/>0.});</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(atanh)({-.97l,<sp/>.86l,<sp/>-.53l,<sp/>.42l,<sp/>-.1l,<sp/>0.l});</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>mathematical_functions_error_and_gamma_functions)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erf)({-3,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erf)({-3l,<sp/>-2l,<sp/>-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erf)({-3ll,<sp/>-2ll,<sp/>-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erf)({2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erf)({2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erf)({2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erf)({.1f,<sp/>-2.f,<sp/>3.f});</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erf)({-4.,<sp/>.5,<sp/>-.6});</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erf)({.7l,<sp/>.8l,<sp/>.9l});</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erfc)({-3,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erfc)({-3l,<sp/>-2l,<sp/>-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erfc)({-3ll,<sp/>-2ll,<sp/>-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erfc)({2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erfc)({2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erfc)({2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erfc)({.1f,<sp/>-2.f,<sp/>3.f});</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erfc)({-4.,<sp/>.5,<sp/>-.6});</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(erfc)({.7l,<sp/>.8l,<sp/>.9l});</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tgamma)({1,<sp/>2,<sp/>3,<sp/>4,<sp/>56,<sp/>78});</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tgamma)({1l,<sp/>2l,<sp/>3l,<sp/>4l,<sp/>56l,<sp/>78l});</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tgamma)({1ll,<sp/>2ll,<sp/>3ll,<sp/>4ll,<sp/>56ll,<sp/>78ll});</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tgamma)({1u,<sp/>2u,<sp/>3u,<sp/>4u,<sp/>56u,<sp/>78u});</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tgamma)({1ul,<sp/>2ul,<sp/>3ul,<sp/>4ul,<sp/>56ul,<sp/>78ul});</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tgamma)({1ull,<sp/>2ull,<sp/>3ull,<sp/>4ull,<sp/>56ull,<sp/>78ull});</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tgamma)({.1f,<sp/>-2.2f,<sp/>3.f});</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tgamma)({-4.4,<sp/>.5,<sp/>-.6});</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(tgamma)({.7l,<sp/>.8l,<sp/>.9l});</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(lgamma)({1,<sp/>2,<sp/>3,<sp/>4,<sp/>56,<sp/>78});</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(lgamma)({1l,<sp/>2l,<sp/>3l,<sp/>4l,<sp/>56l,<sp/>78l});</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(lgamma)({1ll,<sp/>2ll,<sp/>3ll,<sp/>4ll,<sp/>56ll,<sp/>78ll});</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(lgamma)({1u,<sp/>2u,<sp/>3u,<sp/>4u,<sp/>56u,<sp/>78u});</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(lgamma)({1ul,<sp/>2ul,<sp/>3ul,<sp/>4ul,<sp/>56ul,<sp/>78ul});</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(lgamma)({1ull,<sp/>2ull,<sp/>3ull,<sp/>4ull,<sp/>56ull,<sp/>78ull});</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(lgamma)({.1f,<sp/>-2.2f,<sp/>3.f});</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(lgamma)({-4.4,<sp/>.5,<sp/>-.6});</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(lgamma)({.7l,<sp/>.8l,<sp/>.9l});</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal">TEST(TEST_CATEGORY,</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>mathematical_functions_nearest_interger_floating_point_operations)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(ceil)({-3,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(ceil)({-3l,<sp/>-2l,<sp/>-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(ceil)({-3ll,<sp/>-2ll,<sp/>-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(ceil)({2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(ceil)({2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(ceil)({2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(ceil)({-1.1f,<sp/>2.2f,<sp/>-3.3f,<sp/>4.4f,<sp/>-5.5f});</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(ceil)({-6.6,<sp/>7.7,<sp/>-8.8,<sp/>9.9});</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(ceil)({12.3l,<sp/>4.56l,<sp/>789.l});</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(floor)({-3,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(floor)({-3l,<sp/>-2l,<sp/>-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(floor)({-3ll,<sp/>-2ll,<sp/>-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(floor)({2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(floor)({2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(floor)({2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(floor)({-1.1f,<sp/>2.2f,<sp/>-3.3f,<sp/>4.4f,<sp/>-5.5f});</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(floor)({-6.6,<sp/>7.7,<sp/>-8.8,<sp/>9.9});</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(floor)({12.3l,<sp/>4.56l,<sp/>789.l});</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(trunc)({-3,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(trunc)({-3l,<sp/>-2l,<sp/>-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(trunc)({-3ll,<sp/>-2ll,<sp/>-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(trunc)({2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(trunc)({2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(trunc)({2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(trunc)({-1.1f,<sp/>2.2f,<sp/>-3.3f,<sp/>4.4f,<sp/>-5.5f});</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(trunc)({-6.6,<sp/>7.7,<sp/>-8.8,<sp/>9.9});</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(trunc)({12.3l,<sp/>4.56l,<sp/>789.l});</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>KOKKOS_ENABLE_SYCL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(nearbyint)({-3,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(nearbyint)({-3l,<sp/>-2l,<sp/>-1l,<sp/>0l,<sp/>1l});</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(nearbyint)({-3ll,<sp/>-2ll,<sp/>-1ll,<sp/>0ll,<sp/>1ll});</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(nearbyint)({2u,<sp/>3u,<sp/>4u,<sp/>5u,<sp/>6u});</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(nearbyint)({2ul,<sp/>3ul,<sp/>4ul,<sp/>5ul,<sp/>6ul});</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(nearbyint)({2ull,<sp/>3ull,<sp/>4ull,<sp/>5ull,<sp/>6ull});</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(nearbyint)({-1.1f,<sp/>2.2f,<sp/>-3.3f,<sp/>4.4f,<sp/>-5.5f});</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(nearbyint)({-6.6,<sp/>7.7,<sp/>-8.8,<sp/>9.9});</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>TEST_MATH_FUNCTION(nearbyint)({12.3l,<sp/>4.56l,<sp/>789.l});</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Space&gt;</highlight></codeline>
<codeline lineno="881" refid="struct_test_absolute_value_function" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_test_absolute_value_function" kindref="compound">TestAbsoluteValueFunction</ref><sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><ref refid="struct_test_absolute_value_function" kindref="compound">TestAbsoluteValueFunction</ref>()<sp/>{<sp/>run();<sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>Kokkos::parallel_reduce(<ref refid="class_kokkos_1_1_range_policy" kindref="compound">Kokkos::RangePolicy&lt;Space&gt;</ref>(0,<sp/>1),<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>errors);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(errors,<sp/>0);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>e)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::abs;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(1)<sp/>!=<sp/>1<sp/>||<sp/>abs(-1)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++e;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_IMPL_DO_NOT_USE_PRINTF(</highlight><highlight class="stringliteral">&quot;failed<sp/>abs(int)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(2l)<sp/>!=<sp/>2l<sp/>||<sp/>abs(-2l)<sp/>!=<sp/>2l)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++e;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_IMPL_DO_NOT_USE_PRINTF(</highlight><highlight class="stringliteral">&quot;failed<sp/>abs(long<sp/>int)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(3ll)<sp/>!=<sp/>3ll<sp/>||<sp/>abs(-3ll)<sp/>!=<sp/>3ll)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++e;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_IMPL_DO_NOT_USE_PRINTF(</highlight><highlight class="stringliteral">&quot;failed<sp/>abs(long<sp/>long<sp/>int)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(4.f)<sp/>!=<sp/>4.f<sp/>||<sp/>abs(-4.f)<sp/>!=<sp/>4.f)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++e;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_IMPL_DO_NOT_USE_PRINTF(</highlight><highlight class="stringliteral">&quot;failed<sp/>abs(float)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(5.)<sp/>!=<sp/>5.<sp/>||<sp/>abs(-5.)<sp/>!=<sp/>5.)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++e;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_IMPL_DO_NOT_USE_PRINTF(</highlight><highlight class="stringliteral">&quot;failed<sp/>abs(double)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(6.l)<sp/>!=<sp/>6.l<sp/>||<sp/>abs(-6.l)<sp/>!=<sp/>6.l)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++e;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_IMPL_DO_NOT_USE_PRINTF(</highlight><highlight class="stringliteral">&quot;failed<sp/>abs(long<sp/>double)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>special<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::isinf;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Kokkos::Experimental::isnan;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(-0.)<sp/>!=<sp/>0.</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WORKAROUND<sp/>icpx<sp/>changing<sp/>default<sp/>FP<sp/>model<sp/>when<sp/>optimization<sp/>level<sp/>is<sp/>&gt;=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>-fp-model=precise<sp/>works<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal">#ifndef<sp/>__INTEL_LLVM_COMPILER</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!isinf(abs(-INFINITY))<sp/>||<sp/>!isnan(abs(-NAN))</highlight></codeline>
<codeline lineno="924"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++e;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_IMPL_DO_NOT_USE_PRINTF(</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>abs(floating_point)<sp/>special<sp/>values\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_same&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(abs(1)),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_same&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(abs(2l)),<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_same&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(abs(3ll)),<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_same&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(abs(4.f)),<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_same&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(abs(5.)),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MATHEMATICAL_FUNCTIONS_HAVE_LONG_DOUBLE_OVERLOADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_same&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(abs(6.l)),<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal">};</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal">TEST(TEST_CATEGORY,<sp/>mathematical_functions_absolute_value)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><ref refid="struct_test_absolute_value_function" kindref="compound">TestAbsoluteValueFunction&lt;TEST_EXECSPACE&gt;</ref>();</highlight></codeline>
<codeline lineno="944"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Kokkos/kokkos/core/unit_test/TestMathematicalFunctions.hpp"/>
  </compounddef>
</doxygen>
