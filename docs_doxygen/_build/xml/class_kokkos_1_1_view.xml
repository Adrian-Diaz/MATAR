<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="class_kokkos_1_1_view" kind="class" language="C++" prot="public">
    <compoundname>Kokkos::View</compoundname>
    <basecompoundref refid="struct_kokkos_1_1_view_traits" prot="public" virt="non-virtual">Kokkos::ViewTraits&lt; DataType, Properties... &gt;</basecompoundref>
    <includes refid="_kokkos___view_8hpp" local="no">Kokkos_View.hpp</includes>
    <templateparamlist>
      <param>
        <type>class DataType</type>
      </param>
      <param>
        <type>class...</type>
        <declname>Properties</declname>
        <defname>Properties</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_kokkos_1_1_view_1a9a9a8e8a3f826869353ef1397f0ea894" prot="public" static="no" strong="no">
        <type></type>
        <name>@242</name>
        <qualifiedname>Kokkos::View::@242</qualifiedname>
        <enumvalue id="class_kokkos_1_1_view_1a9a9a8e8a3f826869353ef1397f0ea894ac60a69023b6b41429b79e7b43eb749e8" prot="public">
          <name>Rank</name>
          <initializer>= map_type::Rank</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="646" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="646" bodyend="646"/>
      </memberdef>
      <memberdef kind="enum" id="class_kokkos_1_1_view_1a94b8ad03cb0b26d8f936cc1db8ce694f" prot="public" static="no" strong="no">
        <type></type>
        <name>@243</name>
        <qualifiedname>Kokkos::View::@243</qualifiedname>
        <enumvalue id="class_kokkos_1_1_view_1a94b8ad03cb0b26d8f936cc1db8ce694faf7584472b1d4579a7007abcfb42e3248" prot="public">
          <name>reference_type_is_lvalue_reference</name>
          <initializer>=
        std::is_lvalue_reference&lt;reference_type&gt;::value</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="747" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="747" bodyend="750"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1af6b6b45f61e6cda6f422ae1fc4bf0df8" prot="public" static="no">
        <type><ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DataType, Properties... &gt;</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::traits =  ViewTraits&lt;DataType, Properties...&gt;</definition>
        <argsstring></argsstring>
        <name>traits</name>
        <qualifiedname>Kokkos::View::traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="587" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1a320003b343fe3a41e5d25021e4a5fff3" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; typename traits::scalar_array_type, typename traits::array_layout, typename <ref refid="struct_kokkos_1_1_device" kindref="compound">traits::device_type</ref>, typename traits::memory_traits &gt;</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::array_type =  View&lt;typename traits::scalar_array_type, typename traits::array_layout, typename traits::device_type, typename traits::memory_traits&gt;</definition>
        <argsstring></argsstring>
        <name>array_type</name>
        <qualifiedname>Kokkos::View::array_type</qualifiedname>
        <briefdescription>
<para>Compatible view of array of scalar types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="601" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="603" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1ab5709a279a8bb8807306953bd60790c0" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; typename traits::const_data_type, typename traits::array_layout, typename <ref refid="struct_kokkos_1_1_device" kindref="compound">traits::device_type</ref>, typename traits::memory_traits &gt;</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::const_type =  View&lt;typename traits::const_data_type, typename traits::array_layout, typename traits::device_type, typename traits::memory_traits&gt;</definition>
        <argsstring></argsstring>
        <name>const_type</name>
        <qualifiedname>Kokkos::View::const_type</qualifiedname>
        <briefdescription>
<para>Compatible view of const data type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="606" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1aecdaccbc6fdda6a211953c141d10c0ee" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; typename traits::non_const_data_type, typename traits::array_layout, typename <ref refid="struct_kokkos_1_1_device" kindref="compound">traits::device_type</ref>, typename traits::memory_traits &gt;</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::non_const_type =  View&lt;typename traits::non_const_data_type, typename traits::array_layout, typename traits::device_type, typename traits::memory_traits&gt;</definition>
        <argsstring></argsstring>
        <name>non_const_type</name>
        <qualifiedname>Kokkos::View::non_const_type</qualifiedname>
        <briefdescription>
<para>Compatible view of non-const data type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="611" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="613" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1aa792f904a0197bb45c90c472d64935b1" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; typename traits::non_const_data_type, typename traits::array_layout, <ref refid="struct_kokkos_1_1_device" kindref="compound">Device</ref>&lt; DefaultHostExecutionSpace, typename traits::host_mirror_space::memory_space &gt; &gt;</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::HostMirror =  View&lt;typename traits::non_const_data_type, typename traits::array_layout, Device&lt;DefaultHostExecutionSpace, typename traits::host_mirror_space::memory_space&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>HostMirror</name>
        <qualifiedname>Kokkos::View::HostMirror</qualifiedname>
        <briefdescription>
<para>Compatible HostMirror view. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="616" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1af0d1503c7871228c54f62b9fdee8ffa7" prot="public" static="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; typename traits::non_const_data_type, typename traits::array_layout, typename traits::host_mirror_space &gt;</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::host_mirror_type =  View&lt;typename traits::non_const_data_type, typename traits::array_layout, typename traits::host_mirror_space&gt;</definition>
        <argsstring></argsstring>
        <name>host_mirror_type</name>
        <qualifiedname>Kokkos::View::host_mirror_type</qualifiedname>
        <briefdescription>
<para>Compatible HostMirror view. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="622" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1ab7c978f15da5f4f35ce7ba31bbc1a9a8" prot="public" static="no">
        <type>typename <ref refid="struct_kokkos_1_1_impl_1_1_view_uniform_type" kindref="compound">Impl::ViewUniformType</ref>&lt; <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>, 0 &gt;::type</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::uniform_type =  typename Impl::ViewUniformType&lt;View, 0&gt;::type</definition>
        <argsstring></argsstring>
        <name>uniform_type</name>
        <qualifiedname>Kokkos::View::uniform_type</qualifiedname>
        <briefdescription>
<para>Unified types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="627" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1a83fa0c062981c32738c942ef2279c942" prot="public" static="no">
        <type>typename <ref refid="struct_kokkos_1_1_impl_1_1_view_uniform_type" kindref="compound">Impl::ViewUniformType</ref>&lt; <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>, 0 &gt;<ref refid="class_kokkos_1_1_view_1ab5709a279a8bb8807306953bd60790c0" kindref="member">::const_type</ref></type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::uniform_const_type =  typename Impl::ViewUniformType&lt;View, 0&gt;::const_type</definition>
        <argsstring></argsstring>
        <name>uniform_const_type</name>
        <qualifiedname>Kokkos::View::uniform_const_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="628" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1a503eb00e8b1765fb053cacf6a2813c6e" prot="public" static="no">
        <type>typename <ref refid="struct_kokkos_1_1_impl_1_1_view_uniform_type" kindref="compound">Impl::ViewUniformType</ref>&lt; <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>, 0 &gt;::runtime_type</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::uniform_runtime_type =  typename Impl::ViewUniformType&lt;View, 0&gt;::runtime_type</definition>
        <argsstring></argsstring>
        <name>uniform_runtime_type</name>
        <qualifiedname>Kokkos::View::uniform_runtime_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="630" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="631" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1ae051be60e8fd83220b54820f86c3ffee" prot="public" static="no">
        <type>typename <ref refid="struct_kokkos_1_1_impl_1_1_view_uniform_type" kindref="compound">Impl::ViewUniformType</ref>&lt; <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>, 0 &gt;::runtime_const_type</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::uniform_runtime_const_type =  typename Impl::ViewUniformType&lt;View, 0&gt;::runtime_const_type</definition>
        <argsstring></argsstring>
        <name>uniform_runtime_const_type</name>
        <qualifiedname>Kokkos::View::uniform_runtime_const_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="632" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1a80ec8464bd0b1730996294d290a4d51d" prot="public" static="no">
        <type>typename <ref refid="struct_kokkos_1_1_impl_1_1_view_uniform_type" kindref="compound">Impl::ViewUniformType</ref>&lt; <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>, 0 &gt;::nomemspace_type</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::uniform_nomemspace_type =  typename Impl::ViewUniformType&lt;View, 0&gt;::nomemspace_type</definition>
        <argsstring></argsstring>
        <name>uniform_nomemspace_type</name>
        <qualifiedname>Kokkos::View::uniform_nomemspace_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="634" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="635" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1a4f5035a7275d7f320f71eacc42bcc254" prot="public" static="no">
        <type>typename <ref refid="struct_kokkos_1_1_impl_1_1_view_uniform_type" kindref="compound">Impl::ViewUniformType</ref>&lt; <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>, 0 &gt;::const_nomemspace_type</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::uniform_const_nomemspace_type =  typename Impl::ViewUniformType&lt;View, 0&gt;::const_nomemspace_type</definition>
        <argsstring></argsstring>
        <name>uniform_const_nomemspace_type</name>
        <qualifiedname>Kokkos::View::uniform_const_nomemspace_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="636" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="637" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1aaeb8d7a68ac24a6231e2c58c0bb0386f" prot="public" static="no">
        <type>typename <ref refid="struct_kokkos_1_1_impl_1_1_view_uniform_type" kindref="compound">Impl::ViewUniformType</ref>&lt; <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>, 0 &gt;::runtime_nomemspace_type</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::uniform_runtime_nomemspace_type =  typename Impl::ViewUniformType&lt;View, 0&gt;::runtime_nomemspace_type</definition>
        <argsstring></argsstring>
        <name>uniform_runtime_nomemspace_type</name>
        <qualifiedname>Kokkos::View::uniform_runtime_nomemspace_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="638" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="639" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1acd2a2745f32370ef59f987f92d63c9ad" prot="public" static="no">
        <type>typename <ref refid="struct_kokkos_1_1_impl_1_1_view_uniform_type" kindref="compound">Impl::ViewUniformType</ref>&lt; <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>, 0 &gt;::runtime_const_nomemspace_type</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::uniform_runtime_const_nomemspace_type =  typename Impl::ViewUniformType&lt;View, 0&gt;::runtime_const_nomemspace_type</definition>
        <argsstring></argsstring>
        <name>uniform_runtime_const_nomemspace_type</name>
        <qualifiedname>Kokkos::View::uniform_runtime_const_nomemspace_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="640" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1a8086e5e4fd94de1c655f9dbb34b7e128" prot="public" static="no">
        <type>typename map_type::reference_type</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::reference_type =  typename map_type::reference_type</definition>
        <argsstring></argsstring>
        <name>reference_type</name>
        <qualifiedname>Kokkos::View::reference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="744" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="744" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1a9617efa5504da485eacdd09d44780ed9" prot="public" static="no">
        <type>typename map_type::pointer_type</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::pointer_type =  typename map_type::pointer_type</definition>
        <argsstring></argsstring>
        <name>pointer_type</name>
        <qualifiedname>Kokkos::View::pointer_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="745" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="745" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1a9a172dea0a6b0cdbc5108b18b7791ead" prot="private" static="no">
        <type><ref refid="struct_kokkos_1_1_impl_1_1_view_tracker" kindref="compound">Kokkos::Impl::ViewTracker</ref>&lt; <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> &gt;</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::view_tracker_type =  Kokkos::Impl::ViewTracker&lt;View&gt;</definition>
        <argsstring></argsstring>
        <name>view_tracker_type</name>
        <qualifiedname>Kokkos::View::view_tracker_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="584" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_kokkos_1_1_view_1aed1eb3488830903b232a83c44f2b27d2" prot="private" static="no">
        <type><ref refid="class_kokkos_1_1_impl_1_1_view_mapping" kindref="compound">Kokkos::Impl::ViewMapping</ref>&lt; <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">traits</ref>, typename traits::specialize &gt;</type>
        <definition>using Kokkos::View&lt; DataType, Properties &gt;::map_type =  Kokkos::Impl::ViewMapping&lt;traits, typename traits::specialize&gt;</definition>
        <argsstring></argsstring>
        <name>map_type</name>
        <qualifiedname>Kokkos::View::map_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="590" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="591" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_kokkos_1_1_view_1a540f8f88e74b1570a064113d19135b6e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
          </param>
          <param>
            <type>class...</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class View</definition>
        <argsstring></argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="580" column="16" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="580" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_kokkos_1_1_view_1ab9e6ee44c568ed59747cda3c47f017e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
          </param>
          <param>
            <type>class...</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class Kokkos::Impl::ViewMapping</definition>
        <argsstring></argsstring>
        <name>Kokkos::Impl::ViewMapping</name>
        <qualifiedname>Kokkos::View::ViewMapping</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_impl_1_1_view_mapping" kindref="compound">Kokkos::Impl::ViewMapping</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="582" column="16" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_kokkos_1_1_view_1a1800e643a49f403767d4a60ea3441890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>struct</type>
        <definition>friend struct Kokkos::Impl::ViewTracker</definition>
        <argsstring></argsstring>
        <name>Kokkos::Impl::ViewTracker</name>
        <qualifiedname>Kokkos::View::ViewTracker</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1_impl_1_1_view_tracker" kindref="compound">Kokkos::Impl::ViewTracker</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="593" column="17" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="593" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_kokkos_1_1_view_1a14dccd93496ea439b4a2b069d75d0620" prot="private" static="no" mutable="no">
        <type><ref refid="struct_kokkos_1_1_impl_1_1_view_tracker" kindref="compound">view_tracker_type</ref></type>
        <definition>view_tracker_type Kokkos::View&lt; DataType, Properties &gt;::m_track</definition>
        <argsstring></argsstring>
        <name>m_track</name>
        <qualifiedname>Kokkos::View::m_track</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="595" column="21" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_kokkos_1_1_view_1ad304184d29cbf087d630aa68657b018e" prot="private" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_impl_1_1_view_mapping" kindref="compound">map_type</ref></type>
        <definition>map_type Kokkos::View&lt; DataType, Properties &gt;::m_map</definition>
        <argsstring></argsstring>
        <name>m_map</name>
        <qualifiedname>Kokkos::View::m_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="596" column="12" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="596" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_kokkos_1_1_view_1ab447c9cf45cd9ccb50f8d97207754236" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool Kokkos::View&lt; DataType, Properties &gt;::is_layout_left</definition>
        <argsstring></argsstring>
        <name>is_layout_left</name>
        <qualifiedname>Kokkos::View::is_layout_left</qualifiedname>
        <initializer>=
      std::is_same&lt;typename traits::array_layout, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="778" column="25" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="778" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_kokkos_1_1_view_1a45e28dda533217c3cc9906d8d1eeb84c" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool Kokkos::View&lt; DataType, Properties &gt;::is_layout_right</definition>
        <argsstring></argsstring>
        <name>is_layout_right</name>
        <qualifiedname>Kokkos::View::is_layout_right</qualifiedname>
        <initializer>=
      std::is_same&lt;typename traits::array_layout, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="781" column="25" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_kokkos_1_1_view_1a51177c877399f1f52b56bfcdd290bd93" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool Kokkos::View&lt; DataType, Properties &gt;::is_layout_stride</definition>
        <argsstring></argsstring>
        <name>is_layout_stride</name>
        <qualifiedname>Kokkos::View::is_layout_stride</qualifiedname>
        <initializer>=
      std::is_same&lt;typename traits::array_layout, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="784" column="25" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_kokkos_1_1_view_1a11d2cfc6bc8f53135e79833a983cc1d4" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool Kokkos::View&lt; DataType, Properties &gt;::is_default_map</definition>
        <argsstring></argsstring>
        <name>is_default_map</name>
        <qualifiedname>Kokkos::View::is_default_map</qualifiedname>
        <initializer>=
      std::is_same&lt;typename traits::specialize, void&gt;::value &amp;&amp;
      (is_layout_left || is_layout_right || is_layout_stride)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="787" column="25" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="787" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_kokkos_1_1_view_1accd84cb38f8e4da25593c6e687f3430f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION constexpr std::enable_if&lt; std::is_integral&lt; iType &gt;::value, size_t &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr std::enable_if&lt; std::is_integral&lt; iType &gt;::value, size_t &gt;::type Kokkos::View&lt; DataType, Properties &gt;::extent</definition>
        <argsstring>(const iType &amp;r) const noexcept</argsstring>
        <name>extent</name>
        <qualifiedname>Kokkos::View::extent</qualifiedname>
        <param>
          <type>const iType &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>rank() to be implemented </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="657" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="657" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ab0337213607633f7058a47b6a7e833f7" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION constexpr std::enable_if&lt; std::is_integral&lt; iType &gt;::value, int &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr std::enable_if&lt; std::is_integral&lt; iType &gt;::value, int &gt;::type Kokkos::View&lt; DataType, Properties &gt;::extent_int</definition>
        <argsstring>(const iType &amp;r) const noexcept</argsstring>
        <name>extent_int</name>
        <qualifiedname>Kokkos::View::extent_int</qualifiedname>
        <param>
          <type>const iType &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="669" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="669" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ad83cbb7275f2619d5e196c5818607d0d" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr traits::array_layout</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr traits::array_layout Kokkos::View&lt; DataType, Properties &gt;::layout</definition>
        <argsstring>() const</argsstring>
        <name>layout</name>
        <qualifiedname>Kokkos::View::layout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="673" column="66" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="673" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a47ae098ef7b9216a0de8564b2da31eee" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr size_t</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr size_t Kokkos::View&lt; DataType, Properties &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>Kokkos::View::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="683" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="683" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1af8ed80755e536f42a3e54f565ed8d659" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr size_t</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr size_t Kokkos::View&lt; DataType, Properties &gt;::stride_0</definition>
        <argsstring>() const</argsstring>
        <name>stride_0</name>
        <qualifiedname>Kokkos::View::stride_0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="689" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="689" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a843c0ee7c60e3f21125fd0b966fa2bf5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr size_t</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr size_t Kokkos::View&lt; DataType, Properties &gt;::stride_1</definition>
        <argsstring>() const</argsstring>
        <name>stride_1</name>
        <qualifiedname>Kokkos::View::stride_1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="692" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="692" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a20c5c6d54963497c6c7f30146fb94fbb" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr size_t</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr size_t Kokkos::View&lt; DataType, Properties &gt;::stride_2</definition>
        <argsstring>() const</argsstring>
        <name>stride_2</name>
        <qualifiedname>Kokkos::View::stride_2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="695" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="695" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ab4c24c922207e1280c0f4bc384f6c5f5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr size_t</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr size_t Kokkos::View&lt; DataType, Properties &gt;::stride_3</definition>
        <argsstring>() const</argsstring>
        <name>stride_3</name>
        <qualifiedname>Kokkos::View::stride_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="698" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="698" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a841d99e7c38251594c0aeba3465741ac" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr size_t</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr size_t Kokkos::View&lt; DataType, Properties &gt;::stride_4</definition>
        <argsstring>() const</argsstring>
        <name>stride_4</name>
        <qualifiedname>Kokkos::View::stride_4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="701" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="701" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a1c724961f56d842e18fad553ac480370" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr size_t</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr size_t Kokkos::View&lt; DataType, Properties &gt;::stride_5</definition>
        <argsstring>() const</argsstring>
        <name>stride_5</name>
        <qualifiedname>Kokkos::View::stride_5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="704" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="704" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ad89941bdc3e88e5be6f1e1175a7cd20a" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr size_t</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr size_t Kokkos::View&lt; DataType, Properties &gt;::stride_6</definition>
        <argsstring>() const</argsstring>
        <name>stride_6</name>
        <qualifiedname>Kokkos::View::stride_6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="707" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="707" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a64bc372a275e6627da32e0566e503eb1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr size_t</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr size_t Kokkos::View&lt; DataType, Properties &gt;::stride_7</definition>
        <argsstring>() const</argsstring>
        <name>stride_7</name>
        <qualifiedname>Kokkos::View::stride_7</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="710" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="710" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a26910c315de7cbc2f761c4b49f9eaaba" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION constexpr std::enable_if&lt; std::is_integral&lt; iType &gt;::value, size_t &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr std::enable_if&lt; std::is_integral&lt; iType &gt;::value, size_t &gt;::type Kokkos::View&lt; DataType, Properties &gt;::stride</definition>
        <argsstring>(iType r) const</argsstring>
        <name>stride</name>
        <qualifiedname>Kokkos::View::stride</qualifiedname>
        <param>
          <type>iType</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="717" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="717" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a0aadcfc7de832e43ea899bd31bc7d244" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::View&lt; DataType, Properties &gt;::stride</definition>
        <argsstring>(iType *const s) const</argsstring>
        <name>stride</name>
        <qualifiedname>Kokkos::View::stride</qualifiedname>
        <param>
          <type>iType *const</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="737" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="737" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1afdb9de7ecccf8c8346f0ee2caff4c6d8" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr size_t</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr size_t Kokkos::View&lt; DataType, Properties &gt;::span</definition>
        <argsstring>() const</argsstring>
        <name>span</name>
        <qualifiedname>Kokkos::View::span</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="752" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="752" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ab72bf843e32cb27d0ae9f85410b6fa39" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::View&lt; DataType, Properties &gt;::span_is_contiguous</definition>
        <argsstring>() const</argsstring>
        <name>span_is_contiguous</name>
        <qualifiedname>Kokkos::View::span_is_contiguous</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="753" column="31" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="753" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1accc7be1264d7d14425b3def2635296cd" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr bool</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr bool Kokkos::View&lt; DataType, Properties &gt;::is_allocated</definition>
        <argsstring>() const</argsstring>
        <name>is_allocated</name>
        <qualifiedname>Kokkos::View::is_allocated</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="756" column="41" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="756" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a9078b01e241273327a8cf1360ced9d0b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr pointer_type</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr pointer_type Kokkos::View&lt; DataType, Properties &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <qualifiedname>Kokkos::View::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="759" column="49" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="759" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ac454272edaadce125255fc05fee3fec7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION const <ref refid="class_kokkos_1_1_impl_1_1_view_mapping" kindref="compound">Kokkos::Impl::ViewMapping</ref>&lt; <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">traits</ref>, typename traits::specialize &gt; &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION const Kokkos::Impl::ViewMapping&lt; traits, typename traits::specialize &gt; &amp; Kokkos::View&lt; DataType, Properties &gt;::impl_map</definition>
        <argsstring>() const</argsstring>
        <name>impl_map</name>
        <qualifiedname>Kokkos::View::impl_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="768" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="768" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a2e6b2bb775acc23b69da659e52cb394d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION const <ref refid="union_kokkos_1_1_impl_1_1_shared_allocation_tracker" kindref="compound">Kokkos::Impl::SharedAllocationTracker</ref> &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION const Kokkos::Impl::SharedAllocationTracker &amp; Kokkos::View&lt; DataType, Properties &gt;::impl_track</definition>
        <argsstring>() const</argsstring>
        <name>impl_track</name>
        <qualifiedname>Kokkos::View::impl_track</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="772" column="47" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="772" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1af1cc95759548bf30983a04e3f972040f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FORCEINLINE_FUNCTION reference_type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION reference_type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>() const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="815" column="18" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="815" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1aaa46838a984dc53d0650dad346c4f96e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0 &gt;::value &amp;&amp;(1==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0 &gt;::value &amp;&amp;(1==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="824" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="824" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a2825b2b8aa55e3f7f58fffdade82997e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0 &gt;::value &amp;&amp;(1==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;!is_layout_stride), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0 &gt;::value &amp;&amp;(1==Rank)&amp;&amp;is_default_map &amp;&amp;!is_layout_stride), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="835" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="835" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a4cafa970947e6f1d3d586d4fcedd1413" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0 &gt;::value &amp;&amp;(1==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;is_layout_stride), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0 &gt;::value &amp;&amp;(1==Rank)&amp;&amp;is_default_map &amp;&amp;is_layout_stride), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="846" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="846" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1aa19b5ee4184d67986b22ca28533bca6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0 &gt;::value &amp;&amp;(1==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0 &gt;::value &amp;&amp;(1==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator[]</definition>
        <argsstring>(const I0 &amp;i0) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>Kokkos::View::operator[]</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="858" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="858" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1afc1bf9810559d1a265751bfc1ca1abf3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0 &gt;::value &amp;&amp;(1==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;!is_layout_stride), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0 &gt;::value &amp;&amp;(1==Rank)&amp;&amp;is_default_map &amp;&amp;!is_layout_stride), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator[]</definition>
        <argsstring>(const I0 &amp;i0) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>Kokkos::View::operator[]</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="869" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="869" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1acfaa253fb254e0d64d9057085cc7622b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0 &gt;::value &amp;&amp;(1==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;is_layout_stride), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0 &gt;::value &amp;&amp;(1==Rank)&amp;&amp;is_default_map &amp;&amp;is_layout_stride), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator[]</definition>
        <argsstring>(const I0 &amp;i0) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>Kokkos::View::operator[]</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="880" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="880" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a9c8c6ed26d9e7e4e0161646dd6c275dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1 &gt;::value &amp;&amp;(2==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1 &gt;::value &amp;&amp;(2==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="893" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="893" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a6fd9a5a6018e27eb7d918250b6512b6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1 &gt;::value &amp;&amp;(2==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;is_layout_left &amp;&amp;(traits::rank_dynamic==0)), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1 &gt;::value &amp;&amp;(2==Rank)&amp;&amp;is_default_map &amp;&amp;is_layout_left &amp;&amp;(traits::rank_dynamic==0)), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="904" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="904" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a9c3592ce2ddfd2b75b872edfcf6652b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1 &gt;::value &amp;&amp;(2==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;is_layout_left &amp;&amp;(traits::rank_dynamic!=0)), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1 &gt;::value &amp;&amp;(2==Rank)&amp;&amp;is_default_map &amp;&amp;is_layout_left &amp;&amp;(traits::rank_dynamic!=0)), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="915" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="915" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a2036ca9658ef0cc37d707d53a9e1d829" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1 &gt;::value &amp;&amp;(2==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;is_layout_right &amp;&amp;(traits::rank_dynamic==0)), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1 &gt;::value &amp;&amp;(2==Rank)&amp;&amp;is_default_map &amp;&amp;is_layout_right &amp;&amp;(traits::rank_dynamic==0)), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="926" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="926" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a7764a4c7333155a044a331917aa3515f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1 &gt;::value &amp;&amp;(2==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;is_layout_right &amp;&amp;(traits::rank_dynamic!=0)), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1 &gt;::value &amp;&amp;(2==Rank)&amp;&amp;is_default_map &amp;&amp;is_layout_right &amp;&amp;(traits::rank_dynamic!=0)), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="937" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="937" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ac353b3bc05c873ea3a45a7525e2f08e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1 &gt;::value &amp;&amp;(2==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;is_layout_stride), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1 &gt;::value &amp;&amp;(2==Rank)&amp;&amp;is_default_map &amp;&amp;is_layout_stride), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="948" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="948" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1aab02f1382ac4af1849b5b7216d79d15f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2 &gt;::value &amp;&amp;(3==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2 &gt;::value &amp;&amp;(3==Rank)&amp;&amp;is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="962" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="962" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1aa9fafa416f99ee251035cb03285aad0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2 &gt;::value &amp;&amp;(3==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2 &gt;::value &amp;&amp;(3==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="972" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="972" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ad96beb4a322e9e848271fb42f06f77ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3 &gt;::value &amp;&amp;(4==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3 &gt;::value &amp;&amp;(4==Rank)&amp;&amp;is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="985" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="985" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a3e6df436a3eaf4f7d3ef409ee3f5522b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3 &gt;::value &amp;&amp;(4==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3 &gt;::value &amp;&amp;(4==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="995" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="995" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ae9f51b0d6e114c87460e8d41f608315e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4 &gt;::value &amp;&amp;(5==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4 &gt;::value &amp;&amp;(5==Rank)&amp;&amp;is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1008" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1008" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a40d62c391aa0326e6c82800ea6659076" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4 &gt;::value &amp;&amp;(5==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4 &gt;::value &amp;&amp;(5==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1019" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1019" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1aeee89e315bc1b5ae971a33c1a0401add" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>typename I5</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, I5 &gt;::value &amp;&amp;(6==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, I5 &gt;::value &amp;&amp;(6==Rank)&amp;&amp;is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, const I5 &amp;i5) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>const I5 &amp;</type>
          <declname>i5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1034" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1034" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a0059161bb66f3865c62f3ee4f845a755" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>typename I5</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, I5 &gt;::value &amp;&amp;(6==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, I5 &gt;::value &amp;&amp;(6==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, const I5 &amp;i5) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>const I5 &amp;</type>
          <declname>i5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1046" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1046" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a0640e31cc0708b72caab6d186c57a03e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>typename I5</type>
          </param>
          <param>
            <type>typename I6</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, I5, I6 &gt;::value &amp;&amp;(7==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, I5, I6 &gt;::value &amp;&amp;(7==Rank)&amp;&amp;is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, const I5 &amp;i5, const I6 &amp;i6) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>const I5 &amp;</type>
          <declname>i5</declname>
        </param>
        <param>
          <type>const I6 &amp;</type>
          <declname>i6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1061" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1061" bodyend="1066"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1acd9612cb284ed4e8e28fd4bbc69dc91f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>typename I5</type>
          </param>
          <param>
            <type>typename I6</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, I5, I6 &gt;::value &amp;&amp;(7==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, I5, I6 &gt;::value &amp;&amp;(7==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, const I5 &amp;i5, const I6 &amp;i6) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>const I5 &amp;</type>
          <declname>i5</declname>
        </param>
        <param>
          <type>const I6 &amp;</type>
          <declname>i6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1074" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1074" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a71b79b1f4a7490b066c0a74614d381a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>typename I5</type>
          </param>
          <param>
            <type>typename I6</type>
          </param>
          <param>
            <type>typename I7</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, I5, I6, I7 &gt;::value &amp;&amp;(8==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, I5, I6, I7 &gt;::value &amp;&amp;(8==Rank)&amp;&amp;is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, const I5 &amp;i5, const I6 &amp;i6, const I7 &amp;i7) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>const I5 &amp;</type>
          <declname>i5</declname>
        </param>
        <param>
          <type>const I6 &amp;</type>
          <declname>i6</declname>
        </param>
        <param>
          <type>const I7 &amp;</type>
          <declname>i7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1090" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1090" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a98b112470b78f4b3d07122b5cbe965a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>typename I5</type>
          </param>
          <param>
            <type>typename I6</type>
          </param>
          <param>
            <type>typename I7</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, I5, I6, I7 &gt;::value &amp;&amp;(8==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, I5, I6, I7 &gt;::value &amp;&amp;(8==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::operator()</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, const I5 &amp;i5, const I6 &amp;i6, const I7 &amp;i7) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Kokkos::View::operator()</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>const I5 &amp;</type>
          <declname>i5</declname>
        </param>
        <param>
          <type>const I6 &amp;</type>
          <declname>i6</declname>
        </param>
        <param>
          <type>const I7 &amp;</type>
          <declname>i7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1104" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1104" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a5ae5fcdfd9bce877a0e6f959b6e0fd78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; Args... &gt;::value &amp;&amp;(0==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; Args... &gt;::value &amp;&amp;(0==Rank)), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1116" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1116" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a2504a82bee634f0a30fdc72b2fb205db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, Args... &gt;::value &amp;&amp;(1==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, Args... &gt;::value &amp;&amp;(1==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1127" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1127" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a2648a51280a4e3e853643e65539ad215" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, Args... &gt;::value &amp;&amp;(1==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;!is_layout_stride), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, Args... &gt;::value &amp;&amp;(1==Rank)&amp;&amp;is_default_map &amp;&amp;!is_layout_stride), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1139" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1139" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a52b19334aac8b7b722008a58963874a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, Args... &gt;::value &amp;&amp;(1==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;is_layout_stride), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, Args... &gt;::value &amp;&amp;(1==Rank)&amp;&amp;is_default_map &amp;&amp;is_layout_stride), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1151" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1151" bodyend="1155"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a8037adb165ebd165d1f741f9ee07187a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, Args... &gt;::value &amp;&amp;(2==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, Args... &gt;::value &amp;&amp;(2==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1162" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1162" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ae654ffd64448e99d6dbe4ed93ff4d919" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, Args... &gt;::value &amp;&amp;(2==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;is_layout_left &amp;&amp;(traits::rank_dynamic==0)), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, Args... &gt;::value &amp;&amp;(2==Rank)&amp;&amp;is_default_map &amp;&amp;is_layout_left &amp;&amp;(traits::rank_dynamic==0)), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1173" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1173" bodyend="1177"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ae32f022a71598243b443e5e62868cd2b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, Args... &gt;::value &amp;&amp;(2==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;is_layout_left &amp;&amp;(traits::rank_dynamic!=0)), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, Args... &gt;::value &amp;&amp;(2==Rank)&amp;&amp;is_default_map &amp;&amp;is_layout_left &amp;&amp;(traits::rank_dynamic!=0)), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1184" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1184" bodyend="1188"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a1bf9988c279ec421274cea290029481d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, Args... &gt;::value &amp;&amp;(2==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;is_layout_right &amp;&amp;(traits::rank_dynamic==0)), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, Args... &gt;::value &amp;&amp;(2==Rank)&amp;&amp;is_default_map &amp;&amp;is_layout_right &amp;&amp;(traits::rank_dynamic==0)), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1195" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1195" bodyend="1199"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a52fcb38d1413086cd23fbeb6f7cf17bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, Args... &gt;::value &amp;&amp;(2==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;is_layout_right &amp;&amp;(traits::rank_dynamic!=0)), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, Args... &gt;::value &amp;&amp;(2==Rank)&amp;&amp;is_default_map &amp;&amp;is_layout_right &amp;&amp;(traits::rank_dynamic!=0)), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1206" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1206" bodyend="1210"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a6fc94766ca2e56ed9ebf61eb1d5bfa44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, Args... &gt;::value &amp;&amp;(2==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map &amp;&amp;is_layout_stride), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, Args... &gt;::value &amp;&amp;(2==Rank)&amp;&amp;is_default_map &amp;&amp;is_layout_stride), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1217" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1217" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a3e8bc3716d3aaf53297e3e55f3a9e7fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, Args... &gt;::value &amp;&amp;(3==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, Args... &gt;::value &amp;&amp;(3==Rank)&amp;&amp;is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1232" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1232" bodyend="1237"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a7e0bce8951fe729d4b09d82b3a9c6633" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, Args... &gt;::value &amp;&amp;(3==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, Args... &gt;::value &amp;&amp;(3==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1244" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1244" bodyend="1249"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ab8ef5b82d075c550cc35ad29d139e812" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, Args... &gt;::value &amp;&amp;(4==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, Args... &gt;::value &amp;&amp;(4==Rank)&amp;&amp;is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1259" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1259" bodyend="1264"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a9f37dd8fecaf52372ffb8300f960e102" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, Args... &gt;::value &amp;&amp;(4==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, Args... &gt;::value &amp;&amp;(4==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1271" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1271" bodyend="1276"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a7a20fa68c489fad5f8ae7700d9e2add7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, Args... &gt;::value &amp;&amp;(5==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, Args... &gt;::value &amp;&amp;(5==Rank)&amp;&amp;is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1287" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1287" bodyend="1292"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a17bf8daba6fc65ecb9f06d6f829ab31e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, Args... &gt;::value &amp;&amp;(5==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, Args... &gt;::value &amp;&amp;(5==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1300" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1300" bodyend="1305"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a729fd62ad7b12f64cc59c6e8d03c20cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>typename I5</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, I5, Args... &gt;::value &amp;&amp;(6==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, I5, Args... &gt;::value &amp;&amp;(6==Rank)&amp;&amp;is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, const I5 &amp;i5, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>const I5 &amp;</type>
          <declname>i5</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1316" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1316" bodyend="1321"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a3840157746cf03c20adb16bb3ac88721" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>typename I5</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, I5, Args... &gt;::value &amp;&amp;(6==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, I5, Args... &gt;::value &amp;&amp;(6==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, const I5 &amp;i5, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>const I5 &amp;</type>
          <declname>i5</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1329" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1329" bodyend="1334"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a4d618fec53bd68044b3d680a1a119466" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>typename I5</type>
          </param>
          <param>
            <type>typename I6</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, I5, I6, Args... &gt;::value &amp;&amp;(7==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, I5, I6, Args... &gt;::value &amp;&amp;(7==Rank)&amp;&amp;is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, const I5 &amp;i5, const I6 &amp;i6, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>const I5 &amp;</type>
          <declname>i5</declname>
        </param>
        <param>
          <type>const I6 &amp;</type>
          <declname>i6</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1345" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1345" bodyend="1350"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a18cf92d5a146b1129e4faeec3825236d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>typename I5</type>
          </param>
          <param>
            <type>typename I6</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, I5, I6, Args... &gt;::value &amp;&amp;(7==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, I5, I6, Args... &gt;::value &amp;&amp;(7==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, const I5 &amp;i5, const I6 &amp;i6, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>const I5 &amp;</type>
          <declname>i5</declname>
        </param>
        <param>
          <type>const I6 &amp;</type>
          <declname>i6</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1358" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1358" bodyend="1363"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a04b58e10d5acf5a09d6a730d46d40822" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>typename I5</type>
          </param>
          <param>
            <type>typename I6</type>
          </param>
          <param>
            <type>typename I7</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, I5, I6, I7, Args... &gt;::value &amp;&amp;(8==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, I5, I6, I7, Args... &gt;::value &amp;&amp;(8==Rank)&amp;&amp;is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, const I5 &amp;i5, const I6 &amp;i6, const I7 &amp;i7, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>const I5 &amp;</type>
          <declname>i5</declname>
        </param>
        <param>
          <type>const I6 &amp;</type>
          <declname>i6</declname>
        </param>
        <param>
          <type>const I7 &amp;</type>
          <declname>i7</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1375" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1375" bodyend="1382"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1aa7a005dee3e8789c3faf4babcb501eb3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I0</type>
          </param>
          <param>
            <type>typename I1</type>
          </param>
          <param>
            <type>typename I2</type>
          </param>
          <param>
            <type>typename I3</type>
          </param>
          <param>
            <type>typename I4</type>
          </param>
          <param>
            <type>typename I5</type>
          </param>
          <param>
            <type>typename I6</type>
          </param>
          <param>
            <type>typename I7</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(<ref refid="struct_kokkos_1_1_impl_1_1are__integral" kindref="compound">Kokkos::Impl::are_integral</ref>&lt; I0, I1, I2, I3, I4, I5, I6, I7, Args... &gt;::value &amp;&amp;(8==<ref refid="struct_kokkos_1_1_rank" kindref="compound">Rank</ref>)&amp;&amp;!is_default_map), reference_type &gt;::type</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION std::enable_if&lt;(Kokkos::Impl::are_integral&lt; I0, I1, I2, I3, I4, I5, I6, I7, Args... &gt;::value &amp;&amp;(8==Rank)&amp;&amp;!is_default_map), reference_type &gt;::type Kokkos::View&lt; DataType, Properties &gt;::access</definition>
        <argsstring>(const I0 &amp;i0, const I1 &amp;i1, const I2 &amp;i2, const I3 &amp;i3, const I4 &amp;i4, const I5 &amp;i5, const I6 &amp;i6, const I7 &amp;i7, Args...) const</argsstring>
        <name>access</name>
        <qualifiedname>Kokkos::View::access</qualifiedname>
        <param>
          <type>const I0 &amp;</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const I3 &amp;</type>
          <declname>i3</declname>
        </param>
        <param>
          <type>const I4 &amp;</type>
          <declname>i4</declname>
        </param>
        <param>
          <type>const I5 &amp;</type>
          <declname>i5</declname>
        </param>
        <param>
          <type>const I6 &amp;</type>
          <declname>i6</declname>
        </param>
        <param>
          <type>const I7 &amp;</type>
          <declname>i7</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1391" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1391" bodyend="1397"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a162df75dea4cff0f74a11862f24bb6a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::~View</definition>
        <argsstring>()=default</argsstring>
        <name>~View</name>
        <qualifiedname>Kokkos::View::~View</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1405" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a6eae99d168c34df27ff61915a0c01371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>()=default</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1408" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a07ea17478b7bf3addb43e70fd5a97d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(const View &amp;)=default</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1411" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1aa00ffbb7e1a3291284afacdeba9cd14b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(View &amp;&amp;)=default</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1414" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a0d5188d59c63c65524609a4364685b5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> &amp;</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION View &amp; Kokkos::View&lt; DataType, Properties &gt;::operator=</definition>
        <argsstring>(const View &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>Kokkos::View::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1417" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a2689d482c6b4eebb2d387412ec59fde7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> &amp;</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION View &amp; Kokkos::View&lt; DataType, Properties &gt;::operator=</definition>
        <argsstring>(View &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>Kokkos::View::operator=</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1420" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1aedcb0feee177d52bb5beb7bb8be64254" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(const View&lt; RT, RP... &gt; &amp;rhs, typename std::enable_if&lt; Kokkos::Impl::ViewMapping&lt; traits, typename View&lt; RT, RP... &gt;::traits, typename traits::specialize &gt;::is_assignable_data_type &gt;::type *=nullptr)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; RT, RP... &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="class_kokkos_1_1_impl_1_1_view_mapping" kindref="compound">Kokkos::Impl::ViewMapping</ref>&lt; <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">traits</ref>, typename <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; RT, RP... &gt;::traits, typename traits::specialize &gt;::is_assignable_data_type &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1427" column="26" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1427" bodyend="1440"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a1183bee98e9fe0f949037aa10b578dc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if&lt; <ref refid="class_kokkos_1_1_impl_1_1_view_mapping" kindref="compound">Kokkos::Impl::ViewMapping</ref>&lt; <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">traits</ref>, typenameView&lt; RT, RP... &gt;::traits, typenametraits::specialize &gt;::is_assignable_data_type, <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> &gt;::type &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if&lt; Kokkos::Impl::ViewMapping&lt; traits, typenameView&lt; RT, RP... &gt;::traits, typenametraits::specialize &gt;::is_assignable_data_type, View &gt;::type &amp; Kokkos::View&lt; DataType, Properties &gt;::operator=</definition>
        <argsstring>(const View&lt; RT, RP... &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>Kokkos::View::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; RT, RP... &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1448" column="3" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1448" bodyend="1456"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ad2e417d607e8a0eb6dd191274b17b5ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
          <param>
            <type>class Arg0</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(const View&lt; RT, RP... &gt; &amp;src_view, const Arg0 arg0, Args... args)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; RT, RP... &gt; &amp;</type>
          <declname>src_view</declname>
        </param>
        <param>
          <type>const Arg0</type>
          <declname>arg0</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1463" column="26" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1463" bodyend="1479"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a9a973e9d6ab530b3d0c92525c720c16e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION int</type>
        <definition>KOKKOS_INLINE_FUNCTION int Kokkos::View&lt; DataType, Properties &gt;::use_count</definition>
        <argsstring>() const</argsstring>
        <name>use_count</name>
        <qualifiedname>Kokkos::View::use_count</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1485" column="7" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1485" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1abeca6783b203ee13b723be72169910d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string Kokkos::View&lt; DataType, Properties &gt;::label</definition>
        <argsstring>() const</argsstring>
        <name>label</name>
        <qualifiedname>Kokkos::View::label</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1487" column="28" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1487" bodyend="1490"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a70fb2b677040a8bbb0fef47a3a4f60a3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(const Impl::ViewCtorProp&lt; P... &gt; &amp;arg_prop, typename std::enable_if&lt;!Impl::ViewCtorProp&lt; P... &gt;::has_pointer, typename traits::array_layout &gt;::type const &amp;arg_layout)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_view_ctor_prop" kindref="compound">Impl::ViewCtorProp</ref>&lt; P... &gt; &amp;</type>
          <declname>arg_prop</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;!<ref refid="struct_kokkos_1_1_impl_1_1_view_ctor_prop" kindref="compound">Impl::ViewCtorProp</ref>&lt; P... &gt;::has_pointer, typename traits::array_layout &gt;::type const &amp;</type>
          <declname>arg_layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1496" column="19" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1496" bodyend="1566"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1aa42595f01615989a2a9d510534731db9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::View&lt; DataType, Properties &gt;::assign_data</definition>
        <argsstring>(pointer_type arg_data)</argsstring>
        <name>assign_data</name>
        <qualifiedname>Kokkos::View::assign_data</qualifiedname>
        <param>
          <type>pointer_type</type>
          <declname>arg_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1569" column="8" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1569" bodyend="1572"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ad68d07ec808d48e2bf590709c499ade1" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(const Impl::ViewCtorProp&lt; P... &gt; &amp;arg_prop, typename std::enable_if&lt; Impl::ViewCtorProp&lt; P... &gt;::has_pointer, typename traits::array_layout &gt;::type const &amp;arg_layout)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_view_ctor_prop" kindref="compound">Impl::ViewCtorProp</ref>&lt; P... &gt; &amp;</type>
          <declname>arg_prop</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1_view_ctor_prop" kindref="compound">Impl::ViewCtorProp</ref>&lt; P... &gt;::has_pointer, typename traits::array_layout &gt;::type const &amp;</type>
          <declname>arg_layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1576" column="35" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1576" bodyend="1589"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ac2fad05c71b0d4dad331fc007fec2c5b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(const Impl::ViewCtorProp&lt; P... &gt; &amp;arg_prop, typename std::enable_if&lt;!Impl::ViewCtorProp&lt; P... &gt;::has_pointer, size_t &gt;::type const arg_N0=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N1=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N2=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N3=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N4=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N5=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N6=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N7=KOKKOS_IMPL_CTOR_DEFAULT_ARG)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_view_ctor_prop" kindref="compound">Impl::ViewCtorProp</ref>&lt; P... &gt; &amp;</type>
          <declname>arg_prop</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;!<ref refid="struct_kokkos_1_1_impl_1_1_view_ctor_prop" kindref="compound">Impl::ViewCtorProp</ref>&lt; P... &gt;::has_pointer, size_t &gt;::type const</type>
          <declname>arg_N0</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N1</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N2</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N3</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N4</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N5</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N6</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N7</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1593" column="19" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1593" bodyend="1630"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a2bfe39d10b27b6d0a4724b4967444e5f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(const Impl::ViewCtorProp&lt; P... &gt; &amp;arg_prop, typename std::enable_if&lt; Impl::ViewCtorProp&lt; P... &gt;::has_pointer, size_t &gt;::type const arg_N0=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N1=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N2=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N3=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N4=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N5=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N6=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N7=KOKKOS_IMPL_CTOR_DEFAULT_ARG)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_view_ctor_prop" kindref="compound">Impl::ViewCtorProp</ref>&lt; P... &gt; &amp;</type>
          <declname>arg_prop</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1_view_ctor_prop" kindref="compound">Impl::ViewCtorProp</ref>&lt; P... &gt;::has_pointer, size_t &gt;::type const</type>
          <declname>arg_N0</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N1</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N2</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N3</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N4</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N5</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N6</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N7</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1633" column="35" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1633" bodyend="1670"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a7763dbfeb527dc725038976c225eae1f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Label</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(const Label &amp;arg_label, typename std::enable_if&lt; Kokkos::Impl::is_view_label&lt; Label &gt;::value, typename traits::array_layout &gt;::type const &amp;arg_layout)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>const Label &amp;</type>
          <declname>arg_label</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__view__label" kindref="compound">Kokkos::Impl::is_view_label</ref>&lt; Label &gt;::value, typename traits::array_layout &gt;::type const &amp;</type>
          <declname>arg_layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1674" column="19" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1674" bodyend="1679"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1af51faf2a3534cbbee43e4a0f14032f99" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Label</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(const Label &amp;arg_label, typename std::enable_if&lt; Kokkos::Impl::is_view_label&lt; Label &gt;::value, const size_t &gt;::type arg_N0=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N1=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N2=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N3=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N4=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N5=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N6=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N7=KOKKOS_IMPL_CTOR_DEFAULT_ARG)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>const Label &amp;</type>
          <declname>arg_label</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__view__label" kindref="compound">Kokkos::Impl::is_view_label</ref>&lt; Label &gt;::value, const size_t &gt;::type</type>
          <declname>arg_N0</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N1</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N2</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N3</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N4</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N5</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N6</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N7</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1683" column="19" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1683" bodyend="1724"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1abd97ca62857c3a0fc8e32a732c221550" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(const view_tracker_type &amp;track, const Kokkos::Impl::ViewMapping&lt; Traits, typename Traits::specialize &gt; &amp;map)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_view_tracker" kindref="compound">view_tracker_type</ref> &amp;</type>
          <declname>track</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_impl_1_1_view_mapping" kindref="compound">Kokkos::Impl::ViewMapping</ref>&lt; Traits, typename Traits::specialize &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1730" column="26" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1730" bodyend="1739"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a448531cc0b52fd8e46008a7be750c390" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(const typename view_tracker_type::track_type &amp;track, const Kokkos::Impl::ViewMapping&lt; Traits, typename Traits::specialize &gt; &amp;map)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>const typename <ref refid="union_kokkos_1_1_impl_1_1_shared_allocation_tracker" kindref="compound">view_tracker_type::track_type</ref> &amp;</type>
          <declname>track</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_impl_1_1_view_mapping" kindref="compound">Kokkos::Impl::ViewMapping</ref>&lt; Traits, typename Traits::specialize &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1745" column="26" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1745" bodyend="1754"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1af2ea31dd65140af6c92bdb60ee87ff22" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(pointer_type arg_ptr, const size_t arg_N0=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N1=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N2=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N3=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N4=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N5=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N6=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N7=KOKKOS_IMPL_CTOR_DEFAULT_ARG)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>pointer_type</type>
          <declname>arg_ptr</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N0</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N1</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N2</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N3</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N4</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N5</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N6</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N7</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1766" column="35" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1766" bodyend="1800"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a201ba43b619869362dea69cd949960b7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(pointer_type arg_ptr, const typename traits::array_layout &amp;arg_layout)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>pointer_type</type>
          <declname>arg_ptr</declname>
        </param>
        <param>
          <type>const typename traits::array_layout &amp;</type>
          <declname>arg_layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1802" column="35" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1802" bodyend="1804"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a6a2d28d34d2c7b36d4ff01178159fa19" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(const typename traits::execution_space::scratch_memory_space &amp;arg_space, const typename traits::array_layout &amp;arg_layout)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>const typename traits::execution_space::scratch_memory_space &amp;</type>
          <declname>arg_space</declname>
        </param>
        <param>
          <type>const typename traits::array_layout &amp;</type>
          <declname>arg_layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1841" column="35" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1841" bodyend="1848"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1a8db70a410ce2c927b02c4cf5fd74aab9" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; DataType, Properties &gt;::View</definition>
        <argsstring>(const typename traits::execution_space::scratch_memory_space &amp;arg_space, const size_t arg_N0=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N1=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N2=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N3=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N4=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N5=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N6=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t arg_N7=KOKKOS_IMPL_CTOR_DEFAULT_ARG)</argsstring>
        <name>View</name>
        <qualifiedname>Kokkos::View::View</qualifiedname>
        <param>
          <type>const typename traits::execution_space::scratch_memory_space &amp;</type>
          <declname>arg_space</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N0</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N1</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N2</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N3</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N4</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N5</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N6</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N7</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1850" column="35" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1850" bodyend="1890"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_kokkos_1_1_view_1aa464168f6e5024e5b5ba61b28b839ad5" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION constexpr size_t</type>
        <definition>static KOKKOS_INLINE_FUNCTION constexpr size_t Kokkos::View&lt; DataType, Properties &gt;::static_extent</definition>
        <argsstring>(const unsigned r) noexcept</argsstring>
        <name>static_extent</name>
        <qualifiedname>Kokkos::View::static_extent</qualifiedname>
        <param>
          <type>const unsigned</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="661" column="50" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="661" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ac7343baebb17d02b4e31dc2f19e74095" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>static constexpr size_t Kokkos::View&lt; DataType, Properties &gt;::required_allocation_size</definition>
        <argsstring>(const size_t arg_N0=0, const size_t arg_N1=0, const size_t arg_N2=0, const size_t arg_N3=0, const size_t arg_N4=0, const size_t arg_N5=0, const size_t arg_N6=0, const size_t arg_N7=0)</argsstring>
        <name>required_allocation_size</name>
        <qualifiedname>Kokkos::View::required_allocation_size</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>arg_N0</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N1</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N2</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N3</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N4</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N5</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N6</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N7</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1758" column="27" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1758" bodyend="1764"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1ae9294fdf698bc225d90f7fe2e99b23c8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t Kokkos::View&lt; DataType, Properties &gt;::shmem_size</definition>
        <argsstring>(const size_t arg_N0=KOKKOS_INVALID_INDEX, const size_t arg_N1=KOKKOS_INVALID_INDEX, const size_t arg_N2=KOKKOS_INVALID_INDEX, const size_t arg_N3=KOKKOS_INVALID_INDEX, const size_t arg_N4=KOKKOS_INVALID_INDEX, const size_t arg_N5=KOKKOS_INVALID_INDEX, const size_t arg_N6=KOKKOS_INVALID_INDEX, const size_t arg_N7=KOKKOS_INVALID_INDEX)</argsstring>
        <name>shmem_size</name>
        <qualifiedname>Kokkos::View::shmem_size</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>arg_N0</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N1</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N2</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N3</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N4</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N5</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N6</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_N7</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1809" column="24" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1809" bodyend="1833"/>
      </memberdef>
      <memberdef kind="function" id="class_kokkos_1_1_view_1aec534545857f7148ddbbb2370b933d1b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t Kokkos::View&lt; DataType, Properties &gt;::shmem_size</definition>
        <argsstring>(typename traits::array_layout const &amp;arg_layout)</argsstring>
        <name>shmem_size</name>
        <qualifiedname>Kokkos::View::shmem_size</qualifiedname>
        <param>
          <type>typename traits::array_layout const &amp;</type>
          <declname>arg_layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1835" column="24" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1835" bodyend="1839"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> to an array of data. </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> represents an array of one or more dimensions. For details, please refer to Kokkos&apos; tutorial materials.</para>
<sect1 id="class_kokkos_1_1_view_1Kokkos_View_TemplateParameters">
<title>Template parameters</title>
<para>This class has both required and optional template parameters. The <computeroutput>DataType</computeroutput> parameter must always be provided, and must always be first. The parameters <computeroutput>Arg1Type</computeroutput>, <computeroutput>Arg2Type</computeroutput>, and <computeroutput>Arg3Type</computeroutput> are placeholders for different template parameters. The default value of the fifth template parameter <computeroutput>Specialize</computeroutput> suffices for most use cases. When explaining the template parameters, we won&apos;t refer to <computeroutput>Arg1Type</computeroutput>, <computeroutput>Arg2Type</computeroutput>, and <computeroutput>Arg3Type</computeroutput>; instead, we will refer to the valid categories of template parameters, in whatever order they may occur.</para>
<para>Valid ways in which template arguments may be specified:<itemizedlist>
<listitem><para>View&lt; DataType &gt;</para>
</listitem><listitem><para>View&lt; DataType , Layout &gt;</para>
</listitem><listitem><para>View&lt; DataType , Layout , Space &gt;</para>
</listitem><listitem><para>View&lt; DataType , Layout , Space , MemoryTraits &gt;</para>
</listitem><listitem><para>View&lt; DataType , Space &gt;</para>
</listitem><listitem><para>View&lt; DataType , Space , MemoryTraits &gt;</para>
</listitem><listitem><para>View&lt; DataType , MemoryTraits &gt;</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataType</parametername>
</parameternamelist>
<parameterdescription>
<para>(required) This indicates both the type of each entry of the array, and the combination of compile-time and run-time array dimension(s). For example, <computeroutput>double*</computeroutput> indicates a one-dimensional array of <computeroutput>double</computeroutput> with run-time dimension, and <computeroutput>int*[3]</computeroutput> a two-dimensional array of <computeroutput>int</computeroutput> with run-time first dimension and compile-time second dimension (of 3). In general, the run-time dimensions (if any) must go first, followed by zero or more compile-time dimensions. For more examples, please refer to the tutorial materials.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Space</parametername>
</parameternamelist>
<parameterdescription>
<para>(required) The memory space.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Layout</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) The array&apos;s layout in memory. For example, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">LayoutLeft</ref> indicates a column-major (Fortran style) layout, and <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">LayoutRight</ref> a row-major (C style) layout. If not specified, this defaults to the preferred layout for the <computeroutput>Space</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="struct_kokkos_1_1_memory_traits" kindref="compound">MemoryTraits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Assertion of the user&apos;s intended access behavior. For example, RandomAccess indicates read-only access with limited spatial locality, and Unmanaged lets users wrap externally allocated memory in a <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> without automatic deallocation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</sect1>
<sect1 id="class_kokkos_1_1_view_1Kokkos_View_MT">
<title>MemoryTraits discussion</title>
<sect2 id="class_kokkos_1_1_view_1Kokkos_View_MT_Interp">
<title>MemoryTraits interpretation depends on</title>
<para>Space</para>
<para>Some <computeroutput><ref refid="struct_kokkos_1_1_memory_traits" kindref="compound">MemoryTraits</ref></computeroutput> options may have different interpretations for different <computeroutput>Space</computeroutput> types. For example, with the Cuda device, <computeroutput>RandomAccess</computeroutput> tells Kokkos to fetch the data through the texture cache, whereas the non-GPU devices have no such hardware construct.</para>
</sect2>
<sect2 id="class_kokkos_1_1_view_1Kokkos_View_MT_PrefUse">
<title>Preferred use of MemoryTraits</title>
<para>Users should defer applying the optional <computeroutput><ref refid="struct_kokkos_1_1_memory_traits" kindref="compound">MemoryTraits</ref></computeroutput> parameter until the point at which they actually plan to rely on it in a computational kernel. This minimizes the number of template parameters exposed in their code, which reduces the cost of compilation. Users may always assign a <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> without specified <computeroutput><ref refid="struct_kokkos_1_1_memory_traits" kindref="compound">MemoryTraits</ref></computeroutput> to a compatible <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> with that specification. For example: <programlisting><codeline><highlight class="comment">//<sp/>Pass<sp/>in<sp/>the<sp/>simplest<sp/>types<sp/>of<sp/>View<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doSomething<sp/>(View&lt;double*,<sp/>Cuda&gt;<sp/>out,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;const<sp/>double*,<sp/>Cuda&gt;<sp/>in)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>the<sp/>&quot;generic&quot;<sp/>View<sp/>in<sp/>to<sp/>a<sp/>RandomAccess<sp/>View<sp/>in_rr.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>RandomAccess<sp/>View<sp/>objects<sp/>must<sp/>have<sp/>const<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>View&lt;const<sp/>double*,<sp/>Cuda,<sp/>RandomAccess&gt;<sp/>in_rr<sp/>=<sp/>in;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>do<sp/>something<sp/>with<sp/>in_rr<sp/>and<sp/>out<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</sect2>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Kokkos::View&lt; DataType, Properties &gt;</label>
        <link refid="class_kokkos_1_1_view"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Kokkos::ViewTraits&lt; DataType, Properties... &gt;</label>
        <link refid="struct_kokkos_1_1_view_traits"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Kokkos::View&lt; DataType, Properties &gt;</label>
        <link refid="class_kokkos_1_1_view"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Kokkos::ViewTraits&lt; DataType, Properties... &gt;</label>
        <link refid="struct_kokkos_1_1_view_traits"/>
      </node>
    </collaborationgraph>
    <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="343" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="577" bodyend="1891"/>
    <listofallmembers>
      <member refid="class_kokkos_1_1_view_1a5ae5fcdfd9bce877a0e6f959b6e0fd78" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a2504a82bee634f0a30fdc72b2fb205db" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a2648a51280a4e3e853643e65539ad215" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a52b19334aac8b7b722008a58963874a4" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a8037adb165ebd165d1f741f9ee07187a" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1ae654ffd64448e99d6dbe4ed93ff4d919" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1ae32f022a71598243b443e5e62868cd2b" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a1bf9988c279ec421274cea290029481d" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a52fcb38d1413086cd23fbeb6f7cf17bf" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a6fc94766ca2e56ed9ebf61eb1d5bfa44" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a3e8bc3716d3aaf53297e3e55f3a9e7fb" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a7e0bce8951fe729d4b09d82b3a9c6633" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1ab8ef5b82d075c550cc35ad29d139e812" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a9f37dd8fecaf52372ffb8300f960e102" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a7a20fa68c489fad5f8ae7700d9e2add7" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a17bf8daba6fc65ecb9f06d6f829ab31e" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a729fd62ad7b12f64cc59c6e8d03c20cb" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a3840157746cf03c20adb16bb3ac88721" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a4d618fec53bd68044b3d680a1a119466" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a18cf92d5a146b1129e4faeec3825236d" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1a04b58e10d5acf5a09d6a730d46d40822" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="class_kokkos_1_1_view_1aa7a005dee3e8789c3faf4babcb501eb3" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>access</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1aa2b9105948172160bce3cdac82fd9d02" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>array_layout</name></member>
      <member refid="class_kokkos_1_1_view_1a320003b343fe3a41e5d25021e4a5fff3" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>array_type</name></member>
      <member refid="class_kokkos_1_1_view_1aa42595f01615989a2a9d510534731db9" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>assign_data</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a3df481233b596f5a9f61a08c3c5eef31" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>const_data_type</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a1a00718f0a753b9e244123397702095b" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>const_scalar_array_type</name></member>
      <member refid="class_kokkos_1_1_view_1ab5709a279a8bb8807306953bd60790c0" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>const_type</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a04a05bc2e4660a4d8b0f16b643b29f88" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>const_value_type</name></member>
      <member refid="class_kokkos_1_1_view_1a9078b01e241273327a8cf1360ced9d0b" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>data</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1af743120eed109468b5f3f4b88987beb9" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>data_type</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a883d1f64b4e16b7239348e136c27ef0a" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>device_type</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1ac7e8775b33b04fb1117553b0e821d12a" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>dimension</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1af18df5fa7d9fa5873ff44eeb163b7995" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>execution_space</name></member>
      <member refid="class_kokkos_1_1_view_1accd84cb38f8e4da25593c6e687f3430f" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>extent</name></member>
      <member refid="class_kokkos_1_1_view_1ab0337213607633f7058a47b6a7e833f7" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>extent_int</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1adb25197c9f561855af9dce11ae625f1c" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>host_mirror_space</name></member>
      <member refid="class_kokkos_1_1_view_1af0d1503c7871228c54f62b9fdee8ffa7" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>host_mirror_type</name></member>
      <member refid="class_kokkos_1_1_view_1aa792f904a0197bb45c90c472d64935b1" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>HostMirror</name></member>
      <member refid="class_kokkos_1_1_view_1ac454272edaadce125255fc05fee3fec7" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>impl_map</name></member>
      <member refid="class_kokkos_1_1_view_1a2e6b2bb775acc23b69da659e52cb394d" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>impl_track</name></member>
      <member refid="class_kokkos_1_1_view_1accc7be1264d7d14425b3def2635296cd" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>is_allocated</name></member>
      <member refid="class_kokkos_1_1_view_1a11d2cfc6bc8f53135e79833a983cc1d4" prot="private" virt="non-virtual"><scope>Kokkos::View</scope><name>is_default_map</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a6d9b6c3b4b26b5e7dc13265052a7d076aee808757661c7b88090906d9e3b9547e" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>is_hostspace</name></member>
      <member refid="class_kokkos_1_1_view_1ab447c9cf45cd9ccb50f8d97207754236" prot="private" virt="non-virtual"><scope>Kokkos::View</scope><name>is_layout_left</name></member>
      <member refid="class_kokkos_1_1_view_1a45e28dda533217c3cc9906d8d1eeb84c" prot="private" virt="non-virtual"><scope>Kokkos::View</scope><name>is_layout_right</name></member>
      <member refid="class_kokkos_1_1_view_1a51177c877399f1f52b56bfcdd290bd93" prot="private" virt="non-virtual"><scope>Kokkos::View</scope><name>is_layout_stride</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1aa002c456d8d503f34e9c350f1511cccaaa61e66efc1a3fa7cafb65bf782930f97" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>is_managed</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a6115bef928c272f44a9bb0cee8495902ae702b0a5cc5621d1b5a3cedb1fb7871f" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>is_random_access</name></member>
      <member refid="class_kokkos_1_1_view_1ab9e6ee44c568ed59747cda3c47f017e9" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>Kokkos::Impl::ViewMapping</name></member>
      <member refid="class_kokkos_1_1_view_1a1800e643a49f403767d4a60ea3441890" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>Kokkos::Impl::ViewTracker</name></member>
      <member refid="class_kokkos_1_1_view_1abeca6783b203ee13b723be72169910d9" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>label</name></member>
      <member refid="class_kokkos_1_1_view_1ad83cbb7275f2619d5e196c5818607d0d" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>layout</name></member>
      <member refid="class_kokkos_1_1_view_1ad304184d29cbf087d630aa68657b018e" prot="private" virt="non-virtual"><scope>Kokkos::View</scope><name>m_map</name></member>
      <member refid="class_kokkos_1_1_view_1a14dccd93496ea439b4a2b069d75d0620" prot="private" virt="non-virtual"><scope>Kokkos::View</scope><name>m_track</name></member>
      <member refid="class_kokkos_1_1_view_1aed1eb3488830903b232a83c44f2b27d2" prot="private" virt="non-virtual"><scope>Kokkos::View</scope><name>map_type</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a3437c49810aaebb44590b93ba19c204a" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>memory_space</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a5d874a209c8c63257d3e8d7957dccb95" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>memory_traits</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a96bb590d7055466912d56f8f837c0b28" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>non_const_data_type</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a8d77d1fe6986e03f9795c5d2f28419eb" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>non_const_scalar_array_type</name></member>
      <member refid="class_kokkos_1_1_view_1aecdaccbc6fdda6a211953c141d10c0ee" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>non_const_type</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1afbf817ad633ee9bf6ea1786ce2a3942b" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>non_const_value_type</name></member>
      <member refid="class_kokkos_1_1_view_1af1cc95759548bf30983a04e3f972040f" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1aaa46838a984dc53d0650dad346c4f96e" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a2825b2b8aa55e3f7f58fffdade82997e" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a4cafa970947e6f1d3d586d4fcedd1413" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a9c8c6ed26d9e7e4e0161646dd6c275dc" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a6fd9a5a6018e27eb7d918250b6512b6f" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a9c3592ce2ddfd2b75b872edfcf6652b6" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a2036ca9658ef0cc37d707d53a9e1d829" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a7764a4c7333155a044a331917aa3515f" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1ac353b3bc05c873ea3a45a7525e2f08e5" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1aab02f1382ac4af1849b5b7216d79d15f" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1aa9fafa416f99ee251035cb03285aad0e" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1ad96beb4a322e9e848271fb42f06f77ad" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a3e6df436a3eaf4f7d3ef409ee3f5522b" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1ae9f51b0d6e114c87460e8d41f608315e" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a40d62c391aa0326e6c82800ea6659076" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1aeee89e315bc1b5ae971a33c1a0401add" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a0059161bb66f3865c62f3ee4f845a755" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a0640e31cc0708b72caab6d186c57a03e" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1acd9612cb284ed4e8e28fd4bbc69dc91f" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a71b79b1f4a7490b066c0a74614d381a2" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a98b112470b78f4b3d07122b5cbe965a9" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator()</name></member>
      <member refid="class_kokkos_1_1_view_1a0d5188d59c63c65524609a4364685b5b" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator=</name></member>
      <member refid="class_kokkos_1_1_view_1a2689d482c6b4eebb2d387412ec59fde7" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator=</name></member>
      <member refid="class_kokkos_1_1_view_1a1183bee98e9fe0f949037aa10b578dc9" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator=</name></member>
      <member refid="class_kokkos_1_1_view_1aa19b5ee4184d67986b22ca28533bca6f" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator[]</name></member>
      <member refid="class_kokkos_1_1_view_1afc1bf9810559d1a265751bfc1ca1abf3" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator[]</name></member>
      <member refid="class_kokkos_1_1_view_1acfaa253fb254e0d64d9057085cc7622b" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>operator[]</name></member>
      <member refid="class_kokkos_1_1_view_1a9617efa5504da485eacdd09d44780ed9" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>pointer_type</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a248d4107977c9492401bb56f05fb24fca8d76e8a67383c6065fceef3d6ca72df6" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>rank</name></member>
      <member refid="class_kokkos_1_1_view_1a9a9a8e8a3f826869353ef1397f0ea894ac60a69023b6b41429b79e7b43eb749e8" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>Rank</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a11a689273d803804cb45ae43ffedace2abfd80da79a22c8bec6ecd84c23a7208c" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>rank_dynamic</name></member>
      <member refid="class_kokkos_1_1_view_1a8086e5e4fd94de1c655f9dbb34b7e128" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>reference_type</name></member>
      <member refid="class_kokkos_1_1_view_1a94b8ad03cb0b26d8f936cc1db8ce694faf7584472b1d4579a7007abcfb42e3248" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>reference_type_is_lvalue_reference</name></member>
      <member refid="class_kokkos_1_1_view_1ac7343baebb17d02b4e31dc2f19e74095" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>required_allocation_size</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a45f74c21df87c388451f81ffd1523a3f" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>scalar_array_type</name></member>
      <member refid="class_kokkos_1_1_view_1ae9294fdf698bc225d90f7fe2e99b23c8" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>shmem_size</name></member>
      <member refid="class_kokkos_1_1_view_1aec534545857f7148ddbbb2370b933d1b" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>shmem_size</name></member>
      <member refid="class_kokkos_1_1_view_1a47ae098ef7b9216a0de8564b2da31eee" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>size</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a718247fbabea557430710ffa949ab293" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>size_type</name></member>
      <member refid="class_kokkos_1_1_view_1afdb9de7ecccf8c8346f0ee2caff4c6d8" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>span</name></member>
      <member refid="class_kokkos_1_1_view_1ab72bf843e32cb27d0ae9f85410b6fa39" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>span_is_contiguous</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1ac219a397f4d0e274ddd7eb38062a9d2d" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>specialize</name></member>
      <member refid="class_kokkos_1_1_view_1aa464168f6e5024e5b5ba61b28b839ad5" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>static_extent</name></member>
      <member refid="class_kokkos_1_1_view_1a26910c315de7cbc2f761c4b49f9eaaba" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>stride</name></member>
      <member refid="class_kokkos_1_1_view_1a0aadcfc7de832e43ea899bd31bc7d244" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>stride</name></member>
      <member refid="class_kokkos_1_1_view_1af8ed80755e536f42a3e54f565ed8d659" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>stride_0</name></member>
      <member refid="class_kokkos_1_1_view_1a843c0ee7c60e3f21125fd0b966fa2bf5" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>stride_1</name></member>
      <member refid="class_kokkos_1_1_view_1a20c5c6d54963497c6c7f30146fb94fbb" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>stride_2</name></member>
      <member refid="class_kokkos_1_1_view_1ab4c24c922207e1280c0f4bc384f6c5f5" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>stride_3</name></member>
      <member refid="class_kokkos_1_1_view_1a841d99e7c38251594c0aeba3465741ac" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>stride_4</name></member>
      <member refid="class_kokkos_1_1_view_1a1c724961f56d842e18fad553ac480370" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>stride_5</name></member>
      <member refid="class_kokkos_1_1_view_1ad89941bdc3e88e5be6f1e1175a7cd20a" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>stride_6</name></member>
      <member refid="class_kokkos_1_1_view_1a64bc372a275e6627da32e0566e503eb1" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>stride_7</name></member>
      <member refid="class_kokkos_1_1_view_1af6b6b45f61e6cda6f422ae1fc4bf0df8" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>traits</name></member>
      <member refid="class_kokkos_1_1_view_1a4f5035a7275d7f320f71eacc42bcc254" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>uniform_const_nomemspace_type</name></member>
      <member refid="class_kokkos_1_1_view_1a83fa0c062981c32738c942ef2279c942" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>uniform_const_type</name></member>
      <member refid="class_kokkos_1_1_view_1a80ec8464bd0b1730996294d290a4d51d" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>uniform_nomemspace_type</name></member>
      <member refid="class_kokkos_1_1_view_1acd2a2745f32370ef59f987f92d63c9ad" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>uniform_runtime_const_nomemspace_type</name></member>
      <member refid="class_kokkos_1_1_view_1ae051be60e8fd83220b54820f86c3ffee" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>uniform_runtime_const_type</name></member>
      <member refid="class_kokkos_1_1_view_1aaeb8d7a68ac24a6231e2c58c0bb0386f" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>uniform_runtime_nomemspace_type</name></member>
      <member refid="class_kokkos_1_1_view_1a503eb00e8b1765fb053cacf6a2813c6e" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>uniform_runtime_type</name></member>
      <member refid="class_kokkos_1_1_view_1ab7c978f15da5f4f35ce7ba31bbc1a9a8" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>uniform_type</name></member>
      <member refid="class_kokkos_1_1_view_1a9a973e9d6ab530b3d0c92525c720c16e" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>use_count</name></member>
      <member refid="struct_kokkos_1_1_view_traits_1a0631d00217a48c25e30a5273b12869ae" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>value_type</name></member>
      <member refid="class_kokkos_1_1_view_1a540f8f88e74b1570a064113d19135b6e" prot="private" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1a6eae99d168c34df27ff61915a0c01371" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1a07ea17478b7bf3addb43e70fd5a97d48" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1aa00ffbb7e1a3291284afacdeba9cd14b" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1aedcb0feee177d52bb5beb7bb8be64254" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1ad2e417d607e8a0eb6dd191274b17b5ce" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1a70fb2b677040a8bbb0fef47a3a4f60a3" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1ad68d07ec808d48e2bf590709c499ade1" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1ac2fad05c71b0d4dad331fc007fec2c5b" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1a2bfe39d10b27b6d0a4724b4967444e5f" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1a7763dbfeb527dc725038976c225eae1f" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1af51faf2a3534cbbee43e4a0f14032f99" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1abd97ca62857c3a0fc8e32a732c221550" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1a448531cc0b52fd8e46008a7be750c390" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1af2ea31dd65140af6c92bdb60ee87ff22" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1a201ba43b619869362dea69cd949960b7" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1a6a2d28d34d2c7b36d4ff01178159fa19" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1a8db70a410ce2c927b02c4cf5fd74aab9" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>View</name></member>
      <member refid="class_kokkos_1_1_view_1a9a172dea0a6b0cdbc5108b18b7791ead" prot="private" virt="non-virtual"><scope>Kokkos::View</scope><name>view_tracker_type</name></member>
      <member refid="class_kokkos_1_1_view_1a162df75dea4cff0f74a11862f24bb6a8" prot="public" virt="non-virtual"><scope>Kokkos::View</scope><name>~View</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
