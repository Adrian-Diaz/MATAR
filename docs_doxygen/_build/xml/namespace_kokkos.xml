<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespace_kokkos" kind="namespace" language="C++">
    <compoundname>Kokkos</compoundname>
    <innerclass refid="class_kokkos_1_1_anonymous_space" prot="public">Kokkos::AnonymousSpace</innerclass>
    <innerclass refid="struct_kokkos_1_1_array" prot="public">Kokkos::Array</innerclass>
    <innerclass refid="struct_kokkos_1_1_array_3_01_t_00_010_00_01_proxy_01_4" prot="public">Kokkos::Array&lt; T, 0, Proxy &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_array_3_01_t_00_01_k_o_k_k_o_s___i_n_v_a_l_i_d___i_n_d_e_x_00_01_array_3_4_1_1contiguous_01_4" prot="public">Kokkos::Array&lt; T, KOKKOS_INVALID_INDEX, Array&lt;&gt;::contiguous &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_array_3_01_t_00_01_k_o_k_k_o_s___i_n_v_a_l_i_d___i_n_d_e_x_00_01_array_3_4_1_1strided_01_4" prot="public">Kokkos::Array&lt; T, KOKKOS_INVALID_INDEX, Array&lt;&gt;::strided &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_array_3_01void_00_01_k_o_k_k_o_s___i_n_v_a_l_i_d___i_n_d_e_x_00_01void_01_4" prot="public">Kokkos::Array&lt; void, KOKKOS_INVALID_INDEX, void &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_a_u_t_o__t" prot="public">Kokkos::AUTO_t</innerclass>
    <innerclass refid="struct_kokkos_1_1_a_x_p_b_y" prot="public">Kokkos::AXPBY</innerclass>
    <innerclass refid="struct_kokkos_1_1_b_and" prot="public">Kokkos::BAnd</innerclass>
    <innerclass refid="struct_kokkos_1_1_bin_op1_d" prot="public">Kokkos::BinOp1D</innerclass>
    <innerclass refid="struct_kokkos_1_1_bin_op3_d" prot="public">Kokkos::BinOp3D</innerclass>
    <innerclass refid="class_kokkos_1_1_bin_sort" prot="public">Kokkos::BinSort</innerclass>
    <innerclass refid="class_kokkos_1_1_bitset" prot="public">Kokkos::Bitset</innerclass>
    <innerclass refid="struct_kokkos_1_1_b_or" prot="public">Kokkos::BOr</innerclass>
    <innerclass refid="struct_kokkos_1_1_chunk_size" prot="public">Kokkos::ChunkSize</innerclass>
    <innerclass refid="class_kokkos_1_1complex" prot="public">Kokkos::complex</innerclass>
    <innerclass refid="class_kokkos_1_1_const_bitset" prot="public">Kokkos::ConstBitset</innerclass>
    <innerclass refid="struct_kokkos_1_1_count_and_fill" prot="public">Kokkos::CountAndFill</innerclass>
    <innerclass refid="struct_kokkos_1_1_count_and_fill_base" prot="public">Kokkos::CountAndFillBase</innerclass>
    <innerclass refid="class_kokkos_1_1_crs" prot="public">Kokkos::Crs</innerclass>
    <innerclass refid="struct_kokkos_1_1default__inner__direction" prot="public">Kokkos::default_inner_direction</innerclass>
    <innerclass refid="struct_kokkos_1_1default__inner__direction_3_01_kokkos_1_1_cuda_01_4" prot="public">Kokkos::default_inner_direction&lt; Kokkos::Cuda &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1default__inner__direction_3_01_kokkos_1_1_experimental_1_1_h_i_p_01_4" prot="public">Kokkos::default_inner_direction&lt; Kokkos::Experimental::HIP &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1default__inner__direction_3_01_kokkos_1_1_experimental_1_1_s_y_c_l_01_4" prot="public">Kokkos::default_inner_direction&lt; Kokkos::Experimental::SYCL &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1default__outer__direction" prot="public">Kokkos::default_outer_direction</innerclass>
    <innerclass refid="struct_kokkos_1_1default__outer__direction_3_01_kokkos_1_1_cuda_01_4" prot="public">Kokkos::default_outer_direction&lt; Kokkos::Cuda &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1default__outer__direction_3_01_kokkos_1_1_experimental_1_1_h_i_p_01_4" prot="public">Kokkos::default_outer_direction&lt; Kokkos::Experimental::HIP &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1default__outer__direction_3_01_kokkos_1_1_experimental_1_1_s_y_c_l_01_4" prot="public">Kokkos::default_outer_direction&lt; Kokkos::Experimental::SYCL &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_device" prot="public">Kokkos::Device</innerclass>
    <innerclass refid="struct_kokkos_1_1_dot" prot="public">Kokkos::Dot</innerclass>
    <innerclass refid="struct_kokkos_1_1_dot_single" prot="public">Kokkos::DotSingle</innerclass>
    <innerclass refid="class_kokkos_1_1_dual_view" prot="public">Kokkos::DualView</innerclass>
    <innerclass refid="struct_kokkos_1_1_dynamic" prot="public">Kokkos::Dynamic</innerclass>
    <innerclass refid="class_kokkos_1_1_dyn_rank_view" prot="public">Kokkos::DynRankView</innerclass>
    <innerclass refid="struct_kokkos_1_1equal__to" prot="public">Kokkos::equal_to</innerclass>
    <innerclass refid="struct_kokkos_1_1_graph_row_view_const" prot="public">Kokkos::GraphRowViewConst</innerclass>
    <innerclass refid="struct_kokkos_1_1greater" prot="public">Kokkos::greater</innerclass>
    <innerclass refid="struct_kokkos_1_1greater__equal" prot="public">Kokkos::greater_equal</innerclass>
    <innerclass refid="class_kokkos_1_1_host_space" prot="public">Kokkos::HostSpace</innerclass>
    <innerclass refid="struct_kokkos_1_1_index_type" prot="public">Kokkos::IndexType</innerclass>
    <innerclass refid="struct_kokkos_1_1_init_arguments" prot="public">Kokkos::InitArguments</innerclass>
    <innerclass refid="struct_kokkos_1_1_invalid_type" prot="public">Kokkos::InvalidType</innerclass>
    <innerclass refid="struct_kokkos_1_1is__always__assignable__impl" prot="public">Kokkos::is_always_assignable_impl</innerclass>
    <innerclass refid="struct_kokkos_1_1is__always__assignable__impl_3_01_kokkos_1_1_view_3_01_view_t_dst_8_8_8_01_4_0053f99ca79efc5c727f1e86c67075ce71" prot="public">Kokkos::is_always_assignable_impl&lt; Kokkos::View&lt; ViewTDst... &gt;, Kokkos::View&lt; ViewTSrc... &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1is__array__layout" prot="public">Kokkos::is_array_layout</innerclass>
    <innerclass refid="struct_kokkos_1_1is__array__layout_3_01_kokkos_1_1_experimental_1_1_layout_tiled_3_01_outer_p_00b73071567ed1d63dfdb9e1e8c394252e" prot="public">Kokkos::is_array_layout&lt; Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, ArgN0, ArgN1, 0, 0, 0, 0, 0, 0, true &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1is__array__layout_3_01_kokkos_1_1_experimental_1_1_layout_tiled_3_01_outer_p_00839f59b877e48d96ff49bc183e95c031" prot="public">Kokkos::is_array_layout&lt; Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, ArgN0, ArgN1, ArgN2, 0, 0, 0, 0, 0, true &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1is__array__layout_3_01_kokkos_1_1_experimental_1_1_layout_tiled_3_01_outer_p_006356d6713bc0979593c4ac008fa08865" prot="public">Kokkos::is_array_layout&lt; Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, ArgN0, ArgN1, ArgN2, ArgN3, 0, 0, 0, 0, true &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1is__array__layout_3_01_kokkos_1_1_experimental_1_1_layout_tiled_3_01_outer_p_0047185cda31953d3f45ef8a9695cbf7ab" prot="public">Kokkos::is_array_layout&lt; Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, ArgN0, ArgN1, ArgN2, ArgN3, ArgN4, 0, 0, 0, true &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1is__array__layout_3_01_kokkos_1_1_experimental_1_1_layout_tiled_3_01_outer_p_00f6e1ec3376a715ee04c744a812538c42" prot="public">Kokkos::is_array_layout&lt; Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, ArgN0, ArgN1, ArgN2, ArgN3, ArgN4, ArgN5, 0, 0, true &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1is__array__layout_3_01_kokkos_1_1_experimental_1_1_layout_tiled_3_01_outer_p_0060214f951a38a4242a22e48fe69d56ff" prot="public">Kokkos::is_array_layout&lt; Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, ArgN0, ArgN1, ArgN2, ArgN3, ArgN4, ArgN5, ArgN6, 0, true &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1is__array__layout_3_01_kokkos_1_1_experimental_1_1_layout_tiled_3_01_outer_p_0083c5cba2d8bbef4df5b3169102e8ca98" prot="public">Kokkos::is_array_layout&lt; Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, ArgN0, ArgN1, ArgN2, ArgN3, ArgN4, ArgN5, ArgN6, ArgN7, true &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1is__array__layout__tiled" prot="public">Kokkos::is_array_layout_tiled</innerclass>
    <innerclass refid="struct_kokkos_1_1is__array__layout__tiled_3_01_kokkos_1_1_experimental_1_1_layout_tiled_3_01_out19b622a2e97b2af93d282ebe73801c8d" prot="public">Kokkos::is_array_layout_tiled&lt; Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, ArgN0, ArgN1, ArgN2, ArgN3, ArgN4, ArgN5, ArgN6, ArgN7, IsPowerTwo &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1is__dyn__rank__view" prot="public">Kokkos::is_dyn_rank_view</innerclass>
    <innerclass refid="struct_kokkos_1_1is__dyn__rank__view_3_01_kokkos_1_1_dyn_rank_view_3_01_d_00_01_p_8_8_8_01_4_01_4" prot="public">Kokkos::is_dyn_rank_view&lt; Kokkos::DynRankView&lt; D, P... &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1is__execution__policy" prot="public">Kokkos::is_execution_policy</innerclass>
    <innerclass refid="struct_kokkos_1_1is__execution__space" prot="public">Kokkos::is_execution_space</innerclass>
    <innerclass refid="struct_kokkos_1_1is__layouttiled" prot="public">Kokkos::is_layouttiled</innerclass>
    <innerclass refid="struct_kokkos_1_1is__layouttiled_3_01_layout_tiled_check_00_01typename_01std_1_1enable__if_3_01_1dc2e9da8fdaf28f0971516f1659ccce" prot="public">Kokkos::is_layouttiled&lt; LayoutTiledCheck, typename std::enable_if&lt; LayoutTiledCheck::is_array_layout_tiled &gt;::type &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1is__memory__space" prot="public">Kokkos::is_memory_space</innerclass>
    <innerclass refid="struct_kokkos_1_1is__memory__traits" prot="public">Kokkos::is_memory_traits</innerclass>
    <innerclass refid="struct_kokkos_1_1is__reducer" prot="public">Kokkos::is_reducer</innerclass>
    <innerclass refid="struct_kokkos_1_1is__reducer__type" prot="public">Kokkos::is_reducer_type</innerclass>
    <innerclass refid="struct_kokkos_1_1is__reducer__type_3_01_t_00_01typename_01std_1_1enable__if_3_01std_1_1is__same_d01a62b280f71287d08cd67a866f3115" prot="public">Kokkos::is_reducer_type&lt; T, typename std::enable_if&lt; std::is_same&lt; typename std::remove_cv&lt; T &gt;::type, typename std::remove_cv&lt; typename T::reducer &gt;::type &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1is__space" prot="public">Kokkos::is_space</innerclass>
    <innerclass refid="struct_kokkos_1_1is__view" prot="public">Kokkos::is_view</innerclass>
    <innerclass refid="struct_kokkos_1_1is__view_3_01const_01_view_3_01_d_00_01_p_8_8_8_01_4_01_4" prot="public">Kokkos::is_view&lt; const View&lt; D, P... &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1is__view_3_01_view_3_01_d_00_01_p_8_8_8_01_4_01_4" prot="public">Kokkos::is_view&lt; View&lt; D, P... &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_l_and" prot="public">Kokkos::LAnd</innerclass>
    <innerclass refid="struct_kokkos_1_1_launch_bounds" prot="public">Kokkos::LaunchBounds</innerclass>
    <innerclass refid="struct_kokkos_1_1layout__iterate__type__selector" prot="public">Kokkos::layout_iterate_type_selector</innerclass>
    <innerclass refid="struct_kokkos_1_1layout__iterate__type__selector_3_01_kokkos_1_1_experimental_1_1_layout_tiled_3f772a170da7dc19fb24a83f8c81a1e20" prot="public">Kokkos::layout_iterate_type_selector&lt; Kokkos::Experimental::LayoutTiled&lt; Kokkos::Iterate::Left, Kokkos::Iterate::Left, ArgN0, ArgN1, ArgN2, ArgN3, ArgN4, ArgN5, ArgN6, ArgN7, true &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1layout__iterate__type__selector_3_01_kokkos_1_1_experimental_1_1_layout_tiled_3bd304b92af88bac90587dd74e0169049" prot="public">Kokkos::layout_iterate_type_selector&lt; Kokkos::Experimental::LayoutTiled&lt; Kokkos::Iterate::Left, Kokkos::Iterate::Right, ArgN0, ArgN1, ArgN2, ArgN3, ArgN4, ArgN5, ArgN6, ArgN7, true &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1layout__iterate__type__selector_3_01_kokkos_1_1_experimental_1_1_layout_tiled_303e03b913b59179c2da20cde27cd21b5" prot="public">Kokkos::layout_iterate_type_selector&lt; Kokkos::Experimental::LayoutTiled&lt; Kokkos::Iterate::Right, Kokkos::Iterate::Left, ArgN0, ArgN1, ArgN2, ArgN3, ArgN4, ArgN5, ArgN6, ArgN7, true &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1layout__iterate__type__selector_3_01_kokkos_1_1_experimental_1_1_layout_tiled_32d87f5269f11e0767e4df8faf476a018" prot="public">Kokkos::layout_iterate_type_selector&lt; Kokkos::Experimental::LayoutTiled&lt; Kokkos::Iterate::Right, Kokkos::Iterate::Right, ArgN0, ArgN1, ArgN2, ArgN3, ArgN4, ArgN5, ArgN6, ArgN7, true &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1layout__iterate__type__selector_3_01_kokkos_1_1_layout_left_01_4" prot="public">Kokkos::layout_iterate_type_selector&lt; Kokkos::LayoutLeft &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1layout__iterate__type__selector_3_01_kokkos_1_1_layout_right_01_4" prot="public">Kokkos::layout_iterate_type_selector&lt; Kokkos::LayoutRight &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1layout__iterate__type__selector_3_01_kokkos_1_1_layout_stride_01_4" prot="public">Kokkos::layout_iterate_type_selector&lt; Kokkos::LayoutStride &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_layout_left" prot="public">Kokkos::LayoutLeft</innerclass>
    <innerclass refid="struct_kokkos_1_1_layout_right" prot="public">Kokkos::LayoutRight</innerclass>
    <innerclass refid="struct_kokkos_1_1_layout_selective" prot="public">Kokkos::LayoutSelective</innerclass>
    <innerclass refid="struct_kokkos_1_1_layout_stride" prot="public">Kokkos::LayoutStride</innerclass>
    <innerclass refid="struct_kokkos_1_1less" prot="public">Kokkos::less</innerclass>
    <innerclass refid="struct_kokkos_1_1less__equal" prot="public">Kokkos::less_equal</innerclass>
    <innerclass refid="struct_kokkos_1_1_l_or" prot="public">Kokkos::LOr</innerclass>
    <innerclass refid="struct_kokkos_1_1_max" prot="public">Kokkos::Max</innerclass>
    <innerclass refid="struct_kokkos_1_1_max_loc" prot="public">Kokkos::MaxLoc</innerclass>
    <innerclass refid="struct_kokkos_1_1_m_d_range_policy" prot="public">Kokkos::MDRangePolicy</innerclass>
    <innerclass refid="class_kokkos_1_1_memory_pool" prot="public">Kokkos::MemoryPool</innerclass>
    <innerclass refid="struct_kokkos_1_1_memory_traits" prot="public">Kokkos::MemoryTraits</innerclass>
    <innerclass refid="struct_kokkos_1_1_min" prot="public">Kokkos::Min</innerclass>
    <innerclass refid="struct_kokkos_1_1_min_loc" prot="public">Kokkos::MinLoc</innerclass>
    <innerclass refid="struct_kokkos_1_1_min_max" prot="public">Kokkos::MinMax</innerclass>
    <innerclass refid="struct_kokkos_1_1_min_max_loc" prot="public">Kokkos::MinMaxLoc</innerclass>
    <innerclass refid="struct_kokkos_1_1_min_max_loc_scalar" prot="public">Kokkos::MinMaxLocScalar</innerclass>
    <innerclass refid="struct_kokkos_1_1_min_max_scalar" prot="public">Kokkos::MinMaxScalar</innerclass>
    <innerclass refid="struct_kokkos_1_1nonesuch" prot="public">Kokkos::nonesuch</innerclass>
    <innerclass refid="struct_kokkos_1_1not__equal__to" prot="public">Kokkos::not_equal_to</innerclass>
    <innerclass refid="struct_kokkos_1_1pair" prot="public">Kokkos::pair</innerclass>
    <innerclass refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_6_01_4" prot="public">Kokkos::pair&lt; T1 &amp;, T2 &amp; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1pair_3_01_t1_01_6_00_01_t2_01_4" prot="public">Kokkos::pair&lt; T1 &amp;, T2 &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1pair_3_01_t1_00_01_t2_01_6_01_4" prot="public">Kokkos::pair&lt; T1, T2 &amp; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1pair_3_01_t1_00_01void_01_4" prot="public">Kokkos::pair&lt; T1, void &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_parallel_for_tag" prot="public">Kokkos::ParallelForTag</innerclass>
    <innerclass refid="struct_kokkos_1_1_parallel_reduce_tag" prot="public">Kokkos::ParallelReduceTag</innerclass>
    <innerclass refid="struct_kokkos_1_1_parallel_scan_tag" prot="public">Kokkos::ParallelScanTag</innerclass>
    <innerclass refid="struct_kokkos_1_1pod__equal__to" prot="public">Kokkos::pod_equal_to</innerclass>
    <innerclass refid="struct_kokkos_1_1pod__hash" prot="public">Kokkos::pod_hash</innerclass>
    <innerclass refid="struct_kokkos_1_1pod__not__equal__to" prot="public">Kokkos::pod_not_equal_to</innerclass>
    <innerclass refid="struct_kokkos_1_1_prod" prot="public">Kokkos::Prod</innerclass>
    <innerclass refid="struct_kokkos_1_1rand" prot="public">Kokkos::rand</innerclass>
    <innerclass refid="struct_kokkos_1_1rand_3_01_generator_00_01char_01_4" prot="public">Kokkos::rand&lt; Generator, char &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1rand_3_01_generator_00_01double_01_4" prot="public">Kokkos::rand&lt; Generator, double &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1rand_3_01_generator_00_01float_01_4" prot="public">Kokkos::rand&lt; Generator, float &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1rand_3_01_generator_00_01int_01_4" prot="public">Kokkos::rand&lt; Generator, int &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1rand_3_01_generator_00_01_kokkos_1_1complex_3_01double_01_4_01_4" prot="public">Kokkos::rand&lt; Generator, Kokkos::complex&lt; double &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1rand_3_01_generator_00_01_kokkos_1_1complex_3_01float_01_4_01_4" prot="public">Kokkos::rand&lt; Generator, Kokkos::complex&lt; float &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1rand_3_01_generator_00_01long_01_4" prot="public">Kokkos::rand&lt; Generator, long &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1rand_3_01_generator_00_01long_01long_01_4" prot="public">Kokkos::rand&lt; Generator, long long &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1rand_3_01_generator_00_01short_01_4" prot="public">Kokkos::rand&lt; Generator, short &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1rand_3_01_generator_00_01unsigned_01int_01_4" prot="public">Kokkos::rand&lt; Generator, unsigned int &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1rand_3_01_generator_00_01unsigned_01long_01_4" prot="public">Kokkos::rand&lt; Generator, unsigned long &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1rand_3_01_generator_00_01unsigned_01long_01long_01_4" prot="public">Kokkos::rand&lt; Generator, unsigned long long &gt;</innerclass>
    <innerclass refid="class_kokkos_1_1_random___xor_shift1024" prot="public">Kokkos::Random_XorShift1024</innerclass>
    <innerclass refid="class_kokkos_1_1_random___xor_shift1024___pool" prot="public">Kokkos::Random_XorShift1024_Pool</innerclass>
    <innerclass refid="class_kokkos_1_1_random___xor_shift64" prot="public">Kokkos::Random_XorShift64</innerclass>
    <innerclass refid="class_kokkos_1_1_random___xor_shift64___pool" prot="public">Kokkos::Random_XorShift64_Pool</innerclass>
    <innerclass refid="class_kokkos_1_1_range_policy" prot="public">Kokkos::RangePolicy</innerclass>
    <innerclass refid="struct_kokkos_1_1_rank" prot="public">Kokkos::Rank</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity" prot="public">Kokkos::reduction_identity</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01double_01_4" prot="public">Kokkos::reduction_identity&lt; double &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01float_01_4" prot="public">Kokkos::reduction_identity&lt; float &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01int_01_4" prot="public">Kokkos::reduction_identity&lt; int &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01_kokkos_1_1complex_3_01_t_01_4_01_4" prot="public">Kokkos::reduction_identity&lt; Kokkos::complex&lt; T &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01long_01_4" prot="public">Kokkos::reduction_identity&lt; long &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01long_01double_01_4" prot="public">Kokkos::reduction_identity&lt; long double &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01long_01long_01_4" prot="public">Kokkos::reduction_identity&lt; long long &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01short_01_4" prot="public">Kokkos::reduction_identity&lt; short &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01signed_01char_01_4" prot="public">Kokkos::reduction_identity&lt; signed char &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01_test_1_1array__reduce_3_01scalar__t_00_01_n_01_4_01_4" prot="public">Kokkos::reduction_identity&lt; Test::array_reduce&lt; scalar_t, N &gt; &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01_test_1_1long__wrapper_01_4" prot="public">Kokkos::reduction_identity&lt; Test::long_wrapper &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01_test_1_1my__complex_01_4" prot="public">Kokkos::reduction_identity&lt; Test::my_complex &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01_test_1_1point__t_01_4" prot="public">Kokkos::reduction_identity&lt; Test::point_t &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01_test_team_vector_range_1_1my__complex_01_4" prot="public">Kokkos::reduction_identity&lt; TestTeamVectorRange::my_complex &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01unsigned_01char_01_4" prot="public">Kokkos::reduction_identity&lt; unsigned char &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01unsigned_01int_01_4" prot="public">Kokkos::reduction_identity&lt; unsigned int &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01unsigned_01long_01_4" prot="public">Kokkos::reduction_identity&lt; unsigned long &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01unsigned_01long_01long_01_4" prot="public">Kokkos::reduction_identity&lt; unsigned long long &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1reduction__identity_3_01unsigned_01short_01_4" prot="public">Kokkos::reduction_identity&lt; unsigned short &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_scale" prot="public">Kokkos::Scale</innerclass>
    <innerclass refid="struct_kokkos_1_1_schedule" prot="public">Kokkos::Schedule</innerclass>
    <innerclass refid="class_kokkos_1_1_scope_guard" prot="public">Kokkos::ScopeGuard</innerclass>
    <innerclass refid="class_kokkos_1_1_scratch_memory_space" prot="public">Kokkos::ScratchMemorySpace</innerclass>
    <innerclass refid="struct_kokkos_1_1_scratch_request" prot="public">Kokkos::ScratchRequest</innerclass>
    <innerclass refid="struct_kokkos_1_1_space_accessibility" prot="public">Kokkos::SpaceAccessibility</innerclass>
    <innerclass refid="struct_kokkos_1_1_static" prot="public">Kokkos::Static</innerclass>
    <innerclass refid="class_kokkos_1_1_static_crs_graph" prot="public">Kokkos::StaticCrsGraph</innerclass>
    <innerclass refid="struct_kokkos_1_1_sum" prot="public">Kokkos::Sum</innerclass>
    <innerclass refid="class_kokkos_1_1_team_policy" prot="public">Kokkos::TeamPolicy</innerclass>
    <innerclass refid="class_kokkos_1_1_timer" prot="public">Kokkos::Timer</innerclass>
    <innerclass refid="class_kokkos_1_1_unordered_map" prot="public">Kokkos::UnorderedMap</innerclass>
    <innerclass refid="class_kokkos_1_1_unordered_map_insert_result" prot="public">Kokkos::UnorderedMapInsertResult</innerclass>
    <innerclass refid="struct_kokkos_1_1_val_loc_scalar" prot="public">Kokkos::ValLocScalar</innerclass>
    <innerclass refid="class_kokkos_1_1vector" prot="public">Kokkos::vector</innerclass>
    <innerclass refid="class_kokkos_1_1_view" prot="public">Kokkos::View</innerclass>
    <innerclass refid="struct_kokkos_1_1_view_traits" prot="public">Kokkos::ViewTraits</innerclass>
    <innerclass refid="struct_kokkos_1_1_view_traits_3_01typename_01std_1_1enable__if_3_01_kokkos_1_1is__array__layout_1c14bd2d53ecef56252305095c6e13eb" prot="public">Kokkos::ViewTraits&lt; typename std::enable_if&lt; Kokkos::is_array_layout&lt; ArrayLayout &gt;::value &gt;::type, ArrayLayout, Prop... &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_view_traits_3_01typename_01std_1_1enable__if_3_01_kokkos_1_1is__memory__traitsae47e196685f583c3c52d2ec1837f10e" prot="public">Kokkos::ViewTraits&lt; typename std::enable_if&lt; Kokkos::is_memory_traits&lt; MemoryTraits &gt;::value &gt;::type, MemoryTraits, Prop... &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_view_traits_3_01typename_01std_1_1enable__if_3_01_kokkos_1_1is__space_3_01_spa2fe876beeecaaadce4947eadb5a5a1d8" prot="public">Kokkos::ViewTraits&lt; typename std::enable_if&lt; Kokkos::is_space&lt; Space &gt;::value &gt;::type, Space, Prop... &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_view_traits_3_01void_01_4" prot="public">Kokkos::ViewTraits&lt; void &gt;</innerclass>
    <innerclass refid="struct_kokkos_1_1_view_traits_3_01void_00_01void_00_01_prop_8_8_8_01_4" prot="public">Kokkos::ViewTraits&lt; void, void, Prop... &gt;</innerclass>
    <innerclass refid="class_kokkos_1_1_work_graph_policy" prot="public">Kokkos::WorkGraphPolicy</innerclass>
    <innernamespace refid="namespace_kokkos_1_1_avoid_compiler_warnings">Kokkos::AvoidCompilerWarnings</innernamespace>
    <innernamespace refid="namespace_kokkos_1_1_experimental">Kokkos::Experimental</innernamespace>
    <innernamespace refid="namespace_kokkos_1_1hwloc">Kokkos::hwloc</innernamespace>
    <innernamespace refid="namespace_kokkos_1_1_impl">Kokkos::Impl</innernamespace>
    <innernamespace refid="namespace_kokkos_1_1_profiling">Kokkos::Profiling</innernamespace>
    <innernamespace refid="namespace_kokkos_1_1_tools">Kokkos::Tools</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_kokkos___unordered_map_8hpp_1ac56844c13d45684b098b418db38cd2cb" prot="public" static="no" strong="no">
        <type>unsigned</type>
        <name>@28</name>
        <qualifiedname>Kokkos::@28</qualifiedname>
        <enumvalue id="_kokkos___unordered_map_8hpp_1ac56844c13d45684b098b418db38cd2cbaf01eece6ed7ac010a30f753a4c724a58" prot="public">
          <name>UnorderedMapInvalidIndex</name>
          <initializer>= ~0u</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_UnorderedMap.hpp" line="69" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_UnorderedMap.hpp" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="enum" id="_kokkos___layout_8hpp_1a5ea3dd27b51a1cc0393f7ba4dc84b546" prot="public" static="no" strong="no">
        <type></type>
        <name>@191</name>
        <qualifiedname>Kokkos::@191</qualifiedname>
        <enumvalue id="_kokkos___layout_8hpp_1a5ea3dd27b51a1cc0393f7ba4dc84b546aa0f6396b2d00318f6e963369398a18f0" prot="public">
          <name>ARRAY_LAYOUT_MAX_RANK</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Layout.hpp" line="56" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Layout.hpp" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="enum" id="_kokkos___layout_8hpp_1a77f12adfdf9ea0fbf3a1d81fa63d4cd8" prot="public" static="no" strong="yes">
        <type></type>
        <name>Iterate</name>
        <qualifiedname>Kokkos::Iterate</qualifiedname>
        <enumvalue id="_kokkos___layout_8hpp_1a77f12adfdf9ea0fbf3a1d81fa63d4cd8a7a1920d61156abc05a60135aefe8bc67" prot="public">
          <name>Default</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_kokkos___layout_8hpp_1a77f12adfdf9ea0fbf3a1d81fa63d4cd8a945d5e233cf7d6240f6b783b36a374ff" prot="public">
          <name>Left</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_kokkos___layout_8hpp_1a77f12adfdf9ea0fbf3a1d81fa63d4cd8a92b09c7c48c520c3c55e497875da437c" prot="public">
          <name>Right</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Layout.hpp" line="224" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Layout.hpp" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="enum" id="_kokkos___memory_traits_8hpp_1a981b1bfcf0cd3544d7c36008f96d8635" prot="public" static="no" strong="no">
        <type></type>
        <name>MemoryTraitsFlags</name>
        <qualifiedname>Kokkos::MemoryTraitsFlags</qualifiedname>
        <enumvalue id="_kokkos___memory_traits_8hpp_1a981b1bfcf0cd3544d7c36008f96d8635a71c2e7a0a60f62e5aeeb3581a353701a" prot="public">
          <name>Unmanaged</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_kokkos___memory_traits_8hpp_1a981b1bfcf0cd3544d7c36008f96d8635ae0bf518c4d9cfb206d8fb3df3e9d0527" prot="public">
          <name>RandomAccess</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_kokkos___memory_traits_8hpp_1a981b1bfcf0cd3544d7c36008f96d8635ab73245d0da2b0a0d013b0b48faa76d85" prot="public">
          <name>Atomic</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_kokkos___memory_traits_8hpp_1a981b1bfcf0cd3544d7c36008f96d8635a1d4e3807637a31d498b9f3a86bf3d5bf" prot="public">
          <name>Restrict</name>
          <initializer>= 0x08</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_kokkos___memory_traits_8hpp_1a981b1bfcf0cd3544d7c36008f96d8635a65a08e73e0b1e9835081304e8e1ac18e" prot="public">
          <name>Aligned</name>
          <initializer>= 0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Memory access traits for views, an extension point. </para>
        </briefdescription>
        <detaileddescription>
<para>These traits should be orthogonal. If there are dependencies then the <ref refid="struct_kokkos_1_1_memory_traits" kindref="compound">MemoryTraits</ref> template must detect and enforce dependencies.</para>
<para>A zero value is the default for a <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>, indicating that none of these traits are present. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryTraits.hpp" line="62" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryTraits.hpp" bodystart="62" bodyend="68"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_kokkos___dyn_rank_view_8hpp_1a0a5cefbc997c507784a4208a78d1429b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="class_kokkos_1_1_impl_1_1_view_mapping" kindref="compound">Kokkos::Impl::ViewMapping</ref>&lt; <ref refid="struct_kokkos_1_1_impl_1_1_dyn_rank_subview_tag" kindref="compound">Kokkos::Impl::DynRankSubviewTag</ref>, V, Args... &gt;::ret_type</type>
        <definition>using Kokkos::Subdynrankview = typedef typename Kokkos::Impl::ViewMapping&lt;Kokkos::Impl::DynRankSubviewTag, V, Args...&gt;::ret_type</definition>
        <argsstring></argsstring>
        <name>Subdynrankview</name>
        <qualifiedname>Kokkos::Subdynrankview</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1511" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___view_ctor_8hpp_1a2a5f98912a0a3e5c4becaf7d3609c205" prot="public" static="no">
        <type><ref refid="struct_kokkos_1_1_impl_1_1_view_ctor_prop" kindref="compound">Impl::ViewCtorProp</ref>&lt; <ref refid="struct_kokkos_1_1_impl_1_1_without_initializing__t" kindref="compound">Impl::WithoutInitializing_t</ref>, std::string, <ref refid="struct_kokkos_1_1_impl_1_1_view_allocate_without_initializing_backward_compat" kindref="compound">Impl::ViewAllocateWithoutInitializingBackwardCompat</ref> &gt;</type>
        <definition>using Kokkos::ViewAllocateWithoutInitializing = typedef Impl::ViewCtorProp&lt;Impl::WithoutInitializing_t, std::string, Impl::ViewAllocateWithoutInitializingBackwardCompat&gt;</definition>
        <argsstring></argsstring>
        <name>ViewAllocateWithoutInitializing</name>
        <qualifiedname>Kokkos::ViewAllocateWithoutInitializing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewCtor.hpp" line="293" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewCtor.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___concepts_8hpp_1abb151a01f76bb158c023f469b3cd734f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_kokkos_1_1_impl_1_1is__device__helper" kindref="compound">Impl::is_device_helper</ref>&lt; typename std::remove_cv&lt; T &gt;::type &gt;::type</type>
        <definition>using Kokkos::is_device = typedef typename Impl::is_device_helper&lt;typename std::remove_cv&lt;T&gt;::type&gt;::type</definition>
        <argsstring></argsstring>
        <name>is_device</name>
        <qualifiedname>Kokkos::is_device</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" line="274" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Concepts.hpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___detection_idiom_8hpp_1a658381be02f2baeb4cbc2fce480204cc" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_kokkos_1_1_impl_1_1detector" kindref="compound">Impl::detector</ref>&lt; <ref refid="struct_kokkos_1_1nonesuch" kindref="compound">nonesuch</ref>, void, Op, Args... &gt;::value_t</type>
        <definition>using Kokkos::is_detected = typedef typename Impl::detector&lt;nonesuch, void, Op, Args...&gt;::value_t</definition>
        <argsstring></argsstring>
        <name>is_detected</name>
        <qualifiedname>Kokkos::is_detected</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_DetectionIdiom.hpp" line="85" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_DetectionIdiom.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___detection_idiom_8hpp_1a4365929328b36a53175c00a1ea20b26e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_kokkos_1_1_impl_1_1detector" kindref="compound">Impl::detector</ref>&lt; <ref refid="struct_kokkos_1_1nonesuch" kindref="compound">nonesuch</ref>, void, Op, Args... &gt;::type</type>
        <definition>using Kokkos::detected_t = typedef typename Impl::detector&lt;nonesuch, void, Op, Args...&gt;::type</definition>
        <argsstring></argsstring>
        <name>detected_t</name>
        <qualifiedname>Kokkos::detected_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_DetectionIdiom.hpp" line="89" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_DetectionIdiom.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___detection_idiom_8hpp_1aef92e368ab396ed3ae908d2c3447d54f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Default</type>
          </param>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_kokkos_1_1_impl_1_1detector" kindref="compound">Impl::detector</ref>&lt; Default, void, Op, Args... &gt;::type</type>
        <definition>using Kokkos::detected_or_t = typedef typename Impl::detector&lt;Default, void, Op, Args...&gt;::type</definition>
        <argsstring></argsstring>
        <name>detected_or_t</name>
        <qualifiedname>Kokkos::detected_or_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_DetectionIdiom.hpp" line="92" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_DetectionIdiom.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___detection_idiom_8hpp_1addcc2dbc13bc7ae5f1257bbb7197244b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Expected</type>
          </param>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::is_same&lt; Expected, detected_t&lt; Op, Args... &gt; &gt;</type>
        <definition>using Kokkos::is_detected_exact = typedef std::is_same&lt;Expected, detected_t&lt;Op, Args...&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_detected_exact</name>
        <qualifiedname>Kokkos::is_detected_exact</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_DetectionIdiom.hpp" line="95" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_DetectionIdiom.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___detection_idiom_8hpp_1af544f4ac07fe35e535494ea32ca5a262" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class To</type>
          </param>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::is_convertible&lt; detected_t&lt; Op, Args... &gt;, To &gt;</type>
        <definition>using Kokkos::is_detected_convertible = typedef std::is_convertible&lt;detected_t&lt;Op, Args...&gt;, To&gt;</definition>
        <argsstring></argsstring>
        <name>is_detected_convertible</name>
        <qualifiedname>Kokkos::is_detected_convertible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_DetectionIdiom.hpp" line="98" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_DetectionIdiom.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___memory_traits_8hpp_1a7048495557029a395eea0091f53ec4a2" prot="public" static="no">
        <type><ref refid="struct_kokkos_1_1_memory_traits" kindref="compound">Kokkos::MemoryTraits</ref>&lt; 0 &gt;</type>
        <definition>using Kokkos::MemoryManaged = typedef Kokkos::MemoryTraits&lt;0&gt;</definition>
        <argsstring></argsstring>
        <name>MemoryManaged</name>
        <qualifiedname>Kokkos::MemoryManaged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryTraits.hpp" line="93" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryTraits.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___memory_traits_8hpp_1a0c7773a8701badbb98992951ff349861" prot="public" static="no">
        <type><ref refid="struct_kokkos_1_1_memory_traits" kindref="compound">Kokkos::MemoryTraits</ref>&lt; Kokkos::Unmanaged &gt;</type>
        <definition>using Kokkos::MemoryUnmanaged = typedef Kokkos::MemoryTraits&lt;Kokkos::Unmanaged&gt;</definition>
        <argsstring></argsstring>
        <name>MemoryUnmanaged</name>
        <qualifiedname>Kokkos::MemoryUnmanaged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryTraits.hpp" line="94" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryTraits.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___memory_traits_8hpp_1a787a210ba3cf4458fd7544970f501bae" prot="public" static="no">
        <type><ref refid="struct_kokkos_1_1_memory_traits" kindref="compound">Kokkos::MemoryTraits</ref>&lt; Kokkos::Unmanaged|Kokkos::RandomAccess &gt;</type>
        <definition>using Kokkos::MemoryRandomAccess = typedef Kokkos::MemoryTraits&lt;Kokkos::Unmanaged | Kokkos::RandomAccess&gt;</definition>
        <argsstring></argsstring>
        <name>MemoryRandomAccess</name>
        <qualifiedname>Kokkos::MemoryRandomAccess</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_MemoryTraits.hpp" line="95" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_MemoryTraits.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___pointer_ownership_8hpp_1a37768b982e2df9caf1e64306fcd5e874" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>using Kokkos::OwningRawPtr = typedef T*</definition>
        <argsstring></argsstring>
        <name>OwningRawPtr</name>
        <qualifiedname>Kokkos::OwningRawPtr</qualifiedname>
        <briefdescription>
<para>Trivial wrapper for raw pointers that express ownership. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_PointerOwnership.hpp" line="61" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_PointerOwnership.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___pointer_ownership_8hpp_1a40c220e55dee0725599230a496911abd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>using Kokkos::ObservingRawPtr = typedef T*</definition>
        <argsstring></argsstring>
        <name>ObservingRawPtr</name>
        <qualifiedname>Kokkos::ObservingRawPtr</qualifiedname>
        <briefdescription>
<para>Trivial wrapper for raw pointers that do not express ownership. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_PointerOwnership.hpp" line="65" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_PointerOwnership.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___view_8hpp_1ab107d5e26cd74ce3913f35369770054d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class View1</type>
          </param>
          <param>
            <type>class View2</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1is__always__assignable__impl" kindref="compound">is_always_assignable_impl</ref>&lt; typename std::remove_reference&lt; View1 &gt;::type, typename std::remove_const&lt; typename std::remove_reference&lt; View2 &gt;::type &gt;::type &gt;</type>
        <definition>using Kokkos::is_always_assignable = typedef is_always_assignable_impl&lt; typename std::remove_reference&lt;View1&gt;::type, typename std::remove_const&lt; typename std::remove_reference&lt;View2&gt;::type&gt;::type&gt;</definition>
        <argsstring></argsstring>
        <name>is_always_assignable</name>
        <qualifiedname>Kokkos::is_always_assignable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="449" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___view_8hpp_1a7091ede9a82c2f39f6e887229c70d417" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="class_kokkos_1_1_impl_1_1_view_mapping" kindref="compound">Kokkos::Impl::ViewMapping</ref>&lt; void, typename V::traits, Args... &gt;::type</type>
        <definition>using Kokkos::Subview = typedef typename Kokkos::Impl::ViewMapping&lt;void , typename V::traits, Args...&gt;::type</definition>
        <argsstring></argsstring>
        <name>Subview</name>
        <qualifiedname>Kokkos::Subview</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1906" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1910" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_kokkos___view_8hpp_1a2282480644fbe22fba37ffce31968623" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Views</declname>
            <defname>Views</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="struct_kokkos_1_1_impl_1_1_deduce_common_view_alloc_prop" kindref="compound">Impl::DeduceCommonViewAllocProp</ref>&lt; Views... &gt;::prop_type</type>
        <definition>using Kokkos::DeducedCommonPropsType = typedef typename Impl::DeduceCommonViewAllocProp&lt;Views...&gt;::prop_type</definition>
        <argsstring></argsstring>
        <name>DeducedCommonPropsType</name>
        <qualifiedname>Kokkos::DeducedCommonPropsType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="2082" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="2083" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_kokkos___random_8hpp_1a4ef30eb36fbc53ff3a1d24277c7d06d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewType</type>
          </param>
          <param>
            <type>class RandomPool</type>
          </param>
          <param>
            <type>class IndexType</type>
            <defval>int64_t</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::fill_random</definition>
        <argsstring>(ViewType a, RandomPool g, typename ViewType::const_value_type range)</argsstring>
        <name>fill_random</name>
        <qualifiedname>Kokkos::fill_random</qualifiedname>
        <param>
          <type>ViewType</type>
          <declname>a</declname>
        </param>
        <param>
          <type>RandomPool</type>
          <declname>g</declname>
        </param>
        <param>
          <type>typename ViewType::const_value_type</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/algorithms/src/Kokkos_Random.hpp" line="1758" column="6" bodyfile="src/Kokkos/kokkos/algorithms/src/Kokkos_Random.hpp" bodystart="1758" bodyend="1766"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___random_8hpp_1ad6c23bb5fc50bdcbfcbb2f8e3625fcd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewType</type>
          </param>
          <param>
            <type>class RandomPool</type>
          </param>
          <param>
            <type>class IndexType</type>
            <defval>int64_t</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::fill_random</definition>
        <argsstring>(ViewType a, RandomPool g, typename ViewType::const_value_type begin, typename ViewType::const_value_type end)</argsstring>
        <name>fill_random</name>
        <qualifiedname>Kokkos::fill_random</qualifiedname>
        <param>
          <type>ViewType</type>
          <declname>a</declname>
        </param>
        <param>
          <type>RandomPool</type>
          <declname>g</declname>
        </param>
        <param>
          <type>typename ViewType::const_value_type</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>typename ViewType::const_value_type</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/algorithms/src/Kokkos_Random.hpp" line="1769" column="6" bodyfile="src/Kokkos/kokkos/algorithms/src/Kokkos_Random.hpp" bodystart="1769" bodyend="1778"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___sort_8hpp_1a1cabfd5ecb9ccff39cb4eb20bcc99108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecutionSpace</type>
          </param>
          <param>
            <type>class ViewType</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="struct_kokkos_1_1is__execution__space" kindref="compound">Kokkos::is_execution_space</ref>&lt; ExecutionSpace &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; Kokkos::is_execution_space&lt; ExecutionSpace &gt;::value &gt; Kokkos::sort</definition>
        <argsstring>(const ExecutionSpace &amp;exec, ViewType const &amp;view, bool const always_use_kokkos_sort=false)</argsstring>
        <name>sort</name>
        <qualifiedname>Kokkos::sort</qualifiedname>
        <param>
          <type>const ExecutionSpace &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>ViewType const &amp;</type>
          <declname>view</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>always_use_kokkos_sort</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/algorithms/src/Kokkos_Sort.hpp" line="552" column="19" bodyfile="src/Kokkos/kokkos/algorithms/src/Kokkos_Sort.hpp" bodystart="552" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___sort_8hpp_1a796336a6d5a8adf2e1f967bfb3bf4f3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::sort</definition>
        <argsstring>(ViewType const &amp;view, bool const always_use_kokkos_sort=false)</argsstring>
        <name>sort</name>
        <qualifiedname>Kokkos::sort</qualifiedname>
        <param>
          <type>ViewType const &amp;</type>
          <declname>view</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>always_use_kokkos_sort</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/algorithms/src/Kokkos_Sort.hpp" line="574" column="6" bodyfile="src/Kokkos/kokkos/algorithms/src/Kokkos_Sort.hpp" bodystart="574" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___sort_8hpp_1a360938ef7edb3d8d96e204bea22c7609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecutionSpace</type>
          </param>
          <param>
            <type>class ViewType</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="struct_kokkos_1_1is__execution__space" kindref="compound">Kokkos::is_execution_space</ref>&lt; ExecutionSpace &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; Kokkos::is_execution_space&lt; ExecutionSpace &gt;::value &gt; Kokkos::sort</definition>
        <argsstring>(const ExecutionSpace &amp;exec, ViewType view, size_t const begin, size_t const end)</argsstring>
        <name>sort</name>
        <qualifiedname>Kokkos::sort</qualifiedname>
        <param>
          <type>const ExecutionSpace &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>ViewType</type>
          <declname>view</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/algorithms/src/Kokkos_Sort.hpp" line="581" column="19" bodyfile="src/Kokkos/kokkos/algorithms/src/Kokkos_Sort.hpp" bodystart="581" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___sort_8hpp_1a5b3030f733274fbf9f5503307d745eb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::sort</definition>
        <argsstring>(ViewType view, size_t const begin, size_t const end)</argsstring>
        <name>sort</name>
        <qualifiedname>Kokkos::sort</qualifiedname>
        <param>
          <type>ViewType</type>
          <declname>view</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/algorithms/src/Kokkos_Sort.hpp" line="604" column="6" bodyfile="src/Kokkos/kokkos/algorithms/src/Kokkos_Sort.hpp" bodystart="604" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___static_crs_graph__factory_8hpp_1aa8a3574d3582775171bdc0b9ee738016" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DataType</type>
          </param>
          <param>
            <type>class Arg1Type</type>
          </param>
          <param>
            <type>class Arg2Type</type>
          </param>
          <param>
            <type>class Arg3Type</type>
          </param>
          <param>
            <type>typename SizeType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_static_crs_graph" kindref="compound">StaticCrsGraph</ref>&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt;::HostMirror</type>
        <definition>StaticCrsGraph&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt;::HostMirror Kokkos::create_mirror_view</definition>
        <argsstring>(const StaticCrsGraph&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt; &amp;view, typename std::enable_if&lt; ViewTraits&lt; DataType, Arg1Type, Arg2Type, Arg3Type &gt;::is_hostspace &gt;::type *=0)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_static_crs_graph" kindref="compound">StaticCrsGraph</ref>&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt; &amp;</type>
          <declname>view</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DataType, Arg1Type, Arg2Type, Arg3Type &gt;::is_hostspace &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/impl/Kokkos_StaticCrsGraph_factory.hpp" line="57" column="1" bodyfile="src/Kokkos/kokkos/containers/src/impl/Kokkos_StaticCrsGraph_factory.hpp" bodystart="57" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___static_crs_graph__factory_8hpp_1aa75fc77b31ffd071a3b5a7ee4e772cc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DataType</type>
          </param>
          <param>
            <type>class Arg1Type</type>
          </param>
          <param>
            <type>class Arg2Type</type>
          </param>
          <param>
            <type>class Arg3Type</type>
          </param>
          <param>
            <type>typename SizeType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_static_crs_graph" kindref="compound">StaticCrsGraph</ref>&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt;::HostMirror</type>
        <definition>StaticCrsGraph&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt;::HostMirror Kokkos::create_mirror</definition>
        <argsstring>(const StaticCrsGraph&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt; &amp;view)</argsstring>
        <name>create_mirror</name>
        <qualifiedname>Kokkos::create_mirror</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_static_crs_graph" kindref="compound">StaticCrsGraph</ref>&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt; &amp;</type>
          <declname>view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/impl/Kokkos_StaticCrsGraph_factory.hpp" line="69" column="1" bodyfile="src/Kokkos/kokkos/containers/src/impl/Kokkos_StaticCrsGraph_factory.hpp" bodystart="69" bodyend="94" declfile="src/Kokkos/kokkos/containers/src/Kokkos_StaticCrsGraph.hpp" declline="440" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___static_crs_graph__factory_8hpp_1a5a4aec57f694e8867021ce184b737fc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DataType</type>
          </param>
          <param>
            <type>class Arg1Type</type>
          </param>
          <param>
            <type>class Arg2Type</type>
          </param>
          <param>
            <type>class Arg3Type</type>
          </param>
          <param>
            <type>typename SizeType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_static_crs_graph" kindref="compound">StaticCrsGraph</ref>&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt;::HostMirror</type>
        <definition>StaticCrsGraph&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt;::HostMirror Kokkos::create_mirror_view</definition>
        <argsstring>(const StaticCrsGraph&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt; &amp;view, typename std::enable_if&lt;!ViewTraits&lt; DataType, Arg1Type, Arg2Type, Arg3Type &gt;::is_hostspace &gt;::type *=0)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_static_crs_graph" kindref="compound">StaticCrsGraph</ref>&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt; &amp;</type>
          <declname>view</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;!<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DataType, Arg1Type, Arg2Type, Arg3Type &gt;::is_hostspace &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/impl/Kokkos_StaticCrsGraph_factory.hpp" line="100" column="1" bodyfile="src/Kokkos/kokkos/containers/src/impl/Kokkos_StaticCrsGraph_factory.hpp" bodystart="100" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___static_crs_graph__factory_8hpp_1a9ad145351a2d7a3552bcf3c5bb84a2c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class StaticCrsGraphType</type>
          </param>
          <param>
            <type>class InputSizeType</type>
          </param>
        </templateparamlist>
        <type>StaticCrsGraphType::staticcrsgraph_type</type>
        <definition>StaticCrsGraphType::staticcrsgraph_type Kokkos::create_staticcrsgraph</definition>
        <argsstring>(const std::string &amp;label, const std::vector&lt; InputSizeType &gt; &amp;input)</argsstring>
        <name>create_staticcrsgraph</name>
        <qualifiedname>Kokkos::create_staticcrsgraph</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const std::vector&lt; InputSizeType &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/impl/Kokkos_StaticCrsGraph_factory.hpp" line="115" column="57" bodyfile="src/Kokkos/kokkos/containers/src/impl/Kokkos_StaticCrsGraph_factory.hpp" bodystart="115" bodyend="147" declfile="src/Kokkos/kokkos/containers/src/Kokkos_StaticCrsGraph.hpp" declline="419" declcolumn="50"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___static_crs_graph__factory_8hpp_1a5aab691f6058e777275050751b34d918" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class StaticCrsGraphType</type>
          </param>
          <param>
            <type>class InputSizeType</type>
          </param>
        </templateparamlist>
        <type>StaticCrsGraphType::staticcrsgraph_type</type>
        <definition>StaticCrsGraphType::staticcrsgraph_type Kokkos::create_staticcrsgraph</definition>
        <argsstring>(const std::string &amp;label, const std::vector&lt; std::vector&lt; InputSizeType &gt; &gt; &amp;input)</argsstring>
        <name>create_staticcrsgraph</name>
        <qualifiedname>Kokkos::create_staticcrsgraph</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; InputSizeType &gt; &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/impl/Kokkos_StaticCrsGraph_factory.hpp" line="152" column="57" bodyfile="src/Kokkos/kokkos/containers/src/impl/Kokkos_StaticCrsGraph_factory.hpp" bodystart="152" bodyend="203" declfile="src/Kokkos/kokkos/containers/src/Kokkos_StaticCrsGraph.hpp" declline="423" declcolumn="50"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___bitset_8hpp_1a55edfa72013a04880f2a78f48e642b6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstDevice</type>
          </param>
          <param>
            <type>typename SrcDevice</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(Bitset&lt; DstDevice &gt; &amp;dst, Bitset&lt; SrcDevice &gt; const &amp;src)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_bitset" kindref="compound">Bitset</ref>&lt; DstDevice &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1_bitset" kindref="compound">Bitset</ref>&lt; SrcDevice &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_Bitset.hpp" line="391" column="6" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_Bitset.hpp" bodystart="391" bodyend="402" declfile="src/Kokkos/kokkos/containers/src/Kokkos_Bitset.hpp" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___bitset_8hpp_1a27172eb47287473191b0a8597075e0d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstDevice</type>
          </param>
          <param>
            <type>typename SrcDevice</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(Bitset&lt; DstDevice &gt; &amp;dst, ConstBitset&lt; SrcDevice &gt; const &amp;src)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_bitset" kindref="compound">Bitset</ref>&lt; DstDevice &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1_const_bitset" kindref="compound">ConstBitset</ref>&lt; SrcDevice &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_Bitset.hpp" line="405" column="6" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_Bitset.hpp" bodystart="405" bodyend="416" declfile="src/Kokkos/kokkos/containers/src/Kokkos_Bitset.hpp" declline="67" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___bitset_8hpp_1a0a5206ebf8bc3083022756bc7902766d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstDevice</type>
          </param>
          <param>
            <type>typename SrcDevice</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(ConstBitset&lt; DstDevice &gt; &amp;dst, ConstBitset&lt; SrcDevice &gt; const &amp;src)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_const_bitset" kindref="compound">ConstBitset</ref>&lt; DstDevice &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1_const_bitset" kindref="compound">ConstBitset</ref>&lt; SrcDevice &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_Bitset.hpp" line="419" column="6" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_Bitset.hpp" bodystart="419" bodyend="430" declfile="src/Kokkos/kokkos/containers/src/Kokkos_Bitset.hpp" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dual_view_8hpp_1a38287153854962867eb3371fa020716c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class D</type>
          </param>
          <param>
            <type>class A1</type>
          </param>
          <param>
            <type>class A2</type>
          </param>
          <param>
            <type>class A3</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_dual_view_subview" kindref="compound">Impl::DualViewSubview</ref>&lt; D, A1, A2, A3, Args... &gt;::type</type>
        <definition>Impl::DualViewSubview&lt; D, A1, A2, A3, Args... &gt;::type Kokkos::subview</definition>
        <argsstring>(const DualView&lt; D, A1, A2, A3 &gt; &amp;src, Args... args)</argsstring>
        <name>subview</name>
        <qualifiedname>Kokkos::subview</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dual_view" kindref="compound">DualView</ref>&lt; D, A1, A2, A3 &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DualView.hpp" line="1021" column="39" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DualView.hpp" bodystart="1021" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dual_view_8hpp_1a1b5a31b9fd00d399fe509326efe90c1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class DL</type>
          </param>
          <param>
            <type>class DD</type>
          </param>
          <param>
            <type>class DM</type>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class SL</type>
          </param>
          <param>
            <type>class SD</type>
          </param>
          <param>
            <type>class SM</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(DualView&lt; DT, DL, DD, DM &gt; dst, const DualView&lt; ST, SL, SD, SM &gt; &amp;src)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_dual_view" kindref="compound">DualView</ref>&lt; DT, DL, DD, DM &gt;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dual_view" kindref="compound">DualView</ref>&lt; ST, SL, SD, SM &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DualView.hpp" line="1040" column="6" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DualView.hpp" bodystart="1040" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dual_view_8hpp_1a0038c7501eddc21b99e02cf91f86e31a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecutionSpace</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class DL</type>
          </param>
          <param>
            <type>class DD</type>
          </param>
          <param>
            <type>class DM</type>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class SL</type>
          </param>
          <param>
            <type>class SD</type>
          </param>
          <param>
            <type>class SM</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const ExecutionSpace &amp;exec, DualView&lt; DT, DL, DD, DM &gt; dst, const DualView&lt; ST, SL, SD, SM &gt; &amp;src)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const ExecutionSpace &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1_dual_view" kindref="compound">DualView</ref>&lt; DT, DL, DD, DM &gt;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dual_view" kindref="compound">DualView</ref>&lt; ST, SL, SD, SM &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DualView.hpp" line="1054" column="6" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DualView.hpp" bodystart="1054" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dual_view_8hpp_1a8ed8f1270932a00b56286cc6960c3577" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Properties</declname>
            <defname>Properties</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::resize</definition>
        <argsstring>(DualView&lt; Properties... &gt; &amp;dv, Args &amp;&amp;... args) noexcept(noexcept(dv.resize(std::forward&lt; Args &gt;(args)...)))</argsstring>
        <name>resize</name>
        <qualifiedname>Kokkos::resize</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_dual_view" kindref="compound">DualView</ref>&lt; Properties... &gt; &amp;</type>
          <declname>dv</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DualView.hpp" line="1079" column="6" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DualView.hpp" bodystart="1079" bodyend="1082"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dual_view_8hpp_1a7271e84533150cb7dae71afdfd47185d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Properties</declname>
            <defname>Properties</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::realloc</definition>
        <argsstring>(DualView&lt; Properties... &gt; &amp;dv, Args &amp;&amp;... args) noexcept(noexcept(dv.realloc(std::forward&lt; Args &gt;(args)...)))</argsstring>
        <name>realloc</name>
        <qualifiedname>Kokkos::realloc</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_dual_view" kindref="compound">DualView</ref>&lt; Properties... &gt; &amp;</type>
          <declname>dv</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DualView.hpp" line="1085" column="6" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DualView.hpp" bodystart="1085" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dynamic_view_8hpp_1a8c11801aacf9c12ecd5c159388fd7951" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_experimental_1_1_dynamic_view" kindref="compound">Kokkos::Experimental::DynamicView</ref>&lt; T, P... &gt;::HostMirror</type>
        <definition>Kokkos::Experimental::DynamicView&lt; T, P... &gt;::HostMirror Kokkos::create_mirror_view</definition>
        <argsstring>(const Kokkos::Experimental::DynamicView&lt; T, P... &gt; &amp;src)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_dynamic_view" kindref="compound">Kokkos::Experimental::DynamicView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynamicView.hpp" line="580" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynamicView.hpp" bodystart="580" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dynamic_view_8hpp_1a5acd98c7a92e87c7d36aed4b94a172b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const View&lt; T, DP... &gt; &amp;dst, const Kokkos::Experimental::DynamicView&lt; T, SP... &gt; &amp;src)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; T, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_dynamic_view" kindref="compound">Kokkos::Experimental::DynamicView</ref>&lt; T, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynamicView.hpp" line="585" column="13" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynamicView.hpp" bodystart="585" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dynamic_view_8hpp_1ab0856af4c3a0c85b33e21d8012d59149" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const Kokkos::Experimental::DynamicView&lt; T, DP... &gt; &amp;dst, const View&lt; T, SP... &gt; &amp;src)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_dynamic_view" kindref="compound">Kokkos::Experimental::DynamicView</ref>&lt; T, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; T, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynamicView.hpp" line="610" column="13" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynamicView.hpp" bodystart="610" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a69a8099e5d63fbcd24bbc5691e3c3601" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION constexpr unsigned</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr unsigned Kokkos::rank</definition>
        <argsstring>(const DynRankView&lt; D, P... &gt; &amp;DRV)</argsstring>
        <name>rank</name>
        <qualifiedname>Kokkos::rank</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; D, P... &gt; &amp;</type>
          <declname>DRV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1345" column="43" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1345" bodyend="1348"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a35a883ae2684fa16ba810d68646cf434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class D</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION Subdynrankview&lt; <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; D *******, P... &gt;, Args... &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Subdynrankview&lt; ViewTraits&lt; D *******, P... &gt;, Args... &gt; Kokkos::subdynrankview</definition>
        <argsstring>(const Kokkos::DynRankView&lt; D, P... &gt; &amp;src, Args... args)</argsstring>
        <name>subdynrankview</name>
        <qualifiedname>Kokkos::subdynrankview</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; D, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1517" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1517" bodyend="1531"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a74296dd159e2fca3682cbb4871d9d8f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class D</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION Subdynrankview&lt; <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; D *******, P... &gt;, Args... &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Subdynrankview&lt; ViewTraits&lt; D *******, P... &gt;, Args... &gt; Kokkos::subview</definition>
        <argsstring>(const Kokkos::DynRankView&lt; D, P... &gt; &amp;src, Args... args)</argsstring>
        <name>subview</name>
        <qualifiedname>Kokkos::subview</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; D, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1536" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1536" bodyend="1538"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1ab954809a61b908ffd2e62c7abfdd64ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>LP</declname>
            <defname>LP</defname>
          </param>
          <param>
            <type>class RT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::operator==</definition>
        <argsstring>(const DynRankView&lt; LT, LP... &gt; &amp;lhs, const DynRankView&lt; RT, RP... &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; LT, LP... &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; RT, RP... &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1546" column="29" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1546" bodyend="1564"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1af0a27d931f88f3c2462cdee4b9c4581f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>LP</declname>
            <defname>LP</defname>
          </param>
          <param>
            <type>class RT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::operator!=</definition>
        <argsstring>(const DynRankView&lt; LT, LP... &gt; &amp;lhs, const DynRankView&lt; RT, RP... &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>Kokkos::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; LT, LP... &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; RT, RP... &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1567" column="29" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1567" bodyend="1570"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a23617ade3fd1de709abafa2d6068e967" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const DynRankView&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Deep copy a value from Host memory into a view. <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1687" column="13" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1687" bodyend="1703"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a5eb6cb912427a28e88f679a5e716cd4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(typename ViewTraits&lt; ST, SP... &gt;::non_const_value_type &amp;dst, const DynRankView&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; ST, SP... &gt;::specialize, void &gt;::value &gt;::type *=0)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::non_const_value_type &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::specialize, void &gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deep copy into a value in Host memory from a view. <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1707" column="13" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1707" bodyend="1725"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a3deaab04d4f1a76c543c2c606c2b1865" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DstType</type>
          </param>
          <param>
            <type>class SrcType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const DstType &amp;dst, const SrcType &amp;src, typename std::enable_if&lt;(std::is_same&lt; typename DstType::traits::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename SrcType::traits::specialize, void &gt;::value &amp;&amp;(Kokkos::is_dyn_rank_view&lt; DstType &gt;::value||Kokkos::is_dyn_rank_view&lt; SrcType &gt;::value))&gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const DstType &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const SrcType &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(std::is_same&lt; typename DstType::traits::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename SrcType::traits::specialize, void &gt;::value &amp;&amp;(<ref refid="struct_kokkos_1_1is__dyn__rank__view" kindref="compound">Kokkos::is_dyn_rank_view</ref>&lt; DstType &gt;::value||<ref refid="struct_kokkos_1_1is__dyn__rank__view" kindref="compound">Kokkos::is_dyn_rank_view</ref>&lt; SrcType &gt;::value))&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>A deep copy between views of the default specialization, compatible type, same rank, same contiguous layout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1732" column="13" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1732" bodyend="1873"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a0d6c246506c9bf674717dd0020c5054e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt;::HostMirror</type>
        <definition>DynRankView&lt; T, P... &gt;::HostMirror Kokkos::create_mirror</definition>
        <argsstring>(const DynRankView&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; T, P... &gt;::specialize, void &gt;::value &amp;&amp;!std::is_same&lt; typename Kokkos::ViewTraits&lt; T, P... &gt;::array_layout, Kokkos::LayoutStride &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>create_mirror</name>
        <qualifiedname>Kokkos::create_mirror</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; T, P... &gt;::specialize, void &gt;::value &amp;&amp;!std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">Kokkos::ViewTraits</ref>&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref> &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1931" column="42" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1931" bodyend="1942"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1ae4090e594ecde932297b1f26d1b83319" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt;::HostMirror</type>
        <definition>DynRankView&lt; T, P... &gt;::HostMirror Kokkos::create_mirror</definition>
        <argsstring>(const DynRankView&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; T, P... &gt;::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename Kokkos::ViewTraits&lt; T, P... &gt;::array_layout, Kokkos::LayoutStride &gt;::value &gt;::type *=0)</argsstring>
        <name>create_mirror</name>
        <qualifiedname>Kokkos::create_mirror</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; T, P... &gt;::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">Kokkos::ViewTraits</ref>&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref> &gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1945" column="42" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1945" bodyend="1956"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a425049fbee86c8ff79bd2d06a168b401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_d_r_v_type" kindref="compound">Impl::MirrorDRVType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Impl::MirrorDRVType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror</definition>
        <argsstring>(const Space &amp;, const Kokkos::DynRankView&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; T, P... &gt;::specialize, void &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>create_mirror</name>
        <qualifiedname>Kokkos::create_mirror</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; T, P... &gt;::specialize, void &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1960" column="42" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1960" bodyend="1967"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a2daa28bf7830bec9248841a300e978e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt;::HostMirror</type>
        <definition>DynRankView&lt; T, P... &gt;::HostMirror Kokkos::create_mirror_view</definition>
        <argsstring>(const DynRankView&lt; T, P... &gt; &amp;src, typename std::enable_if&lt;(std::is_same&lt; typename DynRankView&lt; T, P... &gt;::memory_space, typename DynRankView&lt; T, P... &gt;::HostMirror::memory_space &gt;::value &amp;&amp;std::is_same&lt; typename DynRankView&lt; T, P... &gt;::data_type, typename DynRankView&lt; T, P... &gt;::HostMirror::data_type &gt;::value)&gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(std::is_same&lt; typename <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt;::memory_space, typename <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt;::HostMirror::memory_space &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt;::data_type, typename <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt;::HostMirror::data_type &gt;::value)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1970" column="42" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1970" bodyend="1980"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a6631b8c38b68c046b5e751091e1dae3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt;::HostMirror</type>
        <definition>DynRankView&lt; T, P... &gt;::HostMirror Kokkos::create_mirror_view</definition>
        <argsstring>(const DynRankView&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; !(std::is_same&lt; typename DynRankView&lt; T, P... &gt;::memory_space, typename DynRankView&lt; T, P... &gt;::HostMirror::memory_space &gt;::value &amp;&amp;std::is_same&lt; typename DynRankView&lt; T, P... &gt;::data_type, typename DynRankView&lt; T, P... &gt;::HostMirror::data_type &gt;::value)&gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; !(std::is_same&lt; typename <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt;::memory_space, typename <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt;::HostMirror::memory_space &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt;::data_type, typename <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt;::HostMirror::data_type &gt;::value)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1983" column="42" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1983" bodyend="1993"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1ae2144e7a8bf390ae76623f6d89741b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_d_r_view_type" kindref="compound">Impl::MirrorDRViewType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Impl::MirrorDRViewType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror_view</definition>
        <argsstring>(const Space &amp;, const Kokkos::DynRankView&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; Impl::MirrorDRViewType&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1_mirror_d_r_view_type" kindref="compound">Impl::MirrorDRViewType</ref>&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="1997" column="45" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="1997" bodyend="2003"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1ac0817abd67551883f54fa6f58a44cd8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_d_r_view_type" kindref="compound">Impl::MirrorDRViewType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Impl::MirrorDRViewType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror_view</definition>
        <argsstring>(const Space &amp;, const Kokkos::DynRankView&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; !Impl::MirrorDRViewType&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; !<ref refid="struct_kokkos_1_1_impl_1_1_mirror_d_r_view_type" kindref="compound">Impl::MirrorDRViewType</ref>&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="2007" column="45" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="2007" bodyend="2014"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a9719f778fb222a528378d099b6f37284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_d_r_view_type" kindref="compound">Impl::MirrorDRViewType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Impl::MirrorDRViewType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror_view_and_copy</definition>
        <argsstring>(const Space &amp;, const Kokkos::DynRankView&lt; T, P... &gt; &amp;src, std::string const &amp;name=&quot;&quot;, typename std::enable_if&lt; Impl::MirrorDRViewType&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view_and_copy</name>
        <qualifiedname>Kokkos::create_mirror_view_and_copy</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1_mirror_d_r_view_type" kindref="compound">Impl::MirrorDRViewType</ref>&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="2020" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="2020" bodyend="2028"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a9c49de684398a89048b3dc741082da93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_d_r_view_type" kindref="compound">Impl::MirrorDRViewType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Impl::MirrorDRViewType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror_view_and_copy</definition>
        <argsstring>(const Space &amp;, const Kokkos::DynRankView&lt; T, P... &gt; &amp;src, std::string const &amp;name=&quot;&quot;, typename std::enable_if&lt; !Impl::MirrorDRViewType&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view_and_copy</name>
        <qualifiedname>Kokkos::create_mirror_view_and_copy</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">Kokkos::DynRankView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>typename std::enable_if&lt; !<ref refid="struct_kokkos_1_1_impl_1_1_mirror_d_r_view_type" kindref="compound">Impl::MirrorDRViewType</ref>&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="2034" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="2034" bodyend="2046"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a87cc0c0ded5af2847ab2159c891090f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::resize</definition>
        <argsstring>(DynRankView&lt; T, P... &gt; &amp;v, const size_t n0=KOKKOS_INVALID_INDEX, const size_t n1=KOKKOS_INVALID_INDEX, const size_t n2=KOKKOS_INVALID_INDEX, const size_t n3=KOKKOS_INVALID_INDEX, const size_t n4=KOKKOS_INVALID_INDEX, const size_t n5=KOKKOS_INVALID_INDEX, const size_t n6=KOKKOS_INVALID_INDEX, const size_t n7=KOKKOS_INVALID_INDEX)</argsstring>
        <name>resize</name>
        <qualifiedname>Kokkos::resize</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n0</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n1</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n2</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n3</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n4</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n5</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n6</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n7</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <briefdescription>
<para>Resize a view with copying old data to new data at the corresponding indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="2057" column="13" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="2057" bodyend="2076"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___dyn_rank_view_8hpp_1a8cd002295c250930870fa3ba3f3b72a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::realloc</definition>
        <argsstring>(DynRankView&lt; T, P... &gt; &amp;v, const size_t n0=KOKKOS_INVALID_INDEX, const size_t n1=KOKKOS_INVALID_INDEX, const size_t n2=KOKKOS_INVALID_INDEX, const size_t n3=KOKKOS_INVALID_INDEX, const size_t n4=KOKKOS_INVALID_INDEX, const size_t n5=KOKKOS_INVALID_INDEX, const size_t n6=KOKKOS_INVALID_INDEX, const size_t n7=KOKKOS_INVALID_INDEX)</argsstring>
        <name>realloc</name>
        <qualifiedname>Kokkos::realloc</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_dyn_rank_view" kindref="compound">DynRankView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n0</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n1</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n2</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n3</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n4</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n5</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n6</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n7</declname>
          <defval>KOKKOS_INVALID_INDEX</defval>
        </param>
        <briefdescription>
<para>Resize a view with copying old data to new data at the corresponding indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" line="2081" column="13" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_DynRankView.hpp" bodystart="2081" bodyend="2099"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1a8d3c4cc06e4864bc167ed7788fbb982f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const Experimental::OffsetView&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Experimental::OffsetView</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1812" column="13" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1812" bodyend="1825"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1ad22c77baa234de6249e418d60a90d31f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const Experimental::OffsetView&lt; DT, DP... &gt; &amp;dst, const Experimental::OffsetView&lt; ST, SP... &gt; &amp;value, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Experimental::OffsetView</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Experimental::OffsetView</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1828" column="13" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1828" bodyend="1841"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1a3495239dd8a77ba22ef2138f117f7764" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const Experimental::OffsetView&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;value, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Experimental::OffsetView</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1843" column="13" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1843" bodyend="1856"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1a3a2266740c412a3ed3c42a8f13a38990" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, const Experimental::OffsetView&lt; ST, SP... &gt; &amp;value, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Experimental::OffsetView</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1859" column="13" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1859" bodyend="1871"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1ae37ae8f979df6ed5f718fd4aaab53758" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt;::HostMirror</type>
        <definition>Kokkos::Experimental::OffsetView&lt; T, P... &gt;::HostMirror Kokkos::create_mirror</definition>
        <argsstring>(const Kokkos::Experimental::OffsetView&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; !std::is_same&lt; typename Kokkos::ViewTraits&lt; T, P... &gt;::array_layout, Kokkos::LayoutStride &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>create_mirror</name>
        <qualifiedname>Kokkos::create_mirror</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; !std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">Kokkos::ViewTraits</ref>&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref> &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1926" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1926" bodyend="1942"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1ab336776e3e67cb5e3c38228ca031c676" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt;::HostMirror</type>
        <definition>Kokkos::Experimental::OffsetView&lt; T, P... &gt;::HostMirror Kokkos::create_mirror</definition>
        <argsstring>(const Kokkos::Experimental::OffsetView&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; std::is_same&lt; typename Kokkos::ViewTraits&lt; T, P... &gt;::array_layout, Kokkos::LayoutStride &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>create_mirror</name>
        <qualifiedname>Kokkos::create_mirror</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">Kokkos::ViewTraits</ref>&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref> &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1946" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1946" bodyend="1977"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1a75bf25d2cb34ecb4ed23368a30b3a9e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_offset_type" kindref="compound">Kokkos::Impl::MirrorOffsetType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Kokkos::Impl::MirrorOffsetType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror</definition>
        <argsstring>(const Space &amp;, const Kokkos::Experimental::OffsetView&lt; T, P... &gt; &amp;src)</argsstring>
        <name>create_mirror</name>
        <qualifiedname>Kokkos::create_mirror</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1982" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1982" bodyend="1988"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1abdfe837bab59835f9a2844dd1cd3401f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt;::HostMirror</type>
        <definition>Kokkos::Experimental::OffsetView&lt; T, P... &gt;::HostMirror Kokkos::create_mirror_view</definition>
        <argsstring>(const typename Kokkos::Experimental::OffsetView&lt; T, P... &gt; &amp;src, typename std::enable_if&lt;(std::is_same&lt; typename Kokkos::Experimental::OffsetView&lt; T, P... &gt;::memory_space, typename Kokkos::Experimental::OffsetView&lt; T, P... &gt;::HostMirror::memory_space &gt;::value &amp;&amp;std::is_same&lt; typename Kokkos::Experimental::OffsetView&lt; T, P... &gt;::data_type, typename Kokkos::Experimental::OffsetView&lt; T, P... &gt;::HostMirror::data_type &gt;::value)&gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const typename <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(std::is_same&lt; typename <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt;::memory_space, typename <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt;::HostMirror::memory_space &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt;::data_type, typename <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt;::HostMirror::data_type &gt;::value)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="1992" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="1992" bodyend="2004"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1a4deb417448b85607287d82501b5a6d4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt;::HostMirror</type>
        <definition>Kokkos::Experimental::OffsetView&lt; T, P... &gt;::HostMirror Kokkos::create_mirror_view</definition>
        <argsstring>(const Kokkos::Experimental::OffsetView&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; !(std::is_same&lt; typename Kokkos::Experimental::OffsetView&lt; T, P... &gt;::memory_space, typename Kokkos::Experimental::OffsetView&lt; T, P... &gt;::HostMirror::memory_space &gt;::value &amp;&amp;std::is_same&lt; typename Kokkos::Experimental::OffsetView&lt; T, P... &gt;::data_type, typename Kokkos::Experimental::OffsetView&lt; T, P... &gt;::HostMirror::data_type &gt;::value)&gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; !(std::is_same&lt; typename <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt;::memory_space, typename <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt;::HostMirror::memory_space &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt;::data_type, typename <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt;::HostMirror::data_type &gt;::value)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="2008" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="2008" bodyend="2020"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1aa6202d26b36ccd0826e02e4de699ded0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_offset_view_type" kindref="compound">Kokkos::Impl::MirrorOffsetViewType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Kokkos::Impl::MirrorOffsetViewType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror_view</definition>
        <argsstring>(const Space &amp;, const Kokkos::Experimental::OffsetView&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; Impl::MirrorOffsetViewType&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1_mirror_offset_view_type" kindref="compound">Impl::MirrorOffsetViewType</ref>&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="2025" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="2025" bodyend="2030"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___offset_view_8hpp_1a59dd8d3575455b6e02d3e20f46e13590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_offset_view_type" kindref="compound">Kokkos::Impl::MirrorOffsetViewType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Kokkos::Impl::MirrorOffsetViewType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror_view</definition>
        <argsstring>(const Space &amp;, const Kokkos::Experimental::OffsetView&lt; T, P... &gt; &amp;src, typename std::enable_if&lt;!Impl::MirrorOffsetViewType&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_experimental_1_1_offset_view" kindref="compound">Kokkos::Experimental::OffsetView</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;!<ref refid="struct_kokkos_1_1_impl_1_1_mirror_offset_view_type" kindref="compound">Impl::MirrorOffsetViewType</ref>&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" line="2035" column="1" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_OffsetView.hpp" bodystart="2035" bodyend="2043"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___scatter_view_8hpp_1af6e692db86b00d5cf847f450b40f8b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DT</type>
          </param>
          <param>
            <type>typename LY</type>
          </param>
          <param>
            <type>typename ES</type>
          </param>
          <param>
            <type>typename OP</type>
          </param>
          <param>
            <type>typename CT</type>
          </param>
          <param>
            <type>typename DP</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>IS</declname>
            <defname>IS</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::realloc</definition>
        <argsstring>(Kokkos::Experimental::ScatterView&lt; DT, LY, ES, OP, CT, DP &gt; &amp;scatter_view, IS... is)</argsstring>
        <name>realloc</name>
        <qualifiedname>Kokkos::realloc</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_experimental_1_1_scatter_view" kindref="compound">Kokkos::Experimental::ScatterView</ref>&lt; DT, LY, ES, OP, CT, DP &gt; &amp;</type>
          <declname>scatter_view</declname>
        </param>
        <param>
          <type>IS...</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" line="1515" column="6" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" bodystart="1515" bodyend="1519"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___scatter_view_8hpp_1a5507748039b0684116bbd6abbf152bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DT</type>
          </param>
          <param>
            <type>typename LY</type>
          </param>
          <param>
            <type>typename ES</type>
          </param>
          <param>
            <type>typename OP</type>
          </param>
          <param>
            <type>typename CT</type>
          </param>
          <param>
            <type>typename DP</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>IS</declname>
            <defname>IS</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::resize</definition>
        <argsstring>(Kokkos::Experimental::ScatterView&lt; DT, LY, ES, OP, CT, DP &gt; &amp;scatter_view, IS... is)</argsstring>
        <name>resize</name>
        <qualifiedname>Kokkos::resize</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_experimental_1_1_scatter_view" kindref="compound">Kokkos::Experimental::ScatterView</ref>&lt; DT, LY, ES, OP, CT, DP &gt; &amp;</type>
          <declname>scatter_view</declname>
        </param>
        <param>
          <type>IS...</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" line="1523" column="6" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_ScatterView.hpp" bodystart="1523" bodyend="1527"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___static_crs_graph_8hpp_1a8d0e52d448c1849ea73fb90283249b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DataType</type>
          </param>
          <param>
            <type>class Arg1Type</type>
          </param>
          <param>
            <type>class Arg2Type</type>
          </param>
          <param>
            <type>class Arg3Type</type>
          </param>
          <param>
            <type>typename SizeType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_static_crs_graph" kindref="compound">StaticCrsGraph</ref>&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt;::HostMirror</type>
        <definition>StaticCrsGraph&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt;::HostMirror Kokkos::create_mirror_view</definition>
        <argsstring>(const StaticCrsGraph&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt; &amp;input)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_static_crs_graph" kindref="compound">StaticCrsGraph</ref>&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_StaticCrsGraph.hpp" line="433" column="1" declfile="src/Kokkos/kokkos/containers/src/Kokkos_StaticCrsGraph.hpp" declline="433" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___static_crs_graph_8hpp_1ab36cc1fd1d9bad0747cb064832cd8d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DataType</type>
          </param>
          <param>
            <type>class Arg1Type</type>
          </param>
          <param>
            <type>class Arg2Type</type>
          </param>
          <param>
            <type>class Arg3Type</type>
          </param>
          <param>
            <type>typename SizeType</type>
          </param>
        </templateparamlist>
        <type>DataType</type>
        <definition>DataType Kokkos::maximum_entry</definition>
        <argsstring>(const StaticCrsGraph&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt; &amp;graph)</argsstring>
        <name>maximum_entry</name>
        <qualifiedname>Kokkos::maximum_entry</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_static_crs_graph" kindref="compound">StaticCrsGraph</ref>&lt; DataType, Arg1Type, Arg2Type, Arg3Type, SizeType &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_StaticCrsGraph.hpp" line="484" column="10" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_StaticCrsGraph.hpp" bodystart="484" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___unordered_map_8hpp_1afa19d63572c5dd7259c87f6893052761" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DKey</type>
          </param>
          <param>
            <type>typename DT</type>
          </param>
          <param>
            <type>typename DDevice</type>
          </param>
          <param>
            <type>typename SKey</type>
          </param>
          <param>
            <type>typename ST</type>
          </param>
          <param>
            <type>typename SDevice</type>
          </param>
          <param>
            <type>typename Hasher</type>
          </param>
          <param>
            <type>typename EqualTo</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(UnorderedMap&lt; DKey, DT, DDevice, Hasher, EqualTo &gt; &amp;dst, const UnorderedMap&lt; SKey, ST, SDevice, Hasher, EqualTo &gt; &amp;src)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_unordered_map" kindref="compound">UnorderedMap</ref>&lt; DKey, DT, DDevice, Hasher, EqualTo &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_unordered_map" kindref="compound">UnorderedMap</ref>&lt; SKey, ST, SDevice, Hasher, EqualTo &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/containers/src/Kokkos_UnorderedMap.hpp" line="840" column="13" bodyfile="src/Kokkos/kokkos/containers/src/Kokkos_UnorderedMap.hpp" bodystart="840" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="_perf_test_blas_kernels_8hpp_1aeac58eed37380441e691adc5f23c867a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ConstScalarType</type>
          </param>
          <param>
            <type>class ConstVectorType</type>
          </param>
          <param>
            <type>class VectorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::axpby</definition>
        <argsstring>(const ConstScalarType &amp;alpha, const ConstVectorType &amp;X, const ConstScalarType &amp;beta, const VectorType &amp;Y)</argsstring>
        <name>axpby</name>
        <qualifiedname>Kokkos::axpby</qualifiedname>
        <param>
          <type>const ConstScalarType &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const ConstVectorType &amp;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const ConstScalarType &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const VectorType &amp;</type>
          <declname>Y</declname>
        </param>
        <briefdescription>
<para>Y = alpha * X + beta * Y. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/perf_test/PerfTestBlasKernels.hpp" line="186" column="6" bodyfile="src/Kokkos/kokkos/core/perf_test/PerfTestBlasKernels.hpp" bodystart="186" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="_perf_test_blas_kernels_8hpp_1ab6fb87f6d16d1ab57f9ab934da976423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ConstScalarType</type>
          </param>
          <param>
            <type>class VectorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::scale</definition>
        <argsstring>(const ConstScalarType &amp;alpha, const VectorType &amp;Y)</argsstring>
        <name>scale</name>
        <qualifiedname>Kokkos::scale</qualifiedname>
        <param>
          <type>const ConstScalarType &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VectorType &amp;</type>
          <declname>Y</declname>
        </param>
        <briefdescription>
<para>Y *= alpha. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/perf_test/PerfTestBlasKernels.hpp" line="195" column="6" bodyfile="src/Kokkos/kokkos/core/perf_test/PerfTestBlasKernels.hpp" bodystart="195" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="_perf_test_blas_kernels_8hpp_1a4ee7bc6aaa9e9e537b17212046af0fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ConstVectorType</type>
          </param>
          <param>
            <type>class Finalize</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::dot</definition>
        <argsstring>(const ConstVectorType &amp;X, const ConstVectorType &amp;Y, const Finalize &amp;finalize)</argsstring>
        <name>dot</name>
        <qualifiedname>Kokkos::dot</qualifiedname>
        <param>
          <type>const ConstVectorType &amp;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const ConstVectorType &amp;</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>const Finalize &amp;</type>
          <declname>finalize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/perf_test/PerfTestBlasKernels.hpp" line="202" column="6" bodyfile="src/Kokkos/kokkos/core/perf_test/PerfTestBlasKernels.hpp" bodystart="202" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="_perf_test_blas_kernels_8hpp_1a93a0f70ddb0d72fc12fc7b3b41a5f808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ConstVectorType</type>
          </param>
          <param>
            <type>class Finalize</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::dot</definition>
        <argsstring>(const ConstVectorType &amp;X, const Finalize &amp;finalize)</argsstring>
        <name>dot</name>
        <qualifiedname>Kokkos::dot</qualifiedname>
        <param>
          <type>const ConstVectorType &amp;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const Finalize &amp;</type>
          <declname>finalize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/perf_test/PerfTestBlasKernels.hpp" line="210" column="6" bodyfile="src/Kokkos/kokkos/core/perf_test/PerfTestBlasKernels.hpp" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___atomic___compare___exchange___weak_8hpp_1ac7c0a9b997c1099bca1410a543f8d9b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::atomic_compare_exchange_strong</definition>
        <argsstring>(volatile T *const dest, const T compare, const T val)</argsstring>
        <name>atomic_compare_exchange_strong</name>
        <qualifiedname>Kokkos::atomic_compare_exchange_strong</qualifiedname>
        <param>
          <type>volatile T *const</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Atomic_Compare_Exchange_Weak.hpp" line="400" column="29" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Atomic_Compare_Exchange_Weak.hpp" bodystart="400" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___bit_ops_8hpp_1a218373af5a03eadcd340054d96de9239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_FORCEINLINE_FUNCTION int</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION int Kokkos::log2</definition>
        <argsstring>(unsigned i)</argsstring>
        <name>log2</name>
        <qualifiedname>Kokkos::log2</qualifiedname>
        <param>
          <type>unsigned</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_BitOps.hpp" line="59" column="5" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_BitOps.hpp" bodystart="59" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___combined___reducer_8hpp_1a2428e0d3476ee3197fc67ba72b32a823" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolicyType</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
          <param>
            <type>class ReturnType1</type>
          </param>
          <param>
            <type>class ReturnType2</type>
          </param>
          <param>
            <type>class...</type>
            <declname>ReturnTypes</declname>
            <defname>ReturnTypes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Kokkos::parallel_reduce</definition>
        <argsstring>(std::string const &amp;label, PolicyType const &amp;policy, Functor const &amp;functor, ReturnType1 &amp;&amp;returnType1, ReturnType2 &amp;&amp;returnType2, ReturnTypes &amp;&amp;... returnTypes) noexcept -&gt; typename std::enable_if&lt; Kokkos::is_execution_policy&lt; PolicyType &gt;::value &gt;::type</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>PolicyType const &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>ReturnType1 &amp;&amp;</type>
          <declname>returnType1</declname>
        </param>
        <param>
          <type>ReturnType2 &amp;&amp;</type>
          <declname>returnType2</declname>
        </param>
        <param>
          <type>ReturnTypes &amp;&amp;...</type>
          <declname>returnTypes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Combined_Reducer.hpp" line="546" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Combined_Reducer.hpp" bodystart="546" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___combined___reducer_8hpp_1a32e4ab62b59e8ff5c81706e8a1b21dd0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolicyType</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
          <param>
            <type>class ReturnType1</type>
          </param>
          <param>
            <type>class ReturnType2</type>
          </param>
          <param>
            <type>class...</type>
            <declname>ReturnTypes</declname>
            <defname>ReturnTypes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Kokkos::parallel_reduce</definition>
        <argsstring>(PolicyType const &amp;policy, Functor const &amp;functor, ReturnType1 &amp;&amp;returnType1, ReturnType2 &amp;&amp;returnType2, ReturnTypes &amp;&amp;... returnTypes) noexcept -&gt; typename std::enable_if&lt; Kokkos::is_execution_policy&lt; PolicyType &gt;::value &gt;::type</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>PolicyType const &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>ReturnType1 &amp;&amp;</type>
          <declname>returnType1</declname>
        </param>
        <param>
          <type>ReturnType2 &amp;&amp;</type>
          <declname>returnType2</declname>
        </param>
        <param>
          <type>ReturnTypes &amp;&amp;...</type>
          <declname>returnTypes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Combined_Reducer.hpp" line="595" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Combined_Reducer.hpp" bodystart="595" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___combined___reducer_8hpp_1a7419491c1d7bbe1919f5277c732f9054" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Functor</type>
          </param>
          <param>
            <type>class ReturnType1</type>
          </param>
          <param>
            <type>class ReturnType2</type>
          </param>
          <param>
            <type>class...</type>
            <declname>ReturnTypes</declname>
            <defname>ReturnTypes</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_reduce</definition>
        <argsstring>(std::string const &amp;label, size_t n, Functor const &amp;functor, ReturnType1 &amp;&amp;returnType1, ReturnType2 &amp;&amp;returnType2, ReturnTypes &amp;&amp;... returnTypes) noexcept</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>ReturnType1 &amp;&amp;</type>
          <declname>returnType1</declname>
        </param>
        <param>
          <type>ReturnType2 &amp;&amp;</type>
          <declname>returnType2</declname>
        </param>
        <param>
          <type>ReturnTypes &amp;&amp;...</type>
          <declname>returnTypes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Combined_Reducer.hpp" line="610" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Combined_Reducer.hpp" bodystart="610" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___combined___reducer_8hpp_1ae640bd587e16e42623d3dd84cc5e885c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Functor</type>
          </param>
          <param>
            <type>class ReturnType1</type>
          </param>
          <param>
            <type>class ReturnType2</type>
          </param>
          <param>
            <type>class...</type>
            <declname>ReturnTypes</declname>
            <defname>ReturnTypes</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_reduce</definition>
        <argsstring>(size_t n, Functor const &amp;functor, ReturnType1 &amp;&amp;returnType1, ReturnType2 &amp;&amp;returnType2, ReturnTypes &amp;&amp;... returnTypes) noexcept</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>ReturnType1 &amp;&amp;</type>
          <declname>returnType1</declname>
        </param>
        <param>
          <type>ReturnType2 &amp;&amp;</type>
          <declname>returnType2</declname>
        </param>
        <param>
          <type>ReturnTypes &amp;&amp;...</type>
          <declname>returnTypes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Combined_Reducer.hpp" line="622" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Combined_Reducer.hpp" bodystart="622" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8cpp_1aff0099e9b1ad9cf2190a47edf6345c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::initialize</definition>
        <argsstring>(int &amp;narg, char *arg[])</argsstring>
        <name>initialize</name>
        <qualifiedname>Kokkos::initialize</qualifiedname>
        <param>
          <type>int &amp;</type>
          <declname>narg</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>arg</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" line="1064" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" bodystart="1064" bodyend="1069" declfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" declline="140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8cpp_1a3b84daea0a52a1ea9e7c5e8dd6768b7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::initialize</definition>
        <argsstring>(InitArguments arguments)</argsstring>
        <name>initialize</name>
        <qualifiedname>Kokkos::initialize</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1_init_arguments" kindref="compound">InitArguments</ref></type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" line="1071" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" bodystart="1071" bodyend="1074" declfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" declline="142" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8cpp_1a9cacaa4656c6c284d28166f910e26994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::push_finalize_hook</definition>
        <argsstring>(std::function&lt; void()&gt; f)</argsstring>
        <name>push_finalize_hook</name>
        <qualifiedname>Kokkos::push_finalize_hook</qualifiedname>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Push a user-defined function to be called in Kokkos::finalize, before any Kokkos state is finalized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Only call this after Kokkos::initialize, but before Kokkos::finalize.</para>
</simplesect>
This function is the Kokkos analog to std::atexit. If you call this with a function f, then your function will get called when Kokkos::finalize is called. Specifically, it will be called BEFORE Kokkos does any finalization. This means that all execution spaces, memory spaces, etc. that were initialized will still be initialized when your function is called.</para>
<para>Just like std::atexit, if you call push_finalize_hook in sequence with multiple functions (f, g, h), Kokkos::finalize will call them in reverse order (h, g, f), as if popping a stack. Furthermore, just like std::atexit, if any of your functions throws but does not catch an exception, Kokkos::finalize will call std::terminate. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" line="1088" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" bodystart="1088" bodyend="1088" declfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" declline="184" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8cpp_1a9c18bd338b78c054786007d492f056d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <qualifiedname>Kokkos::finalize</qualifiedname>
        <briefdescription>
<para>Finalize the spaces that were initialized via Kokkos::initialize. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" line="1090" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" bodystart="1090" bodyend="1090" declfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" declline="162" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8cpp_1a36f4f82b4bdd206a7828474c4a9c0de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::finalize_all</definition>
        <argsstring>()</argsstring>
        <name>finalize_all</name>
        <qualifiedname>Kokkos::finalize_all</qualifiedname>
        <briefdescription>
<para>Finalize all known execution spaces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" line="1092" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" bodystart="1092" bodyend="1095" declfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" declline="187" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8cpp_1ad227d6db15e952db90e2f6de197ba777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::fence</definition>
        <argsstring>()</argsstring>
        <name>fence</name>
        <qualifiedname>Kokkos::fence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" line="1097" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" bodystart="1097" bodyend="1097" declfile="src/Kokkos/kokkos/core/src/Kokkos_Core_fwd.hpp" declline="242" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8cpp_1a83f442ae5d51e6ee392efc121ab992f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::fence</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>fence</name>
        <qualifiedname>Kokkos::fence</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" line="1098" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" bodystart="1098" bodyend="1098" declfile="src/Kokkos/kokkos/core/src/Kokkos_Core_fwd.hpp" declline="243" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8cpp_1aa227b7a45f0175cc09464e2a26482298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::print_helper</definition>
        <argsstring>(std::ostringstream &amp;out, const std::map&lt; std::string, std::string &gt; &amp;print_me)</argsstring>
        <name>print_helper</name>
        <qualifiedname>Kokkos::print_helper</qualifiedname>
        <param>
          <type>std::ostringstream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>print_me</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" line="1100" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" bodystart="1100" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8cpp_1a4c5f769eb690aeb1351b0b3f6250907b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::print_configuration</definition>
        <argsstring>(std::ostream &amp;, const bool detail=false)</argsstring>
        <name>print_configuration</name>
        <qualifiedname>Kokkos::print_configuration</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>detail</declname>
        </param>
        <briefdescription>
<para>Print &quot;Bill of Materials&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" line="1107" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" bodystart="1107" bodyend="1133" declfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" declline="193" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8cpp_1a9ec2b443a6fb628152f44396a708bd7e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Kokkos::is_initialized</definition>
        <argsstring>() noexcept</argsstring>
        <name>is_initialized</name>
        <qualifiedname>Kokkos::is_initialized</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" line="1135" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" bodystart="1135" bodyend="1135" declfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" declline="156" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8cpp_1a7126b84ecbe04b088052bd0dde4cb408" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Kokkos::show_warnings</definition>
        <argsstring>() noexcept</argsstring>
        <name>show_warnings</name>
        <qualifiedname>Kokkos::show_warnings</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" line="1137" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" bodystart="1137" bodyend="1137" declfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" declline="158" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8cpp_1a7118bd40db5ac48185c14a7ea8f04bfe" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Kokkos::tune_internals</definition>
        <argsstring>() noexcept</argsstring>
        <name>tune_internals</name>
        <qualifiedname>Kokkos::tune_internals</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" line="1138" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Core.cpp" bodystart="1138" bodyend="1138" declfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" declline="159" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___error_8hpp_1a9a829d9552452337be9928ab1a25d73a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::abort</definition>
        <argsstring>(const char *const message)</argsstring>
        <name>abort</name>
        <qualifiedname>Kokkos::abort</qualifiedname>
        <param>
          <type>const char *const</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_Error.hpp" line="200" column="32" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_Error.hpp" bodystart="200" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___exec_policy_8cpp_1a7e4ea61c9800f1410287290555745640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kokkos_1_1_impl_1_1_per_team_value" kindref="compound">Impl::PerTeamValue</ref></type>
        <definition>Impl::PerTeamValue Kokkos::PerTeam</definition>
        <argsstring>(const int &amp;arg)</argsstring>
        <name>PerTeam</name>
        <qualifiedname>Kokkos::PerTeam</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_ExecPolicy.cpp" line="55" column="20" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_ExecPolicy.cpp" bodystart="55" bodyend="55" declfile="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" declline="473" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___exec_policy_8cpp_1a1dd81978e9059ed3e5fe0a0f44f46fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kokkos_1_1_impl_1_1_per_thread_value" kindref="compound">Impl::PerThreadValue</ref></type>
        <definition>Impl::PerThreadValue Kokkos::PerThread</definition>
        <argsstring>(const int &amp;arg)</argsstring>
        <name>PerThread</name>
        <qualifiedname>Kokkos::PerThread</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_ExecPolicy.cpp" line="57" column="22" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_ExecPolicy.cpp" bodystart="57" bodyend="59" declfile="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" declline="474" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___exec_policy_8cpp_1a2723c2f8bc94dc4a66d916524b52ba70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kokkos::team_policy_check_valid_storage_level_argument</definition>
        <argsstring>(int level)</argsstring>
        <name>team_policy_check_valid_storage_level_argument</name>
        <qualifiedname>Kokkos::team_policy_check_valid_storage_level_argument</qualifiedname>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_ExecPolicy.cpp" line="61" column="6" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_ExecPolicy.cpp" bodystart="61" bodyend="68" declfile="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" declline="513" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1af2621e76c5c2bb8bd49a60540378f751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>typename Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, Member &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::TeamThreadRangeBoundariesStruct&lt; iType, Member &gt; Kokkos::TeamThreadRange</definition>
        <argsstring>(Member const &amp;member, iType count, typename std::enable_if&lt; Impl::is_thread_team_member&lt; Member &gt;::value &gt;::type const **=nullptr)</argsstring>
        <name>TeamThreadRange</name>
        <qualifiedname>Kokkos::TeamThreadRange</qualifiedname>
        <param>
          <type>Member const &amp;</type>
          <declname>member</declname>
        </param>
        <param>
          <type>iType</type>
          <declname>count</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__thread__team__member" kindref="compound">Impl::is_thread_team_member</ref>&lt; Member &gt;::value &gt;::type const **</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="766" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="766" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1ac6f5d2267ce418842d317d5640772449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType1</type>
          </param>
          <param>
            <type>typename iType2</type>
          </param>
          <param>
            <type>typename Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, Member &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::TeamThreadRangeBoundariesStruct&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, Member &gt; Kokkos::TeamThreadRange</definition>
        <argsstring>(Member const &amp;member, iType1 begin, iType2 end, typename std::enable_if&lt; Impl::is_thread_team_member&lt; Member &gt;::value &gt;::type const **=nullptr)</argsstring>
        <name>TeamThreadRange</name>
        <qualifiedname>Kokkos::TeamThreadRange</qualifiedname>
        <param>
          <type>Member const &amp;</type>
          <declname>member</declname>
        </param>
        <param>
          <type>iType1</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>iType2</type>
          <declname>end</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__thread__team__member" kindref="compound">Impl::is_thread_team_member</ref>&lt; Member &gt;::value &gt;::type const **</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="776" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="776" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1af7699c31e545936033116899608dd77b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>typename Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, Member &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::TeamThreadRangeBoundariesStruct&lt; iType, Member &gt; Kokkos::TeamVectorRange</definition>
        <argsstring>(Member const &amp;member, iType count, typename std::enable_if&lt; Impl::is_thread_team_member&lt; Member &gt;::value &gt;::type const **=nullptr)</argsstring>
        <name>TeamVectorRange</name>
        <qualifiedname>Kokkos::TeamVectorRange</qualifiedname>
        <param>
          <type>Member const &amp;</type>
          <declname>member</declname>
        </param>
        <param>
          <type>iType</type>
          <declname>count</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__thread__team__member" kindref="compound">Impl::is_thread_team_member</ref>&lt; Member &gt;::value &gt;::type const **</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="787" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="787" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1a9cd49432ac12b2f96faf691837ddfbdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType1</type>
          </param>
          <param>
            <type>typename iType2</type>
          </param>
          <param>
            <type>typename Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, Member &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::TeamThreadRangeBoundariesStruct&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, Member &gt; Kokkos::TeamVectorRange</definition>
        <argsstring>(Member const &amp;member, iType1 begin, iType2 end, typename std::enable_if&lt; Impl::is_thread_team_member&lt; Member &gt;::value &gt;::type const **=nullptr)</argsstring>
        <name>TeamVectorRange</name>
        <qualifiedname>Kokkos::TeamVectorRange</qualifiedname>
        <param>
          <type>Member const &amp;</type>
          <declname>member</declname>
        </param>
        <param>
          <type>iType1</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>iType2</type>
          <declname>end</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__thread__team__member" kindref="compound">Impl::is_thread_team_member</ref>&lt; Member &gt;::value &gt;::type const **</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="797" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="797" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1a64853c81380d92b541e65e635d291733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>typename Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; iType, Member &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::ThreadVectorRangeBoundariesStruct&lt; iType, Member &gt; Kokkos::ThreadVectorRange</definition>
        <argsstring>(Member const &amp;member, iType count, typename std::enable_if&lt; Impl::is_thread_team_member&lt; Member &gt;::value &gt;::type const **=nullptr)</argsstring>
        <name>ThreadVectorRange</name>
        <qualifiedname>Kokkos::ThreadVectorRange</qualifiedname>
        <param>
          <type>Member const &amp;</type>
          <declname>member</declname>
        </param>
        <param>
          <type>iType</type>
          <declname>count</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__thread__team__member" kindref="compound">Impl::is_thread_team_member</ref>&lt; Member &gt;::value &gt;::type const **</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="808" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="808" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1ad4bb1ec713f80a73f0df6cd8cf3fe3a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType1</type>
          </param>
          <param>
            <type>typename iType2</type>
          </param>
          <param>
            <type>typename Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, Member &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::ThreadVectorRangeBoundariesStruct&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, Member &gt; Kokkos::ThreadVectorRange</definition>
        <argsstring>(Member const &amp;member, iType1 arg_begin, iType2 arg_end, typename std::enable_if&lt; Impl::is_thread_team_member&lt; Member &gt;::value &gt;::type const **=nullptr)</argsstring>
        <name>ThreadVectorRange</name>
        <qualifiedname>Kokkos::ThreadVectorRange</qualifiedname>
        <param>
          <type>Member const &amp;</type>
          <declname>member</declname>
        </param>
        <param>
          <type>iType1</type>
          <declname>arg_begin</declname>
        </param>
        <param>
          <type>iType2</type>
          <declname>arg_end</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__thread__team__member" kindref="compound">Impl::is_thread_team_member</ref>&lt; Member &gt;::value &gt;::type const **</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="818" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="818" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1acfa40297fa001f768b063b1c932d873c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Closure</type>
          </param>
          <param>
            <type>class Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::parallel_for</definition>
        <argsstring>(Impl::TeamThreadRangeBoundariesStruct&lt; iType, Member &gt; const &amp;loop_boundaries, Closure const &amp;closure, typename std::enable_if&lt; Impl::is_host_thread_team_member&lt; Member &gt;::value &gt;::type const **=nullptr)</argsstring>
        <name>parallel_for</name>
        <qualifiedname>Kokkos::parallel_for</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, Member &gt; const &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>Closure const &amp;</type>
          <declname>closure</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__host__thread__team__member" kindref="compound">Impl::is_host_thread_team_member</ref>&lt; Member &gt;::value &gt;::type const **</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Inter-thread parallel_for. </para>
        </briefdescription>
        <detaileddescription>
<para>Executes lambda(iType i) for each i=[0..N)</para>
<para>The range [0..N) is mapped to all threads of the the calling thread team. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="835" column="29" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="835" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1a43872c08c0deb82252da532e17de1fa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Closure</type>
          </param>
          <param>
            <type>class Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::parallel_for</definition>
        <argsstring>(Impl::ThreadVectorRangeBoundariesStruct&lt; iType, Member &gt; const &amp;loop_boundaries, Closure const &amp;closure, typename std::enable_if&lt; Impl::is_host_thread_team_member&lt; Member &gt;::value &gt;::type const **=nullptr)</argsstring>
        <name>parallel_for</name>
        <qualifiedname>Kokkos::parallel_for</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; iType, Member &gt; const &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>Closure const &amp;</type>
          <declname>closure</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__host__thread__team__member" kindref="compound">Impl::is_host_thread_team_member</ref>&lt; Member &gt;::value &gt;::type const **</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="847" column="29" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="847" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1a4a5a385f2f0637f6f336702ae622bccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Closure</type>
          </param>
          <param>
            <type>class Reducer</type>
          </param>
          <param>
            <type>class Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if&lt; <ref refid="struct_kokkos_1_1is__reducer" kindref="compound">Kokkos::is_reducer</ref>&lt; Reducer &gt;::value &amp;&amp;<ref refid="struct_kokkos_1_1_impl_1_1is__host__thread__team__member" kindref="compound">Impl::is_host_thread_team_member</ref>&lt; Member &gt;::value &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if&lt; Kokkos::is_reducer&lt; Reducer &gt;::value &amp;&amp;Impl::is_host_thread_team_member&lt; Member &gt;::value &gt;::type Kokkos::parallel_reduce</definition>
        <argsstring>(Impl::TeamThreadRangeBoundariesStruct&lt; iType, Member &gt; const &amp;loop_boundaries, Closure const &amp;closure, Reducer const &amp;reducer)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, Member &gt; const &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>Closure const &amp;</type>
          <declname>closure</declname>
        </param>
        <param>
          <type>Reducer const &amp;</type>
          <declname>reducer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="868" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="868" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1a8c6f31bdd972064ec2d360073afcbfaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>typename Closure</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if&lt;!<ref refid="struct_kokkos_1_1is__reducer" kindref="compound">Kokkos::is_reducer</ref>&lt; ValueType &gt;::value &amp;&amp;<ref refid="struct_kokkos_1_1_impl_1_1is__host__thread__team__member" kindref="compound">Impl::is_host_thread_team_member</ref>&lt; Member &gt;::value &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if&lt;!Kokkos::is_reducer&lt; ValueType &gt;::value &amp;&amp;Impl::is_host_thread_team_member&lt; Member &gt;::value &gt;::type Kokkos::parallel_reduce</definition>
        <argsstring>(Impl::TeamThreadRangeBoundariesStruct&lt; iType, Member &gt; const &amp;loop_boundaries, Closure const &amp;closure, ValueType &amp;result)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, Member &gt; const &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>Closure const &amp;</type>
          <declname>closure</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="886" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="886" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1ab9ef10f341bcc513a0cc7d4135b9a3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if&lt;!<ref refid="struct_kokkos_1_1is__reducer" kindref="compound">Kokkos::is_reducer</ref>&lt; ValueType &gt;::value &amp;&amp;<ref refid="struct_kokkos_1_1_impl_1_1is__host__thread__team__member" kindref="compound">Impl::is_host_thread_team_member</ref>&lt; Member &gt;::value &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if&lt;!Kokkos::is_reducer&lt; ValueType &gt;::value &amp;&amp;Impl::is_host_thread_team_member&lt; Member &gt;::value &gt;::type Kokkos::parallel_reduce</definition>
        <argsstring>(const Impl::ThreadVectorRangeBoundariesStruct&lt; iType, Member &gt; &amp;loop_boundaries, const Lambda &amp;lambda, ValueType &amp;result)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; iType, Member &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Inter-thread vector parallel_reduce. </para>
        </briefdescription>
        <detaileddescription>
<para>Executes lambda(iType i, ValueType &amp; val) for each i=[0..N)</para>
<para>The range [0..N) is mapped to all threads of the calling thread team and a summation of val is performed and put into result. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="940" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="940" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1a6ee81792ec4b8bcf96157681a06444b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
          <param>
            <type>typename ReducerType</type>
          </param>
          <param>
            <type>typename Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if&lt; <ref refid="struct_kokkos_1_1is__reducer" kindref="compound">Kokkos::is_reducer</ref>&lt; ReducerType &gt;::value &amp;&amp;<ref refid="struct_kokkos_1_1_impl_1_1is__host__thread__team__member" kindref="compound">Impl::is_host_thread_team_member</ref>&lt; Member &gt;::value &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if&lt; Kokkos::is_reducer&lt; ReducerType &gt;::value &amp;&amp;Impl::is_host_thread_team_member&lt; Member &gt;::value &gt;::type Kokkos::parallel_reduce</definition>
        <argsstring>(const Impl::ThreadVectorRangeBoundariesStruct&lt; iType, Member &gt; &amp;loop_boundaries, const Lambda &amp;lambda, const ReducerType &amp;reducer)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; iType, Member &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>const ReducerType &amp;</type>
          <declname>reducer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="954" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="954" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1aa551b959e2483de74b6c2a301efdbe6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Closure</type>
          </param>
          <param>
            <type>class Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__host__thread__team__member" kindref="compound">Impl::is_host_thread_team_member</ref>&lt; Member &gt;::value &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if&lt; Impl::is_host_thread_team_member&lt; Member &gt;::value &gt;::type Kokkos::parallel_scan</definition>
        <argsstring>(Impl::TeamThreadRangeBoundariesStruct&lt; iType, Member &gt; const &amp;loop_boundaries, Closure const &amp;closure)</argsstring>
        <name>parallel_scan</name>
        <qualifiedname>Kokkos::parallel_scan</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, Member &gt; const &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>Closure const &amp;</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="969" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="969" bodyend="992"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1ae40033c75fc6bbc12030fe1aceaad265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class ClosureType</type>
          </param>
          <param>
            <type>class Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__host__thread__team__member" kindref="compound">Impl::is_host_thread_team_member</ref>&lt; Member &gt;::value &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if&lt; Impl::is_host_thread_team_member&lt; Member &gt;::value &gt;::type Kokkos::parallel_scan</definition>
        <argsstring>(Impl::ThreadVectorRangeBoundariesStruct&lt; iType, Member &gt; const &amp;loop_boundaries, ClosureType const &amp;closure)</argsstring>
        <name>parallel_scan</name>
        <qualifiedname>Kokkos::parallel_scan</qualifiedname>
        <param>
          <type><ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; iType, Member &gt; const &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>ClosureType const &amp;</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="997" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="997" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1a0f6bd9614fcf3ff165f791488bb63a59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
          <param>
            <type>typename ReducerType</type>
          </param>
          <param>
            <type>typename Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if&lt; <ref refid="struct_kokkos_1_1is__reducer" kindref="compound">Kokkos::is_reducer</ref>&lt; ReducerType &gt;::value &amp;&amp;<ref refid="struct_kokkos_1_1_impl_1_1is__host__thread__team__member" kindref="compound">Impl::is_host_thread_team_member</ref>&lt; Member &gt;::value &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if&lt; Kokkos::is_reducer&lt; ReducerType &gt;::value &amp;&amp;Impl::is_host_thread_team_member&lt; Member &gt;::value &gt;::type Kokkos::parallel_scan</definition>
        <argsstring>(const Impl::ThreadVectorRangeBoundariesStruct&lt; iType, Member &gt; &amp;loop_boundaries, const Lambda &amp;lambda, const ReducerType &amp;reducer)</argsstring>
        <name>parallel_scan</name>
        <qualifiedname>Kokkos::parallel_scan</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; iType, Member &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>const ReducerType &amp;</type>
          <declname>reducer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="1018" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="1018" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1ae1175dc0b221bab6564631366bb689e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_thread_single_struct" kindref="compound">Impl::ThreadSingleStruct</ref>&lt; Member &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::ThreadSingleStruct&lt; Member &gt; Kokkos::PerTeam</definition>
        <argsstring>(Member const &amp;member, typename std::enable_if&lt; Impl::is_thread_team_member&lt; Member &gt;::value &gt;::type const **=nullptr)</argsstring>
        <name>PerTeam</name>
        <qualifiedname>Kokkos::PerTeam</qualifiedname>
        <param>
          <type>Member const &amp;</type>
          <declname>member</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__thread__team__member" kindref="compound">Impl::is_thread_team_member</ref>&lt; Member &gt;::value &gt;::type const **</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="1036" column="49" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="1036" bodyend="1041"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1abe782583945bcdb3ce23d2862496b1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Member</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_vector_single_struct" kindref="compound">Impl::VectorSingleStruct</ref>&lt; Member &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::VectorSingleStruct&lt; Member &gt; Kokkos::PerThread</definition>
        <argsstring>(Member const &amp;member, typename std::enable_if&lt; Impl::is_thread_team_member&lt; Member &gt;::value &gt;::type const **=nullptr)</argsstring>
        <name>PerThread</name>
        <qualifiedname>Kokkos::PerThread</qualifiedname>
        <param>
          <type>Member const &amp;</type>
          <declname>member</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__thread__team__member" kindref="compound">Impl::is_thread_team_member</ref>&lt; Member &gt;::value &gt;::type const **</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="1044" column="49" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="1044" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1a5bff47b37a01a5f50a6a7149abe942b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Member</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__host__thread__team__member" kindref="compound">Impl::is_host_thread_team_member</ref>&lt; Member &gt;::value &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if&lt; Impl::is_host_thread_team_member&lt; Member &gt;::value &gt;::type Kokkos::single</definition>
        <argsstring>(const Impl::ThreadSingleStruct&lt; Member &gt; &amp;single, const FunctorType &amp;functor)</argsstring>
        <name>single</name>
        <qualifiedname>Kokkos::single</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_thread_single_struct" kindref="compound">Impl::ThreadSingleStruct</ref>&lt; Member &gt; &amp;</type>
          <declname>single</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="1054" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="1054" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1a398e8aae4cc3450f1a2469729a2e29de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Member</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__host__thread__team__member" kindref="compound">Impl::is_host_thread_team_member</ref>&lt; Member &gt;::value &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if&lt; Impl::is_host_thread_team_member&lt; Member &gt;::value &gt;::type Kokkos::single</definition>
        <argsstring>(const Impl::ThreadSingleStruct&lt; Member &gt; &amp;single, const FunctorType &amp;functor, ValueType &amp;val)</argsstring>
        <name>single</name>
        <qualifiedname>Kokkos::single</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_thread_single_struct" kindref="compound">Impl::ThreadSingleStruct</ref>&lt; Member &gt; &amp;</type>
          <declname>single</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="1063" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="1063" bodyend="1066"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1a5c1aa9b2c1661468c0f57c2f429fabe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Member</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__host__thread__team__member" kindref="compound">Impl::is_host_thread_team_member</ref>&lt; Member &gt;::value &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if&lt; Impl::is_host_thread_team_member&lt; Member &gt;::value &gt;::type Kokkos::single</definition>
        <argsstring>(const Impl::VectorSingleStruct&lt; Member &gt; &amp;, const FunctorType &amp;functor)</argsstring>
        <name>single</name>
        <qualifiedname>Kokkos::single</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_vector_single_struct" kindref="compound">Impl::VectorSingleStruct</ref>&lt; Member &gt; &amp;</type>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="1071" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="1071" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___host_thread_team_8hpp_1a51bd625aa4ad3d7513b034e17c233c65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Member</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1is__host__thread__team__member" kindref="compound">Impl::is_host_thread_team_member</ref>&lt; Member &gt;::value &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if&lt; Impl::is_host_thread_team_member&lt; Member &gt;::value &gt;::type Kokkos::single</definition>
        <argsstring>(const Impl::VectorSingleStruct&lt; Member &gt; &amp;, const FunctorType &amp;functor, ValueType &amp;val)</argsstring>
        <name>single</name>
        <qualifiedname>Kokkos::single</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_vector_single_struct" kindref="compound">Impl::VectorSingleStruct</ref>&lt; Member &gt; &amp;</type>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" line="1078" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_HostThreadTeam.hpp" bodystart="1078" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_layout_tiled_8hpp_1af7c21bb527df3049e859aae31366cb8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>OuterP</declname>
            <defname>OuterP</defname>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>InnerP</declname>
            <defname>InnerP</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N0</declname>
            <defname>N0</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N3</declname>
            <defname>N3</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N4</declname>
            <defname>N4</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N5</declname>
            <defname>N5</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N6</declname>
            <defname>N6</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N7</declname>
            <defname>N7</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T[N0][N1], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref> &gt;::type, P... &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; T[N0][N1], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), Kokkos::LayoutLeft, Kokkos::LayoutRight &gt;::type, P... &gt; Kokkos::tile_subview</definition>
        <argsstring>(const Kokkos::View&lt; T **, Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;src, const size_t i_tile0, const size_t i_tile1)</argsstring>
        <name>tile_subview</name>
        <qualifiedname>Kokkos::tile_subview</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T **, <ref refid="struct_kokkos_1_1_experimental_1_1_layout_tiled" kindref="compound">Kokkos::Experimental::LayoutTiled</ref>&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile0</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" line="1252" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" bodystart="1252" bodyend="1269"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_layout_tiled_8hpp_1aac669de629fd10926d4b8a01dbb4b4bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>OuterP</declname>
            <defname>OuterP</defname>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>InnerP</declname>
            <defname>InnerP</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N0</declname>
            <defname>N0</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N3</declname>
            <defname>N3</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N4</declname>
            <defname>N4</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N5</declname>
            <defname>N5</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N6</declname>
            <defname>N6</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N7</declname>
            <defname>N7</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T[N0][N1][N2], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref> &gt;::type, P... &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; T[N0][N1][N2], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), Kokkos::LayoutLeft, Kokkos::LayoutRight &gt;::type, P... &gt; Kokkos::tile_subview</definition>
        <argsstring>(const Kokkos::View&lt; T ***, Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;src, const size_t i_tile0, const size_t i_tile1, const size_t i_tile2)</argsstring>
        <name>tile_subview</name>
        <qualifiedname>Kokkos::tile_subview</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T ***, <ref refid="struct_kokkos_1_1_experimental_1_1_layout_tiled" kindref="compound">Kokkos::Experimental::LayoutTiled</ref>&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile0</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile1</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" line="1280" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" bodystart="1280" bodyend="1297"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_layout_tiled_8hpp_1ab984aecdea95fb414ff5b9b0ffa11cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>OuterP</declname>
            <defname>OuterP</defname>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>InnerP</declname>
            <defname>InnerP</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N0</declname>
            <defname>N0</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N3</declname>
            <defname>N3</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N4</declname>
            <defname>N4</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N5</declname>
            <defname>N5</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N6</declname>
            <defname>N6</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N7</declname>
            <defname>N7</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T[N0][N1][N2][N3], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref> &gt;::type, P... &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; T[N0][N1][N2][N3], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), Kokkos::LayoutLeft, Kokkos::LayoutRight &gt;::type, P... &gt; Kokkos::tile_subview</definition>
        <argsstring>(const Kokkos::View&lt; T ****, Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;src, const size_t i_tile0, const size_t i_tile1, const size_t i_tile2, const size_t i_tile3)</argsstring>
        <name>tile_subview</name>
        <qualifiedname>Kokkos::tile_subview</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T ****, <ref refid="struct_kokkos_1_1_experimental_1_1_layout_tiled" kindref="compound">Kokkos::Experimental::LayoutTiled</ref>&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile0</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile1</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile2</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" line="1308" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" bodystart="1308" bodyend="1326"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_layout_tiled_8hpp_1a65657142d0f983de6c90330efe2f634a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>OuterP</declname>
            <defname>OuterP</defname>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>InnerP</declname>
            <defname>InnerP</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N0</declname>
            <defname>N0</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N3</declname>
            <defname>N3</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N4</declname>
            <defname>N4</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N5</declname>
            <defname>N5</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N6</declname>
            <defname>N6</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N7</declname>
            <defname>N7</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T[N0][N1][N2][N3][N4], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref> &gt;::type, P... &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; T[N0][N1][N2][N3][N4], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), Kokkos::LayoutLeft, Kokkos::LayoutRight &gt;::type, P... &gt; Kokkos::tile_subview</definition>
        <argsstring>(const Kokkos::View&lt; T *****, Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;src, const size_t i_tile0, const size_t i_tile1, const size_t i_tile2, const size_t i_tile3, const size_t i_tile4)</argsstring>
        <name>tile_subview</name>
        <qualifiedname>Kokkos::tile_subview</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T *****, <ref refid="struct_kokkos_1_1_experimental_1_1_layout_tiled" kindref="compound">Kokkos::Experimental::LayoutTiled</ref>&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile0</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile1</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile2</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile3</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" line="1337" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" bodystart="1337" bodyend="1355"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_layout_tiled_8hpp_1a435d09dc15ba92986d335d89742f69c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>OuterP</declname>
            <defname>OuterP</defname>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>InnerP</declname>
            <defname>InnerP</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N0</declname>
            <defname>N0</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N3</declname>
            <defname>N3</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N4</declname>
            <defname>N4</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N5</declname>
            <defname>N5</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N6</declname>
            <defname>N6</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N7</declname>
            <defname>N7</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T[N0][N1][N2][N3][N4][N5], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref> &gt;::type, P... &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; T[N0][N1][N2][N3][N4][N5], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), Kokkos::LayoutLeft, Kokkos::LayoutRight &gt;::type, P... &gt; Kokkos::tile_subview</definition>
        <argsstring>(const Kokkos::View&lt; T ******, Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;src, const size_t i_tile0, const size_t i_tile1, const size_t i_tile2, const size_t i_tile3, const size_t i_tile4, const size_t i_tile5)</argsstring>
        <name>tile_subview</name>
        <qualifiedname>Kokkos::tile_subview</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T ******, <ref refid="struct_kokkos_1_1_experimental_1_1_layout_tiled" kindref="compound">Kokkos::Experimental::LayoutTiled</ref>&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile0</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile1</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile2</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile3</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile4</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" line="1366" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" bodystart="1366" bodyend="1384"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_layout_tiled_8hpp_1a8bd950a54541c48425d180a862c2b6ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>OuterP</declname>
            <defname>OuterP</defname>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>InnerP</declname>
            <defname>InnerP</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N0</declname>
            <defname>N0</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N3</declname>
            <defname>N3</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N4</declname>
            <defname>N4</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N5</declname>
            <defname>N5</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N6</declname>
            <defname>N6</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N7</declname>
            <defname>N7</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T[N0][N1][N2][N3][N4][N5][N6], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref> &gt;::type, P... &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; T[N0][N1][N2][N3][N4][N5][N6], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), Kokkos::LayoutLeft, Kokkos::LayoutRight &gt;::type, P... &gt; Kokkos::tile_subview</definition>
        <argsstring>(const Kokkos::View&lt; T *******, Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;src, const size_t i_tile0, const size_t i_tile1, const size_t i_tile2, const size_t i_tile3, const size_t i_tile4, const size_t i_tile5, const size_t i_tile6)</argsstring>
        <name>tile_subview</name>
        <qualifiedname>Kokkos::tile_subview</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T *******, <ref refid="struct_kokkos_1_1_experimental_1_1_layout_tiled" kindref="compound">Kokkos::Experimental::LayoutTiled</ref>&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile0</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile1</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile2</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile3</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile4</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile5</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" line="1395" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" bodystart="1395" bodyend="1415"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_layout_tiled_8hpp_1affd814535d0f16b83302a94b6368dd45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>OuterP</declname>
            <defname>OuterP</defname>
          </param>
          <param>
            <type>Kokkos::Iterate</type>
            <declname>InnerP</declname>
            <defname>InnerP</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N0</declname>
            <defname>N0</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N3</declname>
            <defname>N3</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N4</declname>
            <defname>N4</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N5</declname>
            <defname>N5</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N6</declname>
            <defname>N6</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N7</declname>
            <defname>N7</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T[N0][N1][N2][N3][N4][N5][N6][N7], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref> &gt;::type, P... &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::View&lt; T[N0][N1][N2][N3][N4][N5][N6][N7], typename std::conditional&lt;(InnerP==Kokkos::Iterate::Left), Kokkos::LayoutLeft, Kokkos::LayoutRight &gt;::type, P... &gt; Kokkos::tile_subview</definition>
        <argsstring>(const Kokkos::View&lt; T ********, Kokkos::Experimental::LayoutTiled&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;src, const size_t i_tile0, const size_t i_tile1, const size_t i_tile2, const size_t i_tile3, const size_t i_tile4, const size_t i_tile5, const size_t i_tile6, const size_t i_tile7)</argsstring>
        <name>tile_subview</name>
        <qualifiedname>Kokkos::tile_subview</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T ********, <ref refid="struct_kokkos_1_1_experimental_1_1_layout_tiled" kindref="compound">Kokkos::Experimental::LayoutTiled</ref>&lt; OuterP, InnerP, N0, N1, N2, N3, N4, N5, N6, N7, true &gt;, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile0</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile1</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile2</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile3</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile4</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile5</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile6</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i_tile7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" line="1426" column="1" bodyfile="src/Kokkos/kokkos/core/src/impl/Kokkos_ViewLayoutTiled.hpp" bodystart="1426" bodyend="1446"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___atomic_8hpp_1a3e8dc34c125f862840c85b3b4569e66c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::atomic_add</definition>
        <argsstring>(volatile T *const dest, const T src)</argsstring>
        <name>atomic_add</name>
        <qualifiedname>Kokkos::atomic_add</qualifiedname>
        <param>
          <type>volatile T *const</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Atomic.hpp" line="198" column="29" declfile="src/Kokkos/kokkos/core/src/Kokkos_Atomic.hpp" declline="198" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___atomic_8hpp_1af519d77e7947d4b159f638f5c7a5b153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::atomic_increment</definition>
        <argsstring>(volatile T *a)</argsstring>
        <name>atomic_increment</name>
        <qualifiedname>Kokkos::atomic_increment</qualifiedname>
        <param>
          <type>volatile T *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Atomic.hpp" line="202" column="29" declfile="src/Kokkos/kokkos/core/src/Kokkos_Atomic.hpp" declline="202" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___atomic_8hpp_1a8b12f4fe2da9ae6e9df935789508d5a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::atomic_decrement</definition>
        <argsstring>(volatile T *a)</argsstring>
        <name>atomic_decrement</name>
        <qualifiedname>Kokkos::atomic_decrement</qualifiedname>
        <param>
          <type>volatile T *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Atomic.hpp" line="205" column="29" declfile="src/Kokkos/kokkos/core/src/Kokkos_Atomic.hpp" declline="205" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___atomic_8hpp_1aebe85080a6a18d72a4066a7e4d5b72ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * Kokkos::atomic_query_version</definition>
        <argsstring>()</argsstring>
        <name>atomic_query_version</name>
        <qualifiedname>Kokkos::atomic_query_version</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Atomic.hpp" line="210" column="19" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Atomic.hpp" bodystart="210" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a3826508699b7c0cbe2d47b912ec210b6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::operator==</definition>
        <argsstring>(complex&lt; RealType1 &gt; const &amp;x, complex&lt; RealType2 &gt; const &amp;y) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::operator==</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary == operator for complex complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="452" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="452" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a827715771773664ea853633da51d433e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Kokkos::operator==</definition>
        <argsstring>(std::complex&lt; RealType1 &gt; const &amp;x, complex&lt; RealType2 &gt; const &amp;y) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::operator==</qualifiedname>
        <param>
          <type>std::complex&lt; RealType1 &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary == operator for std::complex complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="463" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="463" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1aeb2702c7aff3e8cb0b12a6f6905757af" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Kokkos::operator==</definition>
        <argsstring>(complex&lt; RealType1 &gt; const &amp;x, std::complex&lt; RealType2 &gt; const &amp;y) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::operator==</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::complex&lt; RealType2 &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary == operator for complex std::complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="472" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="472" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a6fddec9bb6e440e92b8f8797ee20caf2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; RealType2, RealType1 &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::operator==</definition>
        <argsstring>(complex&lt; RealType1 &gt; const &amp;x, RealType2 const &amp;y) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::operator==</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>RealType2 const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary == operator for complex real. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="485" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="485" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a831f537fe0fb04dd60ade7ea95eb55ef" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; RealType1, RealType2 &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::operator==</definition>
        <argsstring>(RealType1 const &amp;x, complex&lt; RealType2 &gt; const &amp;y) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::operator==</qualifiedname>
        <param>
          <type>RealType1 const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary == operator for real complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="498" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="498" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1aa8973023424488809eb0e7ac732a7ed8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::operator!=</definition>
        <argsstring>(complex&lt; RealType1 &gt; const &amp;x, complex&lt; RealType2 &gt; const &amp;y) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>Kokkos::operator!=</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary != operator for complex complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="507" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="507" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a4d61735a7242e1778471d1fd1cdc0ac7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Kokkos::operator!=</definition>
        <argsstring>(std::complex&lt; RealType1 &gt; const &amp;x, complex&lt; RealType2 &gt; const &amp;y) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>Kokkos::operator!=</qualifiedname>
        <param>
          <type>std::complex&lt; RealType1 &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary != operator for std::complex complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="516" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="516" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a26c71b21159ca10360b72154edfa6243" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Kokkos::operator!=</definition>
        <argsstring>(complex&lt; RealType1 &gt; const &amp;x, std::complex&lt; RealType2 &gt; const &amp;y) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>Kokkos::operator!=</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::complex&lt; RealType2 &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary != operator for complex std::complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="525" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="525" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1aba23a532c70e28e90f655bdff5774590" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; RealType2, RealType1 &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::operator!=</definition>
        <argsstring>(complex&lt; RealType1 &gt; const &amp;x, RealType2 const &amp;y) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>Kokkos::operator!=</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>RealType2 const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary != operator for complex real. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="538" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="538" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1aabdd6fd4ea09551b2217c2986d6b90c9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; RealType1, RealType2 &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::operator!=</definition>
        <argsstring>(RealType1 const &amp;x, complex&lt; RealType2 &gt; const &amp;y) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>Kokkos::operator!=</qualifiedname>
        <param>
          <type>RealType1 const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary != operator for real complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="551" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="551" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a590232195c5a9aab89e4c6c76caa1be0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt; Kokkos::operator+</definition>
        <argsstring>(const complex&lt; RealType1 &gt; &amp;x, const complex&lt; RealType2 &gt; &amp;y) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>Kokkos::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary + operator for complex complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="565" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="565" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1aa2ccfa7e1cb10095f5ef0b23cdefc755" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt; Kokkos::operator+</definition>
        <argsstring>(const complex&lt; RealType1 &gt; &amp;x, const RealType2 &amp;y) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>Kokkos::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const RealType2 &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary + operator for complex scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="575" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="575" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a73d28f0282399e48c32ee28ca363e74d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt; Kokkos::operator+</definition>
        <argsstring>(const RealType1 &amp;x, const complex&lt; RealType2 &gt; &amp;y) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>Kokkos::operator+</qualifiedname>
        <param>
          <type>const RealType1 &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary + operator for scalar complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="584" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="584" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a0bee0deba812a597279ab58d9a0fcc72" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; RealType &gt; Kokkos::operator+</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>Kokkos::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Unary + operator for complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="591" column="32" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="591" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a6baea44241efb1a9d562255e25f03033" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt; Kokkos::operator-</definition>
        <argsstring>(const complex&lt; RealType1 &gt; &amp;x, const complex&lt; RealType2 &gt; &amp;y) noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>Kokkos::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary - operator for complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="600" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="600" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a00fbc6351f6b11029cbed5f5525ae214" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt; Kokkos::operator-</definition>
        <argsstring>(const complex&lt; RealType1 &gt; &amp;x, const RealType2 &amp;y) noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>Kokkos::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const RealType2 &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary - operator for complex scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="610" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="610" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a5fae60ca87e093da8608357ed5b94ba4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt; Kokkos::operator-</definition>
        <argsstring>(const RealType1 &amp;x, const complex&lt; RealType2 &gt; &amp;y) noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>Kokkos::operator-</qualifiedname>
        <param>
          <type>const RealType1 &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary - operator for scalar complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="619" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="619" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a99e19af0a860fd0502c7332a7b3d72d0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; RealType &gt; Kokkos::operator-</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x) noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>Kokkos::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Unary - operator for complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="626" column="32" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="626" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a43419f02c1ca8955835bc9fd5e56cafc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt; Kokkos::operator*</definition>
        <argsstring>(const complex&lt; RealType1 &gt; &amp;x, const complex&lt; RealType2 &gt; &amp;y) noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>Kokkos::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary * operator for complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="635" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="635" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a2d3bc862f28932da9ad34427b21fa855" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt;</type>
        <definition>complex&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt; Kokkos::operator*</definition>
        <argsstring>(const std::complex&lt; RealType1 &gt; &amp;x, const complex&lt; RealType2 &gt; &amp;y)</argsstring>
        <name>operator*</name>
        <qualifiedname>Kokkos::operator*</qualifiedname>
        <param>
          <type>const std::complex&lt; RealType1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary * operator for std::complex and complex. </para>
        </briefdescription>
        <detaileddescription>
<para>This needs to exist because template parameters can&apos;t be deduced when conversions occur. We could probably fix this using hidden friends patterns</para>
<para>This function cannot be called in a CUDA device function, because std::complex&apos;s methods and nonmember functions are not marked as CUDA device functions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="651" column="17" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="651" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ad329f2b0ffb3a21e7ac9ec891a7ea06a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt; Kokkos::operator*</definition>
        <argsstring>(const RealType1 &amp;x, const complex&lt; RealType2 &gt; &amp;y) noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>Kokkos::operator*</qualifiedname>
        <param>
          <type>const RealType1 &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary * operator for RealType times complex. </para>
        </briefdescription>
        <detaileddescription>
<para>This function exists because the compiler doesn&apos;t know that RealType and complex&lt;RealType&gt; commute with respect to operator*. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="665" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="665" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1abc07d0ca5a3e9abb5d6f000f81342e78" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt; Kokkos::operator*</definition>
        <argsstring>(const complex&lt; RealType1 &gt; &amp;y, const RealType2 &amp;x) noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>Kokkos::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const RealType2 &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Binary * operator for RealType times complex. </para>
        </briefdescription>
        <detaileddescription>
<para>This function exists because the compiler doesn&apos;t know that RealType and complex&lt;RealType&gt; commute with respect to operator*. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="677" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="677" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a35059790438a4f3cb8354f97a29a6852" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION RealType</type>
        <definition>KOKKOS_INLINE_FUNCTION RealType Kokkos::imag</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x) noexcept</argsstring>
        <name>imag</name>
        <qualifiedname>Kokkos::imag</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Imaginary part of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="684" column="33" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="684" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ae45e923a596a620090b6cefb425a2318" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ArithmeticType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION constexpr Impl::promote_t&lt; ArithmeticType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr Impl::promote_t&lt; ArithmeticType &gt; Kokkos::imag</definition>
        <argsstring>(ArithmeticType)</argsstring>
        <name>imag</name>
        <qualifiedname>Kokkos::imag</qualifiedname>
        <param>
          <type>ArithmeticType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="689" column="50" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="689" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1affc916abc11416637e6faa66b7750ff0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION RealType</type>
        <definition>KOKKOS_INLINE_FUNCTION RealType Kokkos::real</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x) noexcept</argsstring>
        <name>real</name>
        <qualifiedname>Kokkos::real</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Real part of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="696" column="33" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="696" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a1fc53fea258b41d90fba373416b958df" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ArithmeticType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION constexpr Impl::promote_t&lt; ArithmeticType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr Impl::promote_t&lt; ArithmeticType &gt; Kokkos::real</definition>
        <argsstring>(ArithmeticType x)</argsstring>
        <name>real</name>
        <qualifiedname>Kokkos::real</qualifiedname>
        <param>
          <type>ArithmeticType</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="701" column="50" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="701" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a11893e98e3b3b0f4a695ebbde5df70b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; T &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; T &gt; Kokkos::polar</definition>
        <argsstring>(const T &amp;r, const T &amp;theta=T())</argsstring>
        <name>polar</name>
        <qualifiedname>Kokkos::polar</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>theta</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Constructs a complex number from magnitude and phase angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="708" column="32" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="708" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ad59b5d410594c63cb54647220bbd4491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION RealType</type>
        <definition>KOKKOS_INLINE_FUNCTION RealType Kokkos::abs</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>abs</name>
        <qualifiedname>Kokkos::abs</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Absolute value (magnitude) of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="717" column="33" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="717" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ad160280842243b81ddf7abb05de285f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; T &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; T &gt; Kokkos::pow</definition>
        <argsstring>(const complex&lt; T &gt; &amp;x, const T &amp;y)</argsstring>
        <name>pow</name>
        <qualifiedname>Kokkos::pow</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Power of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="724" column="32" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="724" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1af61823e5393c0138267b5bb83abca8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; T &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; T &gt; Kokkos::pow</definition>
        <argsstring>(const T &amp;x, const complex&lt; T &gt; &amp;y)</argsstring>
        <name>pow</name>
        <qualifiedname>Kokkos::pow</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="733" column="32" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="733" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ac6c85c3d25876735c2db135782345a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; T &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; T &gt; Kokkos::pow</definition>
        <argsstring>(const complex&lt; T &gt; &amp;x, const complex&lt; T &gt; &amp;y)</argsstring>
        <name>pow</name>
        <qualifiedname>Kokkos::pow</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="738" column="32" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="738" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1accee02e210ce43a5fbe9c1825c23f977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; Impl::promote_2_t&lt; T, U &gt; &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; Impl::promote_2_t&lt; T, U &gt; &gt; Kokkos::pow</definition>
        <argsstring>(const T &amp;x, const complex&lt; U &gt; &amp;y)</argsstring>
        <name>pow</name>
        <qualifiedname>Kokkos::pow</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; U &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="747" column="32" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="747" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a32d007f37e1872f0d4e78c95d0d86456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic&lt;U&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; Impl::promote_2_t&lt; T, U &gt; &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; Impl::promote_2_t&lt; T, U &gt; &gt; Kokkos::pow</definition>
        <argsstring>(const complex&lt; T &gt; &amp;x, const U &amp;y)</argsstring>
        <name>pow</name>
        <qualifiedname>Kokkos::pow</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="755" column="32" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="755" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ab0aa63189dd4e98c0325a3988b28e937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; Impl::promote_2_t&lt; T, U &gt; &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; Impl::promote_2_t&lt; T, U &gt; &gt; Kokkos::pow</definition>
        <argsstring>(const complex&lt; T &gt; &amp;x, const complex&lt; U &gt; &amp;y)</argsstring>
        <name>pow</name>
        <qualifiedname>Kokkos::pow</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; U &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="762" column="32" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="762" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1aa93e527a194dbd882ca0bee784993a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::sqrt</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>sqrt</name>
        <qualifiedname>Kokkos::sqrt</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Square root of a complex number. This is intended to match the stdc++ implementation, which returns sqrt(z*z) = z; where z is complex number. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="771" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="771" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ac9211c980d6edc29666708c9cc26d220" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; RealType &gt; Kokkos::conj</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x) noexcept</argsstring>
        <name>conj</name>
        <qualifiedname>Kokkos::conj</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Conjugate of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="793" column="32" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="793" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a30e89150ae09dc014668ae37d9821bb5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ArithmeticType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION constexpr <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; Impl::promote_t&lt; ArithmeticType &gt; &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr complex&lt; Impl::promote_t&lt; ArithmeticType &gt; &gt; Kokkos::conj</definition>
        <argsstring>(ArithmeticType x)</argsstring>
        <name>conj</name>
        <qualifiedname>Kokkos::conj</qualifiedname>
        <param>
          <type>ArithmeticType</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="799" column="42" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="799" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a4789930503ad32ecf559dc716ede33b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; RealType &gt; Kokkos::exp</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>exp</name>
        <qualifiedname>Kokkos::exp</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Exponential of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="807" column="32" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="807" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1af4b905a5fd7953a24bd9213a89df501c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::log</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>log</name>
        <qualifiedname>Kokkos::log</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>natural log of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="816" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="816" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ab5343e70d0833aac6da16a6065080808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::sin</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>sin</name>
        <qualifiedname>Kokkos::sin</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>sine of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="826" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="826" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a76f7e4f9fb064c8400c108826bebfc0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::cos</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>cos</name>
        <qualifiedname>Kokkos::cos</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>cosine of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="838" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="838" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a89200e0e5eafdabe953206f0884e431f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::tan</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>tan</name>
        <qualifiedname>Kokkos::tan</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>tangent of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="850" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="850" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ab0b799203a9b4676156e18b4cc55149d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::sinh</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>sinh</name>
        <qualifiedname>Kokkos::sinh</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>hyperbolic sine of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="857" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="857" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1aa67e7fc4df72e8ad73083214fe90a5b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::cosh</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>cosh</name>
        <qualifiedname>Kokkos::cosh</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>hyperbolic cosine of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="869" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="869" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ab4343d1e79c8817aafff95467332e50a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::tanh</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>tanh</name>
        <qualifiedname>Kokkos::tanh</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>hyperbolic tangent of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="881" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="881" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ad7e3c83e259fce2dce24025f20e6c42e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::asinh</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>asinh</name>
        <qualifiedname>Kokkos::asinh</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>inverse hyperbolic sine of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="888" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="888" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ac47b9db70fe7fe2446873fac207aa374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::acosh</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>acosh</name>
        <qualifiedname>Kokkos::acosh</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>inverse hyperbolic cosine of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="895" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="895" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a3e36885480da5a6f80bcea1b70d40737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::atanh</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>atanh</name>
        <qualifiedname>Kokkos::atanh</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>inverse hyperbolic tangent of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="903" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="903" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a1f7d1f0e850677114a2061efd1ed48d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::asin</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>asin</name>
        <qualifiedname>Kokkos::asin</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>inverse sine of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="924" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="924" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ac1282f483ac1fd2f8f4d0d39cab2c407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::acos</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>acos</name>
        <qualifiedname>Kokkos::acos</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>inverse cosine of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="933" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="933" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ad682ee750a2d84f983618ed4601fb166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">Kokkos::complex</ref>&lt; RealType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::complex&lt; RealType &gt; Kokkos::atan</definition>
        <argsstring>(const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>atan</name>
        <qualifiedname>Kokkos::atan</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>inverse tangent of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="943" column="40" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="943" bodyend="959"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a7deb74d1ea3cdc7f00edc2b511742a89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt;</type>
        <definition>complex&lt; RealType &gt; Kokkos::exp</definition>
        <argsstring>(const std::complex&lt; RealType &gt; &amp;c)</argsstring>
        <name>exp</name>
        <qualifiedname>Kokkos::exp</qualifiedname>
        <param>
          <type>const std::complex&lt; RealType &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function cannot be called in a CUDA device function, because std::complex&apos;s methods and nonmember functions are not marked as CUDA device functions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="965" column="16" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="965" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1ac99dfa55d28a64a168624c4098836b39" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt; Kokkos::operator/</definition>
        <argsstring>(const complex&lt; RealType1 &gt; &amp;x, const RealType2 &amp;y) noexcept(noexcept(RealType1{}/RealType2{}))</argsstring>
        <name>operator/</name>
        <qualifiedname>Kokkos::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const RealType2 &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary operator / for complex and real numbers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="974" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="974" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a05554054c40d390193fa9f391e30fb79" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt; Kokkos::operator/</definition>
        <argsstring>(const complex&lt; RealType1 &gt; &amp;x, const complex&lt; RealType2 &gt; &amp;y) noexcept(noexcept(RealType1{}/RealType2{}))</argsstring>
        <name>operator/</name>
        <qualifiedname>Kokkos::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary operator / for complex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="985" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="985" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1acd619ef64d26d9c56b1a01164e63c4ba" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType1</type>
          </param>
          <param>
            <type>class RealType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION complex&lt; typename std::common_type&lt; RealType1, RealType2 &gt;::type &gt; Kokkos::operator/</definition>
        <argsstring>(const RealType1 &amp;x, const complex&lt; RealType2 &gt; &amp;y) noexcept(noexcept(RealType1{}/RealType2{}))</argsstring>
        <name>operator/</name>
        <qualifiedname>Kokkos::operator/</qualifiedname>
        <param>
          <type>const RealType1 &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Binary operator / for complex and real numbers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="1017" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="1017" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a506b443b53cca4ff52c83cb7a0a8b8f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; Kokkos::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Kokkos::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="1024" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="1024" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___complex_8hpp_1a71eaaa2cbb8e5eb0f3e61d7bb0c6e58f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RealType</type>
          </param>
        </templateparamlist>
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; Kokkos::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, complex&lt; RealType &gt; &amp;x)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>Kokkos::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1complex" kindref="compound">complex</ref>&lt; RealType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" line="1031" column="14" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Complex.hpp" bodystart="1031" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a71e0e7d404eab6519c7725be8dcbe071" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Deep copy a value from Host memory into a view. <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1352" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1352" bodyend="1446"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a9ac95db01aa777ae6d4e339faed9b0a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(typename ViewTraits&lt; ST, SP... &gt;::non_const_value_type &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; ST, SP... &gt;::specialize, void &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::non_const_value_type &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::specialize, void &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Deep copy into a value in Host memory from a view. <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1450" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1450" bodyend="1484"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a81406497650778265eaf4c159b72ab54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename ViewTraits&lt; ST, SP... &gt;::specialize, void &gt;::value &amp;&amp;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==unsigned(0) &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==unsigned(0)))&gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::specialize, void &gt;::value &amp;&amp;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==unsigned(0) &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==unsigned(0)))&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>A deep copy between views of compatible type, and rank zero. <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1489" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1489" bodyend="1535"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a3ba9ffd32090b764a445f5c7ca44d02a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename ViewTraits&lt; ST, SP... &gt;::specialize, void &gt;::value &amp;&amp;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank) !=0||unsigned(ViewTraits&lt; ST, SP... &gt;::rank) !=0))&gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::specialize, void &gt;::value &amp;&amp;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank) !=0||unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank) !=0))&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>A deep copy between views of the default specialization, compatible type, same non-zero rank, same contiguous layout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="1542" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="1542" bodyend="1724"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a6e7e3c0d564096142790ea1fdecde13f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecSpace</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const ExecSpace &amp;space, const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt; Kokkos::is_execution_space&lt; ExecSpace &gt;::value &amp;&amp;std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &amp;&amp;Kokkos::SpaceAccessibility&lt; ExecSpace, typename ViewTraits&lt; DT, DP... &gt;::memory_space &gt;::accessible &gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const ExecSpace &amp;</type>
          <declname>space</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1is__execution__space" kindref="compound">Kokkos::is_execution_space</ref>&lt; ExecSpace &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &amp;&amp;<ref refid="struct_kokkos_1_1_space_accessibility" kindref="compound">Kokkos::SpaceAccessibility</ref>&lt; ExecSpace, typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::memory_space &gt;::accessible &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Deep copy a value from Host memory into a view. ExecSpace can access dst. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2510" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2510" bodyend="2547"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1aae0cf08577f765d0e572341c15c1ea5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecSpace</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const ExecSpace &amp;space, const View&lt; DT, DP... &gt; &amp;dst, typename ViewTraits&lt; DT, DP... &gt;::const_value_type &amp;value, typename std::enable_if&lt; Kokkos::is_execution_space&lt; ExecSpace &gt;::value &amp;&amp;std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &amp;&amp;!Kokkos::SpaceAccessibility&lt; ExecSpace, typename ViewTraits&lt; DT, DP... &gt;::memory_space &gt;::accessible &gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const ExecSpace &amp;</type>
          <declname>space</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::const_value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1is__execution__space" kindref="compound">Kokkos::is_execution_space</ref>&lt; ExecSpace &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &amp;&amp;!<ref refid="struct_kokkos_1_1_space_accessibility" kindref="compound">Kokkos::SpaceAccessibility</ref>&lt; ExecSpace, typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::memory_space &gt;::accessible &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Deep copy a value from Host memory into a view. ExecSpace can not access dst. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2552" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2552" bodyend="2596"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1aa621bbc5331e2520706db616b17b2829" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecSpace</type>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const ExecSpace &amp;exec_space, typename ViewTraits&lt; ST, SP... &gt;::non_const_value_type &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt; Kokkos::is_execution_space&lt; ExecSpace &gt;::value &amp;&amp;std::is_same&lt; typename ViewTraits&lt; ST, SP... &gt;::specialize, void &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const ExecSpace &amp;</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::non_const_value_type &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1is__execution__space" kindref="compound">Kokkos::is_execution_space</ref>&lt; ExecSpace &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::specialize, void &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Deep copy into a value in Host memory from a view. <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2600" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2600" bodyend="2634"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a3abd364df9eab1f29705bdc596b36d89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecSpace</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const ExecSpace &amp;exec_space, const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(Kokkos::is_execution_space&lt; ExecSpace &gt;::value &amp;&amp;std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename ViewTraits&lt; ST, SP... &gt;::specialize, void &gt;::value &amp;&amp;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank)==unsigned(0) &amp;&amp;unsigned(ViewTraits&lt; ST, SP... &gt;::rank)==unsigned(0)))&gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const ExecSpace &amp;</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(<ref refid="struct_kokkos_1_1is__execution__space" kindref="compound">Kokkos::is_execution_space</ref>&lt; ExecSpace &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::specialize, void &gt;::value &amp;&amp;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank)==unsigned(0) &amp;&amp;unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank)==unsigned(0)))&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>A deep copy between views of compatible type, and rank zero. <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2639" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2639" bodyend="2683"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1add3e6ac0bf6daa6a45cd8931eac63c30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecSpace</type>
          </param>
          <param>
            <type>class DT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>DP</declname>
            <defname>DP</defname>
          </param>
          <param>
            <type>class ST</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SP</declname>
            <defname>SP</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::deep_copy</definition>
        <argsstring>(const ExecSpace &amp;exec_space, const View&lt; DT, DP... &gt; &amp;dst, const View&lt; ST, SP... &gt; &amp;src, typename std::enable_if&lt;(Kokkos::is_execution_space&lt; ExecSpace &gt;::value &amp;&amp;std::is_same&lt; typename ViewTraits&lt; DT, DP... &gt;::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename ViewTraits&lt; ST, SP... &gt;::specialize, void &gt;::value &amp;&amp;(unsigned(ViewTraits&lt; DT, DP... &gt;::rank) !=0||unsigned(ViewTraits&lt; ST, SP... &gt;::rank) !=0))&gt;::type *=nullptr)</argsstring>
        <name>deep_copy</name>
        <qualifiedname>Kokkos::deep_copy</qualifiedname>
        <param>
          <type>const ExecSpace &amp;</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; DT, DP... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; ST, SP... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(<ref refid="struct_kokkos_1_1is__execution__space" kindref="compound">Kokkos::is_execution_space</ref>&lt; ExecSpace &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::specialize, void &gt;::value &amp;&amp;(unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; DT, DP... &gt;::rank) !=0||unsigned(<ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; ST, SP... &gt;::rank) !=0))&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>A deep copy between views of the default specialization, compatible type, same non-zero rank. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2690" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2690" bodyend="2876"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1ae6ac858e506acfef7e41a56b1a613a8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; typenameKokkos::View&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref> &gt;::value||std::is_same&lt; typenameKokkos::View&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref> &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_same&lt; typenameKokkos::View&lt; T, P... &gt;::array_layout, Kokkos::LayoutLeft &gt;::value||std::is_same&lt; typenameKokkos::View&lt; T, P... &gt;::array_layout, Kokkos::LayoutRight &gt;::value &gt;::type Kokkos::resize</definition>
        <argsstring>(Kokkos::View&lt; T, P... &gt; &amp;v, const size_t n0=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n1=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n2=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n3=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n4=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n5=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n6=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n7=KOKKOS_IMPL_CTOR_DEFAULT_ARG)</argsstring>
        <name>resize</name>
        <qualifiedname>Kokkos::resize</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n0</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n1</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n2</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n3</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n4</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n5</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n6</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n7</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <briefdescription>
<para>Resize a view with copying old data to new data at the corresponding indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2906" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2906" bodyend="2937"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1ad444531a32e3c3646ceec0ee8db8491e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; typenameKokkos::View&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref> &gt;::value||std::is_same&lt; typenameKokkos::View&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref> &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_same&lt; typenameKokkos::View&lt; T, P... &gt;::array_layout, Kokkos::LayoutLeft &gt;::value||std::is_same&lt; typenameKokkos::View&lt; T, P... &gt;::array_layout, Kokkos::LayoutRight &gt;::value &gt;::type Kokkos::resize</definition>
        <argsstring>(const I &amp;arg_prop, Kokkos::View&lt; T, P... &gt; &amp;v, const size_t n0=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n1=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n2=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n3=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n4=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n5=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n6=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n7=KOKKOS_IMPL_CTOR_DEFAULT_ARG)</argsstring>
        <name>resize</name>
        <qualifiedname>Kokkos::resize</qualifiedname>
        <param>
          <type>const I &amp;</type>
          <declname>arg_prop</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n0</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n1</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n2</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n3</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n4</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n5</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n6</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n7</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <briefdescription>
<para>Resize a view with copying old data to new data at the corresponding indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2947" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2947" bodyend="2982"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a60078802c66390c46d0ab1545114de39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref> &gt;::value||std::is_same&lt; typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref> &gt;::value||std::is_same&lt; typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref> &gt;::value||<ref refid="struct_kokkos_1_1is__layouttiled" kindref="compound">is_layouttiled</ref>&lt; typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::array_layout &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; std::is_same&lt; typename Kokkos::View&lt; T, P... &gt;::array_layout, Kokkos::LayoutLeft &gt;::value|| std::is_same&lt; typename Kokkos::View&lt; T, P... &gt;::array_layout, Kokkos::LayoutRight &gt;::value|| std::is_same&lt; typename Kokkos::View&lt; T, P... &gt;::array_layout, Kokkos::LayoutStride &gt;::value|| is_layouttiled&lt; typename Kokkos::View&lt; T, P... &gt;::array_layout &gt;::value &gt; Kokkos::resize</definition>
        <argsstring>(Kokkos::View&lt; T, P... &gt; &amp;v, const typename Kokkos::View&lt; T, P... &gt;::array_layout &amp;layout)</argsstring>
        <name>resize</name>
        <qualifiedname>Kokkos::resize</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::array_layout &amp;</type>
          <declname>layout</declname>
        </param>
        <briefdescription>
<para>Resize a view with copying old data to new data at the corresponding indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="2995" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="2995" bodyend="3010"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1aaac24bd77885ee54e9a375057c94f390" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; !(std::is_same&lt; typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref> &gt;::value||std::is_same&lt; typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref> &gt;::value||std::is_same&lt; typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref> &gt;::value||<ref refid="struct_kokkos_1_1is__layouttiled" kindref="compound">is_layouttiled</ref>&lt; typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::array_layout &gt;::value)&gt;</type>
        <definition>std::enable_if_t&lt; !(std::is_same&lt; typename Kokkos::View&lt; T, P... &gt;::array_layout, Kokkos::LayoutLeft &gt;::value|| std::is_same&lt; typename Kokkos::View&lt; T, P... &gt;::array_layout, Kokkos::LayoutRight &gt;::value|| std::is_same&lt; typename Kokkos::View&lt; T, P... &gt;::array_layout, Kokkos::LayoutStride &gt;::value|| is_layouttiled&lt; typename Kokkos::View&lt; T, P... &gt;::array_layout &gt;::value)&gt; Kokkos::resize</definition>
        <argsstring>(Kokkos::View&lt; T, P... &gt; &amp;v, const typename Kokkos::View&lt; T, P... &gt;::array_layout &amp;layout)</argsstring>
        <name>resize</name>
        <qualifiedname>Kokkos::resize</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::array_layout &amp;</type>
          <declname>layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3024" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3024" bodyend="3036"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a328961977ebcb51fe6be6bf61cc25cd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; typenameKokkos::View&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref> &gt;::value||std::is_same&lt; typenameKokkos::View&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_right" kindref="compound">Kokkos::LayoutRight</ref> &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_same&lt; typenameKokkos::View&lt; T, P... &gt;::array_layout, Kokkos::LayoutLeft &gt;::value||std::is_same&lt; typenameKokkos::View&lt; T, P... &gt;::array_layout, Kokkos::LayoutRight &gt;::value &gt;::type Kokkos::realloc</definition>
        <argsstring>(Kokkos::View&lt; T, P... &gt; &amp;v, const size_t n0=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n1=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n2=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n3=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n4=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n5=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n6=KOKKOS_IMPL_CTOR_DEFAULT_ARG, const size_t n7=KOKKOS_IMPL_CTOR_DEFAULT_ARG)</argsstring>
        <name>realloc</name>
        <qualifiedname>Kokkos::realloc</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n0</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n1</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n2</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n3</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n4</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n5</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n6</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n7</declname>
          <defval>KOKKOS_IMPL_CTOR_DEFAULT_ARG</defval>
        </param>
        <briefdescription>
<para>Resize a view with discarding old data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3045" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3045" bodyend="3069"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a6a9ad562e7de7d202997c4770841008b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::realloc</definition>
        <argsstring>(Kokkos::View&lt; T, P... &gt; &amp;v, const typename Kokkos::View&lt; T, P... &gt;::array_layout &amp;layout)</argsstring>
        <name>realloc</name>
        <qualifiedname>Kokkos::realloc</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::array_layout &amp;</type>
          <declname>layout</declname>
        </param>
        <briefdescription>
<para>Resize a view with discarding old data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3073" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3073" bodyend="3085"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a8aa70e6497be909d3c8df9f7981d5ce8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::HostMirror</type>
        <definition>Kokkos::View&lt; T, P... &gt;::HostMirror Kokkos::create_mirror</definition>
        <argsstring>(const Kokkos::View&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; T, P... &gt;::specialize, void &gt;::value &amp;&amp;!std::is_same&lt; typename Kokkos::ViewTraits&lt; T, P... &gt;::array_layout, Kokkos::LayoutStride &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>create_mirror</name>
        <qualifiedname>Kokkos::create_mirror</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; T, P... &gt;::specialize, void &gt;::value &amp;&amp;!std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">Kokkos::ViewTraits</ref>&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref> &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3142" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3142" bodyend="3161"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a9e4dbcb16997ef461e66e0e34a9939d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::HostMirror</type>
        <definition>Kokkos::View&lt; T, P... &gt;::HostMirror Kokkos::create_mirror</definition>
        <argsstring>(const Kokkos::View&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; T, P... &gt;::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename Kokkos::ViewTraits&lt; T, P... &gt;::array_layout, Kokkos::LayoutStride &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>create_mirror</name>
        <qualifiedname>Kokkos::create_mirror</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; T, P... &gt;::specialize, void &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">Kokkos::ViewTraits</ref>&lt; T, P... &gt;::array_layout, <ref refid="struct_kokkos_1_1_layout_stride" kindref="compound">Kokkos::LayoutStride</ref> &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3164" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3164" bodyend="3194"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a845d3d06412e2f262050395f4d7ea4a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_type" kindref="compound">Impl::MirrorType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Impl::MirrorType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror</definition>
        <argsstring>(const Space &amp;, const Kokkos::View&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; std::is_same&lt; typename ViewTraits&lt; T, P... &gt;::specialize, void &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>create_mirror</name>
        <qualifiedname>Kokkos::create_mirror</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; T, P... &gt;::specialize, void &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3198" column="39" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3198" bodyend="3205"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1af63f12c24134e05d227a36cc993c084e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::HostMirror</type>
        <definition>Kokkos::View&lt; T, P... &gt;::HostMirror Kokkos::create_mirror_view</definition>
        <argsstring>(const Kokkos::View&lt; T, P... &gt; &amp;src, typename std::enable_if&lt;(std::is_same&lt; typename Kokkos::View&lt; T, P... &gt;::memory_space, typename Kokkos::View&lt; T, P... &gt;::HostMirror::memory_space &gt;::value &amp;&amp;std::is_same&lt; typename Kokkos::View&lt; T, P... &gt;::data_type, typename Kokkos::View&lt; T, P... &gt;::HostMirror::data_type &gt;::value)&gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;(std::is_same&lt; typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::memory_space, typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::HostMirror::memory_space &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::data_type, typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::HostMirror::data_type &gt;::value)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3208" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3208" bodyend="3218"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a8bd4122c5e5de8922150f425a6f4589a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::HostMirror</type>
        <definition>Kokkos::View&lt; T, P... &gt;::HostMirror Kokkos::create_mirror_view</definition>
        <argsstring>(const Kokkos::View&lt; T, P... &gt; &amp;src, typename std::enable_if&lt;!(std::is_same&lt; typename Kokkos::View&lt; T, P... &gt;::memory_space, typename Kokkos::View&lt; T, P... &gt;::HostMirror::memory_space &gt;::value &amp;&amp;std::is_same&lt; typename Kokkos::View&lt; T, P... &gt;::data_type, typename Kokkos::View&lt; T, P... &gt;::HostMirror::data_type &gt;::value)&gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt;!(std::is_same&lt; typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::memory_space, typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::HostMirror::memory_space &gt;::value &amp;&amp;std::is_same&lt; typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::data_type, typename <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt;::HostMirror::data_type &gt;::value)&gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3221" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3221" bodyend="3231"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a16aa3c333b15c258389a121d2b5823ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_view_type" kindref="compound">Impl::MirrorViewType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Impl::MirrorViewType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror_view</definition>
        <argsstring>(const Space &amp;, const Kokkos::View&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; Impl::MirrorViewType&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1_mirror_view_type" kindref="compound">Impl::MirrorViewType</ref>&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3235" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3235" bodyend="3241"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1ad80b2116da2e0ed938ca3e1cd7f086e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_view_type" kindref="compound">Impl::MirrorViewType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Impl::MirrorViewType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror_view</definition>
        <argsstring>(const Space &amp;, const Kokkos::View&lt; T, P... &gt; &amp;src, typename std::enable_if&lt; !Impl::MirrorViewType&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; !<ref refid="struct_kokkos_1_1_impl_1_1_mirror_view_type" kindref="compound">Impl::MirrorViewType</ref>&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3245" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3245" bodyend="3252"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1ae163e10a81c04c7a7213b2f105aaefe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_view_type" kindref="compound">Impl::MirrorViewType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Impl::MirrorViewType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror_view_and_copy</definition>
        <argsstring>(const Space &amp;, const Kokkos::View&lt; T, P... &gt; &amp;src, std::string const &amp;name=&quot;&quot;, typename std::enable_if&lt; Impl::MirrorViewType&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view_and_copy</name>
        <qualifiedname>Kokkos::create_mirror_view_and_copy</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1_mirror_view_type" kindref="compound">Impl::MirrorViewType</ref>&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3258" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3258" bodyend="3268"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1ad743688abf93a92e205228d757af36e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_view_type" kindref="compound">Impl::MirrorViewType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Impl::MirrorViewType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror_view_and_copy</definition>
        <argsstring>(const Space &amp;, const Kokkos::View&lt; T, P... &gt; &amp;src, std::string const &amp;name=&quot;&quot;, typename std::enable_if&lt; !Impl::MirrorViewType&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view_and_copy</name>
        <qualifiedname>Kokkos::create_mirror_view_and_copy</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>typename std::enable_if&lt; !<ref refid="struct_kokkos_1_1_impl_1_1_mirror_view_type" kindref="compound">Impl::MirrorViewType</ref>&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3274" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3274" bodyend="3286"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a97e0bf5e3465bd661f39c71b64ee5227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_view_type" kindref="compound">Impl::MirrorViewType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Impl::MirrorViewType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror_view</definition>
        <argsstring>(const Space &amp;, const Kokkos::View&lt; T, P... &gt; &amp;src, Kokkos::Impl::WithoutInitializing_t, typename std::enable_if&lt; Impl::MirrorViewType&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="struct_kokkos_1_1_impl_1_1_without_initializing__t" kindref="compound">Kokkos::Impl::WithoutInitializing_t</ref></type>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1_impl_1_1_mirror_view_type" kindref="compound">Impl::MirrorViewType</ref>&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3291" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3291" bodyend="3298"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___copy_views_8hpp_1a0b789f27560d248f9772b9a161f21774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_mirror_view_type" kindref="compound">Impl::MirrorViewType</ref>&lt; Space, T, P... &gt;<ref refid="class_kokkos_1_1_view" kindref="compound">::view_type</ref></type>
        <definition>Impl::MirrorViewType&lt; Space, T, P... &gt;::view_type Kokkos::create_mirror_view</definition>
        <argsstring>(const Space &amp;, const Kokkos::View&lt; T, P... &gt; &amp;src, Kokkos::Impl::WithoutInitializing_t, typename std::enable_if&lt; !Impl::MirrorViewType&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *=nullptr)</argsstring>
        <name>create_mirror_view</name>
        <qualifiedname>Kokkos::create_mirror_view</qualifiedname>
        <param>
          <type>const Space &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; T, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="struct_kokkos_1_1_impl_1_1_without_initializing__t" kindref="compound">Kokkos::Impl::WithoutInitializing_t</ref></type>
        </param>
        <param>
          <type>typename std::enable_if&lt; !<ref refid="struct_kokkos_1_1_impl_1_1_mirror_view_type" kindref="compound">Impl::MirrorViewType</ref>&lt; Space, T, P... &gt;::is_same_memspace &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" line="3303" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_CopyViews.hpp" bodystart="3303" bodyend="3311"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8hpp_1a6aa196b9da63b150ba94bbd81a52118f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
            <defval>typename Kokkos::DefaultExecutionSpace::memory_space</defval>
          </param>
        </templateparamlist>
        <type>void *</type>
        <definition>void * Kokkos::kokkos_malloc</definition>
        <argsstring>(const std::string &amp;arg_alloc_label, const size_t arg_alloc_size)</argsstring>
        <name>kokkos_malloc</name>
        <qualifiedname>Kokkos::kokkos_malloc</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg_alloc_label</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_alloc_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" line="207" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" bodystart="207" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8hpp_1a5113abe24ffe0e562f579864aba064f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
            <defval>typename Kokkos::DefaultExecutionSpace::memory_space</defval>
          </param>
        </templateparamlist>
        <type>void *</type>
        <definition>void * Kokkos::kokkos_malloc</definition>
        <argsstring>(const size_t arg_alloc_size)</argsstring>
        <name>kokkos_malloc</name>
        <qualifiedname>Kokkos::kokkos_malloc</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>arg_alloc_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" line="215" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" bodystart="215" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8hpp_1aeb9fa7d9b44e428d1365174a1cb2470c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
            <defval>typename Kokkos::DefaultExecutionSpace::memory_space</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::kokkos_free</definition>
        <argsstring>(void *arg_alloc)</argsstring>
        <name>kokkos_free</name>
        <qualifiedname>Kokkos::kokkos_free</qualifiedname>
        <param>
          <type>void *</type>
          <declname>arg_alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" line="222" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" bodystart="222" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___core_8hpp_1a7dacbfe82166e3430be806d031843af1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Space</type>
            <defval>typename Kokkos::DefaultExecutionSpace::memory_space</defval>
          </param>
        </templateparamlist>
        <type>void *</type>
        <definition>void * Kokkos::kokkos_realloc</definition>
        <argsstring>(void *arg_alloc, const size_t arg_alloc_size)</argsstring>
        <name>kokkos_realloc</name>
        <qualifiedname>Kokkos::kokkos_realloc</qualifiedname>
        <param>
          <type>void *</type>
          <declname>arg_alloc</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>arg_alloc_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" line="229" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Core.hpp" bodystart="229" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___crs_8hpp_1adffe02cb2e5564a073887163dd6d48be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutCounts</type>
          </param>
          <param>
            <type>class DataType</type>
          </param>
          <param>
            <type>class Arg1Type</type>
          </param>
          <param>
            <type>class Arg2Type</type>
          </param>
          <param>
            <type>class SizeType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::get_crs_transpose_counts</definition>
        <argsstring>(OutCounts &amp;out, Crs&lt; DataType, Arg1Type, Arg2Type, SizeType &gt; const &amp;in, std::string const &amp;name=&quot;transpose_counts&quot;)</argsstring>
        <name>get_crs_transpose_counts</name>
        <qualifiedname>Kokkos::get_crs_transpose_counts</qualifiedname>
        <param>
          <type>OutCounts &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1_crs" kindref="compound">Crs</ref>&lt; DataType, Arg1Type, Arg2Type, SizeType &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
          <defval>&quot;transpose_counts&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Crs.hpp" line="283" column="6" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Crs.hpp" bodystart="283" bodyend="289" declfile="src/Kokkos/kokkos/core/src/Kokkos_Crs.hpp" declline="140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___crs_8hpp_1a81f8229555b87451a1090b72a48600f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutCounts</type>
          </param>
          <param>
            <type>class InCrs</type>
          </param>
        </templateparamlist>
        <type>OutCounts::value_type</type>
        <definition>OutCounts::value_type Kokkos::get_crs_row_map_from_counts</definition>
        <argsstring>(OutCounts &amp;out, InCrs const &amp;in, std::string const &amp;name=&quot;row_map&quot;)</argsstring>
        <name>get_crs_row_map_from_counts</name>
        <qualifiedname>Kokkos::get_crs_row_map_from_counts</qualifiedname>
        <param>
          <type>OutCounts &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>InCrs const &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
          <defval>&quot;row_map&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Crs.hpp" line="145" column="32" declfile="src/Kokkos/kokkos/core/src/Kokkos_Crs.hpp" declline="145" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___crs_8hpp_1ae0050187c4c0a2f3b6e4c9f341ef1e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DataType</type>
          </param>
          <param>
            <type>class Arg1Type</type>
          </param>
          <param>
            <type>class Arg2Type</type>
          </param>
          <param>
            <type>class SizeType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::transpose_crs</definition>
        <argsstring>(Crs&lt; DataType, Arg1Type, Arg2Type, SizeType &gt; &amp;out, Crs&lt; DataType, Arg1Type, Arg2Type, SizeType &gt; const &amp;in)</argsstring>
        <name>transpose_crs</name>
        <qualifiedname>Kokkos::transpose_crs</qualifiedname>
        <param>
          <type><ref refid="class_kokkos_1_1_crs" kindref="compound">Crs</ref>&lt; DataType, Arg1Type, Arg2Type, SizeType &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="class_kokkos_1_1_crs" kindref="compound">Crs</ref>&lt; DataType, Arg1Type, Arg2Type, SizeType &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Crs.hpp" line="300" column="6" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Crs.hpp" bodystart="300" bodyend="314" declfile="src/Kokkos/kokkos/core/src/Kokkos_Crs.hpp" declline="149" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___crs_8hpp_1a3546c753edf21e01c82e87c39ada4130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutRowMap</type>
          </param>
          <param>
            <type>class InCounts</type>
          </param>
        </templateparamlist>
        <type>OutRowMap::value_type</type>
        <definition>OutRowMap::value_type Kokkos::get_crs_row_map_from_counts</definition>
        <argsstring>(OutRowMap &amp;out, InCounts const &amp;in, std::string const &amp;name)</argsstring>
        <name>get_crs_row_map_from_counts</name>
        <qualifiedname>Kokkos::get_crs_row_map_from_counts</qualifiedname>
        <param>
          <type>OutRowMap &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>InCounts const &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Crs.hpp" line="292" column="32" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Crs.hpp" bodystart="292" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___crs_8hpp_1a88532694354e68d447ce4ac156a9925e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CrsType</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::count_and_fill_crs</definition>
        <argsstring>(CrsType &amp;crs, typename CrsType::size_type nrows, Functor const &amp;f)</argsstring>
        <name>count_and_fill_crs</name>
        <qualifiedname>Kokkos::count_and_fill_crs</qualifiedname>
        <param>
          <type>CrsType &amp;</type>
          <declname>crs</declname>
        </param>
        <param>
          <type>typename CrsType::size_type</type>
          <declname>nrows</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Crs.hpp" line="422" column="6" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Crs.hpp" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___exec_policy_8hpp_1a5351dfab502a0102e02c2719cd1cdd11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class TeamMemberType</type>
          </param>
          <param>
            <type>class _never_use_this_overload</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION_DELETED <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, TeamMemberType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION_DELETED Impl::TeamThreadRangeBoundariesStruct&lt; iType, TeamMemberType &gt; Kokkos::TeamThreadRange</definition>
        <argsstring>(const TeamMemberType &amp;, const iType &amp;count)=delete</argsstring>
        <name>TeamThreadRange</name>
        <qualifiedname>Kokkos::TeamThreadRange</qualifiedname>
        <param>
          <type>const TeamMemberType &amp;</type>
        </param>
        <param>
          <type>const iType &amp;</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Execution policy for parallel work over a threads within a team. </para>
        </briefdescription>
        <detaileddescription>
<para>The range is split over all threads in a team. The Mapping scheme depends on the architecture. This policy is used together with a parallel pattern as a nested layer within a kernel launched with the <ref refid="class_kokkos_1_1_team_policy" kindref="compound">TeamPolicy</ref>. This variant expects a single count. So the range is (0,count]. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" line="804" column="5" declfile="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" declline="804" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___exec_policy_8hpp_1a5a27a38a6c6b86563f647ff713f71a1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType1</type>
          </param>
          <param>
            <type>typename iType2</type>
          </param>
          <param>
            <type>class TeamMemberType</type>
          </param>
          <param>
            <type>class _never_use_this_overload</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION_DELETED <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, TeamMemberType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION_DELETED Impl::TeamThreadRangeBoundariesStruct&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, TeamMemberType &gt; Kokkos::TeamThreadRange</definition>
        <argsstring>(const TeamMemberType &amp;, const iType1 &amp;begin, const iType2 &amp;end)=delete</argsstring>
        <name>TeamThreadRange</name>
        <qualifiedname>Kokkos::TeamThreadRange</qualifiedname>
        <param>
          <type>const TeamMemberType &amp;</type>
        </param>
        <param>
          <type>const iType1 &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const iType2 &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Execution policy for parallel work over a threads within a team. </para>
        </briefdescription>
        <detaileddescription>
<para>The range is split over all threads in a team. The Mapping scheme depends on the architecture. This policy is used together with a parallel pattern as a nested layer within a kernel launched with the <ref refid="class_kokkos_1_1_team_policy" kindref="compound">TeamPolicy</ref>. This variant expects a begin and end. So the range is (begin,end]. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" line="817" column="1" declfile="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" declline="817" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___exec_policy_8hpp_1acd35acf9fb7136d4dbfed38636a5ed3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class TeamMemberType</type>
          </param>
          <param>
            <type>class _never_use_this_overload</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION_DELETED <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, TeamMemberType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION_DELETED Impl::TeamThreadRangeBoundariesStruct&lt; iType, TeamMemberType &gt; Kokkos::TeamVectorRange</definition>
        <argsstring>(const TeamMemberType &amp;, const iType &amp;count)=delete</argsstring>
        <name>TeamVectorRange</name>
        <qualifiedname>Kokkos::TeamVectorRange</qualifiedname>
        <param>
          <type>const TeamMemberType &amp;</type>
        </param>
        <param>
          <type>const iType &amp;</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Execution policy for parallel work over a threads within a team. </para>
        </briefdescription>
        <detaileddescription>
<para>The range is split over all threads in a team. The Mapping scheme depends on the architecture. This policy is used together with a parallel pattern as a nested layer within a kernel launched with the <ref refid="class_kokkos_1_1_team_policy" kindref="compound">TeamPolicy</ref>. This variant expects a single count. So the range is (0,count]. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" line="830" column="5" declfile="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" declline="830" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___exec_policy_8hpp_1aba71731b651399eacee7bc33861e3321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType1</type>
          </param>
          <param>
            <type>typename iType2</type>
          </param>
          <param>
            <type>class TeamMemberType</type>
          </param>
          <param>
            <type>class _never_use_this_overload</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION_DELETED <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, TeamMemberType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION_DELETED Impl::TeamThreadRangeBoundariesStruct&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, TeamMemberType &gt; Kokkos::TeamVectorRange</definition>
        <argsstring>(const TeamMemberType &amp;, const iType1 &amp;begin, const iType2 &amp;end)=delete</argsstring>
        <name>TeamVectorRange</name>
        <qualifiedname>Kokkos::TeamVectorRange</qualifiedname>
        <param>
          <type>const TeamMemberType &amp;</type>
        </param>
        <param>
          <type>const iType1 &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const iType2 &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Execution policy for parallel work over a threads within a team. </para>
        </briefdescription>
        <detaileddescription>
<para>The range is split over all threads in a team. The Mapping scheme depends on the architecture. This policy is used together with a parallel pattern as a nested layer within a kernel launched with the <ref refid="class_kokkos_1_1_team_policy" kindref="compound">TeamPolicy</ref>. This variant expects a begin and end. So the range is (begin,end]. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" line="843" column="1" declfile="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" declline="843" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___exec_policy_8hpp_1a2af1aa8a392bca4a4e82c7c749199a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class TeamMemberType</type>
          </param>
          <param>
            <type>class _never_use_this_overload</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION_DELETED <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; iType, TeamMemberType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION_DELETED Impl::ThreadVectorRangeBoundariesStruct&lt; iType, TeamMemberType &gt; Kokkos::ThreadVectorRange</definition>
        <argsstring>(const TeamMemberType &amp;, const iType &amp;count)=delete</argsstring>
        <name>ThreadVectorRange</name>
        <qualifiedname>Kokkos::ThreadVectorRange</qualifiedname>
        <param>
          <type>const TeamMemberType &amp;</type>
        </param>
        <param>
          <type>const iType &amp;</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Execution policy for a vector parallel loop. </para>
        </briefdescription>
        <detaileddescription>
<para>The range is split over all vector lanes in a thread. The Mapping scheme depends on the architecture. This policy is used together with a parallel pattern as a nested layer within a kernel launched with the <ref refid="class_kokkos_1_1_team_policy" kindref="compound">TeamPolicy</ref>. This variant expects a single count. So the range is (0,count]. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" line="856" column="5" declfile="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" declline="856" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___exec_policy_8hpp_1ae1ebccf5c518335191c113307e845547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType1</type>
          </param>
          <param>
            <type>typename iType2</type>
          </param>
          <param>
            <type>class TeamMemberType</type>
          </param>
          <param>
            <type>class _never_use_this_overload</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION_DELETED <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, TeamMemberType &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION_DELETED Impl::ThreadVectorRangeBoundariesStruct&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, TeamMemberType &gt; Kokkos::ThreadVectorRange</definition>
        <argsstring>(const TeamMemberType &amp;, const iType1 &amp;arg_begin, const iType2 &amp;arg_end)=delete</argsstring>
        <name>ThreadVectorRange</name>
        <qualifiedname>Kokkos::ThreadVectorRange</qualifiedname>
        <param>
          <type>const TeamMemberType &amp;</type>
        </param>
        <param>
          <type>const iType1 &amp;</type>
          <declname>arg_begin</declname>
        </param>
        <param>
          <type>const iType2 &amp;</type>
          <declname>arg_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" line="862" column="1" declfile="src/Kokkos/kokkos/core/src/Kokkos_ExecPolicy.hpp" declline="862" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1a66ef606719207045358dfff5cf450cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION bool</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION bool Kokkos::operator==</definition>
        <argsstring>(const pair&lt; T1, T2 &gt; &amp;lhs, const pair&lt; T1, T2 &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::operator==</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Equality operator for <ref refid="struct_kokkos_1_1pair" kindref="compound">Kokkos::pair</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="329" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1a2bee06a0561eea45f653b5c0e500978a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr bool</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr bool Kokkos::operator!=</definition>
        <argsstring>(const pair&lt; T1, T2 &gt; &amp;lhs, const pair&lt; T1, T2 &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>Kokkos::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Inequality operator for <ref refid="struct_kokkos_1_1pair" kindref="compound">Kokkos::pair</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="336" column="44" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1a7fb4fd5ddb3b8cde7e84dd9e6deec190" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr bool</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr bool Kokkos::operator&lt;</definition>
        <argsstring>(const pair&lt; T1, T2 &gt; &amp;lhs, const pair&lt; T1, T2 &gt; &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>Kokkos::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Less-than operator for <ref refid="struct_kokkos_1_1pair" kindref="compound">Kokkos::pair</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="343" column="39" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="343" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1a85dadcbefc2cb683e85f5971713e0203" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr bool</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr bool Kokkos::operator&lt;=</definition>
        <argsstring>(const pair&lt; T1, T2 &gt; &amp;lhs, const pair&lt; T1, T2 &gt; &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>Kokkos::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Less-than-or-equal-to operator for <ref refid="struct_kokkos_1_1pair" kindref="compound">Kokkos::pair</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="351" column="39" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1ae4098b3d57e1db7577257e47591a941f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr bool</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr bool Kokkos::operator&gt;</definition>
        <argsstring>(const pair&lt; T1, T2 &gt; &amp;lhs, const pair&lt; T1, T2 &gt; &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>Kokkos::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Greater-than operator for <ref refid="struct_kokkos_1_1pair" kindref="compound">Kokkos::pair</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="358" column="44" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1aceb9e36e0482f209a68f8315b91073a8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr bool</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr bool Kokkos::operator&gt;=</definition>
        <argsstring>(const pair&lt; T1, T2 &gt; &amp;lhs, const pair&lt; T1, T2 &gt; &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>Kokkos::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Greater-than-or-equal-to operator for <ref refid="struct_kokkos_1_1pair" kindref="compound">Kokkos::pair</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="365" column="44" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1a2cd4d14a24595815c7b26e3e70eacdae" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, T2 &gt;</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr pair&lt; T1, T2 &gt; Kokkos::make_pair</definition>
        <argsstring>(T1 x, T2 y)</argsstring>
        <name>make_pair</name>
        <qualifiedname>Kokkos::make_pair</qualifiedname>
        <param>
          <type>T1</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return a new pair. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a &quot;nonmember constructor&quot; for <ref refid="struct_kokkos_1_1pair" kindref="compound">Kokkos::pair</ref>. It works just like std::make_pair. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="375" column="44" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="375" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1a2277cb32c7bf69d8f4384c7c8b965b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1 &amp;, T2 &amp; &gt;</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION pair&lt; T1 &amp;, T2 &amp; &gt; Kokkos::tie</definition>
        <argsstring>(T1 &amp;x, T2 &amp;y)</argsstring>
        <name>tie</name>
        <qualifiedname>Kokkos::tie</qualifiedname>
        <param>
          <type>T1 &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2 &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return a pair of references to the input arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>This compares to std::tie (new in C++11). You can use it to assign to two variables at once, from the result of a function that returns a pair. For example (<computeroutput><bold>device</bold></computeroutput> and <computeroutput><bold>host</bold></computeroutput> attributes omitted for brevity): <programlisting><codeline><highlight class="comment">//<sp/>Declaration<sp/>of<sp/>the<sp/>function<sp/>to<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>First<sp/>return<sp/>value:<sp/>operation<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Second<sp/>return<sp/>value:<sp/>whether<sp/>all<sp/>operations<sp/>succeeded.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_kokkos_1_1pair" kindref="compound">Kokkos::pair&lt;int, bool&gt;</ref><sp/>someFunction<sp/>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Code<sp/>that<sp/>uses<sp/>Kokkos::tie.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myFunction<sp/>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>assigns<sp/>to<sp/>both<sp/>count<sp/>and<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="_kokkos___pair_8hpp_1a2277cb32c7bf69d8f4384c7c8b965b84" kindref="member">Kokkos::tie</ref><sp/>(count,<sp/>success)<sp/>=<sp/>someFunction<sp/>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>success)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Some<sp/>operation<sp/>failed;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>take<sp/>corrective<sp/>action<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The line that uses <ref refid="_kokkos___pair_8hpp_1a2277cb32c7bf69d8f4384c7c8b965b84" kindref="member">tie()</ref> could have been written like this: <programlisting><codeline><highlight class="normal"><ref refid="struct_kokkos_1_1pair" kindref="compound">Kokkos::pair&lt;int, bool&gt;</ref><sp/>result<sp/>=<sp/>someFunction<sp/>();</highlight></codeline>
<codeline><highlight class="normal">count<sp/>=<sp/>result.<ref refid="struct_kokkos_1_1pair_1a0e373ffe96458360bf3703301efeb140" kindref="member">first</ref>;</highlight></codeline>
<codeline><highlight class="normal">success<sp/>=<sp/>result.<ref refid="struct_kokkos_1_1pair_1ad083c7edc8cef6a6bcc461b8478ca034" kindref="member">second</ref>;</highlight></codeline>
</programlisting></para>
<para>Using <ref refid="_kokkos___pair_8hpp_1a2277cb32c7bf69d8f4384c7c8b965b84" kindref="member">tie()</ref> saves two lines of code and avoids a copy of each element of the pair. The latter could be significant if one or both elements of the pair are more substantial objects than <computeroutput>int</computeroutput> or <computeroutput>bool</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="419" column="34" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="419" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1ab0f8de9655aa577b18b8f18424a2afe3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr bool</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr bool Kokkos::operator==</definition>
        <argsstring>(const pair&lt; T1, void &gt; &amp;lhs, const pair&lt; T1, void &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::operator==</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, void &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, void &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="459" column="44" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="459" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1a74841c4e3d6f83effbb3b6f1b1554dbe" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr bool</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr bool Kokkos::operator!=</definition>
        <argsstring>(const pair&lt; T1, void &gt; &amp;lhs, const pair&lt; T1, void &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>Kokkos::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, void &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, void &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="465" column="44" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="465" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1a246165b18113730253325f2d83acabf8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr bool</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr bool Kokkos::operator&lt;</definition>
        <argsstring>(const pair&lt; T1, void &gt; &amp;lhs, const pair&lt; T1, void &gt; &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>Kokkos::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, void &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, void &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="471" column="39" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1a0e1ae9218352d47dfdcdd282345ffa00" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr bool</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr bool Kokkos::operator&lt;=</definition>
        <argsstring>(const pair&lt; T1, void &gt; &amp;lhs, const pair&lt; T1, void &gt; &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>Kokkos::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, void &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, void &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="477" column="39" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="477" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1ad0c573654fd20c3831a58c009a0a8723" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr bool</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr bool Kokkos::operator&gt;</definition>
        <argsstring>(const pair&lt; T1, void &gt; &amp;lhs, const pair&lt; T1, void &gt; &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>Kokkos::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, void &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, void &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="483" column="44" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="483" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___pair_8hpp_1a61243ebda7080412907e0b83d36f91dc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FORCEINLINE_FUNCTION constexpr bool</type>
        <definition>KOKKOS_FORCEINLINE_FUNCTION constexpr bool Kokkos::operator&gt;=</definition>
        <argsstring>(const pair&lt; T1, void &gt; &amp;lhs, const pair&lt; T1, void &gt; &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>Kokkos::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, void &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_kokkos_1_1pair" kindref="compound">pair</ref>&lt; T1, void &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" line="489" column="44" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Pair.hpp" bodystart="489" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel_8hpp_1a15f669d7c1353d7ce45b102a5613a8e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecPolicy</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_for</definition>
        <argsstring>(const ExecPolicy &amp;policy, const FunctorType &amp;functor, const std::string &amp;str=&quot;&quot;, typename std::enable_if&lt; Kokkos::is_execution_policy&lt; ExecPolicy &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>parallel_for</name>
        <qualifiedname>Kokkos::parallel_for</qualifiedname>
        <param>
          <type>const ExecPolicy &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1is__execution__policy" kindref="compound">Kokkos::is_execution_policy</ref>&lt; ExecPolicy &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Execute <computeroutput>functor</computeroutput> in parallel according to the execution <computeroutput>policy</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>A &quot;functor&quot; is a class containing the function to execute in parallel, data needed for that execution, and an optional <computeroutput>execution_space</computeroutput> alias. Here is an example functor for parallel_for:</para>
<para><programlisting><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">FunctorType<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">execution_space<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()<sp/>(<sp/>WorkType<sp/>iwork<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>In the above example, <computeroutput>WorkType</computeroutput> is any integer type for which a valid conversion from <computeroutput>size_t</computeroutput> to <computeroutput>IntType</computeroutput> exists. Its <computeroutput>operator()</computeroutput> method defines the operation to parallelize, over the range of integer indices <computeroutput>iwork=[0,work_count-1]</computeroutput>. This compares to a single iteration <computeroutput>iwork</computeroutput> of a <computeroutput>for</computeroutput> loop. If <computeroutput>execution_space</computeroutput> is not defined DefaultExecutionSpace will be used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" line="128" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" bodystart="128" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel_8hpp_1a27517779657fc26b308b54d99a65dd6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_for</definition>
        <argsstring>(const size_t work_count, const FunctorType &amp;functor, const std::string &amp;str=&quot;&quot;)</argsstring>
        <name>parallel_for</name>
        <qualifiedname>Kokkos::parallel_for</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>work_count</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" line="148" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" bodystart="148" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel_8hpp_1a33f047faff9177a00640f80d032a36fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecPolicy</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_for</definition>
        <argsstring>(const std::string &amp;str, const ExecPolicy &amp;policy, const FunctorType &amp;functor)</argsstring>
        <name>parallel_for</name>
        <qualifiedname>Kokkos::parallel_for</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const ExecPolicy &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" line="171" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel_8hpp_1aa577a7a1d9d5f52a1dc22ef1bef328cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecutionPolicy</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_scan</definition>
        <argsstring>(const ExecutionPolicy &amp;policy, const FunctorType &amp;functor, const std::string &amp;str=&quot;&quot;, typename std::enable_if&lt; Kokkos::is_execution_policy&lt; ExecutionPolicy &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>parallel_scan</name>
        <qualifiedname>Kokkos::parallel_scan</qualifiedname>
        <param>
          <type>const ExecutionPolicy &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1is__execution__policy" kindref="compound">Kokkos::is_execution_policy</ref>&lt; ExecutionPolicy &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" line="350" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" bodystart="350" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel_8hpp_1af57ef7ec9ca45d556399569b31c6f828" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_scan</definition>
        <argsstring>(const size_t work_count, const FunctorType &amp;functor, const std::string &amp;str=&quot;&quot;)</argsstring>
        <name>parallel_scan</name>
        <qualifiedname>Kokkos::parallel_scan</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>work_count</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" line="370" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" bodystart="370" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel_8hpp_1a55617a5e27394ad2af47a7d3f4083788" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecutionPolicy</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_scan</definition>
        <argsstring>(const std::string &amp;str, const ExecutionPolicy &amp;policy, const FunctorType &amp;functor)</argsstring>
        <name>parallel_scan</name>
        <qualifiedname>Kokkos::parallel_scan</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const ExecutionPolicy &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" line="392" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" bodystart="392" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel_8hpp_1ae92e762cdd9abc86e0e00124e1ab78c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecutionPolicy</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>class ReturnType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_scan</definition>
        <argsstring>(const ExecutionPolicy &amp;policy, const FunctorType &amp;functor, ReturnType &amp;return_value, const std::string &amp;str=&quot;&quot;, typename std::enable_if&lt; Kokkos::is_execution_policy&lt; ExecutionPolicy &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>parallel_scan</name>
        <qualifiedname>Kokkos::parallel_scan</qualifiedname>
        <param>
          <type>const ExecutionPolicy &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>ReturnType &amp;</type>
          <declname>return_value</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1is__execution__policy" kindref="compound">Kokkos::is_execution_policy</ref>&lt; ExecutionPolicy &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" line="398" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" bodystart="398" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel_8hpp_1aa2bb6549c2b7ba1f05bd97695ebaffd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>class ReturnType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_scan</definition>
        <argsstring>(const size_t work_count, const FunctorType &amp;functor, ReturnType &amp;return_value, const std::string &amp;str=&quot;&quot;)</argsstring>
        <name>parallel_scan</name>
        <qualifiedname>Kokkos::parallel_scan</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>work_count</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>ReturnType &amp;</type>
          <declname>return_value</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" line="421" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" bodystart="421" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel_8hpp_1afb926dc1d3184d15abbf69e3fb0665fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecutionPolicy</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>class ReturnType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_scan</definition>
        <argsstring>(const std::string &amp;str, const ExecutionPolicy &amp;policy, const FunctorType &amp;functor, ReturnType &amp;return_value)</argsstring>
        <name>parallel_scan</name>
        <qualifiedname>Kokkos::parallel_scan</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const ExecutionPolicy &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>ReturnType &amp;</type>
          <declname>return_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" line="449" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel.hpp" bodystart="449" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel___reduce_8hpp_1afea3be80c241245f0babc02a68dcf451" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolicyType</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>class ReturnType</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="struct_kokkos_1_1is__execution__policy" kindref="compound">Kokkos::is_execution_policy</ref>&lt; PolicyType &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; Kokkos::is_execution_policy&lt; PolicyType &gt;::value &gt;::type Kokkos::parallel_reduce</definition>
        <argsstring>(const std::string &amp;label, const PolicyType &amp;policy, const FunctorType &amp;functor, ReturnType &amp;return_value)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const PolicyType &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>ReturnType &amp;</type>
          <declname>return_value</declname>
        </param>
        <briefdescription>
<para>Parallel reduction. </para>
        </briefdescription>
        <detaileddescription>
<para>parallel_reduce performs parallel reductions with arbitrary functions - i.e. it is not solely data based. The call expects up to 4 arguments:</para>
<para>Example of a parallel_reduce functor for a POD (plain old data) value type: <programlisting><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">FunctorType<sp/>{<sp/></highlight><highlight class="comment">//<sp/>For<sp/>POD<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">execution_space<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/>&lt;podType&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<sp/>&lt;intType&gt;<sp/>iwork<sp/>,<sp/>&lt;podType&gt;<sp/>&amp;<sp/><ref refid="structupdate" kindref="compound">update</ref><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(<sp/>&lt;podType&gt;<sp/>&amp;<sp/><ref refid="structupdate" kindref="compound">update</ref><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>join(<sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;podType&gt;<sp/>&amp;<sp/><ref refid="structupdate" kindref="compound">update</ref><sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>const<sp/>&lt;podType&gt;<sp/>&amp;<sp/>input<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">(<sp/>&lt;podType&gt;<sp/>&amp;<sp/><ref refid="structupdate" kindref="compound">update</ref><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>Example of a parallel_reduce functor for an array of POD (plain old data) values: <programlisting><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">FunctorType<sp/>{<sp/></highlight><highlight class="comment">//<sp/>For<sp/>array<sp/>of<sp/>POD<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">execution_space<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/>&lt;podType&gt;[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<sp/>&lt;intType&gt;<sp/>,<sp/>&lt;podType&gt;<sp/><ref refid="structupdate" kindref="compound">update</ref>[]<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(<sp/>&lt;podType&gt;<sp/><ref refid="structupdate" kindref="compound">update</ref>[]<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>join(<sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;podType&gt;<sp/><ref refid="structupdate" kindref="compound">update</ref>[]<sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>const<sp/>&lt;podType&gt;<sp/>input[]<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">(<sp/>&lt;podType&gt;<sp/><ref refid="structupdate" kindref="compound">update</ref>[]<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" line="1004" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" bodystart="1004" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel___reduce_8hpp_1a3a6a84fe19bcc1cdbb5ef15500fb7beb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolicyType</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>class ReturnType</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="struct_kokkos_1_1is__execution__policy" kindref="compound">Kokkos::is_execution_policy</ref>&lt; PolicyType &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; Kokkos::is_execution_policy&lt; PolicyType &gt;::value &gt;::type Kokkos::parallel_reduce</definition>
        <argsstring>(const PolicyType &amp;policy, const FunctorType &amp;functor, ReturnType &amp;return_value)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const PolicyType &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>ReturnType &amp;</type>
          <declname>return_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" line="1018" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" bodystart="1018" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel___reduce_8hpp_1a07fd837a54687cac47be2d76c6eac778" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>class ReturnType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_reduce</definition>
        <argsstring>(const size_t &amp;policy, const FunctorType &amp;functor, ReturnType &amp;return_value)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const size_t &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>ReturnType &amp;</type>
          <declname>return_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" line="1030" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" bodystart="1030" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel___reduce_8hpp_1a1a36af3073f8e296ceac5412da16c62b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>class ReturnType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_reduce</definition>
        <argsstring>(const std::string &amp;label, const size_t &amp;policy, const FunctorType &amp;functor, ReturnType &amp;return_value)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>ReturnType &amp;</type>
          <declname>return_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" line="1045" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" bodystart="1045" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel___reduce_8hpp_1ac8f05ec7c26cedee4d090491a3aff606" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolicyType</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>class ReturnType</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="struct_kokkos_1_1is__execution__policy" kindref="compound">Kokkos::is_execution_policy</ref>&lt; PolicyType &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; Kokkos::is_execution_policy&lt; PolicyType &gt;::value &gt;::type Kokkos::parallel_reduce</definition>
        <argsstring>(const std::string &amp;label, const PolicyType &amp;policy, const FunctorType &amp;functor, const ReturnType &amp;return_value)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const PolicyType &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>const ReturnType &amp;</type>
          <declname>return_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" line="1065" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" bodystart="1065" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel___reduce_8hpp_1a74344c619d0ec8a51425488a1b9de503" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolicyType</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>class ReturnType</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="struct_kokkos_1_1is__execution__policy" kindref="compound">Kokkos::is_execution_policy</ref>&lt; PolicyType &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; Kokkos::is_execution_policy&lt; PolicyType &gt;::value &gt;::type Kokkos::parallel_reduce</definition>
        <argsstring>(const PolicyType &amp;policy, const FunctorType &amp;functor, const ReturnType &amp;return_value)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const PolicyType &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>const ReturnType &amp;</type>
          <declname>return_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" line="1080" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" bodystart="1080" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel___reduce_8hpp_1a4184e9558912d963db894cf4aa25931c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>class ReturnType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_reduce</definition>
        <argsstring>(const size_t &amp;policy, const FunctorType &amp;functor, const ReturnType &amp;return_value)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const size_t &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>const ReturnType &amp;</type>
          <declname>return_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" line="1093" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" bodystart="1093" bodyend="1106"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel___reduce_8hpp_1acb5f72cd2714ffb7fc7faba8b78ea9e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>class ReturnType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_reduce</definition>
        <argsstring>(const std::string &amp;label, const size_t &amp;policy, const FunctorType &amp;functor, const ReturnType &amp;return_value)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>const ReturnType &amp;</type>
          <declname>return_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" line="1109" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" bodystart="1109" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel___reduce_8hpp_1a221c03e35b80d66f9e4e19ccb9fd2221" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolicyType</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_reduce</definition>
        <argsstring>(const std::string &amp;label, const PolicyType &amp;policy, const FunctorType &amp;functor, typename std::enable_if&lt; Kokkos::is_execution_policy&lt; PolicyType &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const PolicyType &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1is__execution__policy" kindref="compound">Kokkos::is_execution_policy</ref>&lt; PolicyType &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" line="1128" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" bodystart="1128" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel___reduce_8hpp_1a10ee66fd92c735b8299f71561163491e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolicyType</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_reduce</definition>
        <argsstring>(const PolicyType &amp;policy, const FunctorType &amp;functor, typename std::enable_if&lt; Kokkos::is_execution_policy&lt; PolicyType &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const PolicyType &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; <ref refid="struct_kokkos_1_1is__execution__policy" kindref="compound">Kokkos::is_execution_policy</ref>&lt; PolicyType &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" line="1153" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" bodystart="1153" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel___reduce_8hpp_1a9d7386fba6e5423eb089df10494f1499" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_reduce</definition>
        <argsstring>(const size_t &amp;policy, const FunctorType &amp;functor)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const size_t &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" line="1177" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" bodystart="1177" bodyend="1200"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___parallel___reduce_8hpp_1ad61b9ec4f727067e13fe7c36a6a3017a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kokkos::parallel_reduce</definition>
        <argsstring>(const std::string &amp;label, const size_t &amp;policy, const FunctorType &amp;functor)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" line="1203" column="13" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_Parallel_Reduce.hpp" bodystart="1203" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_8hpp_1ab8816a46443c7a638d1db1aebe4c2245" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>ViewTDst</declname>
            <defname>ViewTDst</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>ViewTSrc</declname>
            <defname>ViewTSrc</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool Kokkos::is_assignable</definition>
        <argsstring>(const Kokkos::View&lt; ViewTDst... &gt; &amp;dst, const Kokkos::View&lt; ViewTSrc... &gt; &amp;src)</argsstring>
        <name>is_assignable</name>
        <qualifiedname>Kokkos::is_assignable</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; ViewTDst... &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; ViewTSrc... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="461" column="16" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="461" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_8hpp_1a600e2fef7d092a0bd0456a6fe386dfff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_kokkos_1_1_impl_1_1_view_ctor_prop" kindref="compound">Impl::ViewCtorProp</ref>&lt; typename <ref refid="struct_kokkos_1_1_impl_1_1_view_ctor_prop" kindref="compound">Impl::ViewCtorProp</ref>&lt; void, Args &gt;::type... &gt;</type>
        <definition>Impl::ViewCtorProp&lt; typename Impl::ViewCtorProp&lt; void, Args &gt;::type... &gt; Kokkos::view_alloc</definition>
        <argsstring>(Args const &amp;... args)</argsstring>
        <name>view_alloc</name>
        <qualifiedname>Kokkos::view_alloc</qualifiedname>
        <param>
          <type>Args const &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref> allocation parameter bundle from argument list. </para>
        </briefdescription>
        <detaileddescription>
<para>Valid argument list members are: 1) label as a &quot;string&quot; or std::string 2) memory space instance of the View::memory_space type 3) execution space instance compatible with the View::memory_space 4) Kokkos::WithoutInitializing to bypass initialization 4) Kokkos::AllowPadding to allow allocation to pad dimensions for memory alignment </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="532" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="532" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_8hpp_1a8113eb69c24c9da98d0326cf672331a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_view_ctor_prop" kindref="compound">Impl::ViewCtorProp</ref>&lt; typename <ref refid="struct_kokkos_1_1_impl_1_1_view_ctor_prop" kindref="compound">Impl::ViewCtorProp</ref>&lt; void, Args &gt;::type... &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::ViewCtorProp&lt; typename Impl::ViewCtorProp&lt; void, Args &gt;::type... &gt; Kokkos::view_wrap</definition>
        <argsstring>(Args const &amp;... args)</argsstring>
        <name>view_wrap</name>
        <qualifiedname>Kokkos::view_wrap</qualifiedname>
        <param>
          <type>Args const &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="545" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="545" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_8hpp_1a177677591d1c570e0a7d1d79560963a8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION constexpr unsigned</type>
        <definition>KOKKOS_INLINE_FUNCTION constexpr unsigned Kokkos::rank</definition>
        <argsstring>(const View&lt; D, P... &gt; &amp;V)</argsstring>
        <name>rank</name>
        <qualifiedname>Kokkos::rank</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; D, P... &gt; &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
<para>Temporary free function rank() until rank() is implemented in the <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1898" column="43" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1898" bodyend="1900"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_8hpp_1a5e3d650cf8fb90785429b3398bf9bc00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class D</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1_impl_1_1_view_mapping" kindref="compound">Kokkos::Impl::ViewMapping</ref>&lt; void, <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; D, P... &gt;, Args... &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::Impl::ViewMapping&lt; void, ViewTraits&lt; D, P... &gt;, Args... &gt;::type Kokkos::subview</definition>
        <argsstring>(const View&lt; D, P... &gt; &amp;src, Args... args)</argsstring>
        <name>subview</name>
        <qualifiedname>Kokkos::subview</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; D, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1918" column="5" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1918" bodyend="1926"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_8hpp_1ad3511cf8708fd1bba5e3da78962998b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MemoryTraits</type>
          </param>
          <param>
            <type>class D</type>
          </param>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="class_kokkos_1_1_impl_1_1_view_mapping" kindref="compound">Kokkos::Impl::ViewMapping</ref>&lt; void, <ref refid="struct_kokkos_1_1_view_traits" kindref="compound">ViewTraits</ref>&lt; D, P... &gt;, Args... &gt;::template apply&lt; <ref refid="struct_kokkos_1_1_memory_traits" kindref="compound">MemoryTraits</ref> &gt;::type</type>
        <definition>KOKKOS_INLINE_FUNCTION Kokkos::Impl::ViewMapping&lt; void, ViewTraits&lt; D, P... &gt;, Args... &gt;::template apply&lt; MemoryTraits &gt;::type Kokkos::subview</definition>
        <argsstring>(const View&lt; D, P... &gt; &amp;src, Args... args)</argsstring>
        <name>subview</name>
        <qualifiedname>Kokkos::subview</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; D, P... &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1933" column="1" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1933" bodyend="1942"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_8hpp_1a755323427ab6df20e77fd15baf32ece7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>LP</declname>
            <defname>LP</defname>
          </param>
          <param>
            <type>class RT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::operator==</definition>
        <argsstring>(const View&lt; LT, LP... &gt; &amp;lhs, const View&lt; RT, RP... &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>Kokkos::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; LT, LP... &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; RT, RP... &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1952" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1952" bodyend="1970"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_8hpp_1a470da43c5bc1b85b3966772aedb45312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>LP</declname>
            <defname>LP</defname>
          </param>
          <param>
            <type>class RT</type>
          </param>
          <param>
            <type>class...</type>
            <declname>RP</declname>
            <defname>RP</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION bool</type>
        <definition>KOKKOS_INLINE_FUNCTION bool Kokkos::operator!=</definition>
        <argsstring>(const View&lt; LT, LP... &gt; &amp;lhs, const View&lt; RT, RP... &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>Kokkos::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; LT, LP... &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">View</ref>&lt; RT, RP... &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="1973" column="29" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="1973" bodyend="1976"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___view_8hpp_1a3b11642de77f3b6bd89ecfef20945f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Views</declname>
            <defname>Views</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION DeducedCommonPropsType&lt; Views... &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION DeducedCommonPropsType&lt; Views... &gt; Kokkos::common_view_alloc_prop</definition>
        <argsstring>(Views const &amp;... views)</argsstring>
        <name>common_view_alloc_prop</name>
        <qualifiedname>Kokkos::common_view_alloc_prop</qualifiedname>
        <param>
          <type>Views const &amp;...</type>
          <declname>views</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" line="2087" column="47" bodyfile="src/Kokkos/kokkos/core/src/Kokkos_View.hpp" bodystart="2087" bodyend="2090"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1ac00750524ba2700de5da4aeef34fd9e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::TeamThreadRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; Kokkos::TeamThreadRange</definition>
        <argsstring>(const Impl::OpenMPTargetExecTeamMember &amp;thread, const iType &amp;count)</argsstring>
        <name>TeamThreadRange</name>
        <qualifiedname>Kokkos::TeamThreadRange</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &amp;</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>const iType &amp;</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1004" column="1" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1004" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a9449e35f1eec729a9049db9e18f35ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType1</type>
          </param>
          <param>
            <type>typename iType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::TeamThreadRangeBoundariesStruct&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, Impl::OpenMPTargetExecTeamMember &gt; Kokkos::TeamThreadRange</definition>
        <argsstring>(const Impl::OpenMPTargetExecTeamMember &amp;thread, const iType1 &amp;begin, const iType2 &amp;end)</argsstring>
        <name>TeamThreadRange</name>
        <qualifiedname>Kokkos::TeamThreadRange</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &amp;</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>const iType1 &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const iType2 &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1014" column="1" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1014" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a33ad26b7e9d0c25997f4dc9a4df6e792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::ThreadVectorRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; Kokkos::ThreadVectorRange</definition>
        <argsstring>(const Impl::OpenMPTargetExecTeamMember &amp;thread, const iType &amp;count)</argsstring>
        <name>ThreadVectorRange</name>
        <qualifiedname>Kokkos::ThreadVectorRange</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &amp;</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>const iType &amp;</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1025" column="1" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1025" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1ac891fae9bb1375744ef87074f70c8f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType1</type>
          </param>
          <param>
            <type>typename iType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::ThreadVectorRangeBoundariesStruct&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, Impl::OpenMPTargetExecTeamMember &gt; Kokkos::ThreadVectorRange</definition>
        <argsstring>(const Impl::OpenMPTargetExecTeamMember &amp;thread, const iType1 &amp;arg_begin, const iType2 &amp;arg_end)</argsstring>
        <name>ThreadVectorRange</name>
        <qualifiedname>Kokkos::ThreadVectorRange</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &amp;</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>const iType1 &amp;</type>
          <declname>arg_begin</declname>
        </param>
        <param>
          <type>const iType2 &amp;</type>
          <declname>arg_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1035" column="1" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1035" bodyend="1041"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a874d9add52b019ca6943e82f6895a59d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_team_vector_range_boundaries_struct" kindref="compound">Impl::TeamVectorRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::TeamVectorRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; Kokkos::TeamVectorRange</definition>
        <argsstring>(const Impl::OpenMPTargetExecTeamMember &amp;thread, const iType &amp;count)</argsstring>
        <name>TeamVectorRange</name>
        <qualifiedname>Kokkos::TeamVectorRange</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &amp;</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>const iType &amp;</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1046" column="1" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1046" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1ac6de62cec9b811ca262b64ede7e89759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType1</type>
          </param>
          <param>
            <type>typename iType2</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_team_vector_range_boundaries_struct" kindref="compound">Impl::TeamVectorRangeBoundariesStruct</ref>&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::TeamVectorRangeBoundariesStruct&lt; typename std::common_type&lt; iType1, iType2 &gt;::type, Impl::OpenMPTargetExecTeamMember &gt; Kokkos::TeamVectorRange</definition>
        <argsstring>(const Impl::OpenMPTargetExecTeamMember &amp;thread, const iType1 &amp;arg_begin, const iType2 &amp;arg_end)</argsstring>
        <name>TeamVectorRange</name>
        <qualifiedname>Kokkos::TeamVectorRange</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &amp;</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>const iType1 &amp;</type>
          <declname>arg_begin</declname>
        </param>
        <param>
          <type>const iType2 &amp;</type>
          <declname>arg_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1056" column="1" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1056" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a33658d4f1dd85efc7db8cf191ae91bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_thread_single_struct" kindref="compound">Impl::ThreadSingleStruct</ref>&lt; <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::ThreadSingleStruct&lt; Impl::OpenMPTargetExecTeamMember &gt; Kokkos::PerTeam</definition>
        <argsstring>(const Impl::OpenMPTargetExecTeamMember &amp;thread)</argsstring>
        <name>PerTeam</name>
        <qualifiedname>Kokkos::PerTeam</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &amp;</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1065" column="26" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1065" bodyend="1068"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a3278ddb1f57c4a9304554b0ab0dd94c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="struct_kokkos_1_1_impl_1_1_vector_single_struct" kindref="compound">Impl::VectorSingleStruct</ref>&lt; <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION Impl::VectorSingleStruct&lt; Impl::OpenMPTargetExecTeamMember &gt; Kokkos::PerThread</definition>
        <argsstring>(const Impl::OpenMPTargetExecTeamMember &amp;thread)</argsstring>
        <name>PerThread</name>
        <qualifiedname>Kokkos::PerThread</qualifiedname>
        <param>
          <type>const <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &amp;</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1071" column="26" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1071" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1ace8dc4a405fa79cd326838a3173a62d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::parallel_for</definition>
        <argsstring>(const Impl::TeamThreadRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; &amp;loop_boundaries, const Lambda &amp;lambda)</argsstring>
        <name>parallel_for</name>
        <qualifiedname>Kokkos::parallel_for</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Inter-thread parallel_for. Executes lambda(iType i) for each i=0..N-1. </para>
        </briefdescription>
        <detaileddescription>
<para>The range i=0..N-1 is mapped to all threads of the the calling thread team. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1085" column="29" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1085" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1ae36c0d10cd2a032b37c5782bbe1d5a4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt;!<ref refid="struct_kokkos_1_1is__reducer__type" kindref="compound">Kokkos::is_reducer_type</ref>&lt; ValueType &gt;::value &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt;!Kokkos::is_reducer_type&lt; ValueType &gt;::value &gt; Kokkos::parallel_reduce</definition>
        <argsstring>(const Impl::TeamThreadRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; &amp;loop_boundaries, const Lambda &amp;lambda, ValueType &amp;result)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Inter-thread vector parallel_reduce. Executes lambda(iType i,
ValueType &amp; val) for each i=0..N-1. </para>
        </briefdescription>
        <detaileddescription>
<para>The range i=0..N-1 is mapped to all threads of the the calling thread team and a summation of val is performed and put into result. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1103" column="5" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1103" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1ac541c02a7c1ba75393bd71a380e3145c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
          <param>
            <type>typename ReducerType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; <ref refid="struct_kokkos_1_1is__reducer__type" kindref="compound">Kokkos::is_reducer_type</ref>&lt; ReducerType &gt;::value &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; Kokkos::is_reducer_type&lt; ReducerType &gt;::value &gt; Kokkos::parallel_reduce</definition>
        <argsstring>(const Impl::TeamThreadRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; &amp;loop_boundaries, const Lambda &amp;lambda, ReducerType result)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>ReducerType</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1183" column="5" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1183" bodyend="1231"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a88488a4bf8f2114d1948376c632b0b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>class JoinType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::parallel_reduce</definition>
        <argsstring>(const Impl::TeamThreadRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; &amp;loop_boundaries, const Lambda &amp;lambda, const JoinType &amp;join, ValueType &amp;init_result)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>const JoinType &amp;</type>
          <declname>join</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>init_result</declname>
        </param>
        <briefdescription>
<para>Intra-thread vector parallel_reduce. Executes lambda(iType i,
ValueType &amp; val) for each i=0..N-1. </para>
        </briefdescription>
        <detaileddescription>
<para>The range i=0..N-1 is mapped to all vector lanes of the the calling thread and a reduction of val is performed using JoinType(ValueType&amp; val, const
ValueType&amp; update) and put into init_result. The input value of init_result is used as initializer for temporary variables of ValueType. Therefore the input value should be the neutral element with respect to the join operation (e.g. &apos;0 for +-&apos; or &apos;1 for *&apos;). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1245" column="29" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1245" bodyend="1284"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1ac01e214f466ce9b4248fde7251265584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::parallel_scan</definition>
        <argsstring>(const Impl::TeamThreadRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; &amp;loop_bounds, const FunctorType &amp;lambda)</argsstring>
        <name>parallel_scan</name>
        <qualifiedname>Kokkos::parallel_scan</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_team_thread_range_boundaries_struct" kindref="compound">Impl::TeamThreadRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>loop_bounds</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1288" column="29" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1288" bodyend="1324"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a36c716ac12401f12a9c51167526a73b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::parallel_for</definition>
        <argsstring>(const Impl::ThreadVectorRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; &amp;loop_boundaries, const Lambda &amp;lambda)</argsstring>
        <name>parallel_for</name>
        <qualifiedname>Kokkos::parallel_for</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Intra-thread vector parallel_for. Executes lambda(iType i) for each i=0..N-1. </para>
        </briefdescription>
        <detaileddescription>
<para>The range i=0..N-1 is mapped to all vector lanes of the the calling thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1335" column="29" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1335" bodyend="1341"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a07b459af014196134489c356d7b36425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::parallel_reduce</definition>
        <argsstring>(const Impl::ThreadVectorRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; &amp;loop_boundaries, const Lambda &amp;lambda, ValueType &amp;result)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Intra-thread vector parallel_reduce. Executes lambda(iType i,
ValueType &amp; val) for each i=0..N-1. </para>
        </briefdescription>
        <detaileddescription>
<para>The range i=0..N-1 is mapped to all vector lanes of the the calling thread and a summation of val is performed and put into result. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1350" column="29" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1350" bodyend="1373"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1af09108b40cfbb82b649b3cf456c8c5ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
          <param>
            <type>typename ReducerType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; <ref refid="struct_kokkos_1_1is__reducer__type" kindref="compound">Kokkos::is_reducer_type</ref>&lt; ReducerType &gt;::value &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; Kokkos::is_reducer_type&lt; ReducerType &gt;::value &gt; Kokkos::parallel_reduce</definition>
        <argsstring>(const Impl::ThreadVectorRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; &amp;loop_boundaries, const Lambda &amp;lambda, ReducerType const &amp;result)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>ReducerType const &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1378" column="5" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1378" bodyend="1399"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a5e0badb9b4c56036881ae5c90828f138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>class JoinType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::parallel_reduce</definition>
        <argsstring>(const Impl::ThreadVectorRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; &amp;loop_boundaries, const Lambda &amp;lambda, const JoinType &amp;join, ValueType &amp;init_result)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>const JoinType &amp;</type>
          <declname>join</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>init_result</declname>
        </param>
        <briefdescription>
<para>Intra-thread vector parallel_reduce. Executes lambda(iType i,
ValueType &amp; val) for each i=0..N-1. </para>
        </briefdescription>
        <detaileddescription>
<para>The range i=0..N-1 is mapped to all vector lanes of the the calling thread and a reduction of val is performed using JoinType(ValueType&amp; val, const
ValueType&amp; update) and put into init_result. The input value of init_result is used as initializer for temporary variables of ValueType. Therefore the input value should be the neutral element with respect to the join operation (e.g. &apos;0 for +-&apos; or &apos;1 for *&apos;). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1412" column="29" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1412" bodyend="1427"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a9cbb669105433fd40d1c39a677386176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::parallel_scan</definition>
        <argsstring>(const Impl::ThreadVectorRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; &amp;loop_boundaries, const FunctorType &amp;lambda)</argsstring>
        <name>parallel_scan</name>
        <qualifiedname>Kokkos::parallel_scan</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_thread_vector_range_boundaries_struct" kindref="compound">Impl::ThreadVectorRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Intra-thread vector parallel exclusive prefix sum. Executes lambda(iType i, ValueType &amp; val, bool final) for each i=0..N-1. </para>
        </briefdescription>
        <detaileddescription>
<para>The range i=0..N-1 is mapped to all vector lanes in the thread and a scan operation is performed. Depending on the target execution space the operator might be called twice: once with final=false and once with final=true. When final==true val contains the prefix sum value. The contribution of this &quot;i&quot; needs to be added to val no matter whether final==true or not. In a serial execution (i.e. team_size==1) the operator is only called once with final==true. Scan_val will be set to the final sum value over all vector lanes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1442" column="29" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1442" bodyend="1457"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a9dc34a1fc13cc971080642fef07a32e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::parallel_for</definition>
        <argsstring>(const Impl::TeamVectorRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; &amp;loop_boundaries, const Lambda &amp;lambda)</argsstring>
        <name>parallel_for</name>
        <qualifiedname>Kokkos::parallel_for</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_team_vector_range_boundaries_struct" kindref="compound">Impl::TeamVectorRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Intra-team vector parallel_for. Executes lambda(iType i) for each i=0..N-1. </para>
        </briefdescription>
        <detaileddescription>
<para>The range i=0..N-1 is mapped to all vector lanes of the the calling team. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1468" column="29" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1468" bodyend="1474"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1ad101d16d26f52702d50dd76ed30e9037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::parallel_reduce</definition>
        <argsstring>(const Impl::TeamVectorRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; &amp;loop_boundaries, const Lambda &amp;lambda, ValueType &amp;result)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_team_vector_range_boundaries_struct" kindref="compound">Impl::TeamVectorRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Intra-team vector parallel_reduce. Executes lambda(iType i,
ValueType &amp; val) for each i=0..N-1. </para>
        </briefdescription>
        <detaileddescription>
<para>The range i=0..N-1 is mapped to all vector lanes of the the calling team and a summation of val is performed and put into result. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1483" column="29" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1483" bodyend="1519"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a78bb288d0ec661ac192de44ad9d3749b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iType</type>
          </param>
          <param>
            <type>class Lambda</type>
          </param>
          <param>
            <type>typename ReducerType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; <ref refid="struct_kokkos_1_1is__reducer__type" kindref="compound">Kokkos::is_reducer_type</ref>&lt; ReducerType &gt;::value &gt;</type>
        <definition>KOKKOS_INLINE_FUNCTION std::enable_if_t&lt; Kokkos::is_reducer_type&lt; ReducerType &gt;::value &gt; Kokkos::parallel_reduce</definition>
        <argsstring>(const Impl::TeamVectorRangeBoundariesStruct&lt; iType, Impl::OpenMPTargetExecTeamMember &gt; &amp;loop_boundaries, const Lambda &amp;lambda, ReducerType const &amp;result)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>Kokkos::parallel_reduce</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_team_vector_range_boundaries_struct" kindref="compound">Impl::TeamVectorRangeBoundariesStruct</ref>&lt; iType, <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>loop_boundaries</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>ReducerType const &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1561" column="5" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1561" bodyend="1603"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a4e3cbf136d9d0cb5ea961814be04b43c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::single</definition>
        <argsstring>(const Impl::VectorSingleStruct&lt; Impl::OpenMPTargetExecTeamMember &gt; &amp;, const FunctorType &amp;lambda)</argsstring>
        <name>single</name>
        <qualifiedname>Kokkos::single</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_vector_single_struct" kindref="compound">Impl::VectorSingleStruct</ref>&lt; <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1614" column="29" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1614" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a735c1807d297012aa07e082c9217892c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FunctorType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::single</definition>
        <argsstring>(const Impl::ThreadSingleStruct&lt; Impl::OpenMPTargetExecTeamMember &gt; &amp;single_struct, const FunctorType &amp;lambda)</argsstring>
        <name>single</name>
        <qualifiedname>Kokkos::single</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_thread_single_struct" kindref="compound">Impl::ThreadSingleStruct</ref>&lt; <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>single_struct</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1622" column="29" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1622" bodyend="1627"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a83bc0272e812f80a6f2f392ff5f06eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>class ValueType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::single</definition>
        <argsstring>(const Impl::VectorSingleStruct&lt; Impl::OpenMPTargetExecTeamMember &gt; &amp;, const FunctorType &amp;lambda, ValueType &amp;val)</argsstring>
        <name>single</name>
        <qualifiedname>Kokkos::single</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_vector_single_struct" kindref="compound">Impl::VectorSingleStruct</ref>&lt; <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1630" column="29" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1630" bodyend="1635"/>
      </memberdef>
      <memberdef kind="function" id="_kokkos___open_m_p_target___exec_8hpp_1a67585b8962e34ef295c7f4723a39f6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FunctorType</type>
          </param>
          <param>
            <type>class ValueType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void Kokkos::single</definition>
        <argsstring>(const Impl::ThreadSingleStruct&lt; Impl::OpenMPTargetExecTeamMember &gt; &amp;single_struct, const FunctorType &amp;lambda, ValueType &amp;val)</argsstring>
        <name>single</name>
        <qualifiedname>Kokkos::single</qualifiedname>
        <param>
          <type>const <ref refid="struct_kokkos_1_1_impl_1_1_thread_single_struct" kindref="compound">Impl::ThreadSingleStruct</ref>&lt; <ref refid="class_kokkos_1_1_impl_1_1_open_m_p_target_exec_team_member" kindref="compound">Impl::OpenMPTargetExecTeamMember</ref> &gt; &amp;</type>
          <declname>single_struct</declname>
        </param>
        <param>
          <type>const FunctorType &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" line="1638" column="29" bodyfile="src/Kokkos/kokkos/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Exec.hpp" bodystart="1638" bodyend="1646"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/algorithms/src/Kokkos_Random.hpp" line="61" column="1"/>
  </compounddef>
</doxygen>
