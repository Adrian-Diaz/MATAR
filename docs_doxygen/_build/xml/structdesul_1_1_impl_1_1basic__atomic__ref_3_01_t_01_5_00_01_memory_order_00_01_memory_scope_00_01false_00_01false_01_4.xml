<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4" kind="struct" language="C++" prot="public">
    <compoundname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename MemoryOrder</type>
      </param>
      <param>
        <type>typename MemoryScope</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a534f88f279636edfd841a3628bbc1bce" prot="public" static="no">
        <type>T *</type>
        <definition>using desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::value_type =  T*</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="405" column="3" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a108be5f373df10c2fcca45e047963ca2" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::difference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="406" column="3" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="406" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a4d1fa4710b36305dcd75f19b451351bf" prot="private" static="no" mutable="no">
        <type>T **</type>
        <definition>T** desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::_ptr</definition>
        <argsstring></argsstring>
        <name>_ptr</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::_ptr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="402" column="5" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="402" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ad8a50c7d2bbbbbd3767364add82e9b13" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::is_always_lock_free</definition>
        <argsstring></argsstring>
        <name>is_always_lock_free</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::is_always_lock_free</qualifiedname>
        <initializer>= atomic_always_lock_free(sizeof(T))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="408" column="25" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a0bd47a04f859c31c1c75ba6d62e9c371" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::required_alignment</definition>
        <argsstring></argsstring>
        <name>required_alignment</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::required_alignment</qualifiedname>
        <initializer>= alignof(T*)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="410" column="32" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="410" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a3c0da5c0f208b2add49635ca2c4654e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::basic_atomic_ref</definition>
        <argsstring>()=delete</argsstring>
        <name>basic_atomic_ref</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::basic_atomic_ref</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="412" column="3"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a2e1a8a4ca6eee043ebb01c28a2b5362b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdesul_1_1_impl_1_1basic__atomic__ref" kindref="compound">basic_atomic_ref</ref> &amp;</type>
        <definition>basic_atomic_ref &amp; desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator=</definition>
        <argsstring>(basic_atomic_ref const &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator=</qualifiedname>
        <param>
          <type><ref refid="structdesul_1_1_impl_1_1basic__atomic__ref" kindref="compound">basic_atomic_ref</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="413" column="20"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1aa31c49ca4b16e96e2c7d0d9489855e78" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::basic_atomic_ref</definition>
        <argsstring>(T *&amp;arg)</argsstring>
        <name>basic_atomic_ref</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::basic_atomic_ref</qualifiedname>
        <param>
          <type>T *&amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="415" column="12" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="415" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a0708e537c8a6c5dd3ecac82f590eebd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::basic_atomic_ref</definition>
        <argsstring>(basic_atomic_ref const &amp;)=default</argsstring>
        <name>basic_atomic_ref</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::basic_atomic_ref</qualifiedname>
        <param>
          <type><ref refid="structdesul_1_1_impl_1_1basic__atomic__ref" kindref="compound">basic_atomic_ref</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="417" column="3"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1af446fb0abc62b879177b8b448fa4abc2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator=</definition>
        <argsstring>(T *desired) const noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator=</qualifiedname>
        <param>
          <type>T *</type>
          <declname>desired</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="419" column="5" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="419" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a8157daf211696852a440999c5482ee0f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator T*</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator T*</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator T*</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="424" column="3" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="424" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1abb4fdf246fb79bb0f77ab60733bba31e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _MemoryOrder</type>
            <defval>MemoryOrder</defval>
          </param>
        </templateparamlist>
        <type>DESUL_FUNCTION void</type>
        <definition>DESUL_FUNCTION void desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::store</definition>
        <argsstring>(T *desired, _MemoryOrder order=_MemoryOrder()) const noexcept</argsstring>
        <name>store</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::store</qualifiedname>
        <param>
          <type>T *</type>
          <declname>desired</declname>
        </param>
        <param>
          <type>_MemoryOrder</type>
          <declname>order</declname>
          <defval>_MemoryOrder()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="427" column="23" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="427" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a5c940d6c73969e271234befb9d353f78" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _MemoryOrder</type>
            <defval>MemoryOrder</defval>
          </param>
        </templateparamlist>
        <type>DESUL_FUNCTION T *</type>
        <definition>DESUL_FUNCTION T * desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::load</definition>
        <argsstring>(_MemoryOrder order=_MemoryOrder()) const noexcept</argsstring>
        <name>load</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::load</qualifiedname>
        <param>
          <type>_MemoryOrder</type>
          <declname>order</declname>
          <defval>_MemoryOrder()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="433" column="20" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="433" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ac3690ebcd4261ba57d050cd46f5d471b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _MemoryOrder</type>
            <defval>MemoryOrder</defval>
          </param>
        </templateparamlist>
        <type>DESUL_FUNCTION T *</type>
        <definition>DESUL_FUNCTION T * desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::exchange</definition>
        <argsstring>(T *desired, _MemoryOrder order=_MemoryOrder()) const noexcept</argsstring>
        <name>exchange</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::exchange</qualifiedname>
        <param>
          <type>T *</type>
          <declname>desired</declname>
        </param>
        <param>
          <type>_MemoryOrder</type>
          <declname>order</declname>
          <defval>_MemoryOrder()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="438" column="20" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="438" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1af32445478e26ed780a2dfc0ab3a5770a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>DESUL_FUNCTION bool</type>
        <definition>DESUL_FUNCTION bool desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::is_lock_free</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_lock_free</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::is_lock_free</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="443" column="23" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="443" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a0242adb2648f50dddbb8a16bfb12b883" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SuccessMemoryOrder</type>
          </param>
          <param>
            <type>typename FailureMemoryOrder</type>
          </param>
        </templateparamlist>
        <type>DESUL_FUNCTION bool</type>
        <definition>DESUL_FUNCTION bool desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::compare_exchange_weak</definition>
        <argsstring>(T *&amp;expected, T *desired, SuccessMemoryOrder success, FailureMemoryOrder failure) const noexcept</argsstring>
        <name>compare_exchange_weak</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::compare_exchange_weak</qualifiedname>
        <param>
          <type>T *&amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>desired</declname>
        </param>
        <param>
          <type>SuccessMemoryOrder</type>
          <declname>success</declname>
        </param>
        <param>
          <type>FailureMemoryOrder</type>
          <declname>failure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="448" column="23" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="448" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ad3a1009caa887970952fadcecf8e47e4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _MemoryOrder</type>
            <defval>MemoryOrder</defval>
          </param>
        </templateparamlist>
        <type>DESUL_FUNCTION bool</type>
        <definition>DESUL_FUNCTION bool desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::compare_exchange_weak</definition>
        <argsstring>(T *&amp;expected, T *desired, _MemoryOrder order=_MemoryOrder()) const noexcept</argsstring>
        <name>compare_exchange_weak</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::compare_exchange_weak</qualifiedname>
        <param>
          <type>T *&amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>desired</declname>
        </param>
        <param>
          <type>_MemoryOrder</type>
          <declname>order</declname>
          <defval>_MemoryOrder()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="457" column="23" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="457" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1acd24ac6bbb5654c403abce40b0b34e23" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SuccessMemoryOrder</type>
          </param>
          <param>
            <type>typename FailureMemoryOrder</type>
          </param>
        </templateparamlist>
        <type>DESUL_FUNCTION bool</type>
        <definition>DESUL_FUNCTION bool desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::compare_exchange_strong</definition>
        <argsstring>(T *&amp;expected, T *desired, SuccessMemoryOrder success, FailureMemoryOrder failure) const noexcept</argsstring>
        <name>compare_exchange_strong</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::compare_exchange_strong</qualifiedname>
        <param>
          <type>T *&amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>desired</declname>
        </param>
        <param>
          <type>SuccessMemoryOrder</type>
          <declname>success</declname>
        </param>
        <param>
          <type>FailureMemoryOrder</type>
          <declname>failure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="467" column="23" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="467" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a7a3ba8b0249dfd54c5c3305f8b971c4e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _MemoryOrder</type>
            <defval>MemoryOrder</defval>
          </param>
        </templateparamlist>
        <type>DESUL_FUNCTION bool</type>
        <definition>DESUL_FUNCTION bool desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::compare_exchange_strong</definition>
        <argsstring>(T *&amp;expected, T *desired, _MemoryOrder order=_MemoryOrder()) const noexcept</argsstring>
        <name>compare_exchange_strong</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::compare_exchange_strong</qualifiedname>
        <param>
          <type>T *&amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>desired</declname>
        </param>
        <param>
          <type>_MemoryOrder</type>
          <declname>order</declname>
          <defval>_MemoryOrder()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="477" column="23" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="477" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ac0a8829d228ea3cf54cd45c7c500ef99" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _MemoryOrder</type>
            <defval>MemoryOrder</defval>
          </param>
        </templateparamlist>
        <type>DESUL_FUNCTION value_type</type>
        <definition>DESUL_FUNCTION value_type desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::fetch_add</definition>
        <argsstring>(difference_type d, _MemoryOrder order=_MemoryOrder()) const noexcept</argsstring>
        <name>fetch_add</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::fetch_add</qualifiedname>
        <param>
          <type>difference_type</type>
          <declname>d</declname>
        </param>
        <param>
          <type>_MemoryOrder</type>
          <declname>order</declname>
          <defval>_MemoryOrder()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="488" column="3" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="488" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ac602869944d2ccfe1f4c7432da86243e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _MemoryOrder</type>
            <defval>MemoryOrder</defval>
          </param>
        </templateparamlist>
        <type>DESUL_FUNCTION value_type</type>
        <definition>DESUL_FUNCTION value_type desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::fetch_sub</definition>
        <argsstring>(difference_type d, _MemoryOrder order=_MemoryOrder()) const noexcept</argsstring>
        <name>fetch_sub</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::fetch_sub</qualifiedname>
        <param>
          <type>difference_type</type>
          <declname>d</declname>
        </param>
        <param>
          <type>_MemoryOrder</type>
          <declname>order</declname>
          <defval>_MemoryOrder()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="494" column="3" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="494" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a25926c094a19cd361f128b2a65a64522" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>DESUL_FUNCTION value_type</type>
        <definition>DESUL_FUNCTION value_type desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator++</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator++</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator++</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="498" column="29" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="498" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a8f2bdf11b17d5d319c84756626ac9ea2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>DESUL_FUNCTION value_type</type>
        <definition>DESUL_FUNCTION value_type desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator++</definition>
        <argsstring>(int) const noexcept</argsstring>
        <name>operator++</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator++</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="502" column="29" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="502" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a8abc64d3004c246073492b10d85caf28" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>DESUL_FUNCTION value_type</type>
        <definition>DESUL_FUNCTION value_type desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator--</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator--</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator--</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="504" column="29" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="504" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1abd56bd9650798574d458370e554c4887" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>DESUL_FUNCTION value_type</type>
        <definition>DESUL_FUNCTION value_type desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator--</definition>
        <argsstring>(int) const noexcept</argsstring>
        <name>operator--</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator--</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="508" column="29" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="508" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ab4471194e7b9347fcdc28b3c626ab095" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>DESUL_FUNCTION value_type</type>
        <definition>DESUL_FUNCTION value_type desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator+=</definition>
        <argsstring>(difference_type d) const noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator+=</qualifiedname>
        <param>
          <type>difference_type</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="510" column="29" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="510" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a54bab735c541ef8fd8723a4fe3d79316" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>DESUL_FUNCTION value_type</type>
        <definition>DESUL_FUNCTION value_type desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator-=</definition>
        <argsstring>(difference_type d) const noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::operator-=</qualifiedname>
        <param>
          <type>difference_type</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="514" column="29" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="514" bodyend="516"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ac7705deb70a83a9c0b26bea4d744334c" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr std::ptrdiff_t</type>
        <definition>static constexpr std::ptrdiff_t desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::_type_size</definition>
        <argsstring>(std::ptrdiff_t d) noexcept</argsstring>
        <name>_type_size</name>
        <qualifiedname>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;::_type_size</qualifiedname>
        <param>
          <type>std::ptrdiff_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="519" column="35" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="519" bodyend="522"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" line="400" column="1" bodyfile="src/Kokkos/kokkos/core/src/desul/atomics/Atomic_Ref.hpp" bodystart="400" bodyend="523"/>
    <listofallmembers>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a4d1fa4710b36305dcd75f19b451351bf" prot="private" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>_ptr</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ac7705deb70a83a9c0b26bea4d744334c" prot="private" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>_type_size</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a3c0da5c0f208b2add49635ca2c4654e1" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>basic_atomic_ref</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1aa31c49ca4b16e96e2c7d0d9489855e78" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>basic_atomic_ref</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a0708e537c8a6c5dd3ecac82f590eebd2" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>basic_atomic_ref</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1acd24ac6bbb5654c403abce40b0b34e23" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>compare_exchange_strong</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a7a3ba8b0249dfd54c5c3305f8b971c4e" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>compare_exchange_strong</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a0242adb2648f50dddbb8a16bfb12b883" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>compare_exchange_weak</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ad3a1009caa887970952fadcecf8e47e4" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>compare_exchange_weak</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a108be5f373df10c2fcca45e047963ca2" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>difference_type</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ac3690ebcd4261ba57d050cd46f5d471b" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>exchange</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ac0a8829d228ea3cf54cd45c7c500ef99" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>fetch_add</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ac602869944d2ccfe1f4c7432da86243e" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>fetch_sub</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ad8a50c7d2bbbbbd3767364add82e9b13" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>is_always_lock_free</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1af32445478e26ed780a2dfc0ab3a5770a" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>is_lock_free</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a5c940d6c73969e271234befb9d353f78" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>load</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a8157daf211696852a440999c5482ee0f" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>operator T*</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a25926c094a19cd361f128b2a65a64522" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>operator++</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a8f2bdf11b17d5d319c84756626ac9ea2" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>operator++</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1ab4471194e7b9347fcdc28b3c626ab095" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>operator+=</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a8abc64d3004c246073492b10d85caf28" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>operator--</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1abd56bd9650798574d458370e554c4887" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>operator--</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a54bab735c541ef8fd8723a4fe3d79316" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>operator-=</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a2e1a8a4ca6eee043ebb01c28a2b5362b" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>operator=</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1af446fb0abc62b879177b8b448fa4abc2" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>operator=</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a0bd47a04f859c31c1c75ba6d62e9c371" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>required_alignment</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1abb4fdf246fb79bb0f77ab60733bba31e" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>store</name></member>
      <member refid="structdesul_1_1_impl_1_1basic__atomic__ref_3_01_t_01_5_00_01_memory_order_00_01_memory_scope_00_01false_00_01false_01_4_1a534f88f279636edfd841a3628bbc1bce" prot="public" virt="non-virtual"><scope>desul::Impl::basic_atomic_ref&lt; T *, MemoryOrder, MemoryScope, false, false &gt;</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
