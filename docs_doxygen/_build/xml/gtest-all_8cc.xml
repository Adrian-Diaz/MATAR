<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="gtest-all_8cc" kind="file" language="C++">
    <compoundname>gtest-all.cc</compoundname>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">wchar.h</includes>
    <includes local="no">wctype.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">limits</includes>
    <includes local="no">ostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">vector</includes>
    <includes local="no">sys/time.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">string</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">climits</includes>
    <incdepgraph>
      <node id="1">
        <label>src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc</label>
        <link refid="gtest-all_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>algorithm</label>
      </node>
      <node id="25">
        <label>assert.h</label>
      </node>
      <node id="36">
        <label>climits</label>
      </node>
      <node id="6">
        <label>ctype.h</label>
      </node>
      <node id="34">
        <label>errno.h</label>
      </node>
      <node id="21">
        <label>float.h</label>
      </node>
      <node id="22">
        <label>iomanip</label>
      </node>
      <node id="26">
        <label>iosfwd</label>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="24">
        <label>iterator</label>
      </node>
      <node id="3">
        <label>limits</label>
      </node>
      <node id="35">
        <label>limits.h</label>
      </node>
      <node id="27">
        <label>math.h</label>
      </node>
      <node id="4">
        <label>ostream</label>
      </node>
      <node id="18">
        <label>regex.h</label>
      </node>
      <node id="23">
        <label>set</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="28">
        <label>stdarg.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="17">
        <label>strings.h</label>
      </node>
      <node id="12">
        <label>sys/stat.h</label>
      </node>
      <node id="33">
        <label>sys/time.h</label>
      </node>
      <node id="11">
        <label>sys/types.h</label>
      </node>
      <node id="29">
        <label>time.h</label>
      </node>
      <node id="19">
        <label>typeinfo</label>
      </node>
      <node id="16">
        <label>unistd.h</label>
      </node>
      <node id="20">
        <label>utility</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="30">
        <label>wchar.h</label>
      </node>
      <node id="31">
        <label>wctype.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classtesting_1_1_scoped_fake_test_part_result_reporter" prot="public">testing::ScopedFakeTestPartResultReporter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_single_failure_checker" prot="public">testing::internal::SingleFailureChecker</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_g_test_flag_saver" prot="public">testing::internal::GTestFlagSaver</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_property_key_is" prot="public">testing::internal::TestPropertyKeyIs</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unit_test_options" prot="public">testing::internal::UnitTestOptions</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_os_stack_trace_getter_interface" prot="public">testing::internal::OsStackTraceGetterInterface</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_os_stack_trace_getter" prot="public">testing::internal::OsStackTraceGetter</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_trace_info" prot="public">testing::internal::TraceInfo</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_default_global_test_part_result_reporter" prot="public">testing::internal::DefaultGlobalTestPartResultReporter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter" prot="public">testing::internal::DefaultPerThreadTestPartResultReporter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unit_test_impl" prot="public">testing::internal::UnitTestImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_result_accessor" prot="public">testing::internal::TestResultAccessor</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_pretty_unit_test_result_printer" prot="public">testing::internal::PrettyUnitTestResultPrinter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_event_repeater" prot="public">testing::internal::TestEventRepeater</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_xml_unit_test_result_printer" prot="public">testing::internal::XmlUnitTestResultPrinter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_scoped_premature_exit_file" prot="public">testing::internal::ScopedPrematureExitFile</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_case_name_is" prot="public">testing::internal::TestCaseNameIs</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal2">testing::internal2</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gtest-all_8cc_1a2f159eaa9c00e7aa9fd6b296e520e35c" prot="public" static="no">
        <name>GTEST_INCLUDE_GTEST_GTEST_SPI_H_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="110" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1a819a3fd7f8b8cf24b6f1b3a26708973d" prot="public" static="no">
        <name>EXPECT_FATAL_FAILURE</name>
        <param><defname>statement</defname></param>
        <param><defname>substr</defname></param>
        <initializer>  do { \
    class GTestExpectFatalFailureHelper {\
     public:\
      static void Execute() { statement; }\
    };\
    <ref refid="classtesting_1_1_test_part_result_array" kindref="compound">::testing::TestPartResultArray</ref> gtest_failures;\
    <ref refid="classtesting_1_1internal_1_1_single_failure_checker" kindref="compound">::testing::internal::SingleFailureChecker</ref> gtest_checker(\
        &amp;gtest_failures, ::testing::TestPartResult::kFatalFailure, (substr));\
    {\
      <ref refid="classtesting_1_1_scoped_fake_test_part_result_reporter" kindref="compound">::testing::ScopedFakeTestPartResultReporter</ref> gtest_reporter(\
          ::testing::ScopedFakeTestPartResultReporter:: \
          INTERCEPT_ONLY_CURRENT_THREAD, &amp;gtest_failures);\
      GTestExpectFatalFailureHelper::Execute();\
    }\
  } while (::testing::internal::AlwaysFalse())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="211" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1ad8aac5bc859b2ddc07583636ae4f45cf" prot="public" static="no">
        <name>EXPECT_FATAL_FAILURE_ON_ALL_THREADS</name>
        <param><defname>statement</defname></param>
        <param><defname>substr</defname></param>
        <initializer>  do { \
    class GTestExpectFatalFailureHelper {\
     public:\
      static void Execute() { statement; }\
    };\
    <ref refid="classtesting_1_1_test_part_result_array" kindref="compound">::testing::TestPartResultArray</ref> gtest_failures;\
    <ref refid="classtesting_1_1internal_1_1_single_failure_checker" kindref="compound">::testing::internal::SingleFailureChecker</ref> gtest_checker(\
        &amp;gtest_failures, ::testing::TestPartResult::kFatalFailure, (substr));\
    {\
      <ref refid="classtesting_1_1_scoped_fake_test_part_result_reporter" kindref="compound">::testing::ScopedFakeTestPartResultReporter</ref> gtest_reporter(\
          ::testing::ScopedFakeTestPartResultReporter:: \
          INTERCEPT_ALL_THREADS, &amp;gtest_failures);\
      GTestExpectFatalFailureHelper::Execute();\
    }\
  } while (::testing::internal::AlwaysFalse())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="228" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1a8376fd6821bd88fd806697355e79e138" prot="public" static="no">
        <name>EXPECT_NONFATAL_FAILURE</name>
        <param><defname>statement</defname></param>
        <param><defname>substr</defname></param>
        <initializer>  do {\
    <ref refid="classtesting_1_1_test_part_result_array" kindref="compound">::testing::TestPartResultArray</ref> gtest_failures;\
    <ref refid="classtesting_1_1internal_1_1_single_failure_checker" kindref="compound">::testing::internal::SingleFailureChecker</ref> gtest_checker(\
        &amp;gtest_failures, ::testing::TestPartResult::kNonFatalFailure, \
        (substr));\
    {\
      <ref refid="classtesting_1_1_scoped_fake_test_part_result_reporter" kindref="compound">::testing::ScopedFakeTestPartResultReporter</ref> gtest_reporter(\
          ::testing::ScopedFakeTestPartResultReporter:: \
          INTERCEPT_ONLY_CURRENT_THREAD, &amp;gtest_failures);\
      if (::testing::internal::AlwaysTrue()) { statement; }\
    }\
  } while (::testing::internal::AlwaysFalse())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="277" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1a9f4cf1f150fe9facfc4cbf0bae646ee9" prot="public" static="no">
        <name>EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS</name>
        <param><defname>statement</defname></param>
        <param><defname>substr</defname></param>
        <initializer>  do {\
    <ref refid="classtesting_1_1_test_part_result_array" kindref="compound">::testing::TestPartResultArray</ref> gtest_failures;\
    <ref refid="classtesting_1_1internal_1_1_single_failure_checker" kindref="compound">::testing::internal::SingleFailureChecker</ref> gtest_checker(\
        &amp;gtest_failures, ::testing::TestPartResult::kNonFatalFailure, \
        (substr));\
    {\
      <ref refid="classtesting_1_1_scoped_fake_test_part_result_reporter" kindref="compound">::testing::ScopedFakeTestPartResultReporter</ref> gtest_reporter(\
          ::testing::ScopedFakeTestPartResultReporter::INTERCEPT_ALL_THREADS, \
          &amp;gtest_failures);\
      if (::testing::internal::AlwaysTrue()) { statement; }\
    }\
  } while (::testing::internal::AlwaysFalse())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="291" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1a7c139c1711de5a69cbc934e8a082e4f9" prot="public" static="no">
        <name>GTEST_HAS_GETTIMEOFDAY_</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="381" column="10" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1a83bd232fd1077579fada92c31bb7469f" prot="public" static="no">
        <name>GTEST_IMPLEMENTATION_</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="404" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="9418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1ab740e029f81d48cfba1b34cecce63fef" prot="public" static="no">
        <name>GTEST_SRC_GTEST_INTERNAL_INL_H_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="442" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1a4a5b6fbde5dd05e05dd6846ac5e5c18e" prot="public" static="no">
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param><defname>op_name</defname></param>
        <param><defname>op</defname></param>
        <initializer>AssertionResult CmpHelper##op_name(const char* expr1, const char* expr2, \
                                   BiggestInt val1, BiggestInt val2) {\
  if (val1 op val2) {\
    return AssertionSuccess();\
  } else {\
    return AssertionFailure() \
        &lt;&lt; &quot;Expected: (&quot; &lt;&lt; expr1 &lt;&lt; &quot;) &quot; #op &quot; (&quot; &lt;&lt; expr2\
        &lt;&lt; &quot;), actual: &quot; &lt;&lt; FormatForComparisonFailureMessage(val1, val2)\
        &lt;&lt; &quot; vs &quot; &lt;&lt; FormatForComparisonFailureMessage(val2, val1);\
  }\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="2616" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="2616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1a87a475ab9e81de8b49525787665b9229" prot="public" static="no">
        <name>GTEST_REPEATER_METHOD_</name>
        <param><defname>Name</defname></param>
        <param><defname>Type</defname></param>
        <initializer>void TestEventRepeater::Name(const Type&amp; parameter) { \
  if (forwarding_enabled_) { \
    for (size_t i = 0; i &lt; listeners_.size(); i++) { \
      listeners_[i]-&gt;Name(parameter); \
    } \
  } \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="4443" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="4443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1aa7da32fd7da6a8cceeed6b448cb7b5f2" prot="public" static="no">
        <name>GTEST_REVERSE_REPEATER_METHOD_</name>
        <param><defname>Name</defname></param>
        <param><defname>Type</defname></param>
        <initializer>void TestEventRepeater::Name(const Type&amp; parameter) { \
  if (forwarding_enabled_) { \
    for (int i = static_cast&lt;int&gt;(listeners_.size()) - 1; i &gt;= 0; i--) { \
      listeners_[i]-&gt;Name(parameter); \
    } \
  } \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="4453" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="4453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1a83bd232fd1077579fada92c31bb7469f" prot="public" static="no">
        <name>GTEST_IMPLEMENTATION_</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="6571" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="9418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1ad9d445747785a9271a57cf1d392b89ad" prot="public" static="no">
        <name>GTEST_PATH_MAX_</name>
        <initializer>_POSIX_PATH_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="7895" column="11" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="7895" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1a83bd232fd1077579fada92c31bb7469f" prot="public" static="no">
        <name>GTEST_IMPLEMENTATION_</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="8282" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="9418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-all_8cc_1a83bd232fd1077579fada92c31bb7469f" prot="public" static="no">
        <name>GTEST_IMPLEMENTATION_</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" line="9418" column="9" bodyfile="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc" bodystart="9418" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>mheule@google.com<sp/>(Markus<sp/>Heule)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework<sp/>(Google<sp/>Test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sometimes<sp/>it&apos;s<sp/>desirable<sp/>to<sp/>build<sp/>Google<sp/>Test<sp/>by<sp/>compiling<sp/>a<sp/>single<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>serves<sp/>this<sp/>purpose.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>line<sp/>ensures<sp/>that<sp/>gtest.h<sp/>can<sp/>be<sp/>compiled<sp/>on<sp/>its<sp/>own,<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>it&apos;s<sp/>fused.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>lines<sp/>pull<sp/>in<sp/>the<sp/>real<sp/>gtest<sp/>*.cc<sp/>files.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework<sp/>(Google<sp/>Test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utilities<sp/>for<sp/>testing<sp/>Google<sp/>Test<sp/>itself<sp/>and<sp/>code<sp/>that<sp/>uses<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(e.g.<sp/>frameworks<sp/>built<sp/>on<sp/>top<sp/>of<sp/>Google<sp/>Test).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INCLUDE_GTEST_GTEST_SPI_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INCLUDE_GTEST_GTEST_SPI_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>helper<sp/>class<sp/>can<sp/>be<sp/>used<sp/>to<sp/>mock<sp/>out<sp/>Google<sp/>Test<sp/>failure<sp/>reporting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>we<sp/>can<sp/>test<sp/>Google<sp/>Test<sp/>or<sp/>code<sp/>that<sp/>builds<sp/>on<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>object<sp/>of<sp/>this<sp/>class<sp/>appends<sp/>a<sp/>TestPartResult<sp/>object<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestPartResultArray<sp/>object<sp/>given<sp/>in<sp/>the<sp/>constructor<sp/>whenever<sp/>a<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failure<sp/>is<sp/>reported.<sp/>It<sp/>can<sp/>either<sp/>intercept<sp/>only<sp/>failures<sp/>that<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generated<sp/>in<sp/>the<sp/>same<sp/>thread<sp/>that<sp/>created<sp/>this<sp/>object<sp/>or<sp/>it<sp/>can<sp/>intercept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>all<sp/>generated<sp/>failures.<sp/>The<sp/>scope<sp/>of<sp/>this<sp/>mock<sp/>object<sp/>can<sp/>be<sp/>controlled<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>second<sp/>argument<sp/>to<sp/>the<sp/>two<sp/>arguments<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classtesting_1_1_scoped_fake_test_part_result_reporter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/><ref refid="classtesting_1_1_scoped_fake_test_part_result_reporter" kindref="compound">ScopedFakeTestPartResultReporter</ref></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_part_result_reporter_interface" kindref="compound">TestPartResultReporterInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>two<sp/>possible<sp/>mocking<sp/>modes<sp/>of<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>InterceptMode<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>INTERCEPT_ONLY_CURRENT_THREAD,<sp/><sp/></highlight><highlight class="comment">//<sp/>Intercepts<sp/>only<sp/>thread<sp/>local<sp/>failures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>INTERCEPT_ALL_THREADS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Intercepts<sp/>all<sp/>failures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>c&apos;tor<sp/>sets<sp/>this<sp/>object<sp/>as<sp/>the<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>Google<sp/>Test.<sp/><sp/>The<sp/>&apos;result&apos;<sp/>parameter<sp/>specifies<sp/>where<sp/>to<sp/>report<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>results.<sp/>This<sp/>reporter<sp/>will<sp/>only<sp/>catch<sp/>failures<sp/>generated<sp/>in<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>thread.<sp/>DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_scoped_fake_test_part_result_reporter" kindref="compound">ScopedFakeTestPartResultReporter</ref>(<ref refid="classtesting_1_1_test_part_result_array" kindref="compound">TestPartResultArray</ref>*<sp/>result);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>above,<sp/>but<sp/>you<sp/>can<sp/>choose<sp/>the<sp/>interception<sp/>scope<sp/>of<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_scoped_fake_test_part_result_reporter" kindref="compound">ScopedFakeTestPartResultReporter</ref>(InterceptMode<sp/>intercept_mode,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_test_part_result_array" kindref="compound">TestPartResultArray</ref>*<sp/>result);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>d&apos;tor<sp/>restores<sp/>the<sp/>previous<sp/>test<sp/>part<sp/>result<sp/>reporter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_scoped_fake_test_part_result_reporter" kindref="compound">~ScopedFakeTestPartResultReporter</ref>();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Appends<sp/>the<sp/>TestPartResult<sp/>object<sp/>to<sp/>the<sp/>TestPartResultArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>received<sp/>in<sp/>the<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>is<sp/>from<sp/>the<sp/>TestPartResultReporterInterface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReportTestPartResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Init();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterceptMode<sp/>intercept_mode_;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_part_result_reporter_interface" kindref="compound">TestPartResultReporterInterface</ref>*<sp/>old_reporter_;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_part_result_array" kindref="compound">TestPartResultArray</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>result_;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1_scoped_fake_test_part_result_reporter" kindref="compound">ScopedFakeTestPartResultReporter</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>class<sp/>for<sp/>implementing<sp/>EXPECT_FATAL_FAILURE()<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT_NONFATAL_FAILURE().<sp/><sp/>Its<sp/>destructor<sp/>verifies<sp/>that<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestPartResultArray<sp/>contains<sp/>exactly<sp/>one<sp/>failure<sp/>that<sp/>has<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>and<sp/>contains<sp/>the<sp/>given<sp/>substring.<sp/><sp/>If<sp/>that&apos;s<sp/>not<sp/>the<sp/>case,<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-fatal<sp/>failure<sp/>will<sp/>be<sp/>generated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="classtesting_1_1internal_1_1_single_failure_checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/><ref refid="classtesting_1_1internal_1_1_single_failure_checker" kindref="compound">SingleFailureChecker</ref><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>constructor<sp/>remembers<sp/>the<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_single_failure_checker" kindref="compound">SingleFailureChecker</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_part_result_array" kindref="compound">TestPartResultArray</ref>*<sp/>results,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestPartResult::Type<sp/>type,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>substr);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_single_failure_checker" kindref="compound">~SingleFailureChecker</ref>();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_part_result_array" kindref="compound">TestPartResultArray</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>results_;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult::Type<sp/>type_;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>substr_;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_single_failure_checker" kindref="compound">SingleFailureChecker</ref>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal">};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>set<sp/>of<sp/>macros<sp/>for<sp/>testing<sp/>Google<sp/>Test<sp/>assertions<sp/>or<sp/>code<sp/>that&apos;s<sp/>expected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>generate<sp/>Google<sp/>Test<sp/>fatal<sp/>failures.<sp/><sp/>It<sp/>verifies<sp/>that<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statement<sp/>will<sp/>cause<sp/>exactly<sp/>one<sp/>fatal<sp/>Google<sp/>Test<sp/>failure<sp/>with<sp/>&apos;substr&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>being<sp/>part<sp/>of<sp/>the<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>different<sp/>versions<sp/>of<sp/>this<sp/>macro.<sp/>EXPECT_FATAL_FAILURE<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>affects<sp/>and<sp/>considers<sp/>failures<sp/>generated<sp/>in<sp/>the<sp/>current<sp/>thread<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT_FATAL_FAILURE_ON_ALL_THREADS<sp/>does<sp/>the<sp/>same<sp/>but<sp/>for<sp/>all<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>verification<sp/>of<sp/>the<sp/>assertion<sp/>is<sp/>done<sp/>correctly<sp/>even<sp/>when<sp/>the<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>throws<sp/>an<sp/>exception<sp/>or<sp/>aborts<sp/>the<sp/>current<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Known<sp/>restrictions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>&apos;statement&apos;<sp/>cannot<sp/>reference<sp/>local<sp/>non-static<sp/>variables<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>non-static<sp/>members<sp/>of<sp/>the<sp/>current<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>&apos;statement&apos;<sp/>cannot<sp/>return<sp/>a<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>You<sp/>cannot<sp/>stream<sp/>a<sp/>failure<sp/>message<sp/>to<sp/>this<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>even<sp/>though<sp/>the<sp/>implementations<sp/>of<sp/>the<sp/>following<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>macros<sp/>are<sp/>much<sp/>alike,<sp/>we<sp/>cannot<sp/>refactor<sp/>them<sp/>to<sp/>use<sp/>a<sp/>common</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>helper<sp/>macro,<sp/>due<sp/>to<sp/>some<sp/>peculiarity<sp/>in<sp/>how<sp/>the<sp/>preprocessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>works.<sp/><sp/>The<sp/>AcceptsMacroThatExpandsToUnprotectedComma<sp/>test<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gtest_unittest.cc<sp/>will<sp/>fail<sp/>to<sp/>compile<sp/>if<sp/>we<sp/>do<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_FATAL_FAILURE(statement,<sp/>substr)<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>class<sp/>GTestExpectFatalFailureHelper<sp/>{\</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>public:\</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>void<sp/>Execute()<sp/>{<sp/>statement;<sp/>}\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::testing::TestPartResultArray<sp/>gtest_failures;\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::testing::internal::SingleFailureChecker<sp/>gtest_checker(\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;gtest_failures,<sp/>::testing::TestPartResult::kFatalFailure,<sp/>(substr));\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::ScopedFakeTestPartResultReporter<sp/>gtest_reporter(\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::ScopedFakeTestPartResultReporter::<sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERCEPT_ONLY_CURRENT_THREAD,<sp/>&amp;gtest_failures);\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>GTestExpectFatalFailureHelper::Execute();\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(::testing::internal::AlwaysFalse())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_FATAL_FAILURE_ON_ALL_THREADS(statement,<sp/>substr)<sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>class<sp/>GTestExpectFatalFailureHelper<sp/>{\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>public:\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>void<sp/>Execute()<sp/>{<sp/>statement;<sp/>}\</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};\</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::testing::TestPartResultArray<sp/>gtest_failures;\</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::testing::internal::SingleFailureChecker<sp/>gtest_checker(\</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;gtest_failures,<sp/>::testing::TestPartResult::kFatalFailure,<sp/>(substr));\</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::ScopedFakeTestPartResultReporter<sp/>gtest_reporter(\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::ScopedFakeTestPartResultReporter::<sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERCEPT_ALL_THREADS,<sp/>&amp;gtest_failures);\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>GTestExpectFatalFailureHelper::Execute();\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(::testing::internal::AlwaysFalse())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>macro<sp/>for<sp/>testing<sp/>Google<sp/>Test<sp/>assertions<sp/>or<sp/>code<sp/>that&apos;s<sp/>expected<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generate<sp/>Google<sp/>Test<sp/>non-fatal<sp/>failures.<sp/><sp/>It<sp/>asserts<sp/>that<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statement<sp/>will<sp/>cause<sp/>exactly<sp/>one<sp/>non-fatal<sp/>Google<sp/>Test<sp/>failure<sp/>with<sp/>&apos;substr&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>being<sp/>part<sp/>of<sp/>the<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>different<sp/>versions<sp/>of<sp/>this<sp/>macro.<sp/>EXPECT_NONFATAL_FAILURE<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>affects<sp/>and<sp/>considers<sp/>failures<sp/>generated<sp/>in<sp/>the<sp/>current<sp/>thread<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS<sp/>does<sp/>the<sp/>same<sp/>but<sp/>for<sp/>all<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;statement&apos;<sp/>is<sp/>allowed<sp/>to<sp/>reference<sp/>local<sp/>variables<sp/>and<sp/>members<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>current<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>verification<sp/>of<sp/>the<sp/>assertion<sp/>is<sp/>done<sp/>correctly<sp/>even<sp/>when<sp/>the<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>throws<sp/>an<sp/>exception<sp/>or<sp/>aborts<sp/>the<sp/>current<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Known<sp/>restrictions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>You<sp/>cannot<sp/>stream<sp/>a<sp/>failure<sp/>message<sp/>to<sp/>this<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>even<sp/>though<sp/>the<sp/>implementations<sp/>of<sp/>the<sp/>following<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>macros<sp/>are<sp/>much<sp/>alike,<sp/>we<sp/>cannot<sp/>refactor<sp/>them<sp/>to<sp/>use<sp/>a<sp/>common</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>helper<sp/>macro,<sp/>due<sp/>to<sp/>some<sp/>peculiarity<sp/>in<sp/>how<sp/>the<sp/>preprocessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>works.<sp/><sp/>If<sp/>we<sp/>do<sp/>that,<sp/>the<sp/>code<sp/>won&apos;t<sp/>compile<sp/>when<sp/>the<sp/>user<sp/>gives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT_NONFATAL_FAILURE()<sp/>a<sp/>statement<sp/>that<sp/>contains<sp/>a<sp/>macro<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expands<sp/>to<sp/>code<sp/>containing<sp/>an<sp/>unprotected<sp/>comma.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AcceptsMacroThatExpandsToUnprotectedComma<sp/>test<sp/>in<sp/>gtest_unittest.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>catches<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>same<sp/>reason,<sp/>we<sp/>have<sp/>to<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(::testing::internal::AlwaysTrue())<sp/>{<sp/>statement;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>avoid<sp/>an<sp/>MSVC<sp/>warning<sp/>on<sp/>unreachable<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_NONFATAL_FAILURE(statement,<sp/>substr)<sp/>\</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"><sp/><sp/>do<sp/>{\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::testing::TestPartResultArray<sp/>gtest_failures;\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::testing::internal::SingleFailureChecker<sp/>gtest_checker(\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;gtest_failures,<sp/>::testing::TestPartResult::kNonFatalFailure,<sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(substr));\</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::ScopedFakeTestPartResultReporter<sp/>gtest_reporter(\</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::ScopedFakeTestPartResultReporter::<sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERCEPT_ONLY_CURRENT_THREAD,<sp/>&amp;gtest_failures);\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(::testing::internal::AlwaysTrue())<sp/>{<sp/>statement;<sp/>}\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(::testing::internal::AlwaysFalse())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(statement,<sp/>substr)<sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/>do<sp/>{\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::testing::TestPartResultArray<sp/>gtest_failures;\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::testing::internal::SingleFailureChecker<sp/>gtest_checker(\</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;gtest_failures,<sp/>::testing::TestPartResult::kNonFatalFailure,<sp/>\</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(substr));\</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::ScopedFakeTestPartResultReporter<sp/>gtest_reporter(\</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::ScopedFakeTestPartResultReporter::INTERCEPT_ALL_THREADS,<sp/>\</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;gtest_failures);\</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(::testing::internal::AlwaysTrue())<sp/>{<sp/>statement;<sp/>}\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(::testing::internal::AlwaysFalse())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_INCLUDE_GTEST_GTEST_SPI_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wchar.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(kenton@google.com):<sp/>Use<sp/>autoconf<sp/>to<sp/>detect<sp/>availability<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gettimeofday().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_HAS_GETTIMEOFDAY_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sched.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Declares<sp/>vsnprintf().<sp/><sp/>This<sp/>header<sp/>is<sp/>not<sp/>available<sp/>on<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;strings.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_HAS_GETTIMEOFDAY_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_ZOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_HAS_GETTIMEOFDAY_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>z/OS<sp/>we<sp/>additionally<sp/>need<sp/>strings.h<sp/>for<sp/>strcasecmp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;strings.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_WINDOWS_MOBILE<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>on<sp/>Windows<sp/>CE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_WINDOWS<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>on<sp/>Windows<sp/>proper.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/timeb.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS_MINGW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MinGW<sp/>has<sp/>gettimeofday()<sp/>but<sp/>not<sp/>_ftime64().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(kenton@google.com):<sp/>Use<sp/>autoconf<sp/>to<sp/>detect<sp/>availability<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>gettimeofday().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(kenton@google.com):<sp/>There<sp/>are<sp/>other<sp/>ways<sp/>to<sp/>get<sp/>the<sp/>time<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Windows,<sp/>like<sp/>GetTickCount()<sp/>or<sp/>GetSystemTimeAsFileTime().<sp/><sp/>MinGW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>supports<sp/>these.<sp/><sp/>consider<sp/>using<sp/>them<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>GTEST_HAS_GETTIMEOFDAY_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MINGW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cpplint<sp/>thinks<sp/>that<sp/>the<sp/>header<sp/>is<sp/>already<sp/>included,<sp/>so<sp/>we<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>silence<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assume<sp/>other<sp/>platforms<sp/>have<sp/>gettimeofday().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(kenton@google.com):<sp/>Use<sp/>autoconf<sp/>to<sp/>detect<sp/>availability<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>gettimeofday().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_HAS_GETTIMEOFDAY_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cpplint<sp/>thinks<sp/>that<sp/>the<sp/>header<sp/>is<sp/>already<sp/>included,<sp/>so<sp/>we<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>silence<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;arpa/inet.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;netdb.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Indicates<sp/>that<sp/>this<sp/>translation<sp/>unit<sp/>is<sp/>part<sp/>of<sp/>Google<sp/>Test&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation.<sp/><sp/>It<sp/>must<sp/>come<sp/>before<sp/>gtest-internal-inl.h<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>included,<sp/>or<sp/>there<sp/>will<sp/>be<sp/>a<sp/>compiler<sp/>error.<sp/><sp/>This<sp/>trick<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prevent<sp/>a<sp/>user<sp/>from<sp/>accidentally<sp/>including<sp/>gtest-internal-inl.h<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>his<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IMPLEMENTATION_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utility<sp/>functions<sp/>and<sp/>classes<sp/>used<sp/>by<sp/>the<sp/>Google<sp/>C++<sp/>testing<sp/>framework.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>contains<sp/>purely<sp/>Google<sp/>Test&apos;s<sp/>internal<sp/>implementation.<sp/><sp/>Please</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DO<sp/>NOT<sp/>#INCLUDE<sp/>IT<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_SRC_GTEST_INTERNAL_INL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_SRC_GTEST_INTERNAL_INL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_IMPLEMENTATION_<sp/>is<sp/>defined<sp/>to<sp/>1<sp/>iff<sp/>the<sp/>current<sp/>translation<sp/>unit<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>part<sp/>of<sp/>Google<sp/>Test&apos;s<sp/>implementation;<sp/>otherwise<sp/>it&apos;s<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_IMPLEMENTATION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user<sp/>is<sp/>trying<sp/>to<sp/>include<sp/>this<sp/>from<sp/>his<sp/>code<sp/>-<sp/>just<sp/>say<sp/>no.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>error<sp/>&quot;gtest-internal-inl.h<sp/>is<sp/>part<sp/>of<sp/>Google<sp/>Test&apos;s<sp/>internal<sp/>implementation.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>error<sp/>&quot;It<sp/>must<sp/>not<sp/>be<sp/>included<sp/>except<sp/>by<sp/>Google<sp/>Test<sp/>itself.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_IMPLEMENTATION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32_WCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!_WIN32_WCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>strtoll/_strtoul64/malloc/free.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>memmove.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;arpa/inet.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;netdb.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Declares<sp/>the<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>want<sp/>the<sp/>users<sp/>to<sp/>modify<sp/>this<sp/>flag<sp/>in<sp/>the<sp/>code,<sp/>but<sp/>want</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test&apos;s<sp/>own<sp/>unit<sp/>tests<sp/>to<sp/>be<sp/>able<sp/>to<sp/>access<sp/>it.<sp/>Therefore<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>declare<sp/>it<sp/>here<sp/>as<sp/>opposed<sp/>to<sp/>in<sp/>gtest.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">GTEST_DECLARE_bool_(death_test_use_fork);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>of<sp/>GetTestTypeId()<sp/>as<sp/>seen<sp/>from<sp/>within<sp/>the<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>library.<sp/><sp/>This<sp/>is<sp/>solely<sp/>for<sp/>testing<sp/>GetTestTypeId().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypeId<sp/>kTestTypeIdInGoogleTest;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Names<sp/>of<sp/>the<sp/>flags<sp/>(needed<sp/>for<sp/>parsing<sp/>Google<sp/>Test<sp/>flags).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kAlsoRunDisabledTestsFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;also_run_disabled_tests&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kBreakOnFailureFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;break_on_failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kCatchExceptionsFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;catch_exceptions&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kColorFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;color&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kFilterFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;filter&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kListTestsFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;list_tests&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kOutputFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;output&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kPrintTimeFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;print_time&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kRandomSeedFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;random_seed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kRepeatFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;repeat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kShuffleFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;shuffle&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kStackTraceDepthFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;stack_trace_depth&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kStreamResultToFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;stream_result_to&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kThrowOnFailureFlag[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;throw_on_failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>valid<sp/>random<sp/>seed<sp/>must<sp/>be<sp/>in<sp/>[1,<sp/>kMaxRandomSeed].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kMaxRandomSeed<sp/>=<sp/>99999;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>g_help_flag<sp/>is<sp/>true<sp/>iff<sp/>the<sp/>--help<sp/>flag<sp/>or<sp/>an<sp/>equivalent<sp/>form<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specified<sp/>on<sp/>the<sp/>command<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_help_flag;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>time<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">GTEST_API_<sp/>TimeInMillis<sp/>GetTimeInMillis();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>Google<sp/>Test<sp/>should<sp/>use<sp/>colors<sp/>in<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShouldUseColor(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stdout_is_tty);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>the<sp/>given<sp/>time<sp/>in<sp/>milliseconds<sp/>as<sp/>seconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">GTEST_API_<sp/>std::string<sp/>FormatTimeInMillisAsSeconds(TimeInMillis<sp/>ms);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>given<sp/>time<sp/>in<sp/>milliseconds<sp/>to<sp/>a<sp/>date<sp/>string<sp/>in<sp/>the<sp/>ISO<sp/>8601</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>format,<sp/>without<sp/>the<sp/>timezone<sp/>information.<sp/><sp/>N.B.:<sp/>due<sp/>to<sp/>the<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-reentrant<sp/>localtime()<sp/>function,<sp/>this<sp/>function<sp/>is<sp/>not<sp/>thread<sp/>safe.<sp/><sp/>Do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>use<sp/>it<sp/>in<sp/>any<sp/>code<sp/>that<sp/>can<sp/>be<sp/>called<sp/>from<sp/>multiple<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal">GTEST_API_<sp/>std::string<sp/>FormatEpochTimeInMillisAsIso8601(TimeInMillis<sp/>ms);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>a<sp/>string<sp/>for<sp/>an<sp/>Int32<sp/>flag,<sp/>in<sp/>the<sp/>form<sp/>of<sp/>&quot;--flag=value&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>success,<sp/>stores<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>in<sp/>*value,<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>true.<sp/><sp/>On<sp/>failure,<sp/>returns<sp/>false<sp/>without<sp/>changing<sp/>*value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ParseInt32Flag(</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,<sp/>Int32*<sp/>value);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>random<sp/>seed<sp/>in<sp/>range<sp/>[1,<sp/>kMaxRandomSeed]<sp/>based<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>--gtest_random_seed<sp/>flag<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetRandomSeedFromFlag(Int32<sp/>random_seed_flag)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>raw_seed<sp/>=<sp/>(random_seed_flag<sp/>==<sp/>0)<sp/>?</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(GetTimeInMillis())<sp/>:</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(random_seed_flag);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalizes<sp/>the<sp/>actual<sp/>seed<sp/>to<sp/>range<sp/>[1,<sp/>kMaxRandomSeed]<sp/>such<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>easy<sp/>to<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>normalized_seed<sp/>=</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((raw_seed<sp/>-<sp/>1U)<sp/>%</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kMaxRandomSeed))<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>normalized_seed;</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>first<sp/>valid<sp/>random<sp/>seed<sp/>after<sp/>&apos;seed&apos;.<sp/><sp/>The<sp/>behavior<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>undefined<sp/>if<sp/>&apos;seed&apos;<sp/>is<sp/>invalid.<sp/><sp/>The<sp/>seed<sp/>after<sp/>kMaxRandomSeed<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>considered<sp/>to<sp/>be<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetNextRandomSeed(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>GTEST_CHECK_(1<sp/>&lt;=<sp/>seed<sp/>&amp;&amp;<sp/>seed<sp/>&lt;=<sp/>kMaxRandomSeed)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>random<sp/>seed<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>seed<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>must<sp/>be<sp/>in<sp/>[1,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>kMaxRandomSeed<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;].&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_seed<sp/>=<sp/>seed<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(next_seed<sp/>&gt;<sp/>kMaxRandomSeed)<sp/>?<sp/>1<sp/>:<sp/>next_seed;</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>saves<sp/>the<sp/>values<sp/>of<sp/>all<sp/>Google<sp/>Test<sp/>flags<sp/>in<sp/>its<sp/>c&apos;tor,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>restores<sp/>them<sp/>in<sp/>its<sp/>d&apos;tor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="classtesting_1_1internal_1_1_g_test_flag_saver" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_g_test_flag_saver" kindref="compound">GTestFlagSaver</ref><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>c&apos;tor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_g_test_flag_saver" kindref="compound">GTestFlagSaver</ref>()<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>also_run_disabled_tests_<sp/>=<sp/>GTEST_FLAG(also_run_disabled_tests);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>break_on_failure_<sp/>=<sp/>GTEST_FLAG(break_on_failure);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>catch_exceptions_<sp/>=<sp/>GTEST_FLAG(catch_exceptions);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>color_<sp/>=<sp/>GTEST_FLAG(color);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>death_test_style_<sp/>=<sp/>GTEST_FLAG(death_test_style);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>death_test_use_fork_<sp/>=<sp/>GTEST_FLAG(death_test_use_fork);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>filter_<sp/>=<sp/>GTEST_FLAG(filter);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_run_death_test_<sp/>=<sp/>GTEST_FLAG(internal_run_death_test);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>list_tests_<sp/>=<sp/>GTEST_FLAG(list_tests);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>output_<sp/>=<sp/>GTEST_FLAG(output);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>print_time_<sp/>=<sp/>GTEST_FLAG(print_time);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>random_seed_<sp/>=<sp/>GTEST_FLAG(random_seed);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>repeat_<sp/>=<sp/>GTEST_FLAG(repeat);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>shuffle_<sp/>=<sp/>GTEST_FLAG(shuffle);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>stack_trace_depth_<sp/>=<sp/>GTEST_FLAG(stack_trace_depth);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>stream_result_to_<sp/>=<sp/>GTEST_FLAG(stream_result_to);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>throw_on_failure_<sp/>=<sp/>GTEST_FLAG(throw_on_failure);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>d&apos;tor<sp/>is<sp/>not<sp/>virtual.<sp/><sp/>DO<sp/>NOT<sp/>INHERIT<sp/>FROM<sp/>THIS<sp/>CLASS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_g_test_flag_saver" kindref="compound">~GTestFlagSaver</ref>()<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(also_run_disabled_tests)<sp/>=<sp/>also_run_disabled_tests_;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(break_on_failure)<sp/>=<sp/>break_on_failure_;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(catch_exceptions)<sp/>=<sp/>catch_exceptions_;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(color)<sp/>=<sp/>color_;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(death_test_style)<sp/>=<sp/>death_test_style_;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(death_test_use_fork)<sp/>=<sp/>death_test_use_fork_;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(filter)<sp/>=<sp/>filter_;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(internal_run_death_test)<sp/>=<sp/>internal_run_death_test_;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(list_tests)<sp/>=<sp/>list_tests_;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(output)<sp/>=<sp/>output_;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(print_time)<sp/>=<sp/>print_time_;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(random_seed)<sp/>=<sp/>random_seed_;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(repeat)<sp/>=<sp/>repeat_;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(shuffle)<sp/>=<sp/>shuffle_;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(stack_trace_depth)<sp/>=<sp/>stack_trace_depth_;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(stream_result_to)<sp/>=<sp/>stream_result_to_;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG(throw_on_failure)<sp/>=<sp/>throw_on_failure_;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fields<sp/>for<sp/>saving<sp/>the<sp/>original<sp/>values<sp/>of<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>also_run_disabled_tests_;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>break_on_failure_;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>catch_exceptions_;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>std::string<sp/>color_;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>std::string<sp/>death_test_style_;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>death_test_use_fork_;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>std::string<sp/>filter_;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>std::string<sp/>internal_run_death_test_;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>list_tests_;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>std::string<sp/>output_;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>print_time_;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>internal::Int32<sp/>random_seed_;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>internal::Int32<sp/>repeat_;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shuffle_;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>internal::Int32<sp/>stack_trace_depth_;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>std::string<sp/>stream_result_to_;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>throw_on_failure_;</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}<sp/>GTEST_ATTRIBUTE_UNUSED_;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>Unicode<sp/>code<sp/>point<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>in<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code_point<sp/>parameter<sp/>is<sp/>of<sp/>type<sp/>UInt32<sp/>because<sp/>wchar_t<sp/>may<sp/>not<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wide<sp/>enough<sp/>to<sp/>contain<sp/>a<sp/>code<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>code_point<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>Unicode<sp/>code<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(i.e.<sp/>outside<sp/>of<sp/>Unicode<sp/>range<sp/>U+0<sp/>to<sp/>U+10FFFF)<sp/>it<sp/>will<sp/>be<sp/>converted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>&quot;(Invalid<sp/>Unicode<sp/>0xXXXXXXXX)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal">GTEST_API_<sp/>std::string<sp/>CodePointToUtf8(UInt32<sp/>code_point);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>wide<sp/>string<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>in<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>wide<sp/>string<sp/>is<sp/>assumed<sp/>to<sp/>have<sp/>the<sp/>following<sp/>encoding:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>UTF-16<sp/>if<sp/>sizeof(wchar_t)<sp/>==<sp/>2<sp/>(on<sp/>Windows,<sp/>Cygwin,<sp/>Symbian<sp/>OS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>UTF-32<sp/>if<sp/>sizeof(wchar_t)<sp/>==<sp/>4<sp/>(on<sp/>Linux)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parameter<sp/>str<sp/>points<sp/>to<sp/>a<sp/>null-terminated<sp/>wide<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parameter<sp/>num_chars<sp/>may<sp/>additionally<sp/>limit<sp/>the<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>wchar_t<sp/>characters<sp/>processed.<sp/>-1<sp/>is<sp/>used<sp/>when<sp/>the<sp/>entire<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>processed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>string<sp/>contains<sp/>code<sp/>points<sp/>that<sp/>are<sp/>not<sp/>valid<sp/>Unicode<sp/>code<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(i.e.<sp/>outside<sp/>of<sp/>Unicode<sp/>range<sp/>U+0<sp/>to<sp/>U+10FFFF)<sp/>they<sp/>will<sp/>be<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>&apos;(Invalid<sp/>Unicode<sp/>0xXXXXXXXX)&apos;.<sp/>If<sp/>the<sp/>string<sp/>is<sp/>in<sp/>UTF16<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>contains<sp/>invalid<sp/>UTF-16<sp/>surrogate<sp/>pairs,<sp/>values<sp/>in<sp/>those<sp/>pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>encoded<sp/>as<sp/>individual<sp/>Unicode<sp/>characters<sp/>from<sp/>Basic<sp/>Normal<sp/>Plane.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal">GTEST_API_<sp/>std::string<sp/>WideStringToUtf8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_chars);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>the<sp/>GTEST_SHARD_STATUS_FILE<sp/>environment<sp/>variable,<sp/>and<sp/>creates<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>variable<sp/>is<sp/>present.<sp/>If<sp/>a<sp/>file<sp/>already<sp/>exists<sp/>at<sp/>this<sp/>location,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>will<sp/>write<sp/>over<sp/>it.<sp/>If<sp/>the<sp/>variable<sp/>is<sp/>present,<sp/>but<sp/>the<sp/>file<sp/>cannot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>created,<sp/>prints<sp/>an<sp/>error<sp/>and<sp/>exits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteToShardStatusFileIfNeeded();</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>whether<sp/>sharding<sp/>is<sp/>enabled<sp/>by<sp/>examining<sp/>the<sp/>relevant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment<sp/>variable<sp/>values.<sp/>If<sp/>the<sp/>variables<sp/>are<sp/>present,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>inconsistent<sp/>(e.g.,<sp/>shard_index<sp/>&gt;=<sp/>total_shards),<sp/>prints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>error<sp/>and<sp/>exits.<sp/>If<sp/>in_subprocess_for_death_test,<sp/>sharding<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>disabled<sp/>because<sp/>it<sp/>must<sp/>only<sp/>be<sp/>applied<sp/>to<sp/>the<sp/>original<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>process.<sp/>Otherwise,<sp/>we<sp/>could<sp/>filter<sp/>out<sp/>death<sp/>tests<sp/>we<sp/>intended<sp/>to<sp/>execute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShouldShard(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>total_shards_str,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>shard_index_str,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_subprocess_for_death_test);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>environment<sp/>variable<sp/>var<sp/>as<sp/>an<sp/>Int32.<sp/>If<sp/>it<sp/>is<sp/>unset,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>default_val.<sp/>If<sp/>it<sp/>is<sp/>not<sp/>an<sp/>Int32,<sp/>prints<sp/>an<sp/>error<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>aborts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal">GTEST_API_<sp/>Int32<sp/>Int32FromEnvOrDie(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>env_var,<sp/>Int32<sp/>default_val);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>the<sp/>total<sp/>number<sp/>of<sp/>shards,<sp/>the<sp/>shard<sp/>index,<sp/>and<sp/>the<sp/>test<sp/>id,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>should<sp/>be<sp/>run<sp/>on<sp/>this<sp/>shard.<sp/>The<sp/>test<sp/>id<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="comment">//<sp/>some<sp/>arbitrary<sp/>but<sp/>unique<sp/>non-negative<sp/>integer<sp/>assigned<sp/>to<sp/>each<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method.<sp/>Assumes<sp/>that<sp/>0<sp/>&lt;=<sp/>shard_index<sp/>&lt;<sp/>total_shards.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShouldRunTestOnShard(</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_shards,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shard_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_id);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STL<sp/>container<sp/>utilities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>given<sp/>container<sp/>that<sp/>satisfy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>predicate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Container,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Predicate&gt;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CountIf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>c,<sp/>Predicate<sp/>predicate)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implemented<sp/>as<sp/>an<sp/>explicit<sp/>loop<sp/>since<sp/>std::count_if()<sp/>in<sp/>libCstd<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Solaris<sp/>has<sp/>a<sp/>non-standard<sp/>signature.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::const_iterator<sp/>it<sp/>=<sp/>c.begin();<sp/>it<sp/>!=<sp/>c.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predicate(*it))</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Applies<sp/>a<sp/>function/functor<sp/>to<sp/>each<sp/>element<sp/>in<sp/>the<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Container,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor&gt;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ForEach(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>c,<sp/>Functor<sp/>functor)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>std::for_each(c.begin(),<sp/>c.end(),<sp/>functor);</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>i-th<sp/>element<sp/>of<sp/>the<sp/>vector,<sp/>or<sp/>default_value<sp/>if<sp/>i<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>range<sp/>[0,<sp/>v.size()).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>E<sp/>GetElementOr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;E&gt;&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>E<sp/>default_value)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0<sp/>||<sp/>i<sp/>&gt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v.size()))<sp/>?<sp/>default_value<sp/>:<sp/>v[i];</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Performs<sp/>an<sp/>in-place<sp/>shuffle<sp/>of<sp/>a<sp/>range<sp/>of<sp/>the<sp/>vector&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;begin&apos;<sp/>and<sp/>&apos;end&apos;<sp/>are<sp/>element<sp/>indices<sp/>as<sp/>an<sp/>STL-style<sp/>range;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="comment">//<sp/>i.e.<sp/>[begin,<sp/>end)<sp/>are<sp/>shuffled,<sp/>where<sp/>&apos;end&apos;<sp/>==<sp/>size()<sp/>means<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shuffle<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShuffleRange(internal::Random*<sp/>random,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;E&gt;*<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v-&gt;size());</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>GTEST_CHECK_(0<sp/>&lt;=<sp/>begin<sp/>&amp;&amp;<sp/>begin<sp/>&lt;=<sp/>size)</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>shuffle<sp/>range<sp/>start<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>begin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>must<sp/>be<sp/>in<sp/>range<sp/>[0,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>size<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;].&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>GTEST_CHECK_(begin<sp/>&lt;=<sp/>end<sp/>&amp;&amp;<sp/>end<sp/>&lt;=<sp/>size)</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>shuffle<sp/>range<sp/>finish<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>end<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>must<sp/>be<sp/>in<sp/>range<sp/>[&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>begin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>size<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;].&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fisher-Yates<sp/>shuffle,<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>http://en.wikipedia.org/wiki/Fisher-Yates_shuffle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>range_width<sp/>=<sp/>end<sp/>-<sp/>begin;<sp/>range_width<sp/>&gt;=<sp/>2;<sp/>range_width--)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_in_range<sp/>=<sp/>begin<sp/>+<sp/>range_width<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selected<sp/>=<sp/>begin<sp/>+<sp/>random-&gt;Generate(range_width);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap((*v)[selected],<sp/>(*v)[last_in_range]);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Performs<sp/>an<sp/>in-place<sp/>shuffle<sp/>of<sp/>the<sp/>vector&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Shuffle(internal::Random*<sp/>random,<sp/>std::vector&lt;E&gt;*<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>ShuffleRange(random,<sp/>0,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v-&gt;size()),<sp/>v);</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function<sp/>for<sp/>deleting<sp/>an<sp/>object.<sp/><sp/>Handy<sp/>for<sp/>being<sp/>used<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Delete(T*<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>predicate<sp/>that<sp/>checks<sp/>the<sp/>key<sp/>of<sp/>a<sp/>TestProperty<sp/>against<sp/>a<sp/>known<sp/>key.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestPropertyKeyIs<sp/>is<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747" refid="classtesting_1_1internal_1_1_test_property_key_is" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_test_property_key_is" kindref="compound">TestPropertyKeyIs</ref><sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TestPropertyKeyIs<sp/>has<sp/>NO<sp/>default<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_test_property_key_is" kindref="compound">TestPropertyKeyIs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)<sp/>:<sp/>key_(key)<sp/>{}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>name<sp/>of<sp/>test<sp/>property<sp/>matches<sp/>on<sp/>key_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_property" kindref="compound">TestProperty</ref>&amp;<sp/>test_property)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_property.key()<sp/>==<sp/>key_;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>std::string<sp/>key_;</highlight></codeline>
<codeline lineno="761"><highlight class="normal">};</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>UnitTestOptions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>contains<sp/>functions<sp/>for<sp/>processing<sp/>options<sp/>the<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specifies<sp/>when<sp/>running<sp/>the<sp/>tests.<sp/><sp/>It<sp/>has<sp/>only<sp/>static<sp/>members.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>most<sp/>cases,<sp/>the<sp/>user<sp/>can<sp/>specify<sp/>an<sp/>option<sp/>using<sp/>either<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment<sp/>variable<sp/>or<sp/>a<sp/>command<sp/>line<sp/>flag.<sp/><sp/>E.g.<sp/>you<sp/>can<sp/>set<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>filter<sp/>using<sp/>either<sp/>GTEST_FILTER<sp/>or<sp/>--gtest_filter.<sp/><sp/>If<sp/>both</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>variable<sp/>and<sp/>the<sp/>flag<sp/>are<sp/>present,<sp/>the<sp/>latter<sp/>overrides<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="comment">//<sp/>former.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773" refid="classtesting_1_1internal_1_1_unit_test_options" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/><ref refid="classtesting_1_1internal_1_1_unit_test_options" kindref="compound">UnitTestOptions</ref><sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functions<sp/>for<sp/>processing<sp/>the<sp/>gtest_output<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>output<sp/>format,<sp/>or<sp/>&quot;&quot;<sp/>for<sp/>normal<sp/>printed<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>GetOutputFormat();</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>absolute<sp/>path<sp/>of<sp/>the<sp/>requested<sp/>output<sp/>file,<sp/>or<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>(test_detail.xml<sp/>in<sp/>the<sp/>original<sp/>working<sp/>directory)<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>none<sp/>was<sp/>explicitly<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>GetAbsolutePathToOutputFile();</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functions<sp/>for<sp/>processing<sp/>the<sp/>gtest_filter<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>wildcard<sp/>pattern<sp/>matches<sp/>the<sp/>string.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>&apos;:&apos;<sp/>or<sp/>&apos;\0&apos;<sp/>character<sp/>in<sp/>pattern<sp/>marks<sp/>the<sp/>end<sp/>of<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>recursive<sp/>algorithm<sp/>isn&apos;t<sp/>very<sp/>efficient,<sp/>but<sp/>is<sp/>clear<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>works<sp/>well<sp/>enough<sp/>for<sp/>matching<sp/>test<sp/>names,<sp/>which<sp/>are<sp/>short.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PatternMatchesString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pattern,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>user-specified<sp/>filter<sp/>matches<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>and<sp/>the<sp/>test<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FilterMatchesTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;test_case_name,</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;test_name);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>for<sp/>supporting<sp/>the<sp/>gtest_catch_exception<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>EXCEPTION_EXECUTE_HANDLER<sp/>if<sp/>Google<sp/>Test<sp/>should<sp/>handle<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>given<sp/>SEH<sp/>exception,<sp/>or<sp/>EXCEPTION_CONTINUE_SEARCH<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>useful<sp/>as<sp/>an<sp/>__except<sp/>condition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GTestShouldProcessSEH(DWORD<sp/>exception_code);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>&quot;name&quot;<sp/>matches<sp/>the<sp/>&apos;:&apos;<sp/>separated<sp/>list<sp/>of<sp/>glob-style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>filters<sp/>in<sp/>&quot;filter&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchesFilter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filter);</highlight></codeline>
<codeline lineno="811"><highlight class="normal">};</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>application&apos;s<sp/>name,<sp/>removing<sp/>directory<sp/>path<sp/>if<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>present.<sp/><sp/>Used<sp/>by<sp/>UnitTestOptions::GetOutputFile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal">GTEST_API_<sp/><ref refid="classtesting_1_1internal_1_1_file_path" kindref="compound">FilePath</ref><sp/>GetCurrentExecutableName();</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>role<sp/>interface<sp/>for<sp/>getting<sp/>the<sp/>OS<sp/>stack<sp/>trace<sp/>as<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818" refid="classtesting_1_1internal_1_1_os_stack_trace_getter_interface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_os_stack_trace_getter_interface" kindref="compound">OsStackTraceGetterInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_os_stack_trace_getter_interface" kindref="compound">OsStackTraceGetterInterface</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_os_stack_trace_getter_interface" kindref="compound">~OsStackTraceGetterInterface</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>as<sp/>an<sp/>std::string.<sp/><sp/>Parameters:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>max_depth<sp/><sp/>-<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>stack<sp/>frames<sp/>to<sp/>be<sp/>included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>skip_count<sp/>-<sp/>the<sp/>number<sp/>of<sp/>top<sp/>frames<sp/>to<sp/>be<sp/>skipped;<sp/>doesn&apos;t<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>against<sp/>max_depth.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>CurrentStackTrace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_count)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>UponLeavingGTest()<sp/>should<sp/>be<sp/>called<sp/>immediately<sp/>before<sp/>Google<sp/>Test<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>user<sp/>code.<sp/>It<sp/>saves<sp/>some<sp/>information<sp/>about<sp/>the<sp/>current<sp/>stack<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CurrentStackTrace()<sp/>will<sp/>use<sp/>to<sp/>find<sp/>and<sp/>hide<sp/>Google<sp/>Test<sp/>stack<sp/>frames.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UponLeavingGTest()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_os_stack_trace_getter_interface" kindref="compound">OsStackTraceGetterInterface</ref>);</highlight></codeline>
<codeline lineno="838"><highlight class="normal">};</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>working<sp/>implementation<sp/>of<sp/>the<sp/>OsStackTraceGetterInterface<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841" refid="classtesting_1_1internal_1_1_os_stack_trace_getter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_os_stack_trace_getter" kindref="compound">OsStackTraceGetter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_os_stack_trace_getter_interface" kindref="compound">OsStackTraceGetterInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_os_stack_trace_getter" kindref="compound">OsStackTraceGetter</ref>()<sp/>:<sp/>caller_frame_(NULL)<sp/>{}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>CurrentStackTrace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_count)</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(mutex_);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UponLeavingGTest()<sp/>GTEST_LOCK_EXCLUDED_(mutex_);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>string<sp/>is<sp/>inserted<sp/>in<sp/>place<sp/>of<sp/>stack<sp/>frames<sp/>that<sp/>are<sp/>part<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test&apos;s<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>kElidedFramesMarker;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_mutex" kindref="compound">Mutex</ref><sp/>mutex_;<sp/><sp/></highlight><highlight class="comment">//<sp/>protects<sp/>all<sp/>internal<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>save<sp/>the<sp/>stack<sp/>frame<sp/>below<sp/>the<sp/>frame<sp/>that<sp/>calls<sp/>user<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>this<sp/>because<sp/>the<sp/>address<sp/>of<sp/>the<sp/>frame<sp/>immediately<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>user<sp/>code<sp/>changes<sp/>between<sp/>the<sp/>call<sp/>to<sp/>UponLeavingGTest()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>calls<sp/>to<sp/>CurrentStackTrace()<sp/>from<sp/>within<sp/>the<sp/>user<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>caller_frame_;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_os_stack_trace_getter" kindref="compound">OsStackTraceGetter</ref>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal">};</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Information<sp/>about<sp/>a<sp/>Google<sp/>Test<sp/>trace<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867" refid="structtesting_1_1internal_1_1_trace_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_trace_info" kindref="compound">TraceInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>std::string<sp/>message;</highlight></codeline>
<codeline lineno="871"><highlight class="normal">};</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>default<sp/>global<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>used<sp/>in<sp/>UnitTestImpl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>should<sp/>only<sp/>be<sp/>used<sp/>by<sp/>UnitTestImpl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875" refid="classtesting_1_1internal_1_1_default_global_test_part_result_reporter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_default_global_test_part_result_reporter" kindref="compound">DefaultGlobalTestPartResultReporter</ref></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_part_result_reporter_interface" kindref="compound">TestPartResultReporterInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_default_global_test_part_result_reporter" kindref="compound">DefaultGlobalTestPartResultReporter</ref>(<ref refid="classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">UnitTestImpl</ref>*<sp/>unit_test);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>TestPartResultReporterInterface.<sp/>Reports<sp/>the<sp/>test<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>in<sp/>the<sp/>current<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReportTestPartResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">UnitTestImpl</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>unit_test_;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_default_global_test_part_result_reporter" kindref="compound">DefaultGlobalTestPartResultReporter</ref>);</highlight></codeline>
<codeline lineno="887"><highlight class="normal">};</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>default<sp/>per<sp/>thread<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>used<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnitTestImpl.<sp/>This<sp/>class<sp/>should<sp/>only<sp/>be<sp/>used<sp/>by<sp/>UnitTestImpl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter" kindref="compound">DefaultPerThreadTestPartResultReporter</ref></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_part_result_reporter_interface" kindref="compound">TestPartResultReporterInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter" kindref="compound">DefaultPerThreadTestPartResultReporter</ref>(<ref refid="classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">UnitTestImpl</ref>*<sp/>unit_test);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>TestPartResultReporterInterface.<sp/>The<sp/>implementation<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delegates<sp/>to<sp/>the<sp/>current<sp/>global<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>of<sp/>*unit_test_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReportTestPartResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">UnitTestImpl</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>unit_test_;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter" kindref="compound">DefaultPerThreadTestPartResultReporter</ref>);</highlight></codeline>
<codeline lineno="903"><highlight class="normal">};</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>private<sp/>implementation<sp/>of<sp/>the<sp/>UnitTest<sp/>class.<sp/><sp/>We<sp/>don&apos;t<sp/>protect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>methods<sp/>under<sp/>a<sp/>mutex,<sp/>as<sp/>this<sp/>class<sp/>is<sp/>not<sp/>accessible<sp/>by<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>user<sp/>and<sp/>the<sp/>UnitTest<sp/>class<sp/>that<sp/>delegates<sp/>work<sp/>to<sp/>this<sp/>class<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="comment">//<sp/>proper<sp/>locking.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909" refid="classtesting_1_1internal_1_1_unit_test_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/><ref refid="classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">UnitTestImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">UnitTestImpl</ref>(<ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>*<sp/>parent);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">~UnitTestImpl</ref>();</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>different<sp/>ways<sp/>to<sp/>register<sp/>your<sp/>own<sp/>TestPartResultReporter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>register<sp/>your<sp/>own<sp/>reporter<sp/>to<sp/>listen<sp/>either<sp/>only<sp/>for<sp/>test<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>current<sp/>thread<sp/>or<sp/>for<sp/>results<sp/>from<sp/>all<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>each<sp/>per-thread<sp/>test<sp/>result<sp/>reporter<sp/>just<sp/>passes<sp/>a<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TestPartResult<sp/>to<sp/>the<sp/>global<sp/>test<sp/>result<sp/>reporter,<sp/>which<sp/>registers<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>part<sp/>result<sp/>for<sp/>the<sp/>currently<sp/>running<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>global<sp/>test<sp/>part<sp/>result<sp/>reporter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_part_result_reporter_interface" kindref="compound">TestPartResultReporterInterface</ref>*<sp/>GetGlobalTestPartResultReporter();</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>global<sp/>test<sp/>part<sp/>result<sp/>reporter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetGlobalTestPartResultReporter(</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_test_part_result_reporter_interface" kindref="compound">TestPartResultReporterInterface</ref>*<sp/>reporter);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>for<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_part_result_reporter_interface" kindref="compound">TestPartResultReporterInterface</ref>*<sp/>GetTestPartResultReporterForCurrentThread();</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>for<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetTestPartResultReporterForCurrentThread(</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_test_part_result_reporter_interface" kindref="compound">TestPartResultReporterInterface</ref>*<sp/>reporter);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>successful_test_case_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failed_test_case_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_test_case_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>cases<sp/>that<sp/>contain<sp/>at<sp/>least<sp/>one<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_case_to_run_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>successful_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failed_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>that<sp/>will<sp/>be<sp/>reported<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reportable_disabled_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>disabled_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>to<sp/>be<sp/>printed<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reportable_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_to_run_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>time<sp/>of<sp/>the<sp/>test<sp/>program<sp/>start,<sp/>in<sp/>ms<sp/>from<sp/>the<sp/>start<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>UNIX<sp/>epoch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>TimeInMillis<sp/>start_timestamp()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start_timestamp_;<sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>elapsed<sp/>time,<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>TimeInMillis<sp/>elapsed_time()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elapsed_time_;<sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>unit<sp/>test<sp/>passed<sp/>(i.e.<sp/>all<sp/>test<sp/>cases<sp/>passed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Passed()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!Failed();<sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>unit<sp/>test<sp/>failed<sp/>(i.e.<sp/>some<sp/>test<sp/>case<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>something<sp/>outside<sp/>of<sp/>all<sp/>tests<sp/>failed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Failed()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failed_test_case_count()<sp/>&gt;<sp/>0<sp/>||<sp/>ad_hoc_test_result()-&gt;Failed();</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>i-th<sp/>test<sp/>case<sp/>among<sp/>all<sp/>the<sp/>test<sp/>cases.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>total_test_case_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>GetTestCase(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>GetElementOr(test_case_indices_,<sp/>i,<sp/>-1);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>&lt;<sp/>0<sp/>?<sp/>NULL<sp/>:<sp/>test_cases_[i];</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>i-th<sp/>test<sp/>case<sp/>among<sp/>all<sp/>the<sp/>test<sp/>cases.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>total_test_case_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>GetMutableTestCase(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>GetElementOr(test_case_indices_,<sp/>i,<sp/>-1);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>&lt;<sp/>0<sp/>?<sp/>NULL<sp/>:<sp/>test_cases_[index];</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Provides<sp/>access<sp/>to<sp/>the<sp/>event<sp/>listener<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_event_listeners" kindref="compound">TestEventListeners</ref>*<sp/>listeners()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;listeners_;<sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestResult<sp/>for<sp/>the<sp/>test<sp/>that&apos;s<sp/>currently<sp/>running,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>TestResult<sp/>for<sp/>the<sp/>ad<sp/>hoc<sp/>test<sp/>if<sp/>no<sp/>test<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_result" kindref="compound">TestResult</ref>*<sp/>current_test_result();</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestResult<sp/>for<sp/>the<sp/>ad<sp/>hoc<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_result" kindref="compound">TestResult</ref>*<sp/>ad_hoc_test_result()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;ad_hoc_test_result_;<sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>OS<sp/>stack<sp/>trace<sp/>getter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>nothing<sp/>if<sp/>the<sp/>input<sp/>and<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>getter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>the<sp/>same;<sp/>otherwise,<sp/>deletes<sp/>the<sp/>old<sp/>getter<sp/>and<sp/>makes<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>input<sp/>the<sp/>current<sp/>getter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_os_stack_trace_getter(<ref refid="classtesting_1_1internal_1_1_os_stack_trace_getter_interface" kindref="compound">OsStackTraceGetterInterface</ref>*<sp/>getter);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>getter<sp/>if<sp/>it<sp/>is<sp/>not<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>creates<sp/>an<sp/>OsStackTraceGetter,<sp/>makes<sp/>it<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>getter,<sp/>and<sp/>returns<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_os_stack_trace_getter_interface" kindref="compound">OsStackTraceGetterInterface</ref>*<sp/>os_stack_trace_getter();</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>as<sp/>an<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>stack<sp/>frames<sp/>to<sp/>be<sp/>included<sp/>is<sp/>specified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>gtest_stack_trace_depth<sp/>flag.<sp/><sp/>The<sp/>skip_count<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>top<sp/>frames<sp/>to<sp/>be<sp/>skipped,<sp/>which<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>against<sp/>the<sp/>number<sp/>of<sp/>frames<sp/>to<sp/>be<sp/>included.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>if<sp/>Foo()<sp/>calls<sp/>Bar(),<sp/>which<sp/>in<sp/>turn<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CurrentOsStackTraceExceptTop(1),<sp/>Foo()<sp/>will<sp/>be<sp/>included<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>trace<sp/>but<sp/>Bar()<sp/>and<sp/>CurrentOsStackTraceExceptTop()<sp/>won&apos;t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>std::string<sp/>CurrentOsStackTraceExceptTop(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_count)<sp/>GTEST_NO_INLINE_;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Finds<sp/>and<sp/>returns<sp/>a<sp/>TestCase<sp/>with<sp/>the<sp/>given<sp/>name.<sp/><sp/>If<sp/>one<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exist,<sp/>creates<sp/>one<sp/>and<sp/>returns<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Arguments:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>test_case_name:<sp/>name<sp/>of<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>type_param:<sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>the<sp/>test&apos;s<sp/>type<sp/>parameter,<sp/>or<sp/>NULL<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>not<sp/>a<sp/>typed<sp/>or<sp/>a<sp/>type-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>set_up_tc:<sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>sets<sp/>up<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>tear_down_tc:<sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>tears<sp/>down<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>GetTestCase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type_param,</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test::SetUpTestCaseFunc<sp/>set_up_tc,</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test::TearDownTestCaseFunc<sp/>tear_down_tc);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>TestInfo<sp/>to<sp/>the<sp/>unit<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Arguments:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>set_up_tc:<sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>sets<sp/>up<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>tear_down_tc:<sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>tears<sp/>down<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>test_info:<sp/><sp/><sp/><sp/>the<sp/>TestInfo<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddTestInfo(Test::SetUpTestCaseFunc<sp/>set_up_tc,</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test::TearDownTestCaseFunc<sp/>tear_down_tc,</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>support<sp/>thread-safe<sp/>death<sp/>tests,<sp/>we<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remember<sp/>the<sp/>original<sp/>working<sp/>directory<sp/>when<sp/>the<sp/>test<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>first<sp/>invoked.<sp/><sp/>We<sp/>cannot<sp/>do<sp/>this<sp/>in<sp/>RUN_ALL_TESTS(),<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>user<sp/>may<sp/>have<sp/>changed<sp/>the<sp/>current<sp/>directory<sp/>before<sp/>calling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RUN_ALL_TESTS().<sp/><sp/>Therefore<sp/>we<sp/>capture<sp/>the<sp/>current<sp/>directory<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AddTestInfo(),<sp/>which<sp/>is<sp/>called<sp/>to<sp/>register<sp/>a<sp/>TEST<sp/>or<sp/>TEST_F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>main()<sp/>is<sp/>reached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(original_working_dir_.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>original_working_dir_.Set(FilePath::GetCurrentDir());</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_CHECK_(!original_working_dir_.IsEmpty())</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>the<sp/>current<sp/>working<sp/>directory.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>GetTestCase(test_info-&gt;test_case_name(),</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info-&gt;type_param(),</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_up_tc,</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tear_down_tc)-&gt;AddTestInfo(test_info);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>ParameterizedTestCaseRegistry<sp/>object<sp/>used<sp/>to<sp/>keep<sp/>track<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value-parameterized<sp/>tests<sp/>and<sp/>instantiate<sp/>and<sp/>register<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_parameterized_test_case_registry" kindref="compound">internal::ParameterizedTestCaseRegistry</ref>&amp;<sp/>parameterized_test_registry()<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parameterized_test_registry_;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>TestCase<sp/>object<sp/>for<sp/>the<sp/>test<sp/>that&apos;s<sp/>currently<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_current_test_case(<ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>a_current_test_case)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>current_test_case_<sp/>=<sp/>a_current_test_case;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>TestInfo<sp/>object<sp/>for<sp/>the<sp/>test<sp/>that&apos;s<sp/>currently<sp/>running.<sp/><sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>current_test_info<sp/>is<sp/>NULL,<sp/>the<sp/>assertion<sp/>results<sp/>will<sp/>be<sp/>stored<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ad_hoc_test_result_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_current_test_info(<ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>a_current_test_info)<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>current_test_info_<sp/>=<sp/>a_current_test_info;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Registers<sp/>all<sp/>parameterized<sp/>tests<sp/>defined<sp/>using<sp/>TEST_P<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>INSTANTIATE_TEST_CASE_P,<sp/>creating<sp/>regular<sp/>tests<sp/>for<sp/>each<sp/>test/parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>combination.<sp/>This<sp/>method<sp/>can<sp/>be<sp/>called<sp/>more<sp/>then<sp/>once;<sp/>it<sp/>has<sp/>guards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>protecting<sp/>from<sp/>registering<sp/>the<sp/>tests<sp/>more<sp/>then<sp/>once.<sp/><sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value-parameterized<sp/>tests<sp/>are<sp/>disabled,<sp/>RegisterParameterizedTests<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>present<sp/>but<sp/>does<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterParameterizedTests();</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>UnitTest<sp/>object,<sp/>prints<sp/>the<sp/>result,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>true<sp/>if<sp/>all<sp/>tests<sp/>are<sp/>successful.<sp/><sp/>If<sp/>any<sp/>exception<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>thrown<sp/>during<sp/>a<sp/>test,<sp/>this<sp/>test<sp/>is<sp/>considered<sp/>to<sp/>be<sp/>failed,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>tests<sp/>will<sp/>still<sp/>be<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RunAllTests();</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>results<sp/>of<sp/>all<sp/>tests,<sp/>except<sp/>the<sp/>ad<sp/>hoc<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClearNonAdHocTestResult()<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>ForEach(test_cases_,<sp/>TestCase::ClearTestCaseResult);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>results<sp/>of<sp/>ad-hoc<sp/>test<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClearAdHocTestResult()<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>ad_hoc_test_result_.Clear();</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>TestProperty<sp/>to<sp/>the<sp/>current<sp/>TestResult<sp/>object<sp/>when<sp/>invoked<sp/>in<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>context<sp/>of<sp/>a<sp/>test<sp/>or<sp/>a<sp/>test<sp/>case,<sp/>or<sp/>to<sp/>the<sp/>global<sp/>property<sp/>set.<sp/>If<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>already<sp/>contains<sp/>a<sp/>property<sp/>with<sp/>the<sp/>same<sp/>key,<sp/>the<sp/>value<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecordProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_property" kindref="compound">TestProperty</ref>&amp;<sp/>test_property);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>ReactionToSharding<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>HONOR_SHARDING_PROTOCOL,</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>IGNORE_SHARDING_PROTOCOL</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matches<sp/>the<sp/>full<sp/>name<sp/>of<sp/>each<sp/>test<sp/>against<sp/>the<sp/>user-specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>filter<sp/>to<sp/>decide<sp/>whether<sp/>the<sp/>test<sp/>should<sp/>run,<sp/>then<sp/>records<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>in<sp/>each<sp/>TestCase<sp/>and<sp/>TestInfo<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>shard_tests<sp/>==<sp/>HONOR_SHARDING_PROTOCOL,<sp/>further<sp/>filters<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>sharding<sp/>variables<sp/>in<sp/>the<sp/>environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FilterTests(ReactionToSharding<sp/>shard_tests);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>names<sp/>of<sp/>the<sp/>tests<sp/>matching<sp/>the<sp/>user-specified<sp/>filter<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListTestsMatchingFilter();</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>current_test_case()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_test_case_;<sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>current_test_info()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_test_info_;<sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>current_test_info()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_test_info_;<sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>vector<sp/>of<sp/>environments<sp/>that<sp/>need<sp/>to<sp/>be<sp/>set-up/torn-down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>before/after<sp/>the<sp/>tests<sp/>are<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>std::vector&lt;Environment*&gt;&amp;<sp/>environments()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>environments_;<sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Getters<sp/>for<sp/>the<sp/>per-thread<sp/>Google<sp/>Test<sp/>trace<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>std::vector&lt;TraceInfo&gt;&amp;<sp/>gtest_trace_stack()<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(gtest_trace_stack_.pointer());</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TraceInfo&gt;&amp;<sp/>gtest_trace_stack()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gtest_trace_stack_.get();</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitDeathTestSubprocessControlInfo()<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_run_death_test_flag_.reset(ParseInternalRunDeathTestFlag());</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>parsed<sp/>--gtest_internal_run_death_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>flag,<sp/>or<sp/>NULL<sp/>if<sp/>that<sp/>flag<sp/>was<sp/>not<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>information<sp/>is<sp/>useful<sp/>only<sp/>in<sp/>a<sp/>death<sp/>test<sp/>child<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>not<sp/>be<sp/>called<sp/>before<sp/>a<sp/>call<sp/>to<sp/>InitGoogleTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InternalRunDeathTestFlag*<sp/>internal_run_death_test_flag()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal_run_death_test_flag_.get();</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>current<sp/>death<sp/>test<sp/>factory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>internal::DeathTestFactory*<sp/>death_test_factory()<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>death_test_factory_.get();</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SuppressTestEventsIfInSubprocess();</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ReplaceDeathTestFactory;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initializes<sp/>the<sp/>event<sp/>listener<sp/>performing<sp/>XML<sp/>output<sp/>as<sp/>specified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>UnitTestOptions.<sp/>Must<sp/>not<sp/>be<sp/>called<sp/>before<sp/>InitGoogleTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConfigureXmlOutput();</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initializes<sp/>the<sp/>event<sp/>listener<sp/>for<sp/>streaming<sp/>test<sp/>results<sp/>to<sp/>a<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>not<sp/>be<sp/>called<sp/>before<sp/>InitGoogleTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConfigureStreamingOutput();</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>initialization<sp/>dependent<sp/>upon<sp/>flag<sp/>values<sp/>obtained<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ParseGoogleTestFlagsOnly.<sp/><sp/>Is<sp/>called<sp/>from<sp/>InitGoogleTest<sp/>after<sp/>the<sp/>call<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ParseGoogleTestFlagsOnly.<sp/><sp/>In<sp/>case<sp/>a<sp/>user<sp/>neglects<sp/>to<sp/>call<sp/>InitGoogleTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>function<sp/>is<sp/>also<sp/>called<sp/>from<sp/>RunAllTests.<sp/><sp/>Since<sp/>this<sp/>function<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>more<sp/>than<sp/>once,<sp/>it<sp/>has<sp/>to<sp/>be<sp/>idempotent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PostFlagParsingInit();</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>random<sp/>seed<sp/>used<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>current<sp/>test<sp/>iteration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>random_seed()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>random_seed_;<sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>random<sp/>number<sp/>generator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_random" kindref="compound">internal::Random</ref>*<sp/>random()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;random_;<sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shuffles<sp/>all<sp/>test<sp/>cases,<sp/>and<sp/>the<sp/>tests<sp/>within<sp/>each<sp/>test<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>making<sp/>sure<sp/>that<sp/>death<sp/>tests<sp/>are<sp/>still<sp/>run<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShuffleTests();</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>test<sp/>cases<sp/>and<sp/>tests<sp/>to<sp/>their<sp/>order<sp/>before<sp/>the<sp/>first<sp/>shuffle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnshuffleTests();</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>value<sp/>of<sp/>GTEST_FLAG(catch_exceptions)<sp/>at<sp/>the<sp/>moment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>UnitTest::Run()<sp/>starts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>catch_exceptions()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>catch_exceptions_;<sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::testing::UnitTest;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>by<sp/>UnitTest::Run()<sp/>to<sp/>capture<sp/>the<sp/>state<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_FLAG(catch_exceptions)<sp/>at<sp/>the<sp/>moment<sp/>it<sp/>starts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_catch_exceptions(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{<sp/>catch_exceptions_<sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>UnitTest<sp/>object<sp/>that<sp/>owns<sp/>this<sp/>implementation<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parent_;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>working<sp/>directory<sp/>when<sp/>the<sp/>first<sp/>TEST()<sp/>or<sp/>TEST_F()<sp/>was</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>executed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_file_path" kindref="compound">internal::FilePath</ref><sp/>original_working_dir_;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>test<sp/>part<sp/>result<sp/>reporters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_default_global_test_part_result_reporter" kindref="compound">DefaultGlobalTestPartResultReporter</ref><sp/>default_global_test_part_result_reporter_;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter" kindref="compound">DefaultPerThreadTestPartResultReporter</ref></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_per_thread_test_part_result_reporter_;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Points<sp/>to<sp/>(but<sp/>doesn&apos;t<sp/>own)<sp/>the<sp/>global<sp/>test<sp/>part<sp/>result<sp/>reporter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_part_result_reporter_interface" kindref="compound">TestPartResultReporterInterface</ref>*<sp/>global_test_part_result_repoter_;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Protects<sp/>read<sp/>and<sp/>write<sp/>access<sp/>to<sp/>global_test_part_result_reporter_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_mutex" kindref="compound">internal::Mutex</ref><sp/>global_test_part_result_reporter_mutex_;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Points<sp/>to<sp/>(but<sp/>doesn&apos;t<sp/>own)<sp/>the<sp/>per-thread<sp/>test<sp/>part<sp/>result<sp/>reporter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_thread_local" kindref="compound">internal::ThreadLocal&lt;TestPartResultReporterInterface*&gt;</ref></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>per_thread_test_part_result_reporter_;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>of<sp/>environments<sp/>that<sp/>need<sp/>to<sp/>be<sp/>set-up/torn-down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>before/after<sp/>the<sp/>tests<sp/>are<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>std::vector&lt;Environment*&gt;<sp/>environments_;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>of<sp/>TestCases<sp/>in<sp/>their<sp/>original<sp/>order.<sp/><sp/>It<sp/>owns<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>elements<sp/>in<sp/>the<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>std::vector&lt;TestCase*&gt;<sp/>test_cases_;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Provides<sp/>a<sp/>level<sp/>of<sp/>indirection<sp/>for<sp/>the<sp/>test<sp/>case<sp/>list<sp/>to<sp/>allow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>easy<sp/>shuffling<sp/>and<sp/>restoring<sp/>the<sp/>test<sp/>case<sp/>order.<sp/><sp/>The<sp/>i-th</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>element<sp/>of<sp/>this<sp/>vector<sp/>is<sp/>the<sp/>index<sp/>of<sp/>the<sp/>i-th<sp/>test<sp/>case<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>shuffled<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>test_case_indices_;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ParameterizedTestRegistry<sp/>object<sp/>used<sp/>to<sp/>register<sp/>value-parameterized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_parameterized_test_case_registry" kindref="compound">internal::ParameterizedTestCaseRegistry</ref><sp/>parameterized_test_registry_;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Indicates<sp/>whether<sp/>RegisterParameterizedTests()<sp/>has<sp/>been<sp/>called<sp/>already.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parameterized_tests_registered_;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Index<sp/>of<sp/>the<sp/>last<sp/>death<sp/>test<sp/>case<sp/>registered.<sp/><sp/>Initially<sp/>-1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_death_test_case_;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>points<sp/>to<sp/>the<sp/>TestCase<sp/>for<sp/>the<sp/>currently<sp/>running<sp/>test.<sp/><sp/>It</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>changes<sp/>as<sp/>Google<sp/>Test<sp/>goes<sp/>through<sp/>one<sp/>test<sp/>case<sp/>after<sp/>another.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>no<sp/>test<sp/>is<sp/>running,<sp/>this<sp/>is<sp/>set<sp/>to<sp/>NULL<sp/>and<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stores<sp/>assertion<sp/>results<sp/>in<sp/>ad_hoc_test_result_.<sp/><sp/>Initially<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>current_test_case_;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>points<sp/>to<sp/>the<sp/>TestInfo<sp/>for<sp/>the<sp/>currently<sp/>running<sp/>test.<sp/><sp/>It</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>changes<sp/>as<sp/>Google<sp/>Test<sp/>goes<sp/>through<sp/>one<sp/>test<sp/>after<sp/>another.<sp/><sp/>When</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>test<sp/>is<sp/>running,<sp/>this<sp/>is<sp/>set<sp/>to<sp/>NULL<sp/>and<sp/>Google<sp/>Test<sp/>stores</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assertion<sp/>results<sp/>in<sp/>ad_hoc_test_result_.<sp/><sp/>Initially<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>current_test_info_;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Normally,<sp/>a<sp/>user<sp/>only<sp/>writes<sp/>assertions<sp/>inside<sp/>a<sp/>TEST<sp/>or<sp/>TEST_F,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>inside<sp/>a<sp/>function<sp/>called<sp/>by<sp/>a<sp/>TEST<sp/>or<sp/>TEST_F.<sp/><sp/>Since<sp/>Google</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>keeps<sp/>track<sp/>of<sp/>which<sp/>test<sp/>is<sp/>current<sp/>running,<sp/>it<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>associate<sp/>such<sp/>an<sp/>assertion<sp/>with<sp/>the<sp/>test<sp/>it<sp/>belongs<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>assertion<sp/>is<sp/>encountered<sp/>when<sp/>no<sp/>TEST<sp/>or<sp/>TEST_F<sp/>is<sp/>running,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>attributes<sp/>the<sp/>assertion<sp/>result<sp/>to<sp/>an<sp/>imaginary<sp/>&quot;ad<sp/>hoc&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test,<sp/>and<sp/>records<sp/>the<sp/>result<sp/>in<sp/>ad_hoc_test_result_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_result" kindref="compound">TestResult</ref><sp/>ad_hoc_test_result_;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>list<sp/>of<sp/>event<sp/>listeners<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>track<sp/>events<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_event_listeners" kindref="compound">TestEventListeners</ref><sp/>listeners_;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>OS<sp/>stack<sp/>trace<sp/>getter.<sp/><sp/>Will<sp/>be<sp/>deleted<sp/>when<sp/>the<sp/>UnitTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>is<sp/>destructed.<sp/><sp/>By<sp/>default,<sp/>an<sp/>OsStackTraceGetter<sp/>is<sp/>used,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>the<sp/>user<sp/>can<sp/>set<sp/>this<sp/>field<sp/>to<sp/>use<sp/>a<sp/>custom<sp/>getter<sp/>if<sp/>that<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>desired.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_os_stack_trace_getter_interface" kindref="compound">OsStackTraceGetterInterface</ref>*<sp/>os_stack_trace_getter_;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>iff<sp/>PostFlagParsingInit()<sp/>has<sp/>been<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>post_flag_parse_init_performed_;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>random<sp/>number<sp/>seed<sp/>used<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>test<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>random_seed_;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>random<sp/>number<sp/>generator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_random" kindref="compound">internal::Random</ref><sp/>random_;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>time<sp/>of<sp/>the<sp/>test<sp/>program<sp/>start,<sp/>in<sp/>ms<sp/>from<sp/>the<sp/>start<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>UNIX<sp/>epoch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>TimeInMillis<sp/>start_timestamp_;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>long<sp/>the<sp/>test<sp/>took<sp/>to<sp/>run,<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>TimeInMillis<sp/>elapsed_time_;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>decomposed<sp/>components<sp/>of<sp/>the<sp/>gtest_internal_run_death_test<sp/>flag,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parsed<sp/>when<sp/>RUN_ALL_TESTS<sp/>is<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1scoped__ptr" kindref="compound">internal::scoped_ptr&lt;InternalRunDeathTestFlag&gt;</ref><sp/>internal_run_death_test_flag_;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1scoped__ptr" kindref="compound">internal::scoped_ptr&lt;internal::DeathTestFactory&gt;</ref><sp/>death_test_factory_;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>per-thread<sp/>stack<sp/>of<sp/>traces<sp/>created<sp/>by<sp/>the<sp/>SCOPED_TRACE()<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_thread_local" kindref="compound">internal::ThreadLocal&lt;std::vector&lt;TraceInfo&gt;</ref><sp/>&gt;<sp/>gtest_trace_stack_;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>of<sp/>GTEST_FLAG(catch_exceptions)<sp/>at<sp/>the<sp/>moment<sp/>RunAllTests()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>starts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>catch_exceptions_;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">UnitTestImpl</ref>);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>UnitTestImpl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convenience<sp/>function<sp/>for<sp/>accessing<sp/>the<sp/>global<sp/>UnitTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">UnitTestImpl</ref>*<sp/>GetUnitTestImpl()<sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnitTest::GetInstance()-&gt;impl();</highlight></codeline>
<codeline lineno="1339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_USES_SIMPLE_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Internal<sp/>helper<sp/>functions<sp/>for<sp/>implementing<sp/>the<sp/>simple<sp/>regular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expression<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInSet(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsAsciiDigit(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsAsciiPunct(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsRepeat(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsAsciiWhiteSpace(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsAsciiWordChar(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsValidEscape(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AtomMatchesChar(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>escaped,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pattern,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ValidateRegex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchRegexAtHead(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchRepetitionAndRegexAtHead(</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>escaped,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>repeat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchRegexAnywhere(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_USES_SIMPLE_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>command<sp/>line<sp/>for<sp/>Google<sp/>Test<sp/>flags,<sp/>without<sp/>initializing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>other<sp/>parts<sp/>of<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ParseGoogleTestFlagsOnly(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ParseGoogleTestFlagsOnly(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">**<sp/>argv);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>message<sp/>describing<sp/>the<sp/>last<sp/>system<sp/>error,<sp/>regardless<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>platform.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal">GTEST_API_<sp/>std::string<sp/>GetLastErrnoDescription();</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Provides<sp/>leak-safe<sp/>Windows<sp/>kernel<sp/>handle<sp/>ownership.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AutoHandle<sp/>{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>AutoHandle()<sp/>:<sp/>handle_(INVALID_HANDLE_VALUE)<sp/>{}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>AutoHandle(HANDLE<sp/>handle)<sp/>:<sp/>handle_(handle)<sp/>{}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>~AutoHandle()<sp/>{<sp/>Reset();<sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>HANDLE<sp/>Get()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_;<sp/>}</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reset()<sp/>{<sp/>Reset(INVALID_HANDLE_VALUE);<sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reset(HANDLE<sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle<sp/>!=<sp/>handle_)<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle_<sp/>!=<sp/>INVALID_HANDLE_VALUE)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::CloseHandle(handle_);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handle_<sp/>=<sp/>handle;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>HANDLE<sp/>handle_;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(AutoHandle);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Attempts<sp/>to<sp/>parse<sp/>a<sp/>string<sp/>into<sp/>a<sp/>positive<sp/>integer<sp/>pointed<sp/>to<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number<sp/>parameter.<sp/><sp/>Returns<sp/>true<sp/>if<sp/>that<sp/>is<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST<sp/>implies<sp/>that<sp/>we<sp/>have<sp/>::std::string,<sp/>so<sp/>we<sp/>can<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Integer&gt;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ParseNaturalNumber(const<sp/>::std::string&amp;<sp/>str,<sp/>Integer*<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fail<sp/>fast<sp/>if<sp/>the<sp/>given<sp/>string<sp/>does<sp/>not<sp/>begin<sp/>with<sp/>a<sp/>digit;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>bypasses<sp/>strtoXXX&apos;s<sp/>&quot;optional<sp/>leading<sp/>whitespace<sp/>and<sp/>plus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>minus<sp/>sign&quot;<sp/>semantics,<sp/>which<sp/>are<sp/>undesirable<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.empty()<sp/>||<sp/>!IsDigit(str[0]))<sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>BiggestConvertible<sp/>is<sp/>the<sp/>largest<sp/>integer<sp/>type<sp/>that<sp/>system-provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>string-to-number<sp/>conversion<sp/>routines<sp/>can<sp/>return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC<sp/>and<sp/>C++<sp/>Builder<sp/>define<sp/>__int64<sp/>instead<sp/>of<sp/>the<sp/>standard<sp/>long<sp/>long.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>BiggestConvertible;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BiggestConvertible<sp/>parsed<sp/>=<sp/>_strtoui64(str.c_str(),<sp/>&amp;end,<sp/>10);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>BiggestConvertible;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BiggestConvertible<sp/>parsed<sp/>=<sp/>strtoull(str.c_str(),<sp/>&amp;end,<sp/>10);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parse_success<sp/>=<sp/>*end<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>errno<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vladl@google.com):<sp/>Convert<sp/>this<sp/>to<sp/>compile<sp/>time<sp/>assertion<sp/>when<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>GTEST_CHECK_(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Integer)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(parsed));</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Integer<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Integer</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(parsed);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parse_success<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">BiggestConvertible</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result)<sp/>==<sp/>parsed)<sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>*number<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestResult<sp/>contains<sp/>some<sp/>private<sp/>methods<sp/>that<sp/>should<sp/>be<sp/>hidden<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>user<sp/>but<sp/>are<sp/>required<sp/>for<sp/>testing.<sp/>This<sp/>class<sp/>allow<sp/>our<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>access<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>is<sp/>supplied<sp/>only<sp/>for<sp/>the<sp/>purpose<sp/>of<sp/>testing<sp/>Google<sp/>Test&apos;s<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constructs.<sp/>Do<sp/>not<sp/>use<sp/>it<sp/>in<sp/>user<sp/>tests,<sp/>either<sp/>directly<sp/>or<sp/>indirectly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450" refid="classtesting_1_1internal_1_1_test_result_accessor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_test_result_accessor" kindref="compound">TestResultAccessor</ref><sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecordProperty(<ref refid="classtesting_1_1_test_result" kindref="compound">TestResult</ref>*<sp/>test_result,</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>xml_element,</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_property" kindref="compound">TestProperty</ref>&amp;<sp/>property)<sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>test_result-&gt;RecordProperty(xml_element,<sp/>property);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClearTestPartResults(<ref refid="classtesting_1_1_test_result" kindref="compound">TestResult</ref>*<sp/>test_result)<sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>test_result-&gt;ClearTestPartResults();</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;testing::TestPartResult&gt;&amp;<sp/>test_part_results(</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_result" kindref="compound">TestResult</ref>&amp;<sp/>test_result)<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_result.test_part_results();</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Streams<sp/>test<sp/>results<sp/>to<sp/>the<sp/>given<sp/>port<sp/>on<sp/>the<sp/>given<sp/>host<sp/>machine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StreamingListener<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_empty_test_event_listener" kindref="compound">EmptyTestEventListener</ref><sp/>{</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Abstract<sp/>base<sp/>class<sp/>for<sp/>writing<sp/>strings<sp/>to<sp/>a<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AbstractSocketWriter<sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~AbstractSocketWriter()<sp/>{}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sends<sp/>a<sp/>string<sp/>to<sp/>the<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Send(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>message)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Closes<sp/>the<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CloseConnection()<sp/>{}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sends<sp/>a<sp/>string<sp/>and<sp/>a<sp/>newline<sp/>to<sp/>the<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SendLn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Send(message<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Concrete<sp/>class<sp/>for<sp/>actually<sp/>writing<sp/>strings<sp/>to<sp/>a<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SocketWriter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>AbstractSocketWriter<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>SocketWriter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>host,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>port)</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>sockfd_(-1),<sp/>host_name_(host),<sp/>port_num_(port)<sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MakeConnection();</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~SocketWriter()<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sockfd_<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CloseConnection();</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sends<sp/>a<sp/>string<sp/>to<sp/>the<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Send(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_CHECK_(sockfd_<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Send()<sp/>can<sp/>be<sp/>called<sp/>only<sp/>when<sp/>there<sp/>is<sp/>a<sp/>connection.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(message.length());</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write(sockfd_,<sp/>message.c_str(),<sp/>len)<sp/>!=<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOG_(WARNING)</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;stream_result_to:<sp/>failed<sp/>to<sp/>stream<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>host_name_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>port_num_;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>client<sp/>socket<sp/>and<sp/>connects<sp/>to<sp/>the<sp/>server.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MakeConnection();</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Closes<sp/>the<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CloseConnection()<sp/>{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_CHECK_(sockfd_<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CloseConnection()<sp/>can<sp/>be<sp/>called<sp/>only<sp/>when<sp/>there<sp/>is<sp/>a<sp/>connection.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close(sockfd_);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sockfd_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sockfd_;<sp/><sp/></highlight><highlight class="comment">//<sp/>socket<sp/>file<sp/>descriptor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>host_name_;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>port_num_;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(SocketWriter);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>SocketWriter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Escapes<sp/>&apos;=&apos;,<sp/>&apos;&amp;&apos;,<sp/>&apos;%&apos;,<sp/>and<sp/>&apos;\n&apos;<sp/>characters<sp/>in<sp/>str<sp/>as<sp/>&quot;%xx&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>UrlEncode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>StreamingListener(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>host,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>port)</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>socket_writer_(new<sp/>SocketWriter(host,<sp/>port))<sp/>{<sp/>Start();<sp/>}</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>StreamingListener(AbstractSocketWriter*<sp/>socket_writer)</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>socket_writer_(socket_writer)<sp/>{<sp/>Start();<sp/>}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestProgramStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTest&amp;<sp/></highlight><highlight class="comment">/*<sp/>unit_test<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>SendLn(</highlight><highlight class="stringliteral">&quot;event=TestProgramStart&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestProgramEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTest&amp;<sp/>unit_test)<sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>Google<sp/>Test<sp/>current<sp/>only<sp/>report<sp/>elapsed<sp/>time<sp/>for<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>iteration,<sp/>not<sp/>for<sp/>the<sp/>entire<sp/>test<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>SendLn(</highlight><highlight class="stringliteral">&quot;event=TestProgramEnd&amp;passed=&quot;</highlight><highlight class="normal"><sp/>+<sp/>FormatBool(unit_test.Passed()));</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>the<sp/>streaming<sp/>server<sp/>to<sp/>stop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>socket_writer_-&gt;CloseConnection();</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestIterationStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTest&amp;<sp/></highlight><highlight class="comment">/*<sp/>unit_test<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration)<sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>SendLn(</highlight><highlight class="stringliteral">&quot;event=TestIterationStart&amp;iteration=&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(iteration));</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestIterationEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTest&amp;<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>iteration<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>SendLn(</highlight><highlight class="stringliteral">&quot;event=TestIterationEnd&amp;passed=&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatBool(unit_test.Passed())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&amp;elapsed_time=&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(unit_test.elapsed_time())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;ms&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestCaseStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase&amp;<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>SendLn(std::string(</highlight><highlight class="stringliteral">&quot;event=TestCaseStart&amp;name=&quot;</highlight><highlight class="normal">)<sp/>+<sp/>test_case.name());</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestCaseEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase&amp;<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>SendLn(</highlight><highlight class="stringliteral">&quot;event=TestCaseEnd&amp;passed=&quot;</highlight><highlight class="normal"><sp/>+<sp/>FormatBool(test_case.Passed())</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&amp;elapsed_time=&quot;</highlight><highlight class="normal"><sp/>+<sp/>StreamableToString(test_case.elapsed_time())</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;ms&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo&amp;<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>SendLn(std::string(</highlight><highlight class="stringliteral">&quot;event=TestStart&amp;name=&quot;</highlight><highlight class="normal">)<sp/>+<sp/>test_info.name());</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo&amp;<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>SendLn(</highlight><highlight class="stringliteral">&quot;event=TestEnd&amp;passed=&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatBool((test_info.result())-&gt;Passed())<sp/>+</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&amp;elapsed_time=&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString((test_info.result())-&gt;elapsed_time())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;ms&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestPartResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>test_part_result)<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file_name<sp/>=<sp/>test_part_result.file_name();</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file_name<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>SendLn(</highlight><highlight class="stringliteral">&quot;event=TestPartResult&amp;file=&quot;</highlight><highlight class="normal"><sp/>+<sp/>UrlEncode(file_name)<sp/>+</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&amp;line=&quot;</highlight><highlight class="normal"><sp/>+<sp/>StreamableToString(test_part_result.line_number())<sp/>+</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&amp;message=&quot;</highlight><highlight class="normal"><sp/>+<sp/>UrlEncode(test_part_result.message()));</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sends<sp/>the<sp/>given<sp/>message<sp/>and<sp/>a<sp/>newline<sp/>to<sp/>the<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SendLn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>message)<sp/>{<sp/>socket_writer_-&gt;SendLn(message);<sp/>}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Called<sp/>at<sp/>the<sp/>start<sp/>of<sp/>streaming<sp/>to<sp/>notify<sp/>the<sp/>receiver<sp/>what</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>protocol<sp/>we<sp/>are<sp/>using.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Start()<sp/>{<sp/>SendLn(</highlight><highlight class="stringliteral">&quot;gtest_streaming_protocol_version=1.0&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>FormatBool(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scoped_ptr&lt;AbstractSocketWriter&gt;<sp/>socket_writer_;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(StreamingListener);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>StreamingListener</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_SRC_GTEST_INTERNAL_INL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_IMPLEMENTATION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>vsnprintf<sp/>_vsnprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">internal::CountIf;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">internal::ForEach;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">internal::GetElementOr;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">internal::Shuffle;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>whose<sp/>test<sp/>case<sp/>name<sp/>or<sp/>test<sp/>name<sp/>matches<sp/>this<sp/>filter<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>disabled<sp/>and<sp/>not<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kDisableTestFilter[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DISABLED_*:*/DISABLED_*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>case<sp/>whose<sp/>name<sp/>matches<sp/>this<sp/>filter<sp/>is<sp/>considered<sp/>a<sp/>death</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>case<sp/>and<sp/>will<sp/>be<sp/>run<sp/>before<sp/>test<sp/>cases<sp/>whose<sp/>name<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>match<sp/>this<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kDeathTestCaseFilter[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;*DeathTest:*DeathTest/*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>filter<sp/>that<sp/>matches<sp/>everything.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kUniversalFilter[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>output<sp/>file<sp/>for<sp/>XML<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kDefaultOutputFile[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test_detail.xml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>environment<sp/>variable<sp/>name<sp/>for<sp/>the<sp/>test<sp/>shard<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kTestShardIndex[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GTEST_SHARD_INDEX&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>environment<sp/>variable<sp/>name<sp/>for<sp/>the<sp/>total<sp/>number<sp/>of<sp/>test<sp/>shards.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kTestTotalShards[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GTEST_TOTAL_SHARDS&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>environment<sp/>variable<sp/>name<sp/>for<sp/>the<sp/>test<sp/>shard<sp/>status<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kTestShardStatusFile[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GTEST_SHARD_STATUS_FILE&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>text<sp/>used<sp/>in<sp/>failure<sp/>messages<sp/>to<sp/>indicate<sp/>the<sp/>start<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stack<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kStackTraceMarker[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\nStack<sp/>trace:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight><highlight class="comment">//<sp/>g_help_flag<sp/>is<sp/>true<sp/>iff<sp/>the<sp/>--help<sp/>flag<sp/>or<sp/>an<sp/>equivalent<sp/>form<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specified<sp/>on<sp/>the<sp/>command<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_help_flag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>GetDefaultFilter()<sp/>{</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kUniversalFilter;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal">GTEST_DEFINE_bool_(</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>also_run_disabled_tests,</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::BoolFromGTestEnv(</highlight><highlight class="stringliteral">&quot;also_run_disabled_tests&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Run<sp/>disabled<sp/>tests<sp/>too,<sp/>in<sp/>addition<sp/>to<sp/>the<sp/>tests<sp/>normally<sp/>being<sp/>run.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal">GTEST_DEFINE_bool_(</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>break_on_failure,</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::BoolFromGTestEnv(</highlight><highlight class="stringliteral">&quot;break_on_failure&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;True<sp/>iff<sp/>a<sp/>failed<sp/>assertion<sp/>should<sp/>be<sp/>a<sp/>debugger<sp/>break-point.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal">GTEST_DEFINE_bool_(</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/>catch_exceptions,</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::BoolFromGTestEnv(</highlight><highlight class="stringliteral">&quot;catch_exceptions&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;True<sp/>iff<sp/>&quot;</highlight><highlight class="normal"><sp/>GTEST_NAME_</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>should<sp/>catch<sp/>exceptions<sp/>and<sp/>treat<sp/>them<sp/>as<sp/>test<sp/>failures.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal">GTEST_DEFINE_string_(</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>color,</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::StringFromGTestEnv(</highlight><highlight class="stringliteral">&quot;color&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;auto&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Whether<sp/>to<sp/>use<sp/>colors<sp/>in<sp/>the<sp/>output.<sp/><sp/>Valid<sp/>values:<sp/>yes,<sp/>no,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>auto.<sp/><sp/>&apos;auto&apos;<sp/>means<sp/>to<sp/>use<sp/>colors<sp/>if<sp/>the<sp/>output<sp/>is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;being<sp/>sent<sp/>to<sp/>a<sp/>terminal<sp/>and<sp/>the<sp/>TERM<sp/>environment<sp/>variable<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>set<sp/>to<sp/>a<sp/>terminal<sp/>type<sp/>that<sp/>supports<sp/>colors.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal">GTEST_DEFINE_string_(</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>filter,</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::StringFromGTestEnv(</highlight><highlight class="stringliteral">&quot;filter&quot;</highlight><highlight class="normal">,<sp/>GetDefaultFilter()),</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;A<sp/>colon-separated<sp/>list<sp/>of<sp/>glob<sp/>(not<sp/>regex)<sp/>patterns<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for<sp/>filtering<sp/>the<sp/>tests<sp/>to<sp/>run,<sp/>optionally<sp/>followed<sp/>by<sp/>a<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;-&apos;<sp/>and<sp/>a<sp/>:<sp/>separated<sp/>list<sp/>of<sp/>negative<sp/>patterns<sp/>(tests<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exclude).<sp/><sp/>A<sp/>test<sp/>is<sp/>run<sp/>if<sp/>it<sp/>matches<sp/>one<sp/>of<sp/>the<sp/>positive<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;patterns<sp/>and<sp/>does<sp/>not<sp/>match<sp/>any<sp/>of<sp/>the<sp/>negative<sp/>patterns.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal">GTEST_DEFINE_bool_(list_tests,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;List<sp/>all<sp/>tests<sp/>without<sp/>running<sp/>them.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal">GTEST_DEFINE_string_(</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>output,</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::StringFromGTestEnv(</highlight><highlight class="stringliteral">&quot;output&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;A<sp/>format<sp/>(currently<sp/>must<sp/>be<sp/>\&quot;xml\&quot;),<sp/>optionally<sp/>followed<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;by<sp/>a<sp/>colon<sp/>and<sp/>an<sp/>output<sp/>file<sp/>name<sp/>or<sp/>directory.<sp/>A<sp/>directory<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>indicated<sp/>by<sp/>a<sp/>trailing<sp/>pathname<sp/>separator.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Examples:<sp/>\&quot;xml:filename.xml\&quot;,<sp/>\&quot;xml::directoryname/\&quot;.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;If<sp/>a<sp/>directory<sp/>is<sp/>specified,<sp/>output<sp/>files<sp/>will<sp/>be<sp/>created<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;within<sp/>that<sp/>directory,<sp/>with<sp/>file-names<sp/>based<sp/>on<sp/>the<sp/>test<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;executable&apos;s<sp/>name<sp/>and,<sp/>if<sp/>necessary,<sp/>made<sp/>unique<sp/>by<sp/>adding<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;digits.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal">GTEST_DEFINE_bool_(</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>print_time,</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::BoolFromGTestEnv(</highlight><highlight class="stringliteral">&quot;print_time&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;True<sp/>iff<sp/>&quot;</highlight><highlight class="normal"><sp/>GTEST_NAME_</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>should<sp/>display<sp/>elapsed<sp/>time<sp/>in<sp/>text<sp/>output.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal">GTEST_DEFINE_int32_(</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>random_seed,</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::Int32FromGTestEnv(</highlight><highlight class="stringliteral">&quot;random_seed&quot;</highlight><highlight class="normal">,<sp/>0),</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Random<sp/>number<sp/>seed<sp/>to<sp/>use<sp/>when<sp/>shuffling<sp/>test<sp/>orders.<sp/><sp/>Must<sp/>be<sp/>in<sp/>range<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[1,<sp/>99999],<sp/>or<sp/>0<sp/>to<sp/>use<sp/>a<sp/>seed<sp/>based<sp/>on<sp/>the<sp/>current<sp/>time.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal">GTEST_DEFINE_int32_(</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>repeat,</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::Int32FromGTestEnv(</highlight><highlight class="stringliteral">&quot;repeat&quot;</highlight><highlight class="normal">,<sp/>1),</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;How<sp/>many<sp/>times<sp/>to<sp/>repeat<sp/>each<sp/>test.<sp/><sp/>Specify<sp/>a<sp/>negative<sp/>number<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for<sp/>repeating<sp/>forever.<sp/><sp/>Useful<sp/>for<sp/>shaking<sp/>out<sp/>flaky<sp/>tests.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal">GTEST_DEFINE_bool_(</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/>show_internal_stack_frames,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;True<sp/>iff<sp/>&quot;</highlight><highlight class="normal"><sp/>GTEST_NAME_<sp/></highlight><highlight class="stringliteral">&quot;<sp/>should<sp/>include<sp/>internal<sp/>stack<sp/>frames<sp/>when<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;printing<sp/>test<sp/>failure<sp/>stack<sp/>traces.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal">GTEST_DEFINE_bool_(</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>shuffle,</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::BoolFromGTestEnv(</highlight><highlight class="stringliteral">&quot;shuffle&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;True<sp/>iff<sp/>&quot;</highlight><highlight class="normal"><sp/>GTEST_NAME_</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>should<sp/>randomize<sp/>tests&apos;<sp/>order<sp/>on<sp/>every<sp/>run.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal">GTEST_DEFINE_int32_(</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>stack_trace_depth,</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::Int32FromGTestEnv(</highlight><highlight class="stringliteral">&quot;stack_trace_depth&quot;</highlight><highlight class="normal">,<sp/>kMaxStackTraceDepth),</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>maximum<sp/>number<sp/>of<sp/>stack<sp/>frames<sp/>to<sp/>print<sp/>when<sp/>an<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;assertion<sp/>fails.<sp/><sp/>The<sp/>valid<sp/>range<sp/>is<sp/>0<sp/>through<sp/>100,<sp/>inclusive.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal">GTEST_DEFINE_string_(</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>stream_result_to,</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::StringFromGTestEnv(</highlight><highlight class="stringliteral">&quot;stream_result_to&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>flag<sp/>specifies<sp/>the<sp/>host<sp/>name<sp/>and<sp/>the<sp/>port<sp/>number<sp/>on<sp/>which<sp/>to<sp/>stream<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;test<sp/>results.<sp/>Example:<sp/>\&quot;localhost:555\&quot;.<sp/>The<sp/>flag<sp/>is<sp/>effective<sp/>only<sp/>on<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Linux.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal">GTEST_DEFINE_bool_(</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>throw_on_failure,</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::BoolFromGTestEnv(</highlight><highlight class="stringliteral">&quot;throw_on_failure&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;When<sp/>this<sp/>flag<sp/>is<sp/>specified,<sp/>a<sp/>failed<sp/>assertion<sp/>will<sp/>throw<sp/>an<sp/>exception<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;if<sp/>exceptions<sp/>are<sp/>enabled<sp/>or<sp/>exit<sp/>the<sp/>program<sp/>with<sp/>a<sp/>non-zero<sp/>code<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;otherwise.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>random<sp/>number<sp/>from<sp/>[0,<sp/>range),<sp/>using<sp/>a<sp/>Linear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Congruential<sp/>Generator<sp/>(LCG).<sp/><sp/>Crashes<sp/>if<sp/>&apos;range&apos;<sp/>is<sp/>0<sp/>or<sp/>greater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>than<sp/>kMaxRange.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal">UInt32<sp/>Random::Generate(UInt32<sp/>range)<sp/>{</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>constants<sp/>are<sp/>the<sp/>same<sp/>as<sp/>are<sp/>used<sp/>in<sp/>glibc&apos;s<sp/>rand(3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>state_<sp/>=<sp/>(1103515245U*state_<sp/>+<sp/>12345U)<sp/>%<sp/>kMaxRange;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/>GTEST_CHECK_(range<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>generate<sp/>a<sp/>number<sp/>in<sp/>the<sp/>range<sp/>[0,<sp/>0).&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>GTEST_CHECK_(range<sp/>&lt;=<sp/>kMaxRange)</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generation<sp/>of<sp/>a<sp/>number<sp/>in<sp/>[0,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>range<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>was<sp/>requested,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;but<sp/>this<sp/>can<sp/>only<sp/>generate<sp/>numbers<sp/>in<sp/>[0,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kMaxRange<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;).&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Converting<sp/>via<sp/>modulus<sp/>introduces<sp/>a<sp/>bit<sp/>of<sp/>downward<sp/>bias,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>simple,<sp/>and<sp/>a<sp/>linear<sp/>congruential<sp/>generator<sp/>isn&apos;t<sp/>too<sp/>good</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>begin<sp/>with.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state_<sp/>%<sp/>range;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTestIsInitialized()<sp/>returns<sp/>true<sp/>iff<sp/>the<sp/>user<sp/>has<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test.<sp/><sp/>Useful<sp/>for<sp/>catching<sp/>the<sp/>user<sp/>mistake<sp/>of<sp/>not<sp/>initializing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>before<sp/>calling<sp/>RUN_ALL_TESTS().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user<sp/>must<sp/>call<sp/>testing::InitGoogleTest()<sp/>to<sp/>initialize<sp/>Google</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test.<sp/><sp/>g_init_gtest_count<sp/>is<sp/>set<sp/>to<sp/>the<sp/>number<sp/>of<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>InitGoogleTest()<sp/>has<sp/>been<sp/>called.<sp/><sp/>We<sp/>don&apos;t<sp/>protect<sp/>this<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>a<sp/>mutex<sp/>as<sp/>it<sp/>is<sp/>only<sp/>accessed<sp/>in<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g_init_gtest_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GTestIsInitialized()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_init_gtest_count<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterates<sp/>over<sp/>a<sp/>vector<sp/>of<sp/>TestCases,<sp/>keeping<sp/>a<sp/>running<sp/>sum<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight><highlight class="comment">//<sp/>results<sp/>of<sp/>calling<sp/>a<sp/>given<sp/>int-returning<sp/>method<sp/>on<sp/>each.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>sum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOverTestCaseList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TestCase*&gt;&amp;<sp/>case_list,</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(TestCase::*method)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>case_list.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(case_list[i]-&gt;*method)();</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>case<sp/>passed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestCasePassed(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_case-&gt;should_run()<sp/>&amp;&amp;<sp/>test_case-&gt;Passed();</highlight></codeline>
<codeline lineno="1817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>case<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestCaseFailed(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_case-&gt;should_run()<sp/>&amp;&amp;<sp/>test_case-&gt;Failed();</highlight></codeline>
<codeline lineno="1822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>test_case<sp/>contains<sp/>at<sp/>least<sp/>one<sp/>test<sp/>that<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight><highlight class="comment">//<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShouldRunTestCase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_case-&gt;should_run();</highlight></codeline>
<codeline lineno="1828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AssertHelper<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal">AssertHelper::AssertHelper(TestPartResult::Type<sp/>type,</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>data_(new<sp/>AssertHelperData(type,<sp/>file,<sp/>line,<sp/>message))<sp/>{</highlight></codeline>
<codeline lineno="1836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal">AssertHelper::~AssertHelper()<sp/>{</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>data_;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Message<sp/>assignment,<sp/>for<sp/>assertion<sp/>streaming<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertHelper::operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Message&amp;<sp/>message)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/>UnitTest::GetInstance()-&gt;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>AddTestPartResult(data_-&gt;type,<sp/>data_-&gt;file,<sp/>data_-&gt;line,</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendUserMessage(data_-&gt;message,<sp/>message),</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnitTest::GetInstance()-&gt;impl()</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;CurrentOsStackTraceExceptTop(1)</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skips<sp/>the<sp/>stack<sp/>frame<sp/>for<sp/>this<sp/>function<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mutex<sp/>for<sp/>linked<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal">GTEST_API_<sp/>GTEST_DEFINE_STATIC_MUTEX_(g_linked_ptr_mutex);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Application<sp/>pathname<sp/>gotten<sp/>in<sp/>InitGoogleTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal">std::string<sp/>g_executable_path;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>application&apos;s<sp/>name,<sp/>removing<sp/>directory<sp/>path<sp/>if<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal">FilePath<sp/>GetCurrentExecutableName()<sp/>{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/>FilePath<sp/>result;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/>result.Set(FilePath(g_executable_path).RemoveExtension(</highlight><highlight class="stringliteral">&quot;exe&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/>result.Set(FilePath(g_executable_path));</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.RemoveDirectoryName();</highlight></codeline>
<codeline lineno="1871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functions<sp/>for<sp/>processing<sp/>the<sp/>gtest_output<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>output<sp/>format,<sp/>or<sp/>&quot;&quot;<sp/>for<sp/>normal<sp/>printed<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal">std::string<sp/>UnitTestOptions::GetOutputFormat()<sp/>{</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gtest_output_flag<sp/>=<sp/>GTEST_FLAG(output).c_str();</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gtest_output_flag<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colon<sp/>=<sp/>strchr(gtest_output_flag,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(colon<sp/>==<sp/>NULL)<sp/>?</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string(gtest_output_flag)<sp/>:</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string(gtest_output_flag,<sp/>colon<sp/>-<sp/>gtest_output_flag);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>name<sp/>of<sp/>the<sp/>requested<sp/>output<sp/>file,<sp/>or<sp/>the<sp/>default<sp/>if<sp/>none</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="comment">//<sp/>was<sp/>explicitly<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal">std::string<sp/>UnitTestOptions::GetAbsolutePathToOutputFile()<sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gtest_output_flag<sp/>=<sp/>GTEST_FLAG(output).c_str();</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gtest_output_flag<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colon<sp/>=<sp/>strchr(gtest_output_flag,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colon<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FilePath::ConcatPaths(</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::FilePath(</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnitTest::GetInstance()-&gt;original_working_dir()),</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::FilePath(kDefaultOutputFile)).string();</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/>internal::FilePath<sp/>output_name(colon<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!output_name.IsAbsolutePath())</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(wan@google.com):<sp/>on<sp/>Windows<sp/>\some\path<sp/>is<sp/>not<sp/>an<sp/>absolute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>path<sp/>(as<sp/>its<sp/>meaning<sp/>depends<sp/>on<sp/>the<sp/>current<sp/>drive),<sp/>yet<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>following<sp/>logic<sp/>for<sp/>turning<sp/>it<sp/>into<sp/>an<sp/>absolute<sp/>path<sp/>is<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fix<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>output_name<sp/>=<sp/>internal::FilePath::ConcatPaths(</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::FilePath(UnitTest::GetInstance()-&gt;original_working_dir()),</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::FilePath(colon<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!output_name.IsDirectory())</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output_name.string();</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/>internal::FilePath<sp/>result(internal::FilePath::GenerateUniqueFileName(</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_name,<sp/>internal::GetCurrentExecutableName(),</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetOutputFormat().c_str()));</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.string();</highlight></codeline>
<codeline lineno="1917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>wildcard<sp/>pattern<sp/>matches<sp/>the<sp/>string.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>&apos;:&apos;<sp/>or<sp/>&apos;\0&apos;<sp/>character<sp/>in<sp/>pattern<sp/>marks<sp/>the<sp/>end<sp/>of<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>recursive<sp/>algorithm<sp/>isn&apos;t<sp/>very<sp/>efficient,<sp/>but<sp/>is<sp/>clear<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight><highlight class="comment">//<sp/>works<sp/>well<sp/>enough<sp/>for<sp/>matching<sp/>test<sp/>names,<sp/>which<sp/>are<sp/>short.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UnitTestOptions::PatternMatchesString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pattern,</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*pattern)<sp/>{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">//<sp/>Either<sp/>&apos;:&apos;<sp/>or<sp/>&apos;\0&apos;<sp/>marks<sp/>the<sp/>end<sp/>of<sp/>the<sp/>pattern.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">//<sp/>Matches<sp/>any<sp/>single<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*str<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>PatternMatchesString(pattern<sp/>+<sp/>1,<sp/>str<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">//<sp/>Matches<sp/>any<sp/>string<sp/>(possibly<sp/>empty)<sp/>of<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*str<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>PatternMatchesString(pattern,<sp/>str<sp/>+<sp/>1))<sp/>||</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PatternMatchesString(pattern<sp/>+<sp/>1,<sp/>str);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">//<sp/>Non-special<sp/>character.<sp/><sp/>Matches<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*pattern<sp/>==<sp/>*str<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PatternMatchesString(pattern<sp/>+<sp/>1,<sp/>str<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UnitTestOptions::MatchesFilter(</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filter)<sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cur_pattern<sp/>=<sp/>filter;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PatternMatchesString(cur_pattern,<sp/>name.c_str()))<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finds<sp/>the<sp/>next<sp/>pattern<sp/>in<sp/>the<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_pattern<sp/>=<sp/>strchr(cur_pattern,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>if<sp/>no<sp/>more<sp/>pattern<sp/>can<sp/>be<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur_pattern<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skips<sp/>the<sp/>pattern<sp/>separater<sp/>(the<sp/>&apos;:&apos;<sp/>character).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_pattern++;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>user-specified<sp/>filter<sp/>matches<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>name<sp/>and<sp/>the<sp/>test<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UnitTestOptions::FilterMatchesTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;test_case_name,</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;test_name)<sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>full_name<sp/>=<sp/>test_case_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>test_name.c_str();</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Split<sp/>--gtest_filter<sp/>at<sp/>&apos;-&apos;,<sp/>if<sp/>there<sp/>is<sp/>one,<sp/>to<sp/>separate<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>positive<sp/>filter<sp/>and<sp/>negative<sp/>filter<sp/>portions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>GTEST_FLAG(filter).c_str();</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dash<sp/>=<sp/>strchr(p,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/>std::string<sp/>positive;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/>std::string<sp/>negative;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dash<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>positive<sp/>=<sp/>GTEST_FLAG(filter).c_str();<sp/><sp/></highlight><highlight class="comment">//<sp/>Whole<sp/>string<sp/>is<sp/>a<sp/>positive<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>negative<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>positive<sp/>=<sp/>std::string(p,<sp/>dash);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Everything<sp/>up<sp/>to<sp/>the<sp/>dash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>negative<sp/>=<sp/>std::string(dash<sp/>+<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Everything<sp/>after<sp/>the<sp/>dash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(positive.empty())<sp/>{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>&apos;-test1&apos;<sp/>as<sp/>the<sp/>same<sp/>as<sp/>&apos;*-test1&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>positive<sp/>=<sp/>kUniversalFilter;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>filter<sp/>is<sp/>a<sp/>colon-separated<sp/>list<sp/>of<sp/>patterns.<sp/><sp/>It<sp/>matches<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>if<sp/>any<sp/>pattern<sp/>in<sp/>it<sp/>matches<sp/>the<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(MatchesFilter(full_name,<sp/>positive.c_str())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!MatchesFilter(full_name,<sp/>negative.c_str()));</highlight></codeline>
<codeline lineno="1990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>EXCEPTION_EXECUTE_HANDLER<sp/>if<sp/>Google<sp/>Test<sp/>should<sp/>handle<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>SEH<sp/>exception,<sp/>or<sp/>EXCEPTION_CONTINUE_SEARCH<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>useful<sp/>as<sp/>an<sp/>__except<sp/>condition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestOptions::GTestShouldProcessSEH(DWORD<sp/>exception_code)<sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>should<sp/>handle<sp/>a<sp/>SEH<sp/>exception<sp/>if:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>the<sp/>user<sp/>wants<sp/>it<sp/>to,<sp/>AND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>this<sp/>is<sp/>not<sp/>a<sp/>breakpoint<sp/>exception,<sp/>AND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>3.<sp/>this<sp/>is<sp/>not<sp/>a<sp/>C++<sp/>exception<sp/>(VC++<sp/>implements<sp/>them<sp/>via<sp/>SEH,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>apparently).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SEH<sp/>exception<sp/>code<sp/>for<sp/>C++<sp/>exceptions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(see<sp/>http://support.microsoft.com/kb/185294<sp/>for<sp/>more<sp/>information).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>kCxxExceptionCode<sp/>=<sp/>0xe06d7363;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_handle<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GTEST_FLAG(catch_exceptions))</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/>should_handle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exception_code<sp/>==<sp/>EXCEPTION_BREAKPOINT)</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/>should_handle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exception_code<sp/>==<sp/>kCxxExceptionCode)</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/>should_handle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>should_handle<sp/>?<sp/>EXCEPTION_EXECUTE_HANDLER<sp/>:<sp/>EXCEPTION_CONTINUE_SEARCH;</highlight></codeline>
<codeline lineno="2017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>c&apos;tor<sp/>sets<sp/>this<sp/>object<sp/>as<sp/>the<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>used<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test.<sp/><sp/>The<sp/>&apos;result&apos;<sp/>parameter<sp/>specifies<sp/>where<sp/>to<sp/>report<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="comment">//<sp/>results.<sp/>Intercepts<sp/>only<sp/>failures<sp/>from<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal">ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>TestPartResultArray*<sp/>result)</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD),</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result_(result)<sp/>{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="2030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>c&apos;tor<sp/>sets<sp/>this<sp/>object<sp/>as<sp/>the<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>used<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test.<sp/><sp/>The<sp/>&apos;result&apos;<sp/>parameter<sp/>specifies<sp/>where<sp/>to<sp/>report<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>results.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal">ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>InterceptMode<sp/>intercept_mode,<sp/>TestPartResultArray*<sp/>result)</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>intercept_mode_(intercept_mode),</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result_(result)<sp/>{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="2040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScopedFakeTestPartResultReporter::Init()<sp/>{</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/>internal::UnitTestImpl*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/>internal::GetUnitTestImpl();</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intercept_mode_<sp/>==<sp/>INTERCEPT_ALL_THREADS)<sp/>{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>old_reporter_<sp/>=<sp/>impl-&gt;GetGlobalTestPartResultReporter();</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>impl-&gt;SetGlobalTestPartResultReporter(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>old_reporter_<sp/>=<sp/>impl-&gt;GetTestPartResultReporterForCurrentThread();</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>impl-&gt;SetTestPartResultReporterForCurrentThread(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>d&apos;tor<sp/>restores<sp/>the<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>used<sp/>by<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight><highlight class="comment">//<sp/>before.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal">ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter()<sp/>{</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/>internal::UnitTestImpl*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/>internal::GetUnitTestImpl();</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intercept_mode_<sp/>==<sp/>INTERCEPT_ALL_THREADS)<sp/>{</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>impl-&gt;SetGlobalTestPartResultReporter(old_reporter_);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>impl-&gt;SetTestPartResultReporterForCurrentThread(old_reporter_);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increments<sp/>the<sp/>test<sp/>part<sp/>result<sp/>count<sp/>and<sp/>remembers<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>is<sp/>from<sp/>the<sp/>TestPartResultReporterInterface<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScopedFakeTestPartResultReporter::ReportTestPartResult(</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/>result_-&gt;Append(result);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>type<sp/>ID<sp/>of<sp/>::testing::Test.<sp/><sp/>We<sp/>should<sp/>always<sp/>call<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instead<sp/>of<sp/>GetTypeId&lt;<sp/>::testing::Test&gt;()<sp/>to<sp/>get<sp/>the<sp/>type<sp/>ID<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight><highlight class="comment">//<sp/>testing::Test.<sp/><sp/>This<sp/>is<sp/>to<sp/>work<sp/>around<sp/>a<sp/>suspected<sp/>linker<sp/>bug<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>Google<sp/>Test<sp/>as<sp/>a<sp/>framework<sp/>on<sp/>Mac<sp/>OS<sp/>X.<sp/><sp/>The<sp/>bug<sp/>causes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GetTypeId&lt;<sp/>::testing::Test&gt;()<sp/>to<sp/>return<sp/>different<sp/>values<sp/>depending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>whether<sp/>the<sp/>call<sp/>is<sp/>from<sp/>the<sp/>Google<sp/>Test<sp/>framework<sp/>itself<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>user<sp/>test<sp/>code.<sp/><sp/>GetTestTypeId()<sp/>is<sp/>guaranteed<sp/>to<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>the<sp/>same<sp/>value,<sp/>as<sp/>it<sp/>always<sp/>calls<sp/>GetTypeId&lt;&gt;()<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gtest.cc,<sp/>which<sp/>is<sp/>within<sp/>the<sp/>Google<sp/>Test<sp/>framework.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal">TypeId<sp/>GetTestTypeId()<sp/>{</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetTypeId&lt;Test&gt;();</highlight></codeline>
<codeline lineno="2084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>of<sp/>GetTestTypeId()<sp/>as<sp/>seen<sp/>from<sp/>within<sp/>the<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>library.<sp/><sp/>This<sp/>is<sp/>solely<sp/>for<sp/>testing<sp/>GetTestTypeId().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypeId<sp/>kTestTypeIdInGoogleTest<sp/>=<sp/>GetTestTypeId();</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>predicate-formatter<sp/>checks<sp/>that<sp/>&apos;results&apos;<sp/>contains<sp/>a<sp/>test<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failure<sp/>of<sp/>the<sp/>given<sp/>type<sp/>and<sp/>that<sp/>the<sp/>failure<sp/>message<sp/>contains<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>substring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal">AssertionResult<sp/>HasOneFailure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>results_expr<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>type_expr<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>substr_expr<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResultArray&amp;<sp/>results,</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestPartResult::Type<sp/>type,</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>substr)<sp/>{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>expected(type<sp/>==<sp/>TestPartResult::kFatalFailure<sp/>?</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1<sp/>fatal<sp/>failure&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1<sp/>non-fatal<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/>Message<sp/>msg;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(results.size()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>results.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>failures&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>results.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>results.GetTestPartResult(i);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()<sp/>&lt;&lt;<sp/>msg;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>r<sp/>=<sp/>results.GetTestPartResult(0);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r.type()<sp/>!=<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>r;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(r.message(),<sp/>substr.c_str())<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>containing<sp/>\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>substr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>r;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>constructor<sp/>of<sp/>SingleFailureChecker<sp/>remembers<sp/>where<sp/>to<sp/>look<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>part<sp/>results,<sp/>what<sp/>type<sp/>of<sp/>failure<sp/>we<sp/>expect,<sp/>and<sp/>what</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>substring<sp/>the<sp/>failure<sp/>message<sp/>should<sp/>contain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal">SingleFailureChecker::<sp/>SingleFailureChecker(</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResultArray*<sp/>results,</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>TestPartResult::Type<sp/>type,</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>substr)</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>results_(results),</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_(type),</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>substr_(substr)<sp/>{}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>destructor<sp/>of<sp/>SingleFailureChecker<sp/>verifies<sp/>that<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestPartResultArray<sp/>contains<sp/>exactly<sp/>one<sp/>failure<sp/>that<sp/>has<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>and<sp/>contains<sp/>the<sp/>given<sp/>substring.<sp/><sp/>If<sp/>that&apos;s<sp/>not<sp/>the<sp/>case,<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-fatal<sp/>failure<sp/>will<sp/>be<sp/>generated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal">SingleFailureChecker::~SingleFailureChecker()<sp/>{</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT3(HasOneFailure,<sp/>*results_,<sp/>type_,<sp/>substr_);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal">DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/>UnitTestImpl*<sp/>unit_test)<sp/>:<sp/>unit_test_(unit_test)<sp/>{}</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefaultGlobalTestPartResultReporter::ReportTestPartResult(</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/>unit_test_-&gt;current_test_result()-&gt;AddTestPartResult(result);</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/>unit_test_-&gt;listeners()-&gt;repeater()-&gt;OnTestPartResult(result);</highlight></codeline>
<codeline lineno="2155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal">DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/>UnitTestImpl*<sp/>unit_test)<sp/>:<sp/>unit_test_(unit_test)<sp/>{}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefaultPerThreadTestPartResultReporter::ReportTestPartResult(</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>unit_test_-&gt;GetGlobalTestPartResultReporter()-&gt;ReportTestPartResult(result);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>global<sp/>test<sp/>part<sp/>result<sp/>reporter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal">TestPartResultReporterInterface*</highlight></codeline>
<codeline lineno="2167"><highlight class="normal">UnitTestImpl::GetGlobalTestPartResultReporter()<sp/>{</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/>internal::MutexLock<sp/>lock(&amp;global_test_part_result_reporter_mutex_);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>global_test_part_result_repoter_;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>global<sp/>test<sp/>part<sp/>result<sp/>reporter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::SetGlobalTestPartResultReporter(</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/>TestPartResultReporterInterface*<sp/>reporter)<sp/>{</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/>internal::MutexLock<sp/>lock(&amp;global_test_part_result_reporter_mutex_);</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/>global_test_part_result_repoter_<sp/>=<sp/>reporter;</highlight></codeline>
<codeline lineno="2177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>for<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal">TestPartResultReporterInterface*</highlight></codeline>
<codeline lineno="2181"><highlight class="normal">UnitTestImpl::GetTestPartResultReporterForCurrentThread()<sp/>{</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>per_thread_test_part_result_reporter_.get();</highlight></codeline>
<codeline lineno="2183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>for<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::SetTestPartResultReporterForCurrentThread(</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>TestPartResultReporterInterface*<sp/>reporter)<sp/>{</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/>per_thread_test_part_result_reporter_.set(reporter);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestImpl::successful_test_case_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CountIf(test_cases_,<sp/>TestCasePassed);</highlight></codeline>
<codeline lineno="2194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestImpl::failed_test_case_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CountIf(test_cases_,<sp/>TestCaseFailed);</highlight></codeline>
<codeline lineno="2199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestImpl::total_test_case_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test_cases_.size());</highlight></codeline>
<codeline lineno="2204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>cases<sp/>that<sp/>contain<sp/>at<sp/>least<sp/>one<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestImpl::test_case_to_run_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CountIf(test_cases_,<sp/>ShouldRunTestCase);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestImpl::successful_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SumOverTestCaseList(test_cases_,<sp/>&amp;TestCase::successful_test_count);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestImpl::failed_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SumOverTestCaseList(test_cases_,<sp/>&amp;TestCase::failed_test_count);</highlight></codeline>
<codeline lineno="2220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>that<sp/>will<sp/>be<sp/>reported<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestImpl::reportable_disabled_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SumOverTestCaseList(test_cases_,</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;TestCase::reportable_disabled_test_count);</highlight></codeline>
<codeline lineno="2226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestImpl::disabled_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SumOverTestCaseList(test_cases_,<sp/>&amp;TestCase::disabled_test_count);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>to<sp/>be<sp/>printed<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestImpl::reportable_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SumOverTestCaseList(test_cases_,<sp/>&amp;TestCase::reportable_test_count);</highlight></codeline>
<codeline lineno="2236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestImpl::total_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SumOverTestCaseList(test_cases_,<sp/>&amp;TestCase::total_test_count);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestImpl::test_to_run_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SumOverTestCaseList(test_cases_,<sp/>&amp;TestCase::test_to_run_count);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>as<sp/>an<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>stack<sp/>frames<sp/>to<sp/>be<sp/>included<sp/>is<sp/>specified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>gtest_stack_trace_depth<sp/>flag.<sp/><sp/>The<sp/>skip_count<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>top<sp/>frames<sp/>to<sp/>be<sp/>skipped,<sp/>which<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>count<sp/>against<sp/>the<sp/>number<sp/>of<sp/>frames<sp/>to<sp/>be<sp/>included.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>if<sp/>Foo()<sp/>calls<sp/>Bar(),<sp/>which<sp/>in<sp/>turn<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CurrentOsStackTraceExceptTop(1),<sp/>Foo()<sp/>will<sp/>be<sp/>included<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>trace<sp/>but<sp/>Bar()<sp/>and<sp/>CurrentOsStackTraceExceptTop()<sp/>won&apos;t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal">std::string<sp/>UnitTestImpl::CurrentOsStackTraceExceptTop(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_count)<sp/>{</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/>(void)skip_count;</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>time<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal">TimeInMillis<sp/>GetTimeInMillis()<sp/>{</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS_MOBILE<sp/>||<sp/>defined(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Difference<sp/>between<sp/>1970-01-01<sp/>and<sp/>1601-01-01<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>http://analogous.blogspot.com/2005/04/epoch.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeInMillis<sp/>kJavaEpochToWinFileTimeDelta<sp/>=</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TimeInMillis</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(116444736UL)<sp/>*<sp/>100000UL;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>kTenthMicrosInMilliSecond<sp/>=<sp/>10000;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/>SYSTEMTIME<sp/>now_systime;</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/>FILETIME<sp/>now_filetime;</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/>ULARGE_INTEGER<sp/>now_int64;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(kenton@google.com):<sp/>Shouldn&apos;t<sp/>this<sp/>just<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>GetSystemTimeAsFileTime()?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/>GetSystemTime(&amp;now_systime);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SystemTimeToFileTime(&amp;now_systime,<sp/>&amp;now_filetime))<sp/>{</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>now_int64.LowPart<sp/>=<sp/>now_filetime.dwLowDateTime;</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/>now_int64.HighPart<sp/>=<sp/>now_filetime.dwHighDateTime;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/>now_int64.QuadPart<sp/>=<sp/>(now_int64.QuadPart<sp/>/<sp/>kTenthMicrosInMilliSecond)<sp/>-</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kJavaEpochToWinFileTimeDelta;</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>now_int64.QuadPart;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_HAS_GETTIMEOFDAY_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/>__timeb64<sp/>now;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC<sp/>8<sp/>deprecates<sp/>_ftime64(),<sp/>so<sp/>we<sp/>want<sp/>to<sp/>suppress<sp/>warning<sp/>4996</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(deprecated<sp/>function)<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(kenton@google.com):<sp/>Use<sp/>GetTickCount()?<sp/><sp/>Or<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>SystemTimeToFileTime()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(push)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Saves<sp/>the<sp/>current<sp/>warning<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:4996)<sp/><sp/></highlight><highlight class="comment">//<sp/>Temporarily<sp/>disables<sp/>warning<sp/>4996.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/>_ftime64(&amp;now);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(pop)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>warning<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/>_ftime64(&amp;now);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TimeInMillis</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(now.time)<sp/>*<sp/>1000<sp/>+<sp/>now.millitm;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal">#elif<sp/>GTEST_HAS_GETTIMEOFDAY_</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timeval<sp/>now;</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/>gettimeofday(&amp;now,<sp/>NULL);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TimeInMillis</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(now.tv_sec)<sp/>*<sp/>1000<sp/>+<sp/>now.tv_usec<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal">#<sp/>error<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>know<sp/>how<sp/>to<sp/>get<sp/>the<sp/>current<sp/>time<sp/>on<sp/>your<sp/>system.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="2313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>String.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>UTF-16<sp/>wide<sp/>string<sp/>from<sp/>the<sp/>given<sp/>ANSI<sp/>string,<sp/>allocating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>using<sp/>new.<sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>using<sp/>delete[].<sp/>Returns<sp/>the<sp/>wide<sp/>string,<sp/>or<sp/>NULL<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>input<sp/>is<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal">LPCWSTR<sp/>String::AnsiToUtf16(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ansi)<sp/>{</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ansi)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>strlen(ansi);</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unicode_length<sp/>=</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MultiByteToWideChar(CP_ACP,<sp/>0,<sp/>ansi,<sp/>length,</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/>WCHAR*<sp/>unicode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>WCHAR[unicode_length<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/>MultiByteToWideChar(CP_ACP,<sp/>0,<sp/>ansi,<sp/>length,</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unicode,<sp/>unicode_length);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/>unicode[unicode_length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unicode;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>ANSI<sp/>string<sp/>from<sp/>the<sp/>given<sp/>wide<sp/>string,<sp/>allocating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>using<sp/>new.<sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>using<sp/>delete[].<sp/>Returns<sp/>the<sp/>ANSI<sp/>string,<sp/>or<sp/>NULL<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>input<sp/>is<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>String::Utf16ToAnsi(LPCWSTR<sp/>utf16_str)<sp/><sp/>{</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf16_str)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ansi_length<sp/>=</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WideCharToMultiByte(CP_ACP,<sp/>0,<sp/>utf16_str,<sp/>-1,</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>0,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ansi<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[ansi_length<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/>WideCharToMultiByte(CP_ACP,<sp/>0,<sp/>utf16_str,<sp/>-1,</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ansi,<sp/>ansi_length,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/>ansi[ansi_length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ansi;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>C<sp/>strings.<sp/><sp/>Returns<sp/>true<sp/>iff<sp/>they<sp/>have<sp/>the<sp/>same<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>strcmp(),<sp/>this<sp/>function<sp/>can<sp/>handle<sp/>NULL<sp/>argument(s).<sp/><sp/>A<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>string<sp/>is<sp/>considered<sp/>different<sp/>to<sp/>any<sp/>non-NULL<sp/>C<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>String::CStringEquals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lhs<sp/>==<sp/>NULL<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs<sp/>==<sp/>NULL;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rhs<sp/>==<sp/>NULL<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(lhs,<sp/>rhs)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING<sp/>||<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>an<sp/>array<sp/>of<sp/>wide<sp/>chars<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>using<sp/>the<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>encoding,<sp/>and<sp/>streams<sp/>the<sp/>result<sp/>to<sp/>the<sp/>given<sp/>Message<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StreamWideCharsToMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wstr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Message*<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wstr[i]<sp/>!=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*msg<sp/>&lt;&lt;<sp/>WideStringToUtf8(wstr<sp/>+<sp/>i,<sp/>static_cast&lt;int&gt;(length<sp/>-<sp/>i));</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>length<sp/>&amp;&amp;<sp/>wstr[i]<sp/>!=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*msg<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING<sp/>||<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>empty<sp/>Message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>allocate<sp/>the<sp/>stringstream<sp/>separately<sp/>because<sp/>otherwise<sp/>each<sp/>use<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ASSERT/EXPECT<sp/>in<sp/>a<sp/>procedure<sp/>adds<sp/>over<sp/>200<sp/>bytes<sp/>to<sp/>the<sp/>procedure&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stack<sp/>frame<sp/>leading<sp/>to<sp/>huge<sp/>stack<sp/>frames<sp/>in<sp/>some<sp/>cases;<sp/>gcc<sp/>does<sp/>not<sp/>reuse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>stack<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal">Message::Message()<sp/>:<sp/>ss_(new<sp/>::std::stringstream)<sp/>{</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>we<sp/>want<sp/>there<sp/>to<sp/>be<sp/>enough<sp/>precision<sp/>when<sp/>printing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>double<sp/>to<sp/>a<sp/>Message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/>*ss_<sp/>&lt;&lt;<sp/>std::setprecision(std::numeric_limits&lt;double&gt;::digits10<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>two<sp/>overloads<sp/>allow<sp/>streaming<sp/>a<sp/>wide<sp/>C<sp/>string<sp/>to<sp/>a<sp/>Message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal">Message&amp;<sp/>Message::operator<sp/>&lt;&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wide_c_str)<sp/>{</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>internal::String::ShowWideCString(wide_c_str);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2406"><highlight class="normal">Message&amp;<sp/>Message::operator<sp/>&lt;&lt;(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wide_c_str)<sp/>{</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>internal::String::ShowWideCString(wide_c_str);</highlight></codeline>
<codeline lineno="2408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>given<sp/>wide<sp/>string<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>using<sp/>the<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>encoding,<sp/>and<sp/>streams<sp/>the<sp/>result<sp/>to<sp/>this<sp/>Message<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal">Message&amp;<sp/>Message::operator<sp/>&lt;&lt;(const<sp/>::std::wstring&amp;<sp/>wstr)<sp/>{</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>internal::StreamWideCharsToMessage(wstr.c_str(),<sp/>wstr.length(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>given<sp/>wide<sp/>string<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>using<sp/>the<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>encoding,<sp/>and<sp/>streams<sp/>the<sp/>result<sp/>to<sp/>this<sp/>Message<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal">Message&amp;<sp/>Message::operator<sp/>&lt;&lt;(const<sp/>::wstring&amp;<sp/>wstr)<sp/>{</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/>internal::StreamWideCharsToMessage(wstr.c_str(),<sp/>wstr.length(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>text<sp/>streamed<sp/>to<sp/>this<sp/>object<sp/>so<sp/>far<sp/>as<sp/>an<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>&apos;\0&apos;<sp/>character<sp/>in<sp/>the<sp/>buffer<sp/>is<sp/>replaced<sp/>with<sp/>&quot;\\0&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal">std::string<sp/>Message::GetString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::StringStreamToString(ss_.get());</highlight></codeline>
<codeline lineno="2432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AssertionResult<sp/>constructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>in<sp/>EXPECT_TRUE/FALSE(assertion_result).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal">AssertionResult::AssertionResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AssertionResult&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>success_(other.success_),</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message_(other.message_.get()<sp/>!=<sp/>NULL<sp/>?</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>::std::string(*other.message_)<sp/>:</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;<sp/>::std::string*&gt;(NULL))<sp/>{</highlight></codeline>
<codeline lineno="2441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>assertion&apos;s<sp/>negation.<sp/>Used<sp/>with<sp/>EXPECT/ASSERT_FALSE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal">AssertionResult<sp/>AssertionResult::operator!()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>negation(!success_);</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message_.get()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/>negation<sp/>&lt;&lt;<sp/>*message_;</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>negation;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>a<sp/>successful<sp/>assertion<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal">AssertionResult<sp/>AssertionSuccess()<sp/>{</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionResult(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>a<sp/>failed<sp/>assertion<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal">AssertionResult<sp/>AssertionFailure()<sp/>{</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionResult(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>a<sp/>failed<sp/>assertion<sp/>result<sp/>with<sp/>the<sp/>given<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deprecated;<sp/>use<sp/>AssertionFailure()<sp/>&lt;&lt;<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal">AssertionResult<sp/>AssertionFailure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Message&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()<sp/>&lt;&lt;<sp/>message;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>and<sp/>returns<sp/>the<sp/>message<sp/>for<sp/>an<sp/>equality<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(e.g.<sp/>ASSERT_EQ,<sp/>EXPECT_STREQ,<sp/>etc)<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>four<sp/>parameters<sp/>are<sp/>the<sp/>expressions<sp/>used<sp/>in<sp/>the<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>their<sp/>values,<sp/>as<sp/>strings.<sp/><sp/>For<sp/>example,<sp/>for<sp/>ASSERT_EQ(foo,<sp/>bar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>foo<sp/>is<sp/>5<sp/>and<sp/>bar<sp/>is<sp/>6,<sp/>we<sp/>have:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>expected_expression:<sp/>&quot;foo&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>actual_expression:<sp/><sp/><sp/>&quot;bar&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>expected_value:<sp/><sp/><sp/><sp/><sp/><sp/>&quot;5&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>actual_value:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;6&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ignoring_case<sp/>parameter<sp/>is<sp/>true<sp/>iff<sp/>the<sp/>assertion<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*_STRCASEEQ*.<sp/><sp/>When<sp/>it&apos;s<sp/>true,<sp/>the<sp/>string<sp/>&quot;<sp/>(ignoring<sp/>case)&quot;<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>inserted<sp/>into<sp/>the<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal">AssertionResult<sp/>EqFailure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>expected_value,</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>actual_value,</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignoring_case)<sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/>Message<sp/>msg;</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>actual_expression;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_value<sp/>!=<sp/>actual_expression)<sp/>{</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>Actual:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>actual_value;</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nExpected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected_expression;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ignoring_case)<sp/>{</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(ignoring<sp/>case)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected_value<sp/>!=<sp/>expected_expression)<sp/>{</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nWhich<sp/>is:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected_value;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()<sp/>&lt;&lt;<sp/>msg;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>failure<sp/>message<sp/>for<sp/>Boolean<sp/>assertions<sp/>such<sp/>as<sp/>EXPECT_TRUE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal">std::string<sp/>GetBoolAssertionFailureMessage(</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AssertionResult&amp;<sp/>assertion_result,</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expression_text,</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_predicate_value,</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_predicate_value)<sp/>{</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_message<sp/>=<sp/>assertion_result.message();</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/>Message<sp/>msg;</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expression_text</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>Actual:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>actual_predicate_value;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_message[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>actual_message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nExpected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected_predicate_value;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg.GetString();</highlight></codeline>
<codeline lineno="2520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>implementing<sp/>ASSERT_NEAR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal">AssertionResult<sp/>DoubleNearPredFormat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>abs_error_expr,</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val1,</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val2,</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>abs_error)<sp/>{</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>fabs(val1<sp/>-<sp/>val2);</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>&lt;=<sp/>abs_error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(wan):<sp/>do<sp/>not<sp/>print<sp/>the<sp/>value<sp/>of<sp/>an<sp/>expression<sp/>if<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>a<sp/>literal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>difference<sp/>between<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr2</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>diff<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>exceeds<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>abs_error_expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>where\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>expr1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>val1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>expr2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>val2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>abs_error_expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>abs_error<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>template<sp/>for<sp/>implementing<sp/>FloatLE()<sp/>and<sp/>DoubleLE().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawType&gt;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal">AssertionResult<sp/>FloatingPointLE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RawType<sp/>val1,</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RawType<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>success<sp/>if<sp/>val1<sp/>is<sp/>less<sp/>than<sp/>val2,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val1<sp/>&lt;<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>if<sp/>val1<sp/>is<sp/>almost<sp/>equal<sp/>to<sp/>val2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FloatingPoint&lt;RawType&gt;<sp/>lhs(val1),<sp/>rhs(val2);</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.AlmostEquals(rhs))<sp/>{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>above<sp/>two<sp/>checks<sp/>will<sp/>both<sp/>fail<sp/>if<sp/>either<sp/>val1<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>val2<sp/>is<sp/>NaN,<sp/>as<sp/>the<sp/>IEEE<sp/>floating-point<sp/>standard<sp/>requires<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>predicate<sp/>involving<sp/>a<sp/>NaN<sp/>must<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>val1_ss;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/>val1_ss<sp/>&lt;&lt;<sp/>std::setprecision(std::numeric_limits&lt;RawType&gt;::digits10<sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>val1;</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>val2_ss;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/>val2_ss<sp/>&lt;&lt;<sp/>std::setprecision(std::numeric_limits&lt;RawType&gt;::digits10<sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>val2;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>&lt;=<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>StringStreamToString(&amp;val1_ss)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>vs<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>StringStreamToString(&amp;val2_ss);</highlight></codeline>
<codeline lineno="2576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Asserts<sp/>that<sp/>val1<sp/>is<sp/>less<sp/>than,<sp/>or<sp/>almost<sp/>equal<sp/>to,<sp/>val2.<sp/><sp/>Fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise.<sp/><sp/>In<sp/>particular,<sp/>it<sp/>fails<sp/>if<sp/>either<sp/>val1<sp/>or<sp/>val2<sp/>is<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal">AssertionResult<sp/>FloatLE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingPointLE&lt;float&gt;(expr1,<sp/>expr2,<sp/>val1,<sp/>val2);</highlight></codeline>
<codeline lineno="2585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Asserts<sp/>that<sp/>val1<sp/>is<sp/>less<sp/>than,<sp/>or<sp/>almost<sp/>equal<sp/>to,<sp/>val2.<sp/><sp/>Fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise.<sp/><sp/>In<sp/>particular,<sp/>it<sp/>fails<sp/>if<sp/>either<sp/>val1<sp/>or<sp/>val2<sp/>is<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal">AssertionResult<sp/>DoubleLE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingPointLE&lt;double&gt;(expr1,<sp/>expr2,<sp/>val1,<sp/>val2);</highlight></codeline>
<codeline lineno="2592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_EQ<sp/>with<sp/>int<sp/>or<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal">AssertionResult<sp/>CmpHelperEQ(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BiggestInt<sp/>expected,</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BiggestInt<sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected<sp/>==<sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EqFailure(expected_expression,</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual_expression,</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(expected,<sp/>actual),</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(actual,<sp/>expected),</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>macro<sp/>for<sp/>implementing<sp/>the<sp/>helper<sp/>functions<sp/>needed<sp/>to<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ASSERT_??<sp/>and<sp/>EXPECT_??<sp/>with<sp/>integer<sp/>or<sp/>enum<sp/>arguments.<sp/><sp/>It<sp/>is<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight><highlight class="comment">//<sp/>just<sp/>to<sp/>avoid<sp/>copy-and-paste<sp/>of<sp/>similar<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IMPL_CMP_HELPER_(op_name,<sp/>op)\</highlight></codeline>
<codeline lineno="2617"><highlight class="preprocessor">AssertionResult<sp/>CmpHelper##op_name(const<sp/>char*<sp/>expr1,<sp/>const<sp/>char*<sp/>expr2,<sp/>\</highlight></codeline>
<codeline lineno="2618"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BiggestInt<sp/>val1,<sp/>BiggestInt<sp/>val2)<sp/>{\</highlight></codeline>
<codeline lineno="2619"><highlight class="preprocessor"><sp/><sp/>if<sp/>(val1<sp/>op<sp/>val2)<sp/>{\</highlight></codeline>
<codeline lineno="2620"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>AssertionSuccess();\</highlight></codeline>
<codeline lineno="2621"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="2622"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>AssertionFailure()<sp/>\</highlight></codeline>
<codeline lineno="2623"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Expected:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr1<sp/>&lt;&lt;<sp/>&quot;)<sp/>&quot;<sp/>#op<sp/>&quot;<sp/>(&quot;<sp/>&lt;&lt;<sp/>expr2\</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;),<sp/>actual:<sp/>&quot;<sp/>&lt;&lt;<sp/>FormatForComparisonFailureMessage(val1,<sp/>val2)\</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>vs<sp/>&quot;<sp/>&lt;&lt;<sp/>FormatForComparisonFailureMessage(val2,<sp/>val1);\</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="2627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_NE<sp/>with<sp/>int<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal">GTEST_IMPL_CMP_HELPER_(NE,<sp/>!=)</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_LE<sp/>with<sp/>int<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal">GTEST_IMPL_CMP_HELPER_(LE,<sp/>&lt;=)</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_LT<sp/>with<sp/>int<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal">GTEST_IMPL_CMP_HELPER_(LT,<sp/>&lt;<sp/>)</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_GE<sp/>with<sp/>int<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal">GTEST_IMPL_CMP_HELPER_(GE,<sp/>&gt;=)</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_GT<sp/>with<sp/>int<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal">GTEST_IMPL_CMP_HELPER_(GT,<sp/>&gt;<sp/>)</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_IMPL_CMP_HELPER_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STREQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2648"><highlight class="normal">AssertionResult<sp/>CmpHelperSTREQ(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected,</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(String::CStringEquals(expected,<sp/>actual))<sp/>{</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EqFailure(expected_expression,</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual_expression,</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(expected),</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(actual),</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STRCASEEQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal">AssertionResult<sp/>CmpHelperSTRCASEEQ(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected,</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(String::CaseInsensitiveCStringEquals(expected,<sp/>actual))<sp/>{</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EqFailure(expected_expression,</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual_expression,</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(expected),</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(actual),</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STRNE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal">AssertionResult<sp/>CmpHelperSTRNE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!String::CStringEquals(s1,<sp/>s2))<sp/>{</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s1_expression<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>!=<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>s2_expression<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>actual:<sp/>\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>s1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>vs<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STRCASENE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal">AssertionResult<sp/>CmpHelperSTRCASENE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!String::CaseInsensitiveCStringEquals(s1,<sp/>s2))<sp/>{</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s1_expression<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>!=<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>s2_expression<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>(ignoring<sp/>case),<sp/>actual:<sp/>\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>s1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>vs<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>functions<sp/>for<sp/>implementing<sp/>IsSubString()<sp/>and<sp/>IsNotSubstring().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"></highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>group<sp/>of<sp/>overloaded<sp/>functions<sp/>return<sp/>true<sp/>iff<sp/>needle<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight><highlight class="comment">//<sp/>substring<sp/>of<sp/>haystack.<sp/><sp/>NULL<sp/>is<sp/>considered<sp/>a<sp/>substring<sp/>of<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSubstringPred(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needle<sp/>==<sp/>NULL<sp/>||<sp/>haystack<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>needle<sp/>==<sp/>haystack;</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strstr(haystack,<sp/>needle)<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSubstringPred(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needle<sp/>==<sp/>NULL<sp/>||<sp/>haystack<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>needle<sp/>==<sp/>haystack;</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wcsstr(haystack,<sp/>needle)<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="2730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StringType<sp/>here<sp/>can<sp/>be<sp/>either<sp/>::std::string<sp/>or<sp/>::std::wstring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType&gt;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSubstringPred(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>needle,</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>haystack.find(needle)<sp/>!=<sp/>StringType::npos;</highlight></codeline>
<codeline lineno="2737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>implements<sp/>either<sp/>IsSubstring()<sp/>or<sp/>IsNotSubstring(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight><highlight class="comment">//<sp/>depending<sp/>on<sp/>the<sp/>value<sp/>of<sp/>the<sp/>expected_to_be_substring<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StringType<sp/>here<sp/>can<sp/>be<sp/>const<sp/>char*,<sp/>const<sp/>wchar_t*,<sp/>::std::string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>::std::wstring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType&gt;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal">AssertionResult<sp/>IsSubstringImpl(</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expected_to_be_substring,</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsSubstringPred(needle,<sp/>haystack)<sp/>==<sp/>expected_to_be_substring)</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_wide_string<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(needle[0])<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>begin_string_quote<sp/>=<sp/>is_wide_string<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;L\&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>needle_expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>begin_string_quote<sp/>&lt;&lt;<sp/>needle<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(expected_to_be_substring<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;a<sp/>substring<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>haystack_expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Which<sp/>is:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>begin_string_quote<sp/>&lt;&lt;<sp/>haystack<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSubstring()<sp/>and<sp/>IsNotSubstring()<sp/>check<sp/>whether<sp/>needle<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight><highlight class="comment">//<sp/>substring<sp/>of<sp/>haystack<sp/>(NULL<sp/>is<sp/>considered<sp/>a<sp/>substring<sp/>of<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only),<sp/>and<sp/>return<sp/>an<sp/>appropriate<sp/>error<sp/>message<sp/>when<sp/>they<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight></codeline>
<codeline lineno="2767"><highlight class="normal">AssertionResult<sp/>IsSubstring(</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSubstringImpl(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="2771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal">AssertionResult<sp/>IsSubstring(</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSubstringImpl(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="2777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal">AssertionResult<sp/>IsNotSubstring(</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSubstringImpl(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="2783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal">AssertionResult<sp/>IsNotSubstring(</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSubstringImpl(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="2789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight></codeline>
<codeline lineno="2791"><highlight class="normal">AssertionResult<sp/>IsSubstring(</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>::std::string&amp;<sp/>needle,<sp/>const<sp/>::std::string&amp;<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSubstringImpl(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="2795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal">AssertionResult<sp/>IsNotSubstring(</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>::std::string&amp;<sp/>needle,<sp/>const<sp/>::std::string&amp;<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSubstringImpl(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="2801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal">AssertionResult<sp/>IsSubstring(</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>::std::wstring&amp;<sp/>needle,<sp/>const<sp/>::std::wstring&amp;<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSubstringImpl(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal">AssertionResult<sp/>IsNotSubstring(</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>::std::wstring&amp;<sp/>needle,<sp/>const<sp/>::std::wstring&amp;<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSubstringImpl(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="2814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>IsHRESULT{SuccessFailure}<sp/>predicates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal">AssertionResult<sp/>HRESULTFailureHelper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected,</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hr)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>CE<sp/>doesn&apos;t<sp/>support<sp/>FormatMessage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>error_text[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"></highlight></codeline>
<codeline lineno="2832"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"></highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Looks<sp/>up<sp/>the<sp/>human-readable<sp/>system<sp/>message<sp/>for<sp/>the<sp/>HRESULT<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>since<sp/>we&apos;re<sp/>not<sp/>passing<sp/>any<sp/>params<sp/>to<sp/>FormatMessage,<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>want<sp/>inserts<sp/>expanded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>kFlags<sp/>=<sp/>FORMAT_MESSAGE_FROM_SYSTEM<sp/>|</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORMAT_MESSAGE_IGNORE_INSERTS;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>kBufSize<sp/>=<sp/>4096;</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>system&apos;s<sp/>human<sp/>readable<sp/>message<sp/>string<sp/>for<sp/>this<sp/>HRESULT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>error_text[kBufSize]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/>DWORD<sp/>message_length<sp/>=<sp/>::FormatMessageA(kFlags,</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>source,<sp/>we&apos;re<sp/>asking<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hr,<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>line<sp/>width<sp/>restrictions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_text,<sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kBufSize,<sp/><sp/></highlight><highlight class="comment">//<sp/>buf<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>arguments<sp/>for<sp/>inserts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Trims<sp/>tailing<sp/>white<sp/>space<sp/>(FormatMessage<sp/>leaves<sp/>a<sp/>trailing<sp/>CR-LF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>message_length<sp/>&amp;&amp;<sp/>IsSpace(error_text[message_length<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--message_length)<sp/>{</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/>error_text[message_length<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>error_hex(</highlight><highlight class="stringliteral">&quot;0x&quot;</highlight><highlight class="normal"><sp/>+<sp/>String::FormatHexInt(hr));</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/>return<sp/>::testing::AssertionFailure()</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error_hex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error_text<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal">AssertionResult<sp/>IsHRESULTSuccess(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hr)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SUCCEEDED(hr))<sp/>{</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HRESULTFailureHelper(expr,<sp/></highlight><highlight class="stringliteral">&quot;succeeds&quot;</highlight><highlight class="normal">,<sp/>hr);</highlight></codeline>
<codeline lineno="2870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal">AssertionResult<sp/>IsHRESULTFailure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hr)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FAILED(hr))<sp/>{</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HRESULTFailureHelper(expr,<sp/></highlight><highlight class="stringliteral">&quot;fails&quot;</highlight><highlight class="normal">,<sp/>hr);</highlight></codeline>
<codeline lineno="2877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utility<sp/>functions<sp/>for<sp/>encoding<sp/>Unicode<sp/>text<sp/>(wide<sp/>strings)<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UTF-8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>Unicode<sp/>code-point<sp/>can<sp/>have<sp/>upto<sp/>21<sp/>bits,<sp/>and<sp/>is<sp/>encoded<sp/>in<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight><highlight class="comment">//<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Code-point<sp/>length<sp/><sp/><sp/>Encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>0<sp/>-<sp/><sp/>7<sp/>bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>8<sp/>-<sp/>11<sp/>bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/>110xxxxx<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>12<sp/>-<sp/>16<sp/>bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1110xxxx<sp/>10xxxxxx<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>17<sp/>-<sp/>21<sp/>bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/>11110xxx<sp/>10xxxxxx<sp/>10xxxxxx<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>code-point<sp/>a<sp/>one-byte<sp/>UTF-8<sp/>sequence<sp/>can<sp/>represent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UInt32<sp/>kMaxCodePoint1<sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/><sp/>7)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>code-point<sp/>a<sp/>two-byte<sp/>UTF-8<sp/>sequence<sp/>can<sp/>represent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UInt32<sp/>kMaxCodePoint2<sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>(5<sp/>+<sp/>6))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>code-point<sp/>a<sp/>three-byte<sp/>UTF-8<sp/>sequence<sp/>can<sp/>represent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UInt32<sp/>kMaxCodePoint3<sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>(4<sp/>+<sp/>2*6))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>code-point<sp/>a<sp/>four-byte<sp/>UTF-8<sp/>sequence<sp/>can<sp/>represent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UInt32<sp/>kMaxCodePoint4<sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>(3<sp/>+<sp/>3*6))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Chops<sp/>off<sp/>the<sp/>n<sp/>lowest<sp/>bits<sp/>from<sp/>a<sp/>bit<sp/>pattern.<sp/><sp/>Returns<sp/>the<sp/>n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lowest<sp/>bits.<sp/><sp/>As<sp/>a<sp/>side<sp/>effect,<sp/>the<sp/>original<sp/>bit<sp/>pattern<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shifted<sp/>to<sp/>the<sp/>right<sp/>by<sp/>n<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>UInt32<sp/>ChopLowBits(UInt32*<sp/>bits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UInt32<sp/>low_bits<sp/>=<sp/>*bits<sp/>&amp;<sp/>((</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>n)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/>*bits<sp/>&gt;&gt;=<sp/>n;</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>low_bits;</highlight></codeline>
<codeline lineno="2912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>Unicode<sp/>code<sp/>point<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>in<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code_point<sp/>parameter<sp/>is<sp/>of<sp/>type<sp/>UInt32<sp/>because<sp/>wchar_t<sp/>may<sp/>not<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wide<sp/>enough<sp/>to<sp/>contain<sp/>a<sp/>code<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>code_point<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>Unicode<sp/>code<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(i.e.<sp/>outside<sp/>of<sp/>Unicode<sp/>range<sp/>U+0<sp/>to<sp/>U+10FFFF)<sp/>it<sp/>will<sp/>be<sp/>converted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>&quot;(Invalid<sp/>Unicode<sp/>0xXXXXXXXX)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal">std::string<sp/>CodePointToUtf8(UInt32<sp/>code_point)<sp/>{</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_point<sp/>&gt;<sp/>kMaxCodePoint4)<sp/>{</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(Invalid<sp/>Unicode<sp/>0x&quot;</highlight><highlight class="normal"><sp/>+<sp/>String::FormatHexInt(code_point)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[5];<sp/><sp/></highlight><highlight class="comment">//<sp/>Big<sp/>enough<sp/>for<sp/>the<sp/>largest<sp/>valid<sp/>code<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_point<sp/>&lt;=<sp/>kMaxCodePoint1)<sp/>{</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/>str[1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/>str[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(code_point);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0xxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_point<sp/>&lt;=<sp/>kMaxCodePoint2)<sp/>{</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/>str[2]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/>str[1]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/>ChopLowBits(&amp;code_point,<sp/>6));<sp/><sp/></highlight><highlight class="comment">//<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/>str[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xC0<sp/>|<sp/>code_point);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>110xxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_point<sp/>&lt;=<sp/>kMaxCodePoint3)<sp/>{</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/>str[3]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/>str[2]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/>ChopLowBits(&amp;code_point,<sp/>6));<sp/><sp/></highlight><highlight class="comment">//<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/>str[1]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/>ChopLowBits(&amp;code_point,<sp/>6));<sp/><sp/></highlight><highlight class="comment">//<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/>str[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xE0<sp/>|<sp/>code_point);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1110xxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>code_point<sp/>&lt;=<sp/>kMaxCodePoint4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/>str[4]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/>str[3]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/>ChopLowBits(&amp;code_point,<sp/>6));<sp/><sp/></highlight><highlight class="comment">//<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/>str[2]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/>ChopLowBits(&amp;code_point,<sp/>6));<sp/><sp/></highlight><highlight class="comment">//<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/>str[1]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/>ChopLowBits(&amp;code_point,<sp/>6));<sp/><sp/></highlight><highlight class="comment">//<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/>str[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xF0<sp/>|<sp/>code_point);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>11110xxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>functions<sp/>only<sp/>make<sp/>sense<sp/>if<sp/>the<sp/>the<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uses<sp/>UTF-16<sp/>for<sp/>wide<sp/>string<sp/>encoding.<sp/>All<sp/>supported<sp/>systems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>16<sp/>bit<sp/>wchar_t<sp/>(Windows,<sp/>Cygwin,<sp/>Symbian<sp/>OS)<sp/>do<sp/>use<sp/>UTF-16.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>if<sp/>the<sp/>arguments<sp/>constitute<sp/>UTF-16<sp/>surrogate<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>thus<sp/>should<sp/>be<sp/>combined<sp/>into<sp/>a<sp/>single<sp/>Unicode<sp/>code<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>CreateCodePointFromUtf16SurrogatePair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsUtf16SurrogatePair(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>second)<sp/>{</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(wchar_t)<sp/>==<sp/>2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(first<sp/>&amp;<sp/>0xFC00)<sp/>==<sp/>0xD800<sp/>&amp;&amp;<sp/>(second<sp/>&amp;<sp/>0xFC00)<sp/>==<sp/>0xDC00;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"></highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Unicode<sp/>code<sp/>point<sp/>from<sp/>UTF16<sp/>surrogate<sp/>pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>UInt32<sp/>CreateCodePointFromUtf16SurrogatePair(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>first,</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>second)<sp/>{</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UInt32<sp/>mask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>10)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">)<sp/>==<sp/>2)<sp/>?</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(((first<sp/>&amp;<sp/>mask)<sp/>&lt;&lt;<sp/>10)<sp/>|<sp/>(second<sp/>&amp;<sp/>mask))<sp/>+<sp/>0x10000<sp/>:</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>should<sp/>not<sp/>be<sp/>called<sp/>when<sp/>the<sp/>condition<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>false,<sp/>but<sp/>we<sp/>provide<sp/>a<sp/>sensible<sp/>default<sp/>in<sp/>case<sp/>it<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(first);</highlight></codeline>
<codeline lineno="2969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>wide<sp/>string<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>in<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>wide<sp/>string<sp/>is<sp/>assumed<sp/>to<sp/>have<sp/>the<sp/>following<sp/>encoding:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>UTF-16<sp/>if<sp/>sizeof(wchar_t)<sp/>==<sp/>2<sp/>(on<sp/>Windows,<sp/>Cygwin,<sp/>Symbian<sp/>OS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>UTF-32<sp/>if<sp/>sizeof(wchar_t)<sp/>==<sp/>4<sp/>(on<sp/>Linux)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parameter<sp/>str<sp/>points<sp/>to<sp/>a<sp/>null-terminated<sp/>wide<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parameter<sp/>num_chars<sp/>may<sp/>additionally<sp/>limit<sp/>the<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>wchar_t<sp/>characters<sp/>processed.<sp/>-1<sp/>is<sp/>used<sp/>when<sp/>the<sp/>entire<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>processed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2979"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>string<sp/>contains<sp/>code<sp/>points<sp/>that<sp/>are<sp/>not<sp/>valid<sp/>Unicode<sp/>code<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(i.e.<sp/>outside<sp/>of<sp/>Unicode<sp/>range<sp/>U+0<sp/>to<sp/>U+10FFFF)<sp/>they<sp/>will<sp/>be<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>&apos;(Invalid<sp/>Unicode<sp/>0xXXXXXXXX)&apos;.<sp/>If<sp/>the<sp/>string<sp/>is<sp/>in<sp/>UTF16<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>contains<sp/>invalid<sp/>UTF-16<sp/>surrogate<sp/>pairs,<sp/>values<sp/>in<sp/>those<sp/>pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>encoded<sp/>as<sp/>individual<sp/>Unicode<sp/>characters<sp/>from<sp/>Basic<sp/>Normal<sp/>Plane.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal">std::string<sp/>WideStringToUtf8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_chars)<sp/>{</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_chars<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/>num_chars<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wcslen(str));</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>stream;</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_chars;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/>UInt32<sp/>unicode_code_point;</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str[i]<sp/>==<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>num_chars<sp/>&amp;&amp;<sp/>IsUtf16SurrogatePair(str[i],<sp/>str[i<sp/>+<sp/>1]))<sp/>{</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicode_code_point<sp/>=<sp/>CreateCodePointFromUtf16SurrogatePair(str[i],</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicode_code_point<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(str[i]);</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>CodePointToUtf8(unicode_code_point);</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StringStreamToString(&amp;stream);</highlight></codeline>
<codeline lineno="3005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>wide<sp/>C<sp/>string<sp/>to<sp/>an<sp/>std::string<sp/>using<sp/>the<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NULL<sp/>will<sp/>be<sp/>converted<sp/>to<sp/>&quot;(null)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal">std::string<sp/>String::ShowWideCString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<sp/>wide_c_str)<sp/>{</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wide_c_str<sp/>==<sp/>NULL)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::WideStringToUtf8(wide_c_str,<sp/>-1);</highlight></codeline>
<codeline lineno="3013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>wide<sp/>C<sp/>strings.<sp/><sp/>Returns<sp/>true<sp/>iff<sp/>they<sp/>have<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>wcscmp(),<sp/>this<sp/>function<sp/>can<sp/>handle<sp/>NULL<sp/>argument(s).<sp/><sp/>A<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>string<sp/>is<sp/>considered<sp/>different<sp/>to<sp/>any<sp/>non-NULL<sp/>C<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>String::WideCStringEquals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs<sp/>==<sp/>NULL;</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rhs<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wcscmp(lhs,<sp/>rhs)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>*_STREQ<sp/>on<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal">AssertionResult<sp/>CmpHelperSTREQ(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>expected,</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(String::WideCStringEquals(expected,<sp/>actual))<sp/>{</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EqFailure(expected_expression,</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual_expression,</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(expected),</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(actual),</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>*_STRNE<sp/>on<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal">AssertionResult<sp/>CmpHelperSTRNE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!String::WideCStringEquals(s1,<sp/>s2))<sp/>{</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s1_expression<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>!=<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>s2_expression<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>actual:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>PrintToString(s1)</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>vs<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PrintToString(s2);</highlight></codeline>
<codeline lineno="3058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>C<sp/>strings,<sp/>ignoring<sp/>case.<sp/><sp/>Returns<sp/>true<sp/>iff<sp/>they<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>strcasecmp(),<sp/>this<sp/>function<sp/>can<sp/>handle<sp/>NULL<sp/>argument(s).<sp/><sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NULL<sp/>C<sp/>string<sp/>is<sp/>considered<sp/>different<sp/>to<sp/>any<sp/>non-NULL<sp/>C<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>String::CaseInsensitiveCStringEquals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs<sp/>==<sp/>NULL;</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rhs<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>posix::StrCaseCmp(lhs,<sp/>rhs)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>wide<sp/>C<sp/>strings,<sp/>ignoring<sp/>case.<sp/><sp/>Returns<sp/>true<sp/>iff<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>the<sp/>same<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlike<sp/>wcscasecmp(),<sp/>this<sp/>function<sp/>can<sp/>handle<sp/>NULL<sp/>argument(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>NULL<sp/>C<sp/>string<sp/>is<sp/>considered<sp/>different<sp/>to<sp/>any<sp/>non-NULL<sp/>wide<sp/>C<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>The<sp/>implementations<sp/>on<sp/>different<sp/>platforms<sp/>slightly<sp/>differ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>windows,<sp/>this<sp/>method<sp/>uses<sp/>_wcsicmp<sp/>which<sp/>compares<sp/>according<sp/>to<sp/>LC_CTYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>environment<sp/>variable.<sp/>On<sp/>GNU<sp/>platform<sp/>this<sp/>method<sp/>uses<sp/>wcscasecmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>compares<sp/>according<sp/>to<sp/>LC_CTYPE<sp/>category<sp/>of<sp/>the<sp/>current<sp/>locale.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>MacOS<sp/>X,<sp/>it<sp/>uses<sp/>towlower,<sp/>which<sp/>also<sp/>uses<sp/>LC_CTYPE<sp/>category<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>locale.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>String::CaseInsensitiveWideCStringEquals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>lhs,</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs<sp/>==<sp/>NULL;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rhs<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_wcsicmp(lhs,<sp/>rhs)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_LINUX<sp/>&amp;&amp;<sp/>!GTEST_OS_LINUX_ANDROID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wcscasecmp(lhs,<sp/>rhs)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Android,<sp/>Mac<sp/>OS<sp/>X<sp/>and<sp/>Cygwin<sp/>don&apos;t<sp/>define<sp/>wcscasecmp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Other<sp/>unknown<sp/>OSes<sp/>may<sp/>not<sp/>define<sp/>it<sp/>either.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/>wint_t<sp/>left,<sp/>right;</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>towlower(*lhs++);</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>towlower(*rhs++);</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left<sp/>&amp;&amp;<sp/>left<sp/>==<sp/>right);</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left<sp/>==<sp/>right;</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>OS<sp/>selector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>str<sp/>ends<sp/>with<sp/>the<sp/>given<sp/>suffix,<sp/>ignoring<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Any<sp/>string<sp/>is<sp/>considered<sp/>to<sp/>end<sp/>with<sp/>an<sp/>empty<sp/>suffix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>String::EndsWithCaseInsensitive(</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>suffix)<sp/>{</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_len<sp/>=<sp/>str.length();</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>suffix_len<sp/>=<sp/>suffix.length();</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(str_len<sp/>&gt;=<sp/>suffix_len)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaseInsensitiveCStringEquals(str.c_str()<sp/>+<sp/>str_len<sp/>-<sp/>suffix_len,</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suffix.c_str());</highlight></codeline>
<codeline lineno="3117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"></highlight></codeline>
<codeline lineno="3119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>an<sp/>int<sp/>value<sp/>as<sp/>&quot;%02d&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3120"><highlight class="normal">std::string<sp/>String::FormatIntWidth2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="3124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>an<sp/>int<sp/>value<sp/>as<sp/>&quot;%X&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal">std::string<sp/>String::FormatHexInt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>std::uppercase<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="3131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>byte<sp/>as<sp/>&quot;%02X&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3134"><highlight class="normal">std::string<sp/>String::FormatByte(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>std::uppercase</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="3139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>buffer<sp/>in<sp/>a<sp/>stringstream<sp/>to<sp/>an<sp/>std::string,<sp/>converting<sp/>NUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bytes<sp/>to<sp/>&quot;\\0&quot;<sp/>along<sp/>the<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal">std::string<sp/>StringStreamToString(::std::stringstream*<sp/>ss)<sp/>{</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/>const<sp/>::std::string&amp;<sp/>str<sp/>=<sp/>ss-&gt;str();</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>str.c_str();</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>start<sp/>+<sp/>str.length();</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"></highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/>result.reserve(2<sp/>*<sp/>(end<sp/>-<sp/>start));</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ch<sp/>=<sp/>start;<sp/>ch<sp/>!=<sp/>end;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\0&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Replaces<sp/>NUL<sp/>with<sp/>&quot;\\0&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>*ch;</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"></highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>the<sp/>user-supplied<sp/>message<sp/>to<sp/>the<sp/>Google-Test-generated<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal">std::string<sp/>AppendUserMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>gtest_msg,</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Message&amp;<sp/>user_msg)<sp/>{</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Appends<sp/>the<sp/>user<sp/>message<sp/>if<sp/>it&apos;s<sp/>non-empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>user_msg_string<sp/>=<sp/>user_msg.GetString();</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(user_msg_string.empty())<sp/>{</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gtest_msg;</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gtest_msg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>user_msg_string;</highlight></codeline>
<codeline lineno="3171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>TestResult</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>empty<sp/>TestResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal">TestResult::TestResult()</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>death_test_count_(0),</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elapsed_time_(0)<sp/>{</highlight></codeline>
<codeline lineno="3181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>D&apos;tor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal">TestResult::~TestResult()<sp/>{</highlight></codeline>
<codeline lineno="3185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>i-th<sp/>test<sp/>part<sp/>result<sp/>among<sp/>all<sp/>the<sp/>results.<sp/>i<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>range<sp/>from<sp/>0<sp/>to<sp/>total_part_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>aborts<sp/>the<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>TestResult::GetTestPartResult(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0<sp/>||<sp/>i<sp/>&gt;=<sp/>total_part_count())</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::posix::Abort();</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_part_results_.at(i);</highlight></codeline>
<codeline lineno="3194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>i-th<sp/>test<sp/>property.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test_property_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>aborts<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestProperty&amp;<sp/>TestResult::GetTestProperty(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0<sp/>||<sp/>i<sp/>&gt;=<sp/>test_property_count())</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::posix::Abort();</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_properties_.at(i);</highlight></codeline>
<codeline lineno="3203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>test<sp/>part<sp/>results.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestResult::ClearTestPartResults()<sp/>{</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/>test_part_results_.clear();</highlight></codeline>
<codeline lineno="3208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>test<sp/>part<sp/>result<sp/>to<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestResult::AddTestPartResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>test_part_result)<sp/>{</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/>test_part_results_.push_back(test_part_result);</highlight></codeline>
<codeline lineno="3213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>test<sp/>property<sp/>to<sp/>the<sp/>list.<sp/>If<sp/>a<sp/>property<sp/>with<sp/>the<sp/>same<sp/>key<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>supplied<sp/>property<sp/>is<sp/>already<sp/>represented,<sp/>the<sp/>value<sp/>of<sp/>this<sp/>test_property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>replaces<sp/>the<sp/>old<sp/>value<sp/>for<sp/>that<sp/>key.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestResult::RecordProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>xml_element,</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestProperty&amp;<sp/>test_property)<sp/>{</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ValidateTestProperty(xml_element,<sp/>test_property))<sp/>{</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/>internal::MutexLock<sp/>lock(&amp;test_properites_mutex_);</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TestProperty&gt;::iterator<sp/>property_with_matching_key<sp/>=</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::find_if(test_properties_.begin(),<sp/>test_properties_.end(),</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::TestPropertyKeyIs(test_property.key()));</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(property_with_matching_key<sp/>==<sp/>test_properties_.end())<sp/>{</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/>test_properties_.push_back(test_property);</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/>property_with_matching_key-&gt;SetValue(test_property.value());</highlight></codeline>
<codeline lineno="3232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>list<sp/>of<sp/>reserved<sp/>attributes<sp/>used<sp/>in<sp/>the<sp/>&lt;testsuites&gt;<sp/>element<sp/>of<sp/>XML</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>kReservedTestSuitesAttributes[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;disabled&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;errors&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;random_seed&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;timestamp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>list<sp/>of<sp/>reserved<sp/>attributes<sp/>used<sp/>in<sp/>the<sp/>&lt;testsuite&gt;<sp/>element<sp/>of<sp/>XML</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>kReservedTestSuiteAttributes[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;disabled&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;errors&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>list<sp/>of<sp/>reserved<sp/>attributes<sp/>used<sp/>in<sp/>the<sp/>&lt;testcase&gt;<sp/>element<sp/>of<sp/>XML<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>kReservedTestCaseAttributes[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;status&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;type_param&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;value_param&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kSize&gt;</highlight></codeline>
<codeline lineno="3269"><highlight class="normal">std::vector&lt;std::string&gt;<sp/>ArrayAsVector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>(&amp;array)[kSize])<sp/>{</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;(array,<sp/>array<sp/>+<sp/>kSize);</highlight></codeline>
<codeline lineno="3271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>GetReservedAttributesForElement(</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>xml_element)<sp/>{</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xml_element<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;testsuites&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ArrayAsVector(kReservedTestSuitesAttributes);</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xml_element<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;testsuite&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ArrayAsVector(kReservedTestSuiteAttributes);</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xml_element<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ArrayAsVector(kReservedTestCaseAttributes);</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unrecognized<sp/>xml_element<sp/>provided:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xml_element;</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>is<sp/>unreachable<sp/>but<sp/>some<sp/>compilers<sp/>may<sp/>not<sp/>realizes<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="3286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>FormatWordList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>words)<sp/>{</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/>Message<sp/>word_list;</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>words.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>words.size()<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word_list<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>words.size()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word_list<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;and<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/>word_list<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>words[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word_list.GetString();</highlight></codeline>
<codeline lineno="3300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ValidateTestPropertyName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>property_name,</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>reserved_names)<sp/>{</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(reserved_names.begin(),<sp/>reserved_names.end(),<sp/>property_name)<sp/>!=</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reserved_names.end())<sp/>{</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reserved<sp/>key<sp/>used<sp/>in<sp/>RecordProperty():<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>property_name</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FormatWordList(reserved_names)</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>are<sp/>reserved<sp/>by<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GTEST_NAME_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"></highlight></codeline>
<codeline lineno="3314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>failure<sp/>if<sp/>the<sp/>key<sp/>is<sp/>a<sp/>reserved<sp/>attribute<sp/>of<sp/>the<sp/>element<sp/>named</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>xml_element.<sp/><sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>property<sp/>is<sp/>valid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestResult::ValidateTestProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>xml_element,</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestProperty&amp;<sp/>test_property)<sp/>{</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ValidateTestPropertyName(test_property.key(),</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetReservedAttributesForElement(xml_element));</highlight></codeline>
<codeline lineno="3320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestResult::Clear()<sp/>{</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/>test_part_results_.clear();</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/>test_properties_.clear();</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/>death_test_count_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/>elapsed_time_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3331"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestResult::Failed()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>total_part_count();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetTestPartResult(i).failed())</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>part<sp/>fatally<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3340"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestPartFatallyFailed(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.fatally_failed();</highlight></codeline>
<codeline lineno="3342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"></highlight></codeline>
<codeline lineno="3344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>fatally<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestResult::HasFatalFailure()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CountIf(test_part_results_,<sp/>TestPartFatallyFailed)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="3347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"></highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>part<sp/>non-fatally<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestPartNonfatallyFailed(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.nonfatally_failed();</highlight></codeline>
<codeline lineno="3352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"></highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>has<sp/>a<sp/>non-fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestResult::HasNonfatalFailure()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CountIf(test_part_results_,<sp/>TestPartNonfatallyFailed)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>parts.<sp/><sp/>This<sp/>is<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>successful<sp/>test<sp/>parts<sp/>and<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>test<sp/>parts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3361"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestResult::total_part_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test_part_results_.size());</highlight></codeline>
<codeline lineno="3363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>the<sp/>test<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestResult::test_property_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test_properties_.size());</highlight></codeline>
<codeline lineno="3368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3373"><highlight class="normal"></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>c&apos;tor<sp/>saves<sp/>the<sp/>values<sp/>of<sp/>all<sp/>Google<sp/>Test<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3375"><highlight class="normal">Test::Test()</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>gtest_flag_saver_(new<sp/>internal::GTestFlagSaver)<sp/>{</highlight></codeline>
<codeline lineno="3377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>d&apos;tor<sp/>restores<sp/>the<sp/>values<sp/>of<sp/>all<sp/>Google<sp/>Test<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal">Test::~Test()<sp/>{</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gtest_flag_saver_;</highlight></codeline>
<codeline lineno="3382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>up<sp/>the<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>sub-class<sp/>may<sp/>override<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Test::SetUp()<sp/>{</highlight></codeline>
<codeline lineno="3388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tears<sp/>down<sp/>the<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>sub-class<sp/>may<sp/>override<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Test::TearDown()<sp/>{</highlight></codeline>
<codeline lineno="3394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allows<sp/>user<sp/>supplied<sp/>key<sp/>value<sp/>pairs<sp/>to<sp/>be<sp/>recorded<sp/>for<sp/>later<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Test::RecordProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/>UnitTest::GetInstance()-&gt;RecordProperty(key,<sp/>value);</highlight></codeline>
<codeline lineno="3399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allows<sp/>user<sp/>supplied<sp/>key<sp/>value<sp/>pairs<sp/>to<sp/>be<sp/>recorded<sp/>for<sp/>later<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Test::RecordProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/>Message<sp/>value_message;</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/>value_message<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/>RecordProperty(key,<sp/>value_message.GetString().c_str());</highlight></codeline>
<codeline lineno="3406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReportFailureInUnknownLocation(TestPartResult::Type<sp/>result_type,</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>a<sp/>friend<sp/>of<sp/>UnitTest<sp/>and<sp/>as<sp/>such<sp/>has<sp/>access<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>AddTestPartResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/>UnitTest::GetInstance()-&gt;AddTestPartResult(</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result_type,</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>info<sp/>about<sp/>the<sp/>source<sp/>file<sp/>where<sp/>the<sp/>exception<sp/>occurred.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>no<sp/>info<sp/>on<sp/>which<sp/>line<sp/>caused<sp/>the<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>stack<sp/>trace,<sp/>either.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"></highlight></codeline>
<codeline lineno="3422"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>requires<sp/>all<sp/>tests<sp/>in<sp/>the<sp/>same<sp/>test<sp/>case<sp/>to<sp/>use<sp/>the<sp/>same<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fixture<sp/>class.<sp/><sp/>This<sp/>function<sp/>checks<sp/>if<sp/>the<sp/>current<sp/>test<sp/>has<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>same<sp/>fixture<sp/>class<sp/>as<sp/>the<sp/>first<sp/>test<sp/>in<sp/>the<sp/>current<sp/>test<sp/>case.<sp/><sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>yes,<sp/>it<sp/>returns<sp/>true;<sp/>otherwise<sp/>it<sp/>generates<sp/>a<sp/>Google<sp/>Test<sp/>failure<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Test::HasSameFixtureClass()<sp/>{</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/>internal::UnitTestImpl*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/>internal::GetUnitTestImpl();</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_case<sp/>=<sp/>impl-&gt;current_test_case();</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Info<sp/>about<sp/>the<sp/>first<sp/>test<sp/>in<sp/>the<sp/>current<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>first_test_info<sp/>=<sp/>test_case-&gt;test_info_list()[0];</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::TypeId<sp/>first_fixture_id<sp/>=<sp/>first_test_info-&gt;fixture_class_id_;</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>first_test_name<sp/>=<sp/>first_test_info-&gt;name();</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Info<sp/>about<sp/>the<sp/>current<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>this_test_info<sp/>=<sp/>impl-&gt;current_test_info();</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::TypeId<sp/>this_fixture_id<sp/>=<sp/>this_test_info-&gt;fixture_class_id_;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>this_test_name<sp/>=<sp/>this_test_info-&gt;name();</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this_fixture_id<sp/>!=<sp/>first_fixture_id)<sp/>{</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>first<sp/>test<sp/>defined<sp/>using<sp/>TEST?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_is_TEST<sp/>=<sp/>first_fixture_id<sp/>==<sp/>internal::GetTestTypeId();</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>test<sp/>defined<sp/>using<sp/>TEST?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>this_is_TEST<sp/>=<sp/>this_fixture_id<sp/>==<sp/>internal::GetTestTypeId();</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_is_TEST<sp/>||<sp/>this_is_TEST)<sp/>{</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>user<sp/>mixed<sp/>TEST<sp/>and<sp/>TEST_F<sp/>in<sp/>this<sp/>test<sp/>case<sp/>-<sp/>we&apos;ll<sp/>tell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>him/her<sp/>how<sp/>to<sp/>fix<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3452"><highlight class="normal"></highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>name<sp/>of<sp/>the<sp/>TEST<sp/>and<sp/>the<sp/>name<sp/>of<sp/>the<sp/>TEST_F.<sp/><sp/>Note</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>first_is_TEST<sp/>and<sp/>this_is_TEST<sp/>cannot<sp/>both<sp/>be<sp/>true,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>fixture<sp/>IDs<sp/>are<sp/>different<sp/>for<sp/>the<sp/>two<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TEST_name<sp/>=</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_is_TEST<sp/>?<sp/>first_test_name<sp/>:<sp/>this_test_name;</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TEST_F_name<sp/>=</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_is_TEST<sp/>?<sp/>this_test_name<sp/>:<sp/>first_test_name;</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"></highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ADD_FAILURE()</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>tests<sp/>in<sp/>the<sp/>same<sp/>test<sp/>case<sp/>must<sp/>use<sp/>the<sp/>same<sp/>test<sp/>fixture\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;class,<sp/>so<sp/>mixing<sp/>TEST_F<sp/>and<sp/>TEST<sp/>in<sp/>the<sp/>same<sp/>test<sp/>case<sp/>is\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;illegal.<sp/><sp/>In<sp/>test<sp/>case<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this_test_info-&gt;test_case_name()</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TEST_F_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>defined<sp/>using<sp/>TEST_F<sp/>but\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TEST_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>defined<sp/>using<sp/>TEST.<sp/><sp/>You<sp/>probably\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;want<sp/>to<sp/>change<sp/>the<sp/>TEST<sp/>to<sp/>TEST_F<sp/>or<sp/>move<sp/>it<sp/>to<sp/>another<sp/>test\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;case.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>user<sp/>defined<sp/>two<sp/>fixture<sp/>classes<sp/>with<sp/>the<sp/>same<sp/>name<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>two<sp/>namespaces<sp/>-<sp/>we&apos;ll<sp/>tell<sp/>him/her<sp/>how<sp/>to<sp/>fix<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ADD_FAILURE()</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>tests<sp/>in<sp/>the<sp/>same<sp/>test<sp/>case<sp/>must<sp/>use<sp/>the<sp/>same<sp/>test<sp/>fixture\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;class.<sp/><sp/>However,<sp/>in<sp/>test<sp/>case<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>this_test_info-&gt;test_case_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;you<sp/>defined<sp/>test<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>first_test_name</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>test<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this_test_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;using<sp/>two<sp/>different<sp/>test<sp/>fixture<sp/>classes.<sp/><sp/>This<sp/>can<sp/>happen<sp/>if\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>two<sp/>classes<sp/>are<sp/>from<sp/>different<sp/>namespaces<sp/>or<sp/>translation\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;units<sp/>and<sp/>have<sp/>the<sp/>same<sp/>name.<sp/><sp/>You<sp/>should<sp/>probably<sp/>rename<sp/>one\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;of<sp/>the<sp/>classes<sp/>to<sp/>put<sp/>the<sp/>tests<sp/>into<sp/>different<sp/>test<sp/>cases.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"></highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"></highlight></codeline>
<codeline lineno="3490"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3491"><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>an<sp/>&quot;exception<sp/>thrown&quot;<sp/>fatal<sp/>failure<sp/>to<sp/>the<sp/>current<sp/>test.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>returns<sp/>its<sp/>result<sp/>via<sp/>an<sp/>output<sp/>parameter<sp/>pointer<sp/>because<sp/>VC++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prohibits<sp/>creation<sp/>of<sp/>objects<sp/>with<sp/>destructors<sp/>on<sp/>stack<sp/>in<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>__try<sp/>(see<sp/>error<sp/>C2712).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string*<sp/>FormatSehExceptionMessage(DWORD<sp/>exception_code,</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>location)<sp/>{</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/>Message<sp/>message;</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SEH<sp/>exception<sp/>with<sp/>code<sp/>0x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setbase(16)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/>exception_code<sp/>&lt;&lt;<sp/>std::setbase(10)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>thrown<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>location<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::string(message.GetString());</highlight></codeline>
<codeline lineno="3503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"></highlight></codeline>
<codeline lineno="3505"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3506"><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3510"><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>an<sp/>&quot;exception<sp/>thrown&quot;<sp/>fatal<sp/>failure<sp/>to<sp/>the<sp/>current<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>FormatCxxExceptionMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description,</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>location)<sp/>{</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/>Message<sp/>message;</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(description<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;C++<sp/>exception<sp/>with<sp/>description<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>description<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>C++<sp/>exception&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>thrown<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>location<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message.GetString();</highlight></codeline>
<codeline lineno="3523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>PrintTestPartResultToString(</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>test_part_result);</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal">GoogleTestFailureException::GoogleTestFailureException(</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>failure)</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>::std::runtime_error(PrintTestPartResultToString(failure).c_str())<sp/>{}</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"></highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>put<sp/>these<sp/>helper<sp/>functions<sp/>in<sp/>the<sp/>internal<sp/>namespace<sp/>as<sp/>IBM&apos;s<sp/>xlC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiler<sp/>rejects<sp/>the<sp/>code<sp/>if<sp/>they<sp/>were<sp/>declared<sp/>static.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal"></highlight></codeline>
<codeline lineno="3537"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>given<sp/>method<sp/>and<sp/>handles<sp/>SEH<sp/>exceptions<sp/>it<sp/>throws,<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3538"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SEH<sp/>is<sp/>supported;<sp/>returns<sp/>the<sp/>0-value<sp/>for<sp/>type<sp/>Result<sp/>in<sp/>case<sp/>of<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SEH<sp/>exception.<sp/><sp/>(Microsoft<sp/>compilers<sp/>cannot<sp/>handle<sp/>SEH<sp/>and<sp/>C++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exceptions<sp/>in<sp/>the<sp/>same<sp/>function.<sp/><sp/>Therefore,<sp/>we<sp/>provide<sp/>a<sp/>separate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wrapper<sp/>function<sp/>for<sp/>handling<sp/>SEH<sp/>exceptions.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result&gt;</highlight></codeline>
<codeline lineno="3543"><highlight class="normal">Result<sp/>HandleSehExceptionsInMethodIfSupported(</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>Result<sp/>(T::*method)(),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>location)<sp/>{</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/>__try<sp/>{</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(object-&gt;*method)();</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/>}<sp/>__except<sp/>(internal::UnitTestOptions::GTestShouldProcessSEH(<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetExceptionCode()))<sp/>{</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>create<sp/>the<sp/>exception<sp/>message<sp/>on<sp/>the<sp/>heap<sp/>because<sp/>VC++<sp/>prohibits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>creation<sp/>of<sp/>objects<sp/>with<sp/>destructors<sp/>on<sp/>stack<sp/>in<sp/>functions<sp/>using<sp/>__try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(see<sp/>error<sp/>C2712).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string*<sp/>exception_message<sp/>=<sp/>FormatSehExceptionMessage(</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetExceptionCode(),<sp/>location);</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*exception_message);</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>exception_message;</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Result</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/>(void)location;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(object-&gt;*method)();</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"></highlight></codeline>
<codeline lineno="3566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>given<sp/>method<sp/>and<sp/>catches<sp/>and<sp/>reports<sp/>C++<sp/>and/or<sp/>SEH-style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exceptions,<sp/>if<sp/>they<sp/>are<sp/>supported;<sp/>returns<sp/>the<sp/>0-value<sp/>for<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Result<sp/>in<sp/>case<sp/>of<sp/>an<sp/>SEH<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result&gt;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal">Result<sp/>HandleExceptionsInMethodIfSupported(</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>Result<sp/>(T::*method)(),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>location)<sp/>{</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>The<sp/>user<sp/>code<sp/>can<sp/>affect<sp/>the<sp/>way<sp/>in<sp/>which<sp/>Google<sp/>Test<sp/>handles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exceptions<sp/>by<sp/>setting<sp/>GTEST_FLAG(catch_exceptions),<sp/>but<sp/>only<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>RUN_ALL_TESTS()<sp/>starts.<sp/>It<sp/>is<sp/>technically<sp/>possible<sp/>to<sp/>check<sp/>the<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>the<sp/>exception<sp/>is<sp/>caught<sp/>and<sp/>either<sp/>report<sp/>or<sp/>re-throw<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>based<sp/>on<sp/>the<sp/>flag&apos;s<sp/>value:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Perform<sp/>the<sp/>test<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}<sp/>catch<sp/>(...)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(GTEST_FLAG(catch_exceptions))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Report<sp/>the<sp/>exception<sp/>as<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>throw;<sp/><sp/>//<sp/>Re-throws<sp/>the<sp/>original<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>the<sp/>purpose<sp/>of<sp/>this<sp/>flag<sp/>is<sp/>to<sp/>allow<sp/>the<sp/>program<sp/>to<sp/>drop<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>debugger<sp/>when<sp/>the<sp/>exception<sp/>is<sp/>thrown.<sp/>On<sp/>most<sp/>platforms,<sp/>once<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>control<sp/>enters<sp/>the<sp/>catch<sp/>block,<sp/>the<sp/>exception<sp/>origin<sp/>information<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lost<sp/>and<sp/>the<sp/>debugger<sp/>will<sp/>stop<sp/>the<sp/>program<sp/>at<sp/>the<sp/>point<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>re-throw<sp/>in<sp/>this<sp/>function<sp/>--<sp/>instead<sp/>of<sp/>at<sp/>the<sp/>point<sp/>of<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>throw<sp/>statement<sp/>in<sp/>the<sp/>code<sp/>under<sp/>test.<sp/><sp/>For<sp/>this<sp/>reason,<sp/>we<sp/>perform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>check<sp/>early,<sp/>sacrificing<sp/>the<sp/>ability<sp/>to<sp/>affect<sp/>Google<sp/>Test&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>handling<sp/>in<sp/>the<sp/>method<sp/>where<sp/>the<sp/>exception<sp/>is<sp/>thrown.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internal::GetUnitTestImpl()-&gt;catch_exceptions())<sp/>{</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HandleSehExceptionsInMethodIfSupported(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>method,<sp/>location);</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::GoogleTestFailureException&amp;)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>exception<sp/>type<sp/>can<sp/>only<sp/>be<sp/>thrown<sp/>by<sp/>a<sp/>failed<sp/>Google</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>assertion<sp/>with<sp/>the<sp/>intention<sp/>of<sp/>letting<sp/>another<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>framework<sp/>catch<sp/>it.<sp/><sp/>Therefore<sp/>we<sp/>just<sp/>re-throw<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>e)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::ReportFailureInUnknownLocation(</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestPartResult::kFatalFailure,</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatCxxExceptionMessage(e.what(),<sp/>location));</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::ReportFailureInUnknownLocation(</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestPartResult::kFatalFailure,</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatCxxExceptionMessage(NULL,<sp/>location));</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Result</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HandleSehExceptionsInMethodIfSupported(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>method,<sp/>location);</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(object-&gt;*method)();</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"></highlight></codeline>
<codeline lineno="3622"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3623"><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>test<sp/>and<sp/>updates<sp/>the<sp/>test<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3625"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Test::Run()<sp/>{</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasSameFixtureClass())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/>internal::UnitTestImpl*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/>internal::GetUnitTestImpl();</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/>impl-&gt;os_stack_trace_getter()-&gt;UponLeavingGTest();</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/>internal::HandleExceptionsInMethodIfSupported(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;Test::SetUp,<sp/></highlight><highlight class="stringliteral">&quot;SetUp()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>run<sp/>the<sp/>test<sp/>only<sp/>if<sp/>SetUp()<sp/>was<sp/>successful.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasFatalFailure())<sp/>{</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/>impl-&gt;os_stack_trace_getter()-&gt;UponLeavingGTest();</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::HandleExceptionsInMethodIfSupported(</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;Test::TestBody,<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>test<sp/>body&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>we<sp/>want<sp/>to<sp/>clean<sp/>up<sp/>as<sp/>much<sp/>as<sp/>possible.<sp/><sp/>Hence<sp/>we<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>call<sp/>TearDown(),<sp/>even<sp/>if<sp/>SetUp()<sp/>or<sp/>the<sp/>test<sp/>body<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/>impl-&gt;os_stack_trace_getter()-&gt;UponLeavingGTest();</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/>internal::HandleExceptionsInMethodIfSupported(</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;Test::TearDown,<sp/></highlight><highlight class="stringliteral">&quot;TearDown()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"></highlight></codeline>
<codeline lineno="3646"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>current<sp/>test<sp/>has<sp/>a<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3647"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Test::HasFatalFailure()<sp/>{</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::GetUnitTestImpl()-&gt;current_test_result()-&gt;HasFatalFailure();</highlight></codeline>
<codeline lineno="3649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>current<sp/>test<sp/>has<sp/>a<sp/>non-fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3652"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Test::HasNonfatalFailure()<sp/>{</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::GetUnitTestImpl()-&gt;current_test_result()-&gt;</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HasNonfatalFailure();</highlight></codeline>
<codeline lineno="3655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"></highlight></codeline>
<codeline lineno="3657"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>TestInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3658"><highlight class="normal"></highlight></codeline>
<codeline lineno="3659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>TestInfo<sp/>object.<sp/>It<sp/>assumes<sp/>ownership<sp/>of<sp/>the<sp/>test<sp/>factory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal">TestInfo::TestInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>a_test_case_name,</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>a_name,</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_type_param,</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_value_param,</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::TypeId<sp/>fixture_class_id,</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::TestFactoryBase*<sp/>factory)</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>test_case_name_(a_test_case_name),</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name_(a_name),</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_param_(a_type_param<sp/>?<sp/>new<sp/>std::string(a_type_param)<sp/>:<sp/>NULL),</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_param_(a_value_param<sp/>?<sp/>new<sp/>std::string(a_value_param)<sp/>:<sp/>NULL),</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fixture_class_id_(fixture_class_id),</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>should_run_(false),</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_disabled_(false),</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matches_filter_(false),</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>factory_(factory),</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result_()<sp/>{}</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Destructs<sp/>a<sp/>TestInfo<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal">TestInfo::~TestInfo()<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>factory_;<sp/>}</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>new<sp/>TestInfo<sp/>object<sp/>and<sp/>registers<sp/>it<sp/>with<sp/>Google<sp/>Test;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>created<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3686"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>test_case_name:<sp/><sp/><sp/>name<sp/>of<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>of<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3690"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>type_param:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>the<sp/>test&apos;s<sp/>type<sp/>parameter,<sp/>or<sp/>NULL<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3691"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>not<sp/>a<sp/>typed<sp/>or<sp/>a<sp/>type-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>value_param:<sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>representation<sp/>of<sp/>the<sp/>test&apos;s<sp/>value<sp/>parameter,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>NULL<sp/>if<sp/>this<sp/>is<sp/>not<sp/>a<sp/>value-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>fixture_class_id:<sp/>ID<sp/>of<sp/>the<sp/>test<sp/>fixture<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>set_up_tc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>sets<sp/>up<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>tear_down_tc:<sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>tears<sp/>down<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3697"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>factory:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>factory<sp/>that<sp/>creates<sp/>a<sp/>test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>newly<sp/>created<sp/>TestInfo<sp/>instance<sp/>will<sp/>assume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ownership<sp/>of<sp/>the<sp/>factory<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3700"><highlight class="normal">TestInfo*<sp/>MakeAndRegisterTestInfo(</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type_param,</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value_param,</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/>TypeId<sp/>fixture_class_id,</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/>SetUpTestCaseFunc<sp/>set_up_tc,</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/>TearDownTestCaseFunc<sp/>tear_down_tc,</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/>TestFactoryBase*<sp/>factory)<sp/>{</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/>TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TestInfo(test_case_name,<sp/>name,<sp/>type_param,<sp/>value_param,</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixture_class_id,<sp/>factory);</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/>GetUnitTestImpl()-&gt;AddTestInfo(set_up_tc,<sp/>tear_down_tc,<sp/>test_info);</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_info;</highlight></codeline>
<codeline lineno="3714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReportInvalidTestCaseType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)<sp/>{</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/>Message<sp/>errors;</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/>errors</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>redefinition<sp/>of<sp/>test<sp/>case<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>test_case_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>tests<sp/>in<sp/>the<sp/>same<sp/>test<sp/>case<sp/>must<sp/>use<sp/>the<sp/>same<sp/>test<sp/>fixture\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;class.<sp/><sp/>However,<sp/>in<sp/>test<sp/>case<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>test_case_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>you<sp/>tried\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;to<sp/>define<sp/>a<sp/>test<sp/>using<sp/>a<sp/>fixture<sp/>class<sp/>different<sp/>from<sp/>the<sp/>one\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;used<sp/>earlier.<sp/>This<sp/>can<sp/>happen<sp/>if<sp/>the<sp/>two<sp/>fixture<sp/>classes<sp/>are\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;from<sp/>different<sp/>namespaces<sp/>and<sp/>have<sp/>the<sp/>same<sp/>name.<sp/>You<sp/>should\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;probably<sp/>rename<sp/>one<sp/>of<sp/>the<sp/>classes<sp/>to<sp/>put<sp/>the<sp/>tests<sp/>into<sp/>different\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>cases.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>FormatFileLocation(file,<sp/>line).c_str(),</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errors.GetString().c_str());</highlight></codeline>
<codeline lineno="3732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3734"><highlight class="normal"></highlight></codeline>
<codeline lineno="3735"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"></highlight></codeline>
<codeline lineno="3737"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"></highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>predicate<sp/>that<sp/>checks<sp/>the<sp/>test<sp/>name<sp/>of<sp/>a<sp/>TestInfo<sp/>against<sp/>a<sp/>known</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>for<sp/>implementation<sp/>of<sp/>the<sp/>TestCase<sp/>class<sp/>only.<sp/><sp/>We<sp/>put</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>in<sp/>the<sp/>anonymous<sp/>namespace<sp/>to<sp/>prevent<sp/>polluting<sp/>the<sp/>outer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3745"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3746"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestNameIs<sp/>is<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3747"><highlight class="normal"></highlight></codeline>
<codeline lineno="3748"><highlight class="normal"></highlight><highlight class="comment">//Commenting<sp/>out<sp/>this<sp/>class<sp/>since<sp/>its<sp/>not<sp/>used<sp/>and<sp/>wherefor<sp/>produces<sp/>warnings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3749"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>TestNameIs<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"></highlight><highlight class="comment">//<sp/>public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3751"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3752"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>TestNameIs<sp/>has<sp/>NO<sp/>default<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3754"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>explicit<sp/>TestNameIs(const<sp/>char*<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>name_(name)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3757"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>name<sp/>of<sp/>test_info<sp/>matches<sp/>name_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>bool<sp/>operator()(const<sp/>TestInfo<sp/>*<sp/>test_info)<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>test_info<sp/>&amp;&amp;<sp/>test_info-&gt;name()<sp/>==<sp/>name_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>private:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::string<sp/>name_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"></highlight><highlight class="comment">//};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3765"><highlight class="normal"></highlight></codeline>
<codeline lineno="3766"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3767"><highlight class="normal"></highlight></codeline>
<codeline lineno="3768"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>expands<sp/>all<sp/>parameterized<sp/>tests<sp/>registered<sp/>with<sp/>macros<sp/>TEST_P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>INSTANTIATE_TEST_CASE_P<sp/>into<sp/>regular<sp/>tests<sp/>and<sp/>registers<sp/>those.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3772"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>done<sp/>just<sp/>once<sp/>during<sp/>the<sp/>program<sp/>runtime.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::RegisterParameterizedTests()<sp/>{</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parameterized_tests_registered_)<sp/>{</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/>parameterized_test_registry_.RegisterTests();</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/>parameterized_tests_registered_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight></codeline>
<codeline lineno="3784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>the<sp/>test<sp/>object,<sp/>runs<sp/>it,<sp/>records<sp/>its<sp/>result,<sp/>and<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3785"><highlight class="normal"></highlight><highlight class="comment">//<sp/>deletes<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3786"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestInfo::Run()<sp/>{</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!should_run_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"></highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>UnitTest<sp/>where<sp/>to<sp/>store<sp/>test<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/>internal::UnitTestImpl*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/>internal::GetUnitTestImpl();</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/>impl-&gt;set_current_test_info(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"></highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/>TestEventListener*<sp/>repeater<sp/>=<sp/>UnitTest::GetInstance()-&gt;listeners().repeater();</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notifies<sp/>the<sp/>unit<sp/>test<sp/>event<sp/>listeners<sp/>that<sp/>a<sp/>test<sp/>is<sp/>about<sp/>to<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/>repeater-&gt;OnTestStart(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeInMillis<sp/>start<sp/>=<sp/>internal::GetTimeInMillis();</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/>impl-&gt;os_stack_trace_getter()-&gt;UponLeavingGTest();</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>the<sp/>test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><ref refid="namespace_test" kindref="compound">Test</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test<sp/>=<sp/>internal::HandleExceptionsInMethodIfSupported(</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>factory_,<sp/>&amp;internal::TestFactoryBase::CreateTest,</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>test<sp/>fixture&apos;s<sp/>constructor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>test<sp/>only<sp/>if<sp/>the<sp/>test<sp/>object<sp/>was<sp/>created<sp/>and<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>constructor<sp/>didn&apos;t<sp/>generate<sp/>a<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((test<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>!Test::HasFatalFailure())<sp/>{</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>doesn&apos;t<sp/>throw<sp/>as<sp/>all<sp/>user<sp/>code<sp/>that<sp/>can<sp/>throw<sp/>are<sp/>wrapped<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>handling<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/>test-&gt;Run();</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deletes<sp/>the<sp/>test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/>impl-&gt;os_stack_trace_getter()-&gt;UponLeavingGTest();</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/>internal::HandleExceptionsInMethodIfSupported(</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test,<sp/>&amp;Test::DeleteSelf_,<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>test<sp/>fixture&apos;s<sp/>destructor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"></highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/>result_.set_elapsed_time(internal::GetTimeInMillis()<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notifies<sp/>the<sp/>unit<sp/>test<sp/>event<sp/>listener<sp/>that<sp/>a<sp/>test<sp/>has<sp/>just<sp/>finished.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/>repeater-&gt;OnTestEnd(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>UnitTest<sp/>to<sp/>stop<sp/>associating<sp/>assertion<sp/>results<sp/>to<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/>impl-&gt;set_current_test_info(NULL);</highlight></codeline>
<codeline lineno="3828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>TestCase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3833"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestCase::successful_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CountIf(test_info_list_,<sp/>TestPassed);</highlight></codeline>
<codeline lineno="3835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"></highlight></codeline>
<codeline lineno="3837"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestCase::failed_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CountIf(test_info_list_,<sp/>TestFailed);</highlight></codeline>
<codeline lineno="3840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>that<sp/>will<sp/>be<sp/>reported<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3843"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestCase::reportable_disabled_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CountIf(test_info_list_,<sp/>TestReportableDisabled);</highlight></codeline>
<codeline lineno="3845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3848"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestCase::disabled_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CountIf(test_info_list_,<sp/>TestDisabled);</highlight></codeline>
<codeline lineno="3850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"></highlight></codeline>
<codeline lineno="3852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>to<sp/>be<sp/>printed<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestCase::reportable_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CountIf(test_info_list_,<sp/>TestReportable);</highlight></codeline>
<codeline lineno="3855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"></highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestCase::test_to_run_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CountIf(test_info_list_,<sp/>ShouldRunTest);</highlight></codeline>
<codeline lineno="3860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestCase::total_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test_info_list_.size());</highlight></codeline>
<codeline lineno="3865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>TestCase<sp/>with<sp/>the<sp/>given<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>of<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>a_type_param:<sp/>the<sp/>name<sp/>of<sp/>the<sp/>test<sp/>case&apos;s<sp/>type<sp/>parameter,<sp/>or<sp/>NULL<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3873"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>not<sp/>a<sp/>typed<sp/>or<sp/>a<sp/>type-parameterized<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3874"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>set_up_tc:<sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>sets<sp/>up<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3875"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>tear_down_tc:<sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>tears<sp/>down<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3876"><highlight class="normal">TestCase::TestCase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_type_param,</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test::SetUpTestCaseFunc<sp/>set_up_tc,</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test::TearDownTestCaseFunc<sp/>tear_down_tc)</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>name_(a_name),</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_param_(a_type_param<sp/>?<sp/>new<sp/>std::string(a_type_param)<sp/>:<sp/>NULL),</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_up_tc_(set_up_tc),</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tear_down_tc_(tear_down_tc),</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>should_run_(false),</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elapsed_time_(0)<sp/>{</highlight></codeline>
<codeline lineno="3885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"></highlight></codeline>
<codeline lineno="3887"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Destructor<sp/>of<sp/>TestCase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3888"><highlight class="normal">TestCase::~TestCase()<sp/>{</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deletes<sp/>every<sp/>Test<sp/>in<sp/>the<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/>ForEach(test_info_list_,<sp/>internal::Delete&lt;TestInfo&gt;);</highlight></codeline>
<codeline lineno="3891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"></highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>i-th<sp/>test<sp/>among<sp/>all<sp/>the<sp/>tests.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>total_test_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3895"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo*<sp/>TestCase::GetTestInfo(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>GetElementOr(test_indices_,<sp/>i,<sp/>-1);</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>&lt;<sp/>0<sp/>?<sp/>NULL<sp/>:<sp/>test_info_list_[index];</highlight></codeline>
<codeline lineno="3898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"></highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>i-th<sp/>test<sp/>among<sp/>all<sp/>the<sp/>tests.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>total_test_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3902"><highlight class="normal">TestInfo*<sp/>TestCase::GetMutableTestInfo(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>GetElementOr(test_indices_,<sp/>i,<sp/>-1);</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>&lt;<sp/>0<sp/>?<sp/>NULL<sp/>:<sp/>test_info_list_[index];</highlight></codeline>
<codeline lineno="3905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"></highlight></codeline>
<codeline lineno="3907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>test<sp/>to<sp/>this<sp/>test<sp/>case.<sp/><sp/>Will<sp/>delete<sp/>the<sp/>test<sp/>upon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight><highlight class="comment">//<sp/>destruction<sp/>of<sp/>the<sp/>TestCase<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestCase::AddTestInfo(TestInfo<sp/>*<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/>test_info_list_.push_back(test_info);</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/>test_indices_.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test_indices_.size()));</highlight></codeline>
<codeline lineno="3912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"></highlight></codeline>
<codeline lineno="3914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>every<sp/>test<sp/>in<sp/>this<sp/>TestCase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestCase::Run()<sp/>{</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!should_run_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"></highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/>internal::UnitTestImpl*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/>internal::GetUnitTestImpl();</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/>impl-&gt;set_current_test_case(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"></highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/>TestEventListener*<sp/>repeater<sp/>=<sp/>UnitTest::GetInstance()-&gt;listeners().repeater();</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"></highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/>repeater-&gt;OnTestCaseStart(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/>impl-&gt;os_stack_trace_getter()-&gt;UponLeavingGTest();</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/>internal::HandleExceptionsInMethodIfSupported(</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;TestCase::RunSetUpTestCase,<sp/></highlight><highlight class="stringliteral">&quot;SetUpTestCase()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::TimeInMillis<sp/>start<sp/>=<sp/>internal::GetTimeInMillis();</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>total_test_count();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/>GetMutableTestInfo(i)-&gt;Run();</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/>elapsed_time_<sp/>=<sp/>internal::GetTimeInMillis()<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/>impl-&gt;os_stack_trace_getter()-&gt;UponLeavingGTest();</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/>internal::HandleExceptionsInMethodIfSupported(</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;TestCase::RunTearDownTestCase,<sp/></highlight><highlight class="stringliteral">&quot;TearDownTestCase()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/>repeater-&gt;OnTestCaseEnd(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/>impl-&gt;set_current_test_case(NULL);</highlight></codeline>
<codeline lineno="3940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight></codeline>
<codeline lineno="3942"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>results<sp/>of<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3943"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestCase::ClearResult()<sp/>{</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/>ad_hoc_test_result_.Clear();</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/>ForEach(test_info_list_,<sp/>TestInfo::ClearTestResult);</highlight></codeline>
<codeline lineno="3946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"></highlight></codeline>
<codeline lineno="3948"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shuffles<sp/>the<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3949"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestCase::ShuffleTests(internal::Random*<sp/>random)<sp/>{</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/>Shuffle(random,<sp/>&amp;test_indices_);</highlight></codeline>
<codeline lineno="3951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"></highlight></codeline>
<codeline lineno="3953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>test<sp/>order<sp/>to<sp/>before<sp/>the<sp/>first<sp/>shuffle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3954"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestCase::UnshuffleTests()<sp/>{</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_indices_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/>test_indices_[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"></highlight></codeline>
<codeline lineno="3960"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>countable<sp/>noun.<sp/><sp/>Depending<sp/>on<sp/>its<sp/>quantity,<sp/>either<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"></highlight><highlight class="comment">//<sp/>singular<sp/>form<sp/>or<sp/>the<sp/>plural<sp/>form<sp/>is<sp/>used.<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3962"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FormatCountableNoun(1,<sp/>&quot;formula&quot;,<sp/>&quot;formuli&quot;)<sp/>returns<sp/>&quot;1<sp/>formula&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FormatCountableNoun(5,<sp/>&quot;book&quot;,<sp/>&quot;books&quot;)<sp/>returns<sp/>&quot;5<sp/>books&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3965"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>FormatCountableNoun(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>singular_form,</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>plural_form)<sp/>{</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::StreamableToString(count)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(count<sp/>==<sp/>1<sp/>?<sp/>singular_form<sp/>:<sp/>plural_form);</highlight></codeline>
<codeline lineno="3970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"></highlight></codeline>
<codeline lineno="3972"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>the<sp/>count<sp/>of<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>FormatTestCount(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_count)<sp/>{</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FormatCountableNoun(test_count,<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"></highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>the<sp/>count<sp/>of<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>FormatTestCaseCount(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_case_count)<sp/>{</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FormatCountableNoun(test_case_count,<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>case&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>cases&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>TestPartResult::Type<sp/>enum<sp/>to<sp/>human-friendly<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>representation.<sp/><sp/>Both<sp/>kNonFatalFailure<sp/>and<sp/>kFatalFailure<sp/>are<sp/>translated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>&quot;Failure&quot;,<sp/>as<sp/>the<sp/>user<sp/>usually<sp/>doesn&apos;t<sp/>care<sp/>about<sp/>the<sp/>difference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>between<sp/>the<sp/>two<sp/>when<sp/>viewing<sp/>the<sp/>test<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>TestPartResultTypeToString(TestPartResult::Type<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestPartResult::kSuccess:</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Success&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"></highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestPartResult::kNonFatalFailure:</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestPartResult::kFatalFailure:</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;error:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Failure\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>result<sp/>type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"></highlight></codeline>
<codeline lineno="4003"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>TestPartResult<sp/>to<sp/>an<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4006"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>PrintTestPartResultToString(</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>test_part_result)<sp/>{</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Message()</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>internal::FormatFileLocation(test_part_result.file_name(),</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.line_number())</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TestPartResultTypeToString(test_part_result.type())</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>test_part_result.message()).GetString();</highlight></codeline>
<codeline lineno="4013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight></codeline>
<codeline lineno="4015"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>TestPartResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4016"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTestPartResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>test_part_result)<sp/>{</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>result<sp/>=</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintTestPartResultToString(test_part_result);</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>result.c_str());</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>test<sp/>program<sp/>runs<sp/>in<sp/>Visual<sp/>Studio<sp/>or<sp/>a<sp/>debugger,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>following<sp/>statements<sp/>add<sp/>the<sp/>test<sp/>part<sp/>result<sp/>message<sp/>to<sp/>the<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>window<sp/>such<sp/>that<sp/>the<sp/>user<sp/>can<sp/>double-click<sp/>on<sp/>it<sp/>to<sp/>jump<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>corresponding<sp/>source<sp/>code<sp/>location;<sp/>otherwise<sp/>they<sp/>do<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4025"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>call<sp/>OutputDebugString*()<sp/>on<sp/>Windows<sp/>Mobile,<sp/>as<sp/>printing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>stdout<sp/>is<sp/>done<sp/>by<sp/>OutputDebugString()<sp/>there<sp/>already<sp/>-<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>want<sp/>the<sp/>same<sp/>message<sp/>printed<sp/>twice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/>::OutputDebugStringA(result.c_str());</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/>::OutputDebugStringA(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"></highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>PrettyUnitTestResultPrinter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight></codeline>
<codeline lineno="4036"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>GTestColor<sp/>{</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/>COLOR_DEFAULT,</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/>COLOR_RED,</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/>COLOR_GREEN,</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/>COLOR_YELLOW</highlight></codeline>
<codeline lineno="4041"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>character<sp/>attribute<sp/>for<sp/>the<sp/>given<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4046"><highlight class="normal">WORD<sp/>GetColorAttribute(GTestColor<sp/>color)<sp/>{</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(color)<sp/>{</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>COLOR_RED:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FOREGROUND_RED;</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>COLOR_GREEN:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FOREGROUND_GREEN;</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>COLOR_YELLOW:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FOREGROUND_RED<sp/>|<sp/>FOREGROUND_GREEN;</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"></highlight></codeline>
<codeline lineno="4055"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>ANSI<sp/>color<sp/>code<sp/>for<sp/>the<sp/>given<sp/>color.<sp/><sp/>COLOR_DEFAULT<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4058"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>invalid<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>GetAnsiColorCode(GTestColor<sp/>color)<sp/>{</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(color)<sp/>{</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>COLOR_RED:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>COLOR_GREEN:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>COLOR_YELLOW:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="4066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"></highlight></codeline>
<codeline lineno="4068"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"></highlight></codeline>
<codeline lineno="4070"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>Google<sp/>Test<sp/>should<sp/>use<sp/>colors<sp/>in<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4071"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShouldUseColor(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stdout_is_tty)<sp/>{</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gtest_color<sp/>=<sp/>GTEST_FLAG(color).c_str();</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"></highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(String::CaseInsensitiveCStringEquals(gtest_color,<sp/></highlight><highlight class="stringliteral">&quot;auto&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>Windows<sp/>the<sp/>TERM<sp/>variable<sp/>is<sp/>usually<sp/>not<sp/>set,<sp/>but<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>console<sp/>there<sp/>does<sp/>support<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stdout_is_tty;</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>non-Windows<sp/>platforms,<sp/>we<sp/>rely<sp/>on<sp/>the<sp/>TERM<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>term<sp/>=<sp/>posix::GetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>term_supports_color<sp/>=</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::CStringEquals(term,<sp/></highlight><highlight class="stringliteral">&quot;xterm&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::CStringEquals(term,<sp/></highlight><highlight class="stringliteral">&quot;xterm-color&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::CStringEquals(term,<sp/></highlight><highlight class="stringliteral">&quot;xterm-256color&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::CStringEquals(term,<sp/></highlight><highlight class="stringliteral">&quot;screen&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::CStringEquals(term,<sp/></highlight><highlight class="stringliteral">&quot;screen-256color&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::CStringEquals(term,<sp/></highlight><highlight class="stringliteral">&quot;linux&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::CStringEquals(term,<sp/></highlight><highlight class="stringliteral">&quot;cygwin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stdout_is_tty<sp/>&amp;&amp;<sp/>term_supports_color;</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"></highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::CaseInsensitiveCStringEquals(gtest_color,<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String::CaseInsensitiveCStringEquals(gtest_color,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String::CaseInsensitiveCStringEquals(gtest_color,<sp/></highlight><highlight class="stringliteral">&quot;t&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String::CStringEquals(gtest_color,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>take<sp/>&quot;yes&quot;,<sp/>&quot;true&quot;,<sp/>&quot;t&quot;,<sp/>and<sp/>&quot;1&quot;<sp/>as<sp/>meaning<sp/>&quot;yes&quot;.<sp/><sp/>If<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>is<sp/>neither<sp/>one<sp/>of<sp/>these<sp/>nor<sp/>&quot;auto&quot;,<sp/>we<sp/>treat<sp/>it<sp/>as<sp/>&quot;no&quot;<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>conservative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"></highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helpers<sp/>for<sp/>printing<sp/>colored<sp/>strings<sp/>to<sp/>stdout.<sp/>Note<sp/>that<sp/>on<sp/>Windows,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cannot<sp/>simply<sp/>emit<sp/>special<sp/>characters<sp/>and<sp/>have<sp/>the<sp/>terminal<sp/>change<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>routine<sp/>must<sp/>actually<sp/>emit<sp/>the<sp/>characters<sp/>rather<sp/>than<sp/>return<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>would<sp/>be<sp/>colored<sp/>when<sp/>printed,<sp/>as<sp/>can<sp/>be<sp/>done<sp/>on<sp/>Linux.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ColoredPrintf(GTestColor<sp/>color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/>va_start(args,<sp/>fmt);</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"></highlight></codeline>
<codeline lineno="4111"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS_MOBILE<sp/>||<sp/>GTEST_OS_SYMBIAN<sp/>||<sp/>GTEST_OS_ZOS<sp/>||<sp/>GTEST_OS_IOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_color<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_color_mode<sp/>=</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ShouldUseColor(posix::IsATTY(posix::FileNo(stdout))<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_color<sp/>=<sp/>in_color_mode<sp/>&amp;&amp;<sp/>(color<sp/>!=<sp/>COLOR_DEFAULT);</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE<sp/>||<sp/>GTEST_OS_SYMBIAN<sp/>||<sp/>GTEST_OS_ZOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>&apos;!=<sp/>0&apos;<sp/>comparison<sp/>is<sp/>necessary<sp/>to<sp/>satisfy<sp/>MSVC<sp/>7.1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"></highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!use_color)<sp/>{</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/>vprintf(fmt,<sp/>args);</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"></highlight></codeline>
<codeline lineno="4126"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HANDLE<sp/>stdout_handle<sp/>=<sp/>GetStdHandle(STD_OUTPUT_HANDLE);</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"></highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>current<sp/>text<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/>CONSOLE_SCREEN_BUFFER_INFO<sp/>buffer_info;</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/>GetConsoleScreenBufferInfo(stdout_handle,<sp/>&amp;buffer_info);</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WORD<sp/>old_color_attrs<sp/>=<sp/>buffer_info.wAttributes;</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>flush<sp/>the<sp/>stream<sp/>buffers<sp/>into<sp/>the<sp/>console<sp/>before<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetConsoleTextAttribute<sp/>call<sp/>lest<sp/>it<sp/>affect<sp/>the<sp/>text<sp/>that<sp/>is<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>printed<sp/>but<sp/>has<sp/>not<sp/>yet<sp/>reached<sp/>the<sp/>console.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/>SetConsoleTextAttribute(stdout_handle,</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetColorAttribute(color)<sp/>|<sp/>FOREGROUND_INTENSITY);</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/>vprintf(fmt,<sp/>args);</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>text<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/>SetConsoleTextAttribute(stdout_handle,<sp/>old_color_attrs);</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\033[0;3%sm&quot;</highlight><highlight class="normal">,<sp/>GetAnsiColorCode(color));</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/>vprintf(fmt,<sp/>args);</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\033[m&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Resets<sp/>the<sp/>terminal<sp/>to<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="4151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"></highlight></codeline>
<codeline lineno="4153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Text<sp/>printed<sp/>in<sp/>Google<sp/>Test&apos;s<sp/>text<sp/>output<sp/>and<sp/>--gunit_list_tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output<sp/>to<sp/>label<sp/>the<sp/>type<sp/>parameter<sp/>and<sp/>value<sp/>parameter<sp/>for<sp/>a<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kTypeParamLabel[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TypeParam&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kValueParamLabel[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GetParam()&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"></highlight></codeline>
<codeline lineno="4158"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintFullTestCommentIfPresent(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo&amp;<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type_param<sp/>=<sp/>test_info.type_param();</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_param<sp/>=<sp/>test_info.value_param();</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"></highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_param<sp/>!=<sp/>NULL<sp/>||<sp/>value_param<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>where<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_param<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>=<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>kTypeParamLabel,<sp/>type_param);</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_param<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_param<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>=<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>kValueParamLabel,<sp/>value_param);</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"></highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>implements<sp/>the<sp/>TestEventListener<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>PrettyUnitTestResultPrinter<sp/>is<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4178" refid="classtesting_1_1internal_1_1_pretty_unit_test_result_printer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_pretty_unit_test_result_printer" kindref="compound">PrettyUnitTestResultPrinter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref><sp/>{</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_pretty_unit_test_result_printer" kindref="compound">PrettyUnitTestResultPrinter</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTestName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>test_case,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>test)<sp/>{</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s.%s&quot;</highlight><highlight class="normal">,<sp/>test_case,<sp/>test);</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>methods<sp/>override<sp/>what&apos;s<sp/>in<sp/>the<sp/>TestEventListener<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestProgramStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestIterationStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration);</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnEnvironmentsSetUpStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnEnvironmentsSetUpEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestCaseStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case);</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info);</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestPartResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info);</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestCaseEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case);</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnEnvironmentsTearDownStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnEnvironmentsTearDownEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestIterationEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration);</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestProgramEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"></highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintFailedTests(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="4202"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>before<sp/>each<sp/>iteration<sp/>of<sp/>tests<sp/>starts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4205"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrettyUnitTestResultPrinter::OnTestIterationStart(</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration)<sp/>{</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(repeat)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nRepeating<sp/>all<sp/>tests<sp/>(iteration<sp/>%d)<sp/>.<sp/>.<sp/>.\n\n&quot;</highlight><highlight class="normal">,<sp/>iteration<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>filter<sp/>=<sp/>GTEST_FLAG(filter).c_str();</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>filter<sp/>if<sp/>it&apos;s<sp/>not<sp/>*.<sp/><sp/>This<sp/>reminds<sp/>the<sp/>user<sp/>that<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tests<sp/>may<sp/>be<sp/>skipped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!String::CStringEquals(filter,<sp/>kUniversalFilter))<sp/>{</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/>ColoredPrintf(COLOR_YELLOW,</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>%s<sp/>filter<sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>GTEST_NAME_,<sp/>filter);</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"></highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internal::ShouldShard(kTestTotalShards,<sp/>kTestShardIndex,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int32<sp/>shard_index<sp/>=<sp/>Int32FromEnvOrDie(kTestShardIndex,<sp/>-1);</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/>ColoredPrintf(COLOR_YELLOW,</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>This<sp/>is<sp/>test<sp/>shard<sp/>%d<sp/>of<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(shard_index)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::posix::GetEnv(kTestTotalShards));</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"></highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(shuffle))<sp/>{</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/>ColoredPrintf(COLOR_YELLOW,</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>Randomizing<sp/>tests&apos;<sp/>orders<sp/>with<sp/>a<sp/>seed<sp/>of<sp/>%d<sp/>.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_test.random_seed());</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/>ColoredPrintf(COLOR_GREEN,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[==========]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Running<sp/>%s<sp/>from<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatTestCount(unit_test.test_to_run_count()).c_str(),</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatTestCaseCount(unit_test.test_case_to_run_count()).c_str());</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"></highlight></codeline>
<codeline lineno="4240"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTest&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/>ColoredPrintf(COLOR_GREEN,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[----------]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Global<sp/>test<sp/>environment<sp/>set-up.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"></highlight></codeline>
<codeline lineno="4247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrettyUnitTestResultPrinter::OnTestCaseStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase&amp;<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>counts<sp/>=</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FormatCountableNoun(test_case.test_to_run_count(),<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/>ColoredPrintf(COLOR_GREEN,<sp/></highlight><highlight class="stringliteral">&quot;[----------]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>from<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>counts.c_str(),<sp/>test_case.name());</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_case.type_param()<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>where<sp/>%s<sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>kTypeParamLabel,<sp/>test_case.type_param());</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"></highlight></codeline>
<codeline lineno="4260"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrettyUnitTestResultPrinter::OnTestStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo&amp;<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/>ColoredPrintf(COLOR_GREEN,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/>RUN<sp/><sp/><sp/><sp/><sp/><sp/>]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/>PrintTestName(test_info.test_case_name(),<sp/>test_info.name());</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"></highlight></codeline>
<codeline lineno="4267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Called<sp/>after<sp/>an<sp/>assertion<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4268"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrettyUnitTestResultPrinter::OnTestPartResult(</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>test<sp/>part<sp/>succeeded,<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>do<sp/>anything.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.type()<sp/>==<sp/>TestPartResult::kSuccess)</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>failure<sp/>message<sp/>from<sp/>the<sp/>assertion<sp/>(e.g.<sp/>expected<sp/>this<sp/>and<sp/>got<sp/>that).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/>PrintTestPartResult(result);</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"></highlight></codeline>
<codeline lineno="4279"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrettyUnitTestResultPrinter::OnTestEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo&amp;<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_info.result()-&gt;Passed())<sp/>{</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/>ColoredPrintf(COLOR_GREEN,<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/><sp/><sp/><sp/><sp/><sp/>OK<sp/>]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/>ColoredPrintf(COLOR_RED,<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>FAILED<sp/><sp/>]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/>PrintTestName(test_info.test_case_name(),<sp/>test_info.name());</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_info.result()-&gt;Failed())</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintFullTestCommentIfPresent(test_info);</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(print_time))<sp/>{</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>(%s<sp/>ms)\n&quot;</highlight><highlight class="normal">,<sp/>internal::StreamableToString(</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info.result()-&gt;elapsed_time()).c_str());</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"></highlight></codeline>
<codeline lineno="4298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrettyUnitTestResultPrinter::OnTestCaseEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase&amp;<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GTEST_FLAG(print_time))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>counts<sp/>=</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FormatCountableNoun(test_case.test_to_run_count(),<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/>ColoredPrintf(COLOR_GREEN,<sp/></highlight><highlight class="stringliteral">&quot;[----------]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>from<sp/>%s<sp/>(%s<sp/>ms<sp/>total)\n\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counts.c_str(),<sp/>test_case.name(),</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::StreamableToString(test_case.elapsed_time()).c_str());</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"></highlight></codeline>
<codeline lineno="4310"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTest&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/>ColoredPrintf(COLOR_GREEN,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[----------]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Global<sp/>test<sp/>environment<sp/>tear-down\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"></highlight></codeline>
<codeline lineno="4317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Internal<sp/>helper<sp/>for<sp/>printing<sp/>the<sp/>list<sp/>of<sp/>failed<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4318"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrettyUnitTestResultPrinter::PrintFailedTests(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTest&amp;<sp/>unit_test)<sp/>{</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failed_test_count<sp/>=<sp/>unit_test.failed_test_count();</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failed_test_count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"></highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>unit_test.total_test_case_count();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase&amp;<sp/>test_case<sp/>=<sp/>*unit_test.GetTestCase(i);</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_case.should_run()<sp/>||<sp/>(test_case.failed_test_count()<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>test_case.total_test_count();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo&amp;<sp/>test_info<sp/>=<sp/>*test_case.GetTestInfo(j);</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_info.should_run()<sp/>||<sp/>test_info.result()-&gt;Passed())<sp/>{</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ColoredPrintf(COLOR_RED,<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>FAILED<sp/><sp/>]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s.%s&quot;</highlight><highlight class="normal">,<sp/>test_case.name(),<sp/>test_info.name());</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintFullTestCommentIfPresent(test_info);</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrettyUnitTestResultPrinter::OnTestIterationEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTest&amp;<sp/>unit_test,</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*iteration*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/>ColoredPrintf(COLOR_GREEN,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[==========]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>from<sp/>%s<sp/>ran.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatTestCount(unit_test.test_to_run_count()).c_str(),</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatTestCaseCount(unit_test.test_case_to_run_count()).c_str());</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(print_time))<sp/>{</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>(%s<sp/>ms<sp/>total)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::StreamableToString(unit_test.elapsed_time()).c_str());</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/>ColoredPrintf(COLOR_GREEN,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>PASSED<sp/><sp/>]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s.\n&quot;</highlight><highlight class="normal">,<sp/>FormatTestCount(unit_test.successful_test_count()).c_str());</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_failures<sp/>=<sp/>unit_test.failed_test_count();</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!unit_test.Passed())<sp/>{</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failed_test_count<sp/>=<sp/>unit_test.failed_test_count();</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/>ColoredPrintf(COLOR_RED,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>FAILED<sp/><sp/>]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s,<sp/>listed<sp/>below:\n&quot;</highlight><highlight class="normal">,<sp/>FormatTestCount(failed_test_count).c_str());</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintFailedTests(unit_test);</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n%2d<sp/>FAILED<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>num_failures,</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_failures<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;TEST&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;TESTS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"></highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_disabled<sp/>=<sp/>unit_test.reportable_disabled_test_count();</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_disabled<sp/>&amp;&amp;<sp/>!GTEST_FLAG(also_run_disabled_tests))<sp/>{</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!num_failures)<sp/>{</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>spacer<sp/>if<sp/>no<sp/>FAILURE<sp/>banner<sp/>is<sp/>displayed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/>ColoredPrintf(COLOR_YELLOW,</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>YOU<sp/>HAVE<sp/>%d<sp/>DISABLED<sp/>%s\n\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_disabled,</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_disabled<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;TEST&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;TESTS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>Google<sp/>Test<sp/>output<sp/>is<sp/>printed<sp/>before,<sp/>e.g.,<sp/>heapchecker<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"></highlight></codeline>
<codeline lineno="4380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>PrettyUnitTestResultPrinter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4381"><highlight class="normal"></highlight></codeline>
<codeline lineno="4382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>TestEventRepeater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4383"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>forwards<sp/>events<sp/>to<sp/>other<sp/>event<sp/>listeners.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4385" refid="classtesting_1_1internal_1_1_test_event_repeater" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_test_event_repeater" kindref="compound">TestEventRepeater</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref><sp/>{</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_test_event_repeater" kindref="compound">TestEventRepeater</ref>()<sp/>:<sp/>forwarding_enabled_(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_test_event_repeater" kindref="compound">~TestEventRepeater</ref>();</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Append(<ref refid="classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref><sp/>*listener);</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>Release(<ref refid="classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>listener);</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"></highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Controls<sp/>whether<sp/>events<sp/>will<sp/>be<sp/>forwarded<sp/>to<sp/>listeners_.<sp/>Set<sp/>to<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>death<sp/>test<sp/>child<sp/>processes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forwarding_enabled()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forwarding_enabled_;<sp/>}</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_forwarding_enabled(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)<sp/>{<sp/>forwarding_enabled_<sp/>=<sp/>enable;<sp/>}</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"></highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestProgramStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestIterationStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration);</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnEnvironmentsSetUpStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnEnvironmentsSetUpEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestCaseStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case);</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info);</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestPartResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info);</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestCaseEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case);</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnEnvironmentsTearDownStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnEnvironmentsTearDownEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestIterationEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration);</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestProgramEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"></highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Controls<sp/>whether<sp/>events<sp/>will<sp/>be<sp/>forwarded<sp/>to<sp/>listeners_.<sp/>Set<sp/>to<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>death<sp/>test<sp/>child<sp/>processes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forwarding_enabled_;</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>list<sp/>of<sp/>listeners<sp/>that<sp/>receive<sp/>events.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/>std::vector&lt;TestEventListener*&gt;<sp/>listeners_;</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"></highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_test_event_repeater" kindref="compound">TestEventRepeater</ref>);</highlight></codeline>
<codeline lineno="4419"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"></highlight></codeline>
<codeline lineno="4421"><highlight class="normal">TestEventRepeater::~TestEventRepeater()<sp/>{</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/>ForEach(listeners_,<sp/>Delete&lt;TestEventListener&gt;);</highlight></codeline>
<codeline lineno="4423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"></highlight></codeline>
<codeline lineno="4425"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestEventRepeater::Append(<ref refid="classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref><sp/>*listener)<sp/>{</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/>listeners_.push_back(listener);</highlight></codeline>
<codeline lineno="4427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"></highlight></codeline>
<codeline lineno="4429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(vladl@google.com):<sp/>Factor<sp/>the<sp/>search<sp/>functionality<sp/>into<sp/>Vector::Find.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4430"><highlight class="normal">TestEventListener*<sp/>TestEventRepeater::Release(TestEventListener<sp/>*listener)<sp/>{</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>listeners_.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listeners_[i]<sp/>==<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>listeners_.erase(listeners_.begin()<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>listener;</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"></highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>most<sp/>methods<sp/>are<sp/>very<sp/>similar,<sp/>use<sp/>macros<sp/>to<sp/>reduce<sp/>boilerplate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>a<sp/>member<sp/>that<sp/>forwards<sp/>the<sp/>call<sp/>to<sp/>all<sp/>listeners.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4443"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_REPEATER_METHOD_(Name,<sp/>Type)<sp/>\</highlight></codeline>
<codeline lineno="4444"><highlight class="preprocessor">void<sp/>TestEventRepeater::Name(const<sp/>Type&amp;<sp/>parameter)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4445"><highlight class="preprocessor"><sp/><sp/>if<sp/>(forwarding_enabled_)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4446"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>listeners_.size();<sp/>i++)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4447"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>listeners_[i]-&gt;Name(parameter);<sp/>\</highlight></codeline>
<codeline lineno="4448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4449"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4450"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>a<sp/>member<sp/>that<sp/>forwards<sp/>the<sp/>call<sp/>to<sp/>all<sp/>listeners<sp/>in<sp/>reverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_REVERSE_REPEATER_METHOD_(Name,<sp/>Type)<sp/>\</highlight></codeline>
<codeline lineno="4454"><highlight class="preprocessor">void<sp/>TestEventRepeater::Name(const<sp/>Type&amp;<sp/>parameter)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4455"><highlight class="preprocessor"><sp/><sp/>if<sp/>(forwarding_enabled_)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4456"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>static_cast&lt;int&gt;(listeners_.size())<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4457"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>listeners_[i]-&gt;Name(parameter);<sp/>\</highlight></codeline>
<codeline lineno="4458"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4459"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4460"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4461"><highlight class="normal"></highlight></codeline>
<codeline lineno="4462"><highlight class="normal">GTEST_REPEATER_METHOD_(OnTestProgramStart,<sp/>UnitTest)</highlight></codeline>
<codeline lineno="4463"><highlight class="normal">GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart,<sp/>UnitTest)</highlight></codeline>
<codeline lineno="4464"><highlight class="normal">GTEST_REPEATER_METHOD_(OnTestCaseStart,<sp/>TestCase)</highlight></codeline>
<codeline lineno="4465"><highlight class="normal">GTEST_REPEATER_METHOD_(OnTestStart,<sp/>TestInfo)</highlight></codeline>
<codeline lineno="4466"><highlight class="normal">GTEST_REPEATER_METHOD_(OnTestPartResult,<sp/>TestPartResult)</highlight></codeline>
<codeline lineno="4467"><highlight class="normal">GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart,<sp/>UnitTest)</highlight></codeline>
<codeline lineno="4468"><highlight class="normal">GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd,<sp/>UnitTest)</highlight></codeline>
<codeline lineno="4469"><highlight class="normal">GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd,<sp/>UnitTest)</highlight></codeline>
<codeline lineno="4470"><highlight class="normal">GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd,<sp/>TestInfo)</highlight></codeline>
<codeline lineno="4471"><highlight class="normal">GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd,<sp/>TestCase)</highlight></codeline>
<codeline lineno="4472"><highlight class="normal">GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd,<sp/>UnitTest)</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_REPEATER_METHOD_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_REVERSE_REPEATER_METHOD_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4476"><highlight class="normal"></highlight></codeline>
<codeline lineno="4477"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestEventRepeater::OnTestIterationStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTest&amp;<sp/>unit_test,</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration)<sp/>{</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forwarding_enabled_)<sp/>{</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>listeners_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>listeners_[i]-&gt;OnTestIterationStart(unit_test,<sp/>iteration);</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight></codeline>
<codeline lineno="4486"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestEventRepeater::OnTestIterationEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTest&amp;<sp/>unit_test,</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration)<sp/>{</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forwarding_enabled_)<sp/>{</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(listeners_.size())<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>listeners_[i]-&gt;OnTestIterationEnd(unit_test,<sp/>iteration);</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>TestEventRepeater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4496"><highlight class="normal"></highlight></codeline>
<codeline lineno="4497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>generates<sp/>an<sp/>XML<sp/>output<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4498" refid="classtesting_1_1internal_1_1_xml_unit_test_result_printer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_xml_unit_test_result_printer" kindref="compound">XmlUnitTestResultPrinter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_empty_test_event_listener" kindref="compound">EmptyTestEventListener</ref><sp/>{</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_xml_unit_test_result_printer" kindref="compound">XmlUnitTestResultPrinter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_file);</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"></highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestIterationEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration);</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"></highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>c<sp/>a<sp/>whitespace<sp/>character<sp/>that<sp/>is<sp/>normalized<sp/>to<sp/>a<sp/>space<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>appears<sp/>in<sp/>an<sp/>XML<sp/>attribute<sp/>value?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsNormalizableWhitespace(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/>0x9<sp/>||<sp/>c<sp/>==<sp/>0xA<sp/>||<sp/>c<sp/>==<sp/>0xD;</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"></highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>c<sp/>appear<sp/>in<sp/>a<sp/>well-formed<sp/>XML<sp/>document?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsValidXmlCharacter(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsNormalizableWhitespace(c)<sp/>||<sp/>c<sp/>&gt;=<sp/>0x20;</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"></highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>XML-escaped<sp/>copy<sp/>of<sp/>the<sp/>input<sp/>string<sp/>str.<sp/><sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is_attribute<sp/>is<sp/>true,<sp/>the<sp/>text<sp/>is<sp/>meant<sp/>to<sp/>appear<sp/>as<sp/>an<sp/>attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value,<sp/>and<sp/>normalizable<sp/>whitespace<sp/>is<sp/>preserved<sp/>by<sp/>replacing<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>character<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>EscapeXml(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_attribute);</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"></highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>given<sp/>string<sp/>with<sp/>all<sp/>characters<sp/>invalid<sp/>in<sp/>XML<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>RemoveInvalidXmlCharacters(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str);</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convenience<sp/>wrapper<sp/>around<sp/>EscapeXml<sp/>when<sp/>str<sp/>is<sp/>an<sp/>attribute<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>EscapeXmlAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EscapeXml(str,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convenience<sp/>wrapper<sp/>around<sp/>EscapeXml<sp/>when<sp/>str<sp/>is<sp/>not<sp/>an<sp/>attribute<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>EscapeXmlText(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EscapeXml(str,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>given<sp/>attribute<sp/>belongs<sp/>to<sp/>the<sp/>given<sp/>element<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>streams<sp/>the<sp/>attribute<sp/>as<sp/>XML.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputXmlAttribute(std::ostream*<sp/>stream,</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>element_name,</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value);</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"></highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>an<sp/>XML<sp/>CDATA<sp/>section,<sp/>escaping<sp/>invalid<sp/>CDATA<sp/>sequences<sp/>as<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputXmlCDataSection(::std::ostream*<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>an<sp/>XML<sp/>representation<sp/>of<sp/>a<sp/>TestInfo<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputXmlTestInfo(::std::ostream*<sp/>stream,</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info);</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"></highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>an<sp/>XML<sp/>representation<sp/>of<sp/>a<sp/>TestCase<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintXmlTestCase(::std::ostream*<sp/>stream,</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case);</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"></highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>an<sp/>XML<sp/>summary<sp/>of<sp/>unit_test<sp/>to<sp/>output<sp/>stream<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintXmlUnitTest(::std::ostream*<sp/>stream,</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"></highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Produces<sp/>a<sp/>string<sp/>representing<sp/>the<sp/>test<sp/>properties<sp/>in<sp/>a<sp/>result<sp/>as<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delimited<sp/>XML<sp/>attributes<sp/>based<sp/>on<sp/>the<sp/>property<sp/>key=&quot;value&quot;<sp/>pairs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>the<sp/>std::string<sp/>is<sp/>not<sp/>empty,<sp/>it<sp/>includes<sp/>a<sp/>space<sp/>at<sp/>the<sp/>beginning,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>delimit<sp/>this<sp/>attribute<sp/>from<sp/>prior<sp/>attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>TestPropertiesAsXmlAttributes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_result" kindref="compound">TestResult</ref>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"></highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>output_file_;</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"></highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_xml_unit_test_result_printer" kindref="compound">XmlUnitTestResultPrinter</ref>);</highlight></codeline>
<codeline lineno="4568"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"></highlight></codeline>
<codeline lineno="4570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>new<sp/>XmlUnitTestResultPrinter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4571"><highlight class="normal">XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_file)</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>output_file_(output_file)<sp/>{</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_file_.c_str()<sp/>==<sp/>NULL<sp/>||<sp/>output_file_.empty())<sp/>{</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;XML<sp/>output<sp/>file<sp/>may<sp/>not<sp/>be<sp/>null\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"></highlight></codeline>
<codeline lineno="4580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Called<sp/>after<sp/>the<sp/>unit<sp/>test<sp/>ends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4581"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlUnitTestResultPrinter::OnTestIterationEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTest&amp;<sp/>unit_test,</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*iteration*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/>FILE*<sp/>xmlout<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/>FilePath<sp/>output_file(output_file_);</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/>FilePath<sp/>output_dir(output_file.RemoveFileName());</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"></highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_dir.CreateDirectoriesRecursively())<sp/>{</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/>xmlout<sp/>=<sp/>posix::FOpen(output_file_.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xmlout<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(wan):<sp/>report<sp/>the<sp/>reason<sp/>of<sp/>the<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>do<sp/>it<sp/>for<sp/>now<sp/>as:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>There<sp/>is<sp/>no<sp/>urgent<sp/>need<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>It&apos;s<sp/>a<sp/>bit<sp/>involved<sp/>to<sp/>make<sp/>the<sp/>errno<sp/>variable<sp/>thread-safe<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>all<sp/>three<sp/>operating<sp/>systems<sp/>(Linux,<sp/>Windows,<sp/>and<sp/>Mac<sp/>OS).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>3.<sp/>To<sp/>interpret<sp/>the<sp/>meaning<sp/>of<sp/>errno<sp/>in<sp/>a<sp/>thread-safe<sp/>way,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>we<sp/>need<sp/>the<sp/>strerror_r()<sp/>function,<sp/>which<sp/>is<sp/>not<sp/>available<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>file<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_file_.c_str());</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>stream;</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/>PrintXmlUnitTest(&amp;stream,<sp/>unit_test);</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/>fprintf(xmlout,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>StringStreamToString(&amp;stream).c_str());</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/>fclose(xmlout);</highlight></codeline>
<codeline lineno="4611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"></highlight></codeline>
<codeline lineno="4613"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>XML-escaped<sp/>copy<sp/>of<sp/>the<sp/>input<sp/>string<sp/>str.<sp/><sp/>If<sp/>is_attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>true,<sp/>the<sp/>text<sp/>is<sp/>meant<sp/>to<sp/>appear<sp/>as<sp/>an<sp/>attribute<sp/>value,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4615"><highlight class="normal"></highlight><highlight class="comment">//<sp/>normalizable<sp/>whitespace<sp/>is<sp/>preserved<sp/>by<sp/>replacing<sp/>it<sp/>with<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4617"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Invalid<sp/>XML<sp/>characters<sp/>in<sp/>str,<sp/>if<sp/>any,<sp/>are<sp/>stripped<sp/>from<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>expected<sp/>that<sp/>most,<sp/>if<sp/>not<sp/>all,<sp/>of<sp/>the<sp/>text<sp/>processed<sp/>by<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>module<sp/>will<sp/>consist<sp/>of<sp/>ordinary<sp/>English<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4621"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>module<sp/>is<sp/>ever<sp/>modified<sp/>to<sp/>produce<sp/>version<sp/>1.1<sp/>XML<sp/>output,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>most<sp/>invalid<sp/>characters<sp/>can<sp/>be<sp/>retained<sp/>using<sp/>character<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(wan):<sp/>It<sp/>might<sp/>be<sp/>nice<sp/>to<sp/>have<sp/>a<sp/>minimally<sp/>invasive,<sp/>human-readable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>escaping<sp/>scheme<sp/>for<sp/>invalid<sp/>characters,<sp/>rather<sp/>than<sp/>dropping<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4625"><highlight class="normal">std::string<sp/>XmlUnitTestResultPrinter::EscapeXml(</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_attribute)<sp/>{</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/>Message<sp/>m;</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"></highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>str.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>str[i];</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ch)<sp/>{</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;lt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;amp;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_attribute)</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_attribute)</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsValidXmlCharacter(ch))<sp/>{</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_attribute<sp/>&amp;&amp;<sp/>IsNormalizableWhitespace(ch))</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;#x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>String::FormatByte(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch))</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/>ch;</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"></highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m.GetString();</highlight></codeline>
<codeline lineno="4666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"></highlight></codeline>
<codeline lineno="4668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>given<sp/>string<sp/>with<sp/>all<sp/>characters<sp/>invalid<sp/>in<sp/>XML<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4669"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Currently<sp/>invalid<sp/>characters<sp/>are<sp/>dropped<sp/>from<sp/>the<sp/>string.<sp/>An</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4670"><highlight class="normal"></highlight><highlight class="comment">//<sp/>alternative<sp/>is<sp/>to<sp/>replace<sp/>them<sp/>with<sp/>certain<sp/>characters<sp/>such<sp/>as<sp/>.<sp/>or<sp/>?.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4671"><highlight class="normal">std::string<sp/>XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/>std::string<sp/>output;</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/>output.reserve(str.size());</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::string::const_iterator<sp/>it<sp/>=<sp/>str.begin();<sp/>it<sp/>!=<sp/>str.end();<sp/>++it)</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsValidXmlCharacter(*it))</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(*it);</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="4680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"></highlight></codeline>
<codeline lineno="4682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>routines<sp/>generate<sp/>an<sp/>XML<sp/>representation<sp/>of<sp/>a<sp/>UnitTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4684"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4685"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>how<sp/>Google<sp/>Test<sp/>concepts<sp/>map<sp/>to<sp/>the<sp/>DTD:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;testsuites<sp/>name=&quot;AllTests&quot;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;--<sp/>corresponds<sp/>to<sp/>a<sp/>UnitTest<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>&lt;testsuite<sp/>name=&quot;testcase-name&quot;&gt;<sp/><sp/>&lt;--<sp/>corresponds<sp/>to<sp/>a<sp/>TestCase<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4689"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&lt;testcase<sp/>name=&quot;test-name&quot;&gt;<sp/><sp/><sp/><sp/><sp/>&lt;--<sp/>corresponds<sp/>to<sp/>a<sp/>TestInfo<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;...&quot;&gt;...&lt;/failure&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;...&quot;&gt;...&lt;/failure&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;...&quot;&gt;...&lt;/failure&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4693"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;--<sp/>individual<sp/>assertion<sp/>failures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4694"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&lt;/testcase&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4695"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>&lt;/testsuite&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;/testsuites&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4697"><highlight class="normal"></highlight></codeline>
<codeline lineno="4698"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>the<sp/>given<sp/>time<sp/>in<sp/>milliseconds<sp/>as<sp/>seconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4699"><highlight class="normal">std::string<sp/>FormatTimeInMillisAsSeconds(TimeInMillis<sp/>ms)<sp/>{</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/>ms/1000.0;</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="4703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"></highlight></codeline>
<codeline lineno="4705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>given<sp/>epoch<sp/>time<sp/>in<sp/>milliseconds<sp/>to<sp/>a<sp/>date<sp/>string<sp/>in<sp/>the<sp/>ISO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>8601<sp/>format,<sp/>without<sp/>the<sp/>timezone<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4707"><highlight class="normal">std::string<sp/>FormatEpochTimeInMillisAsIso8601(TimeInMillis<sp/>ms)<sp/>{</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>non-reentrant<sp/>version<sp/>as<sp/>localtime_r<sp/>is<sp/>not<sp/>portable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/>time_t<sp/>seconds<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">time_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ms<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4711"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(push)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Saves<sp/>the<sp/>current<sp/>warning<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4712"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(disable:4996)<sp/><sp/></highlight><highlight class="comment">//<sp/>Temporarily<sp/>disables<sp/>warning<sp/>4996</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(function<sp/>or<sp/>variable<sp/>may<sp/>be<sp/>unsafe).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>time_struct<sp/>=<sp/>localtime(&amp;seconds);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4715"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(pop)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>warning<sp/>state<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4716"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>time_struct<sp/>=<sp/>localtime(&amp;seconds);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4718"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time_struct<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>ms<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"></highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>YYYY-MM-DDThh:mm:ss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StreamableToString(time_struct-&gt;tm_year<sp/>+<sp/>1900)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String::FormatIntWidth2(time_struct-&gt;tm_mon<sp/>+<sp/>1)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String::FormatIntWidth2(time_struct-&gt;tm_mday)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String::FormatIntWidth2(time_struct-&gt;tm_hour)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String::FormatIntWidth2(time_struct-&gt;tm_min)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String::FormatIntWidth2(time_struct-&gt;tm_sec);</highlight></codeline>
<codeline lineno="4729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"></highlight></codeline>
<codeline lineno="4731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Streams<sp/>an<sp/>XML<sp/>CDATA<sp/>section,<sp/>escaping<sp/>invalid<sp/>CDATA<sp/>sequences<sp/>as<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream*<sp/>stream,</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>segment<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;![CDATA[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>next_segment<sp/>=<sp/>strstr(segment,<sp/></highlight><highlight class="stringliteral">&quot;]]&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_segment<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;write(</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::streamsize</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(next_segment<sp/>-<sp/>segment));</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]]&gt;]]&amp;gt;&lt;![CDATA[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segment<sp/>=<sp/>next_segment<sp/>+<sp/>strlen(</highlight><highlight class="stringliteral">&quot;]]&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/>segment;</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]]&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"></highlight></codeline>
<codeline lineno="4751"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlUnitTestResultPrinter::OutputXmlAttribute(</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream*<sp/>stream,</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>element_name,</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>allowed_names<sp/>=</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetReservedAttributesForElement(element_name);</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/>GTEST_CHECK_(std::find(allowed_names.begin(),<sp/>allowed_names.end(),<sp/>name)<sp/>!=</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allowed_names.end())</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Attribute<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>allowed<sp/>for<sp/>element<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>element_name</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"></highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>EscapeXmlAttribute(value)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>an<sp/>XML<sp/>representation<sp/>of<sp/>a<sp/>TestInfo<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(wan):<sp/>There<sp/>is<sp/>also<sp/>value<sp/>in<sp/>printing<sp/>properties<sp/>with<sp/>the<sp/>plain<sp/>printer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4769"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream*<sp/>stream,</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo&amp;<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestResult&amp;<sp/>result<sp/>=<sp/>*test_info.result();</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>kTestcase<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;testcase&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestcase,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>test_info.name());</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"></highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_info.value_param()<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestcase,<sp/></highlight><highlight class="stringliteral">&quot;value_param&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info.value_param());</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_info.type_param()<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestcase,<sp/></highlight><highlight class="stringliteral">&quot;type_param&quot;</highlight><highlight class="normal">,<sp/>test_info.type_param());</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"></highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestcase,<sp/></highlight><highlight class="stringliteral">&quot;status&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info.should_run()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;run&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;notrun&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestcase,<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatTimeInMillisAsSeconds(result.elapsed_time()));</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestcase,<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal">,<sp/>test_case_name);</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/>TestPropertiesAsXmlAttributes(result);</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"></highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>result.total_part_count();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>part<sp/>=<sp/>result.GetTestPartResult(i);</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(part.failed())<sp/>{</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++failures<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>location<sp/>=<sp/>internal::FormatCompilerIndependentFileLocation(</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part.file_name(),<sp/>part.line_number());</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>summary<sp/>=<sp/>location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>part.summary();</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>EscapeXmlAttribute(summary.c_str())</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>type=\&quot;\&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>detail<sp/>=<sp/>location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>part.message();</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OutputXmlCDataSection(stream,<sp/>RemoveInvalidXmlCharacters(detail).c_str());</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/failure&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"></highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failures<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;/testcase&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"></highlight></codeline>
<codeline lineno="4818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>an<sp/>XML<sp/>representation<sp/>of<sp/>a<sp/>TestCase<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4819"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlUnitTestResultPrinter::PrintXmlTestCase(std::ostream*<sp/>stream,</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase&amp;<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>kTestsuite<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testsuite&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kTestsuite;</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestsuite,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>test_case.name());</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestsuite,<sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(test_case.reportable_test_count()));</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestsuite,<sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(test_case.failed_test_count()));</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream,<sp/>kTestsuite,<sp/></highlight><highlight class="stringliteral">&quot;disabled&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(test_case.reportable_disabled_test_count()));</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestsuite,<sp/></highlight><highlight class="stringliteral">&quot;errors&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestsuite,<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatTimeInMillisAsSeconds(test_case.elapsed_time()));</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/>TestPropertiesAsXmlAttributes(test_case.ad_hoc_test_result())</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"></highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_case.total_test_count();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_case.GetTestInfo(i)-&gt;is_reportable())</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OutputXmlTestInfo(stream,<sp/>test_case.name(),<sp/>*test_case.GetTestInfo(i));</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kTestsuite<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"></highlight></codeline>
<codeline lineno="4844"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>an<sp/>XML<sp/>summary<sp/>of<sp/>unit_test<sp/>to<sp/>output<sp/>stream<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4845"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream*<sp/>stream,</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTest&amp;<sp/>unit_test)<sp/>{</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>kTestsuites<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testsuites&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"></highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;?xml<sp/>version=\&quot;1.0\&quot;<sp/>encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kTestsuites;</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"></highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(unit_test.reportable_test_count()));</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(unit_test.failed_test_count()));</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;disabled&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(unit_test.reportable_disabled_test_count()));</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;errors&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;timestamp&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"></highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(shuffle))<sp/>{</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;random_seed&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(unit_test.random_seed()));</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"></highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/>TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"></highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/>OutputXmlAttribute(stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AllTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"></highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>unit_test.total_test_case_count();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unit_test.GetTestCase(i)-&gt;reportable_test_count()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintXmlTestCase(stream,<sp/>*unit_test.GetTestCase(i));</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kTestsuites<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"></highlight></codeline>
<codeline lineno="4883"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produces<sp/>a<sp/>string<sp/>representing<sp/>the<sp/>test<sp/>properties<sp/>in<sp/>a<sp/>result<sp/>as<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4884"><highlight class="normal"></highlight><highlight class="comment">//<sp/>delimited<sp/>XML<sp/>attributes<sp/>based<sp/>on<sp/>the<sp/>property<sp/>key=&quot;value&quot;<sp/>pairs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4885"><highlight class="normal">std::string<sp/>XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestResult&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/>Message<sp/>attributes;</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>result.test_property_count();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestProperty&amp;<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal"><sp/>=<sp/>result.GetTestProperty(i);</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/>attributes<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal">.key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>EscapeXmlAttribute(property.value())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attributes.GetString();</highlight></codeline>
<codeline lineno="4894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"></highlight></codeline>
<codeline lineno="4896"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>XmlUnitTestResultPrinter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4897"><highlight class="normal"></highlight></codeline>
<codeline lineno="4898"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4899"><highlight class="normal"></highlight></codeline>
<codeline lineno="4900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>if<sp/>str<sp/>contains<sp/>&apos;=&apos;,<sp/>&apos;&amp;&apos;,<sp/>&apos;%&apos;<sp/>or<sp/>&apos;\n&apos;<sp/>characters.<sp/>If<sp/>yes,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>replaces<sp/>them<sp/>by<sp/>&quot;%xx&quot;<sp/>where<sp/>xx<sp/>is<sp/>their<sp/>hexadecimal<sp/>value.<sp/>For</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4902"><highlight class="normal"></highlight><highlight class="comment">//<sp/>example,<sp/>replaces<sp/>&quot;=&quot;<sp/>with<sp/>&quot;%3D&quot;.<sp/><sp/>This<sp/>algorithm<sp/>is<sp/>O(strlen(str))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>both<sp/>time<sp/>and<sp/>space<sp/>--<sp/>important<sp/>as<sp/>the<sp/>input<sp/>str<sp/>may<sp/>contain<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arbitrarily<sp/>long<sp/>test<sp/>failure<sp/>message<sp/>and<sp/>stack<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4905"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>StreamingListener::UrlEncode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/>result.reserve(strlen(str)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>*str;<sp/>ch<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>ch<sp/>=<sp/>*++str)<sp/>{</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ch)<sp/>{</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.append(</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal"><sp/>+<sp/>String::FormatByte(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch)));</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(ch);</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"></highlight></codeline>
<codeline lineno="4924"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StreamingListener::SocketWriter::MakeConnection()<sp/>{</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/>GTEST_CHECK_(sockfd_<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MakeConnection()<sp/>can&apos;t<sp/>be<sp/>called<sp/>when<sp/>there<sp/>is<sp/>already<sp/>a<sp/>connection.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"></highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/>addrinfo<sp/>hints;</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/>memset(&amp;hints,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hints));</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/>hints.ai_family<sp/>=<sp/>AF_UNSPEC;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>allow<sp/>both<sp/>IPv4<sp/>and<sp/>IPv6<sp/>addresses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/>hints.ai_socktype<sp/>=<sp/>SOCK_STREAM;</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/>addrinfo*<sp/>servinfo<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"></highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>getaddrinfo()<sp/>to<sp/>get<sp/>a<sp/>linked<sp/>list<sp/>of<sp/>IP<sp/>addresses<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>host<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_num<sp/>=<sp/>getaddrinfo(</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_name_.c_str(),<sp/>port_num_.c_str(),<sp/>&amp;hints,<sp/>&amp;servinfo);</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error_num<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOG_(WARNING)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;stream_result_to:<sp/>getaddrinfo()<sp/>failed:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>gai_strerror(error_num);</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"></highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>through<sp/>all<sp/>the<sp/>results<sp/>and<sp/>connect<sp/>to<sp/>the<sp/>first<sp/>we<sp/>can.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(addrinfo*<sp/>cur_addr<sp/>=<sp/>servinfo;<sp/>sockfd_<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>cur_addr<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_addr<sp/>=<sp/>cur_addr-&gt;ai_next)<sp/>{</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/>sockfd_<sp/>=<sp/>socket(</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_addr-&gt;ai_family,<sp/>cur_addr-&gt;ai_socktype,<sp/>cur_addr-&gt;ai_protocol);</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sockfd_<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connect<sp/>the<sp/>client<sp/>socket<sp/>to<sp/>the<sp/>server<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connect(sockfd_,<sp/>cur_addr-&gt;ai_addr,<sp/>cur_addr-&gt;ai_addrlen)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(sockfd_);</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sockfd_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"></highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/>freeaddrinfo(servinfo);<sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>done<sp/>with<sp/>this<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4958"><highlight class="normal"></highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sockfd_<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOG_(WARNING)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;stream_result_to:<sp/>failed<sp/>to<sp/>connect<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>host_name_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>port_num_;</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"></highlight></codeline>
<codeline lineno="4965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>class<sp/>Streaming<sp/>Listener</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4966"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_CAN_STREAM_RESULTS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4967"><highlight class="normal"></highlight></codeline>
<codeline lineno="4968"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>ScopedTrace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4969"><highlight class="normal"></highlight></codeline>
<codeline lineno="4970"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pushes<sp/>the<sp/>given<sp/>source<sp/>file<sp/>location<sp/>and<sp/>message<sp/>onto<sp/>a<sp/>per-thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4971"><highlight class="normal"></highlight><highlight class="comment">//<sp/>trace<sp/>stack<sp/>maintained<sp/>by<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4972"><highlight class="normal">ScopedTrace::ScopedTrace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Message&amp;<sp/>message)</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(&amp;UnitTest::mutex_)<sp/>{</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/>TraceInfo<sp/>trace;</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/>trace.file<sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/>trace.line<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/>trace.message<sp/>=<sp/>message.GetString();</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"></highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/>UnitTest::GetInstance()-&gt;PushGTestTrace(trace);</highlight></codeline>
<codeline lineno="4980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pops<sp/>the<sp/>info<sp/>pushed<sp/>by<sp/>the<sp/>c&apos;tor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4983"><highlight class="normal">ScopedTrace::~ScopedTrace()</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(&amp;UnitTest::mutex_)<sp/>{</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/>UnitTest::GetInstance()-&gt;PopGTestTrace();</highlight></codeline>
<codeline lineno="4986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"></highlight></codeline>
<codeline lineno="4988"><highlight class="normal"></highlight></codeline>
<codeline lineno="4989"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>OsStackTraceGetter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4990"><highlight class="normal"></highlight></codeline>
<codeline lineno="4991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>as<sp/>an<sp/>std::string.<sp/><sp/>Parameters:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4992"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>max_depth<sp/><sp/>-<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>stack<sp/>frames<sp/>to<sp/>be<sp/>included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4994"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4995"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>skip_count<sp/>-<sp/>the<sp/>number<sp/>of<sp/>top<sp/>frames<sp/>to<sp/>be<sp/>skipped;<sp/>doesn&apos;t<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4996"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>against<sp/>max_depth.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4997"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4998"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>OsStackTraceGetter::CurrentStackTrace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>max_depth<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>skip_count<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"></highlight></codeline>
<codeline lineno="5004"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OsStackTraceGetter::UponLeavingGTest()</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="5006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"></highlight></codeline>
<codeline lineno="5008"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5009"><highlight class="normal">OsStackTraceGetter::kElidedFramesMarker<sp/>=</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;...<sp/>&quot;</highlight><highlight class="normal"><sp/>GTEST_NAME_<sp/></highlight><highlight class="stringliteral">&quot;<sp/>internal<sp/>frames<sp/>...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"></highlight></codeline>
<codeline lineno="5012"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>class<sp/>that<sp/>creates<sp/>the<sp/>premature-exit<sp/>file<sp/>in<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5013"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constructor<sp/>and<sp/>deletes<sp/>the<sp/>file<sp/>in<sp/>its<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5014" refid="classtesting_1_1internal_1_1_scoped_premature_exit_file" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_scoped_premature_exit_file" kindref="compound">ScopedPrematureExitFile</ref><sp/>{</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_scoped_premature_exit_file" kindref="compound">ScopedPrematureExitFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>premature_exit_filepath)</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>premature_exit_filepath_(premature_exit_filepath)<sp/>{</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>path<sp/>to<sp/>the<sp/>premature-exit<sp/>file<sp/>is<sp/>specified...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(premature_exit_filepath<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>*premature_exit_filepath<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>file<sp/>with<sp/>a<sp/>single<sp/>&quot;0&quot;<sp/>character<sp/>in<sp/>it.<sp/><sp/>I/O</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>errors<sp/>are<sp/>ignored<sp/>as<sp/>there&apos;s<sp/>nothing<sp/>better<sp/>we<sp/>can<sp/>do<sp/>and<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>want<sp/>to<sp/>fail<sp/>the<sp/>test<sp/>because<sp/>of<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FILE*<sp/>pfile<sp/>=<sp/>posix::FOpen(premature_exit_filepath,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>1,<sp/>pfile);</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(pfile);</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"></highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_scoped_premature_exit_file" kindref="compound">~ScopedPrematureExitFile</ref>()<sp/>{</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(premature_exit_filepath_<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>*premature_exit_filepath_<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove(premature_exit_filepath_);</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"></highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>premature_exit_filepath_;</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"></highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_scoped_premature_exit_file" kindref="compound">ScopedPrematureExitFile</ref>);</highlight></codeline>
<codeline lineno="5039"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"></highlight></codeline>
<codeline lineno="5041"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5042"><highlight class="normal"></highlight></codeline>
<codeline lineno="5043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>TestEventListeners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5044"><highlight class="normal"></highlight></codeline>
<codeline lineno="5045"><highlight class="normal">TestEventListeners::TestEventListeners()</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>repeater_(new<sp/>internal::TestEventRepeater()),</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_result_printer_(NULL),</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_xml_generator_(NULL)<sp/>{</highlight></codeline>
<codeline lineno="5049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"></highlight></codeline>
<codeline lineno="5051"><highlight class="normal">TestEventListeners::~TestEventListeners()<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>repeater_;<sp/>}</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"></highlight></codeline>
<codeline lineno="5053"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>standard<sp/>listener<sp/>responsible<sp/>for<sp/>the<sp/>default<sp/>console</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5054"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output.<sp/><sp/>Can<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>listeners<sp/>list<sp/>to<sp/>shut<sp/>down<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5055"><highlight class="normal"></highlight><highlight class="comment">//<sp/>console<sp/>output.<sp/><sp/>Note<sp/>that<sp/>removing<sp/>this<sp/>object<sp/>from<sp/>the<sp/>listener<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5056"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>Release<sp/>transfers<sp/>its<sp/>ownership<sp/>to<sp/>the<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5057"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestEventListeners::Append(TestEventListener*<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/>repeater_-&gt;Append(listener);</highlight></codeline>
<codeline lineno="5059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"></highlight></codeline>
<codeline lineno="5061"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removes<sp/>the<sp/>given<sp/>event<sp/>listener<sp/>from<sp/>the<sp/>list<sp/>and<sp/>returns<sp/>it.<sp/><sp/>It<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight><highlight class="comment">//<sp/>becomes<sp/>the<sp/>caller&apos;s<sp/>responsibility<sp/>to<sp/>delete<sp/>the<sp/>listener.<sp/>Returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5063"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NULL<sp/>if<sp/>the<sp/>listener<sp/>is<sp/>not<sp/>found<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5064"><highlight class="normal">TestEventListener*<sp/>TestEventListeners::Release(TestEventListener*<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener<sp/>==<sp/>default_result_printer_)</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/>default_result_printer_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener<sp/>==<sp/>default_xml_generator_)</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/>default_xml_generator_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>repeater_-&gt;Release(listener);</highlight></codeline>
<codeline lineno="5070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>repeater<sp/>that<sp/>broadcasts<sp/>the<sp/>TestEventListener<sp/>events<sp/>to<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>subscribers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5074"><highlight class="normal">TestEventListener*<sp/>TestEventListeners::repeater()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>repeater_;<sp/>}</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"></highlight></codeline>
<codeline lineno="5076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>default_result_printer<sp/>attribute<sp/>to<sp/>the<sp/>provided<sp/>listener.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5077"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>listener<sp/>is<sp/>also<sp/>added<sp/>to<sp/>the<sp/>listener<sp/>list<sp/>and<sp/>previous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5078"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default_result_printer<sp/>is<sp/>removed<sp/>from<sp/>it<sp/>and<sp/>deleted.<sp/>The<sp/>listener<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>be<sp/>NULL<sp/>in<sp/>which<sp/>case<sp/>it<sp/>will<sp/>not<sp/>be<sp/>added<sp/>to<sp/>the<sp/>list.<sp/>Does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5080"><highlight class="normal"></highlight><highlight class="comment">//<sp/>nothing<sp/>if<sp/>the<sp/>previous<sp/>and<sp/>the<sp/>current<sp/>listener<sp/>objects<sp/>are<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5081"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestEventListeners::SetDefaultResultPrinter(TestEventListener*<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(default_result_printer_<sp/>!=<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>an<sp/>error<sp/>to<sp/>pass<sp/>this<sp/>method<sp/>a<sp/>listener<sp/>that<sp/>is<sp/>already<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Release(default_result_printer_);</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/>default_result_printer_<sp/>=<sp/>listener;</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Append(listener);</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"></highlight></codeline>
<codeline lineno="5092"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>default_xml_generator<sp/>attribute<sp/>to<sp/>the<sp/>provided<sp/>listener.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>listener<sp/>is<sp/>also<sp/>added<sp/>to<sp/>the<sp/>listener<sp/>list<sp/>and<sp/>previous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5094"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default_xml_generator<sp/>is<sp/>removed<sp/>from<sp/>it<sp/>and<sp/>deleted.<sp/>The<sp/>listener<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>be<sp/>NULL<sp/>in<sp/>which<sp/>case<sp/>it<sp/>will<sp/>not<sp/>be<sp/>added<sp/>to<sp/>the<sp/>list.<sp/>Does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5096"><highlight class="normal"></highlight><highlight class="comment">//<sp/>nothing<sp/>if<sp/>the<sp/>previous<sp/>and<sp/>the<sp/>current<sp/>listener<sp/>objects<sp/>are<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5097"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestEventListeners::SetDefaultXmlGenerator(TestEventListener*<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(default_xml_generator_<sp/>!=<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>an<sp/>error<sp/>to<sp/>pass<sp/>this<sp/>method<sp/>a<sp/>listener<sp/>that<sp/>is<sp/>already<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Release(default_xml_generator_);</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/>default_xml_generator_<sp/>=<sp/>listener;</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Append(listener);</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"></highlight></codeline>
<codeline lineno="5108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Controls<sp/>whether<sp/>events<sp/>will<sp/>be<sp/>forwarded<sp/>by<sp/>the<sp/>repeater<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>listeners<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5110"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestEventListeners::EventForwardingEnabled()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>repeater_-&gt;forwarding_enabled();</highlight></codeline>
<codeline lineno="5112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"></highlight></codeline>
<codeline lineno="5114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestEventListeners::SuppressEventForwarding()<sp/>{</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/>repeater_-&gt;set_forwarding_enabled(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"></highlight></codeline>
<codeline lineno="5118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>UnitTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5119"><highlight class="normal"></highlight></codeline>
<codeline lineno="5120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>singleton<sp/>UnitTest<sp/>object.<sp/><sp/>The<sp/>first<sp/>time<sp/>this<sp/>method<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>called,<sp/>a<sp/>UnitTest<sp/>object<sp/>is<sp/>constructed<sp/>and<sp/>returned.<sp/><sp/>Consecutive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>calls<sp/>will<sp/>return<sp/>the<sp/>same<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5123"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>protect<sp/>this<sp/>under<sp/>mutex_<sp/>as<sp/>a<sp/>user<sp/>is<sp/>not<sp/>supposed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>call<sp/>this<sp/>before<sp/>main()<sp/>starts,<sp/>from<sp/>which<sp/>point<sp/>on<sp/>the<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>will<sp/>never<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5127"><highlight class="normal">UnitTest*<sp/>UnitTest::GetInstance()<sp/>{</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>compiled<sp/>with<sp/>MSVC<sp/>7.1<sp/>in<sp/>optimized<sp/>mode,<sp/>destroying<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>UnitTest<sp/>object<sp/>upon<sp/>exiting<sp/>the<sp/>program<sp/>messes<sp/>up<sp/>the<sp/>exit<sp/>code,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>causing<sp/>successful<sp/>tests<sp/>to<sp/>appear<sp/>failed.<sp/><sp/>We<sp/>have<sp/>to<sp/>use<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>different<sp/>implementation<sp/>in<sp/>this<sp/>case<sp/>to<sp/>bypass<sp/>the<sp/>compiler<sp/>bug.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>implementation<sp/>makes<sp/>the<sp/>compiler<sp/>happy,<sp/>at<sp/>the<sp/>cost<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>leaking<sp/>the<sp/>UnitTest<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CodeGear<sp/>C++Builder<sp/>insists<sp/>on<sp/>a<sp/>public<sp/>destructor<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>implementation.<sp/><sp/>Use<sp/>this<sp/>implementation<sp/>to<sp/>keep<sp/>good<sp/>OO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>design<sp/>with<sp/>private<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5138"><highlight class="normal"></highlight></codeline>
<codeline lineno="5139"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(_MSC_VER<sp/>==<sp/>1310<sp/>&amp;&amp;<sp/>!defined(_DEBUG))<sp/>||<sp/>defined(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>UnitTest*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>UnitTest;</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>UnitTest<sp/>instance;</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;instance;</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>(_MSC_VER<sp/>==<sp/>1310<sp/>&amp;&amp;<sp/>!defined(_DEBUG))<sp/>||<sp/>defined(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"></highlight></codeline>
<codeline lineno="5148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5149"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest::successful_test_case_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;successful_test_case_count();</highlight></codeline>
<codeline lineno="5151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"></highlight></codeline>
<codeline lineno="5153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5154"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest::failed_test_case_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;failed_test_case_count();</highlight></codeline>
<codeline lineno="5156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"></highlight></codeline>
<codeline lineno="5158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5159"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest::total_test_case_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;total_test_case_count();</highlight></codeline>
<codeline lineno="5161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"></highlight></codeline>
<codeline lineno="5163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>cases<sp/>that<sp/>contain<sp/>at<sp/>least<sp/>one<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5165"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest::test_case_to_run_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;test_case_to_run_count();</highlight></codeline>
<codeline lineno="5167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"></highlight></codeline>
<codeline lineno="5169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5170"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest::successful_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;successful_test_count();</highlight></codeline>
<codeline lineno="5172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"></highlight></codeline>
<codeline lineno="5174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5175"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest::failed_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;failed_test_count();<sp/>}</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"></highlight></codeline>
<codeline lineno="5177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>that<sp/>will<sp/>be<sp/>reported<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5178"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest::reportable_disabled_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;reportable_disabled_test_count();</highlight></codeline>
<codeline lineno="5180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"></highlight></codeline>
<codeline lineno="5182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5183"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest::disabled_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;disabled_test_count();</highlight></codeline>
<codeline lineno="5185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"></highlight></codeline>
<codeline lineno="5187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>to<sp/>be<sp/>printed<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5188"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest::reportable_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;reportable_test_count();</highlight></codeline>
<codeline lineno="5190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"></highlight></codeline>
<codeline lineno="5192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest::total_test_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;total_test_count();<sp/>}</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"></highlight></codeline>
<codeline lineno="5195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5196"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest::test_to_run_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;test_to_run_count();<sp/>}</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"></highlight></codeline>
<codeline lineno="5198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>time<sp/>of<sp/>the<sp/>test<sp/>program<sp/>start,<sp/>in<sp/>ms<sp/>from<sp/>the<sp/>start<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UNIX<sp/>epoch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5200"><highlight class="normal">internal::TimeInMillis<sp/>UnitTest::start_timestamp()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;start_timestamp();</highlight></codeline>
<codeline lineno="5202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight></codeline>
<codeline lineno="5204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>elapsed<sp/>time,<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5205"><highlight class="normal">internal::TimeInMillis<sp/>UnitTest::elapsed_time()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;elapsed_time();</highlight></codeline>
<codeline lineno="5207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"></highlight></codeline>
<codeline lineno="5209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>unit<sp/>test<sp/>passed<sp/>(i.e.<sp/>all<sp/>test<sp/>cases<sp/>passed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5210"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UnitTest::Passed()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;Passed();<sp/>}</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"></highlight></codeline>
<codeline lineno="5212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>unit<sp/>test<sp/>failed<sp/>(i.e.<sp/>some<sp/>test<sp/>case<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>something<sp/>outside<sp/>of<sp/>all<sp/>tests<sp/>failed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5214"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UnitTest::Failed()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;Failed();<sp/>}</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>i-th<sp/>test<sp/>case<sp/>among<sp/>all<sp/>the<sp/>test<sp/>cases.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>total_test_case_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5218"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/>UnitTest::GetTestCase(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;GetTestCase(i);</highlight></codeline>
<codeline lineno="5220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"></highlight></codeline>
<codeline lineno="5222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestResult<sp/>containing<sp/>information<sp/>on<sp/>test<sp/>failures<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>properties<sp/>logged<sp/>outside<sp/>of<sp/>individual<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5224"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestResult&amp;<sp/>UnitTest::ad_hoc_test_result()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*impl()-&gt;ad_hoc_test_result();</highlight></codeline>
<codeline lineno="5226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"></highlight></codeline>
<codeline lineno="5228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>i-th<sp/>test<sp/>case<sp/>among<sp/>all<sp/>the<sp/>test<sp/>cases.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>total_test_case_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5230"><highlight class="normal">TestCase*<sp/>UnitTest::GetMutableTestCase(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl()-&gt;GetMutableTestCase(i);</highlight></codeline>
<codeline lineno="5232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"></highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>list<sp/>of<sp/>event<sp/>listeners<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>track<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inside<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5236"><highlight class="normal">TestEventListeners&amp;<sp/>UnitTest::listeners()<sp/>{</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*impl()-&gt;listeners();</highlight></codeline>
<codeline lineno="5238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"></highlight></codeline>
<codeline lineno="5240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Registers<sp/>and<sp/>returns<sp/>a<sp/>global<sp/>test<sp/>environment.<sp/><sp/>When<sp/>a<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>program<sp/>is<sp/>run,<sp/>all<sp/>global<sp/>test<sp/>environments<sp/>will<sp/>be<sp/>set-up<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>order<sp/>they<sp/>were<sp/>registered.<sp/><sp/>After<sp/>all<sp/>tests<sp/>in<sp/>the<sp/>program<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>finished,<sp/>all<sp/>global<sp/>test<sp/>environments<sp/>will<sp/>be<sp/>torn-down<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*reverse*<sp/>order<sp/>they<sp/>were<sp/>registered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5245"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>UnitTest<sp/>object<sp/>takes<sp/>ownership<sp/>of<sp/>the<sp/>given<sp/>environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5247"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>protect<sp/>this<sp/>under<sp/>mutex_,<sp/>as<sp/>we<sp/>only<sp/>support<sp/>calling<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5250"><highlight class="normal">Environment*<sp/>UnitTest::AddEnvironment(Environment*<sp/>env)<sp/>{</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(env<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"></highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/>impl_-&gt;environments().push_back(env);</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>env;</highlight></codeline>
<codeline lineno="5257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"></highlight></codeline>
<codeline lineno="5259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>TestPartResult<sp/>to<sp/>the<sp/>current<sp/>TestResult<sp/>object.<sp/><sp/>All<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assertion<sp/>macros<sp/>(e.g.<sp/>ASSERT_TRUE,<sp/>EXPECT_EQ,<sp/>etc)<sp/>eventually<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>to<sp/>report<sp/>their<sp/>results.<sp/><sp/>The<sp/>user<sp/>code<sp/>should<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assertion<sp/>macros<sp/>instead<sp/>of<sp/>calling<sp/>this<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTest::AddTestPartResult(</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/>TestPartResult::Type<sp/>result_type,</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file_name,</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_number,</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>os_stack_trace)<sp/>GTEST_LOCK_EXCLUDED_(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/>Message<sp/>msg;</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/>message;</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"></highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/>internal::MutexLock<sp/>lock(&amp;mutex_);</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(impl_-&gt;gtest_trace_stack().size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GTEST_NAME_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>trace:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"></highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(impl_-&gt;gtest_trace_stack().size());</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::TraceInfo&amp;<sp/>trace<sp/>=<sp/>impl_-&gt;gtest_trace_stack()[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>internal::FormatFileLocation(trace.file,<sp/>trace.line)</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>trace.message;</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"></highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(os_stack_trace.c_str()<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>!os_stack_trace.empty())<sp/>{</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/>internal::kStackTraceMarker<sp/>&lt;&lt;<sp/>os_stack_trace;</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult<sp/>result<sp/>=</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/>TestPartResult(result_type,<sp/>file_name,<sp/>line_number,</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.GetString().c_str());</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/>impl_-&gt;GetTestPartResultReporterForCurrentThread()-&gt;</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReportTestPartResult(result);</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"></highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result_type<sp/>!=<sp/>TestPartResult::kSuccess)<sp/>{</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gtest_break_on_failure<sp/>takes<sp/>precedence<sp/>over</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gtest_throw_on_failure.<sp/><sp/>This<sp/>allows<sp/>a<sp/>user<sp/>to<sp/>set<sp/>the<sp/>latter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>code<sp/>(perhaps<sp/>in<sp/>order<sp/>to<sp/>use<sp/>Google<sp/>Test<sp/>assertions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>another<sp/>testing<sp/>framework)<sp/>and<sp/>specify<sp/>the<sp/>former<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>command<sp/>line<sp/>for<sp/>debugging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(break_on_failure))<sp/>{</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>DebugBreak<sp/>on<sp/>Windows<sp/>allows<sp/>gtest<sp/>to<sp/>still<sp/>break<sp/>into<sp/>a<sp/>debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>a<sp/>failure<sp/>happens<sp/>and<sp/>both<sp/>the<sp/>--gtest_break_on_failure<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>--gtest_catch_exceptions<sp/>flags<sp/>are<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DebugBreak();</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dereference<sp/>NULL<sp/>through<sp/>a<sp/>volatile<sp/>pointer<sp/>to<sp/>prevent<sp/>the<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>removing.<sp/>We<sp/>use<sp/>this<sp/>rather<sp/>than<sp/>abort()<sp/>or<sp/>__builtin_trap()<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>portability:<sp/>Symbian<sp/>doesn&apos;t<sp/>implement<sp/>abort()<sp/>well,<sp/>and<sp/>some<sp/>debuggers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>correctly<sp/>trap<sp/>abort().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">volatile<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(NULL)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(throw_on_failure))<sp/>{</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>internal::GoogleTestFailureException(result);</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>call<sp/>abort()<sp/>as<sp/>it<sp/>generates<sp/>a<sp/>pop-up<sp/>in<sp/>debug<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>cannot<sp/>be<sp/>suppressed<sp/>in<sp/>VC<sp/>7.1<sp/>or<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"></highlight></codeline>
<codeline lineno="5325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>TestProperty<sp/>to<sp/>the<sp/>current<sp/>TestResult<sp/>object<sp/>when<sp/>invoked<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inside<sp/>a<sp/>test,<sp/>to<sp/>current<sp/>TestCase&apos;s<sp/>ad_hoc_test_result_<sp/>when<sp/>invoked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>SetUpTestCase<sp/>or<sp/>TearDownTestCase,<sp/>or<sp/>to<sp/>the<sp/>global<sp/>property<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>invoked<sp/>elsewhere.<sp/><sp/>If<sp/>the<sp/>result<sp/>already<sp/>contains<sp/>a<sp/>property<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>key,<sp/>the<sp/>value<sp/>will<sp/>be<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5330"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTest::RecordProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key,</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/>impl_-&gt;RecordProperty(TestProperty(key,<sp/>value));</highlight></codeline>
<codeline lineno="5333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"></highlight></codeline>
<codeline lineno="5335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>UnitTest<sp/>object<sp/>and<sp/>prints<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>0<sp/>if<sp/>successful,<sp/>or<sp/>1<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5337"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>protect<sp/>this<sp/>under<sp/>mutex_,<sp/>as<sp/>we<sp/>only<sp/>support<sp/>calling<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5340"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest::Run()<sp/>{</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_death_test_child_process<sp/>=</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::GTEST_FLAG(internal_run_death_test).length()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"></highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>implements<sp/>this<sp/>protocol<sp/>for<sp/>catching<sp/>that<sp/>a<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>exits<sp/>before<sp/>returning<sp/>control<sp/>to<sp/>Google<sp/>Test:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>Upon<sp/>start,<sp/>Google<sp/>Test<sp/>creates<sp/>a<sp/>file<sp/>whose<sp/>absolute<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>specified<sp/>by<sp/>the<sp/>environment<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TEST_PREMATURE_EXIT_FILE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>When<sp/>Google<sp/>Test<sp/>has<sp/>finished<sp/>its<sp/>work,<sp/>it<sp/>deletes<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>allows<sp/>a<sp/>test<sp/>runner<sp/>to<sp/>set<sp/>TEST_PREMATURE_EXIT_FILE<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>running<sp/>a<sp/>Google-Test-based<sp/>test<sp/>program<sp/>and<sp/>check<sp/>the<sp/>existence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>file<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>test<sp/>execution<sp/>to<sp/>see<sp/>if<sp/>it<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exited<sp/>prematurely.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5356"><highlight class="normal"></highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>in<sp/>the<sp/>child<sp/>process<sp/>of<sp/>a<sp/>death<sp/>test,<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create/delete<sp/>the<sp/>premature<sp/>exit<sp/>file,<sp/>as<sp/>doing<sp/>so<sp/>is<sp/>unnecessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>will<sp/>confuse<sp/>the<sp/>parent<sp/>process.<sp/><sp/>Otherwise,<sp/>create/delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>file<sp/>upon<sp/>entering/leaving<sp/>this<sp/>function.<sp/><sp/>If<sp/>the<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>somehow<sp/>exits<sp/>before<sp/>this<sp/>function<sp/>has<sp/>a<sp/>chance<sp/>to<sp/>return,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>premature-exit<sp/>file<sp/>will<sp/>be<sp/>left<sp/>undeleted,<sp/>causing<sp/>a<sp/>test<sp/>runner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>understands<sp/>the<sp/>premature-exit-file<sp/>protocol<sp/>to<sp/>report<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>as<sp/>having<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::ScopedPrematureExitFile<sp/>premature_exit_file(</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in_death_test_child_process<sp/>?</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/>:<sp/>internal::posix::GetEnv(</highlight><highlight class="stringliteral">&quot;TEST_PREMATURE_EXIT_FILE&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"></highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Captures<sp/>the<sp/>value<sp/>of<sp/>GTEST_FLAG(catch_exceptions).<sp/><sp/>This<sp/>value<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>for<sp/>the<sp/>duration<sp/>of<sp/>the<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/>impl()-&gt;set_catch_exceptions(GTEST_FLAG(catch_exceptions));</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"></highlight></codeline>
<codeline lineno="5373"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Either<sp/>the<sp/>user<sp/>wants<sp/>Google<sp/>Test<sp/>to<sp/>catch<sp/>exceptions<sp/>thrown<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tests<sp/>or<sp/>this<sp/>is<sp/>executing<sp/>in<sp/>the<sp/>context<sp/>of<sp/>death<sp/>test<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>process.<sp/>In<sp/>either<sp/>case<sp/>the<sp/>user<sp/>does<sp/>not<sp/>want<sp/>to<sp/>see<sp/>pop-up<sp/>dialogs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>about<sp/>crashes<sp/>-<sp/>they<sp/>are<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(impl()-&gt;catch_exceptions()<sp/>||<sp/>in_death_test_child_process)<sp/>{</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetErrorMode<sp/>doesn&apos;t<sp/>exist<sp/>on<sp/>CE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/>SetErrorMode(SEM_FAILCRITICALERRORS<sp/>|<sp/>SEM_NOALIGNMENTFAULTEXCEPT<sp/>|</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEM_NOGPFAULTERRORBOX<sp/>|<sp/>SEM_NOOPENFILEERRORBOX);</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5384"><highlight class="normal"></highlight></codeline>
<codeline lineno="5385"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>(defined(_MSC_VER)<sp/>||<sp/>GTEST_OS_WINDOWS_MINGW)<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Death<sp/>test<sp/>children<sp/>can<sp/>be<sp/>terminated<sp/>with<sp/>_abort().<sp/><sp/>On<sp/>Windows,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_abort()<sp/>can<sp/>show<sp/>a<sp/>dialog<sp/>with<sp/>a<sp/>warning<sp/>message.<sp/><sp/>This<sp/>forces<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>abort<sp/>message<sp/>to<sp/>go<sp/>to<sp/>stderr<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/>_set_error_mode(_OUT_TO_STDERR);</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5391"><highlight class="normal"></highlight></codeline>
<codeline lineno="5392"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>_MSC_VER<sp/>&gt;=<sp/>1400<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>debug<sp/>version,<sp/>Visual<sp/>Studio<sp/>pops<sp/>up<sp/>a<sp/>separate<sp/>dialog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>offering<sp/>a<sp/>choice<sp/>to<sp/>debug<sp/>the<sp/>aborted<sp/>program.<sp/>We<sp/>need<sp/>to<sp/>suppress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>dialog<sp/>or<sp/>it<sp/>will<sp/>pop<sp/>up<sp/>for<sp/>every<sp/>EXPECT/ASSERT_DEATH<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>executed.<sp/>Google<sp/>Test<sp/>will<sp/>notify<sp/>the<sp/>user<sp/>of<sp/>any<sp/>unexpected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>failure<sp/>via<sp/>stderr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>VC++<sp/>doesn&apos;t<sp/>define<sp/>_set_abort_behavior()<sp/>prior<sp/>to<sp/>the<sp/>version<sp/>8.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Users<sp/>of<sp/>prior<sp/>VC<sp/>versions<sp/>shall<sp/>suffer<sp/>the<sp/>agony<sp/>and<sp/>pain<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clicking<sp/>through<sp/>the<sp/>countless<sp/>debug<sp/>dialogs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vladl@google.com):<sp/>find<sp/>a<sp/>way<sp/>to<sp/>suppress<sp/>the<sp/>abort<sp/>dialog()<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug<sp/>mode<sp/>when<sp/>compiled<sp/>with<sp/>VC<sp/>7.1<sp/>or<sp/>lower.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GTEST_FLAG(break_on_failure))</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_set_abort_behavior(</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>following<sp/>flags:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_WRITE_ABORT_MSG<sp/>|<sp/>_CALL_REPORTFAULT);<sp/><sp/></highlight><highlight class="comment">//<sp/>pop-up<sp/>window,<sp/>core<sp/>dump.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5408"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5411"><highlight class="normal"></highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::HandleExceptionsInMethodIfSupported(</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impl(),</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;internal::UnitTestImpl::RunAllTests,</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;auxiliary<sp/>test<sp/>code<sp/>(environments<sp/>or<sp/>event<sp/>listeners)&quot;</highlight><highlight class="normal">)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="5416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"></highlight></codeline>
<codeline lineno="5418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>working<sp/>directory<sp/>when<sp/>the<sp/>first<sp/>TEST()<sp/>or<sp/>TEST_F()<sp/>was</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>executed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5420"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>UnitTest::original_working_dir()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;original_working_dir_.c_str();</highlight></codeline>
<codeline lineno="5422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"></highlight></codeline>
<codeline lineno="5424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestCase<sp/>object<sp/>for<sp/>the<sp/>test<sp/>that&apos;s<sp/>currently<sp/>running,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>NULL<sp/>if<sp/>no<sp/>test<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5426"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/>UnitTest::current_test_case()<sp/>const</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/>internal::MutexLock<sp/>lock(&amp;mutex_);</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;current_test_case();</highlight></codeline>
<codeline lineno="5430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"></highlight></codeline>
<codeline lineno="5432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestInfo<sp/>object<sp/>for<sp/>the<sp/>test<sp/>that&apos;s<sp/>currently<sp/>running,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>NULL<sp/>if<sp/>no<sp/>test<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5434"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo*<sp/>UnitTest::current_test_info()<sp/>const</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/>internal::MutexLock<sp/>lock(&amp;mutex_);</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;current_test_info();</highlight></codeline>
<codeline lineno="5438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"></highlight></codeline>
<codeline lineno="5440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>random<sp/>seed<sp/>used<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>current<sp/>test<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5441"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest::random_seed()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;random_seed();<sp/>}</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"></highlight></codeline>
<codeline lineno="5443"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>ParameterizedTestCaseRegistry<sp/>object<sp/>used<sp/>to<sp/>keep<sp/>track<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value-parameterized<sp/>tests<sp/>and<sp/>instantiate<sp/>and<sp/>register<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5446"><highlight class="normal">internal::ParameterizedTestCaseRegistry&amp;</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/>UnitTest::parameterized_test_registry()</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;parameterized_test_registry();</highlight></codeline>
<codeline lineno="5450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5452"><highlight class="normal"></highlight></codeline>
<codeline lineno="5453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>empty<sp/>UnitTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5454"><highlight class="normal">UnitTest::UnitTest()<sp/>{</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/>impl_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>internal::UnitTestImpl(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"></highlight></codeline>
<codeline lineno="5458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Destructor<sp/>of<sp/>UnitTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5459"><highlight class="normal">UnitTest::~UnitTest()<sp/>{</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>impl_;</highlight></codeline>
<codeline lineno="5461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"></highlight></codeline>
<codeline lineno="5463"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pushes<sp/>a<sp/>trace<sp/>defined<sp/>by<sp/>SCOPED_TRACE()<sp/>on<sp/>to<sp/>the<sp/>per-thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>trace<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5465"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTest::PushGTestTrace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::TraceInfo&amp;<sp/>trace)</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/>internal::MutexLock<sp/>lock(&amp;mutex_);</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/>impl_-&gt;gtest_trace_stack().push_back(trace);</highlight></codeline>
<codeline lineno="5469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"></highlight></codeline>
<codeline lineno="5471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pops<sp/>a<sp/>trace<sp/>from<sp/>the<sp/>per-thread<sp/>Google<sp/>Test<sp/>trace<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5472"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTest::PopGTestTrace()</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/>internal::MutexLock<sp/>lock(&amp;mutex_);</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/>impl_-&gt;gtest_trace_stack().pop_back();</highlight></codeline>
<codeline lineno="5476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"></highlight></codeline>
<codeline lineno="5478"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"></highlight></codeline>
<codeline lineno="5480"><highlight class="normal">UnitTestImpl::UnitTestImpl(UnitTest*<sp/>parent)</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>parent_(parent),</highlight></codeline>
<codeline lineno="5482"><highlight class="normal">#ifdef<sp/>_MSC_VER</highlight></codeline>
<codeline lineno="5483"><highlight class="normal">#<sp/>pragma<sp/>warning(push)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Saves<sp/>the<sp/>current<sp/>warning<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5484"><highlight class="normal">#<sp/>pragma<sp/>warning(disable:4355)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Temporarily<sp/>disables<sp/>warning<sp/>4355</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(using<sp/>this<sp/>in<sp/>initializer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_global_test_part_result_reporter_(this),</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_per_thread_test_part_result_reporter_(this),</highlight></codeline>
<codeline lineno="5488"><highlight class="normal">#<sp/>pragma<sp/>warning(pop)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>warning<sp/>state<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5489"><highlight class="normal">#else</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_global_test_part_result_reporter_(this),</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_per_thread_test_part_result_reporter_(this),</highlight></codeline>
<codeline lineno="5492"><highlight class="normal">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>global_test_part_result_repoter_(</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;default_global_test_part_result_reporter_),</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>per_thread_test_part_result_reporter_(</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;default_per_thread_test_part_result_reporter_),</highlight></codeline>
<codeline lineno="5497"><highlight class="normal">#if<sp/>GTEST_HAS_PARAM_TEST</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameterized_test_registry_(),</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameterized_tests_registered_(false),</highlight></codeline>
<codeline lineno="5500"><highlight class="normal">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_death_test_case_(-1),</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_test_case_(NULL),</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_test_info_(NULL),</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ad_hoc_test_result_(),</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os_stack_trace_getter_(NULL),</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>post_flag_parse_init_performed_(false),</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>random_seed_(0),<sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>be<sp/>overridden<sp/>by<sp/>the<sp/>flag<sp/>before<sp/>first<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>random_(0),<sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>be<sp/>reseeded<sp/>before<sp/>first<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start_timestamp_(0),</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elapsed_time_(0),</highlight></codeline>
<codeline lineno="5511"><highlight class="normal">#if<sp/>GTEST_HAS_DEATH_TEST</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>death_test_factory_(new<sp/>DefaultDeathTestFactory),</highlight></codeline>
<codeline lineno="5513"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>be<sp/>overridden<sp/>by<sp/>the<sp/>flag<sp/>before<sp/>first<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>catch_exceptions_(false)<sp/>{</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/>listeners()-&gt;SetDefaultResultPrinter(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>PrettyUnitTestResultPrinter);</highlight></codeline>
<codeline lineno="5517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"></highlight></codeline>
<codeline lineno="5519"><highlight class="normal">UnitTestImpl::~UnitTestImpl()<sp/>{</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deletes<sp/>every<sp/>TestCase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/>ForEach(test_cases_,<sp/>internal::Delete&lt;TestCase&gt;);</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"></highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deletes<sp/>every<sp/>Environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/>ForEach(environments_,<sp/>internal::Delete&lt;Environment&gt;);</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"></highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>os_stack_trace_getter_;</highlight></codeline>
<codeline lineno="5527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"></highlight></codeline>
<codeline lineno="5529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>TestProperty<sp/>to<sp/>the<sp/>current<sp/>TestResult<sp/>object<sp/>when<sp/>invoked<sp/>in<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>context<sp/>of<sp/>a<sp/>test,<sp/>to<sp/>current<sp/>test<sp/>case&apos;s<sp/>ad_hoc_test_result<sp/>when<sp/>invoke</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>SetUpTestCase/TearDownTestCase,<sp/>or<sp/>to<sp/>the<sp/>global<sp/>property<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise.<sp/><sp/>If<sp/>the<sp/>result<sp/>already<sp/>contains<sp/>a<sp/>property<sp/>with<sp/>the<sp/>same<sp/>key,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>value<sp/>will<sp/>be<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5534"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::RecordProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestProperty&amp;<sp/>test_property)<sp/>{</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/>std::string<sp/>xml_element;</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/>TestResult*<sp/>test_result;<sp/><sp/></highlight><highlight class="comment">//<sp/>TestResult<sp/>appropriate<sp/>for<sp/>property<sp/>recording.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5537"><highlight class="normal"></highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_test_info_<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/>xml_element<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/>test_result<sp/>=<sp/>&amp;(current_test_info_-&gt;result_);</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_test_case_<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/>xml_element<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testsuite&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/>test_result<sp/>=<sp/>&amp;(current_test_case_-&gt;ad_hoc_test_result_);</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/>xml_element<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testsuites&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/>test_result<sp/>=<sp/>&amp;ad_hoc_test_result_;</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/>test_result-&gt;RecordProperty(xml_element,<sp/>test_property);</highlight></codeline>
<codeline lineno="5549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"></highlight></codeline>
<codeline lineno="5551"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disables<sp/>event<sp/>forwarding<sp/>if<sp/>the<sp/>control<sp/>is<sp/>currently<sp/>in<sp/>a<sp/>death<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5553"><highlight class="normal"></highlight><highlight class="comment">//<sp/>subprocess.<sp/>Must<sp/>not<sp/>be<sp/>called<sp/>before<sp/>InitGoogleTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5554"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::SuppressTestEventsIfInSubprocess()<sp/>{</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internal_run_death_test_flag_.get()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/>listeners()-&gt;SuppressEventForwarding();</highlight></codeline>
<codeline lineno="5557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5559"><highlight class="normal"></highlight></codeline>
<codeline lineno="5560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initializes<sp/>event<sp/>listeners<sp/>performing<sp/>XML<sp/>output<sp/>as<sp/>specified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnitTestOptions.<sp/>Must<sp/>not<sp/>be<sp/>called<sp/>before<sp/>InitGoogleTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5562"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::ConfigureXmlOutput()<sp/>{</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>output_format<sp/>=<sp/>UnitTestOptions::GetOutputFormat();</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_format<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/>listeners()-&gt;SetDefaultXmlGenerator(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>XmlUnitTestResultPrinter(</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_format<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>unrecognized<sp/>output<sp/>format<sp/>\&quot;%s\&quot;<sp/>ignored.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_format.c_str());</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"></highlight></codeline>
<codeline lineno="5574"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initializes<sp/>event<sp/>listeners<sp/>for<sp/>streaming<sp/>test<sp/>results<sp/>in<sp/>string<sp/>form.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Must<sp/>not<sp/>be<sp/>called<sp/>before<sp/>InitGoogleTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5577"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::ConfigureStreamingOutput()<sp/>{</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>target<sp/>=<sp/>GTEST_FLAG(stream_result_to);</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!target.empty())<sp/>{</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>target.find(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>listeners()-&gt;Append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>StreamingListener(target.substr(0,<sp/>pos),</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target.substr(pos+1)));</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>unrecognized<sp/>streaming<sp/>target<sp/>\&quot;%s\&quot;<sp/>ignored.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target.c_str());</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5592"><highlight class="normal"></highlight></codeline>
<codeline lineno="5593"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Performs<sp/>initialization<sp/>dependent<sp/>upon<sp/>flag<sp/>values<sp/>obtained<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ParseGoogleTestFlagsOnly.<sp/><sp/>Is<sp/>called<sp/>from<sp/>InitGoogleTest<sp/>after<sp/>the<sp/>call<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ParseGoogleTestFlagsOnly.<sp/><sp/>In<sp/>case<sp/>a<sp/>user<sp/>neglects<sp/>to<sp/>call<sp/>InitGoogleTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5596"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>function<sp/>is<sp/>also<sp/>called<sp/>from<sp/>RunAllTests.<sp/><sp/>Since<sp/>this<sp/>function<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5597"><highlight class="normal"></highlight><highlight class="comment">//<sp/>called<sp/>more<sp/>than<sp/>once,<sp/>it<sp/>has<sp/>to<sp/>be<sp/>idempotent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5598"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::PostFlagParsingInit()<sp/>{</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensures<sp/>that<sp/>this<sp/>function<sp/>does<sp/>not<sp/>execute<sp/>more<sp/>than<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!post_flag_parse_init_performed_)<sp/>{</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/>post_flag_parse_init_performed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"></highlight></codeline>
<codeline lineno="5603"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/>InitDeathTestSubprocessControlInfo();</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/>SuppressTestEventsIfInSubprocess();</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5607"><highlight class="normal"></highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Registers<sp/>parameterized<sp/>tests.<sp/>This<sp/>makes<sp/>parameterized<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>available<sp/>to<sp/>the<sp/>UnitTest<sp/>reflection<sp/>API<sp/>without<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RUN_ALL_TESTS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/>RegisterParameterizedTests();</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"></highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configures<sp/>listeners<sp/>for<sp/>XML<sp/>output.<sp/>This<sp/>makes<sp/>it<sp/>possible<sp/>for<sp/>users</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>shut<sp/>down<sp/>the<sp/>default<sp/>XML<sp/>output<sp/>before<sp/>invoking<sp/>RUN_ALL_TESTS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/>ConfigureXmlOutput();</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"></highlight></codeline>
<codeline lineno="5617"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configures<sp/>listeners<sp/>for<sp/>streaming<sp/>test<sp/>results<sp/>to<sp/>the<sp/>specified<sp/>server.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/>ConfigureStreamingOutput();</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"></highlight></codeline>
<codeline lineno="5624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>predicate<sp/>that<sp/>checks<sp/>the<sp/>name<sp/>of<sp/>a<sp/>TestCase<sp/>against<sp/>a<sp/>known</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5626"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5627"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>for<sp/>implementation<sp/>of<sp/>the<sp/>UnitTest<sp/>class<sp/>only.<sp/><sp/>We<sp/>put</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>in<sp/>the<sp/>anonymous<sp/>namespace<sp/>to<sp/>prevent<sp/>polluting<sp/>the<sp/>outer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5630"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestCaseNameIs<sp/>is<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5632" refid="classtesting_1_1internal_1_1_test_case_name_is" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_test_case_name_is" kindref="compound">TestCaseNameIs</ref><sp/>{</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_test_case_name_is" kindref="compound">TestCaseNameIs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>name_(name)<sp/>{}</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"></highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>name<sp/>of<sp/>test_case<sp/>matches<sp/>name_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>test_case)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_case<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(test_case-&gt;name(),<sp/>name_.c_str())<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"></highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/>std::string<sp/>name_;</highlight></codeline>
<codeline lineno="5645"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"></highlight></codeline>
<codeline lineno="5647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finds<sp/>and<sp/>returns<sp/>a<sp/>TestCase<sp/>with<sp/>the<sp/>given<sp/>name.<sp/><sp/>If<sp/>one<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exist,<sp/>creates<sp/>one<sp/>and<sp/>returns<sp/>it.<sp/><sp/>It&apos;s<sp/>the<sp/>CALLER&apos;S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5649"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RESPONSIBILITY<sp/>to<sp/>ensure<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>called<sp/>WHEN<sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TESTS<sp/>ARE<sp/>NOT<sp/>SHUFFLED.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5651"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5653"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5654"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>test_case_name:<sp/>name<sp/>of<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5655"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>type_param:<sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>the<sp/>test<sp/>case&apos;s<sp/>type<sp/>parameter,<sp/>or<sp/>NULL<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5656"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>not<sp/>a<sp/>typed<sp/>or<sp/>a<sp/>type-parameterized<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5657"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>set_up_tc:<sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>sets<sp/>up<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5658"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>tear_down_tc:<sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>tears<sp/>down<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>UnitTestImpl::GetTestCase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type_param,</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test::SetUpTestCaseFunc<sp/>set_up_tc,</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test::TearDownTestCaseFunc<sp/>tear_down_tc)<sp/>{</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>we<sp/>find<sp/>a<sp/>TestCase<sp/>with<sp/>the<sp/>given<sp/>name?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TestCase*&gt;::const_iterator<sp/>test_case<sp/>=</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::find_if(test_cases_.begin(),<sp/>test_cases_.end(),</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_test_case_name_is" kindref="compound">TestCaseNameIs</ref>(test_case_name));</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"></highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_case<sp/>!=<sp/>test_cases_.end())</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*test_case;</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"></highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No.<sp/><sp/>Let&apos;s<sp/>create<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>new_test_case<sp/>=</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref>(test_case_name,<sp/>type_param,<sp/>set_up_tc,<sp/>tear_down_tc);</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"></highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>a<sp/>death<sp/>test<sp/>case?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internal::UnitTestOptions::MatchesFilter(test_case_name,</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kDeathTestCaseFilter))<sp/>{</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Yes.<sp/><sp/>Inserts<sp/>the<sp/>test<sp/>case<sp/>after<sp/>the<sp/>last<sp/>death<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>defined<sp/>so<sp/>far.<sp/><sp/>This<sp/>only<sp/>works<sp/>when<sp/>the<sp/>test<sp/>cases<sp/>haven&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>been<sp/>shuffled.<sp/><sp/>Otherwise<sp/>we<sp/>may<sp/>end<sp/>up<sp/>running<sp/>a<sp/>death<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>a<sp/>non-death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/>++last_death_test_case_;</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><sp/><sp/>test_cases_.insert(test_cases_.begin()<sp/>+<sp/>last_death_test_case_,</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_test_case);</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No.<sp/><sp/>Appends<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/>test_cases_.push_back(new_test_case);</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"></highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/>test_case_indices_.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test_case_indices_.size()));</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_test_case;</highlight></codeline>
<codeline lineno="5692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"></highlight></codeline>
<codeline lineno="5694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helpers<sp/>for<sp/>setting<sp/>up<sp/>/<sp/>tearing<sp/>down<sp/>the<sp/>given<sp/>environment.<sp/><sp/>They</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>for<sp/>use<sp/>in<sp/>the<sp/>ForEach()<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5696"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpEnvironment(Environment*<sp/>env)<sp/>{<sp/>env-&gt;SetUp();<sp/>}</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownEnvironment(Environment*<sp/>env)<sp/>{<sp/>env-&gt;TearDown();<sp/>}</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"></highlight></codeline>
<codeline lineno="5699"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>UnitTest<sp/>object,<sp/>prints<sp/>the<sp/>result,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>true<sp/>if<sp/>all<sp/>tests<sp/>are<sp/>successful.<sp/><sp/>If<sp/>any<sp/>exception<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thrown<sp/>during<sp/>a<sp/>test,<sp/>the<sp/>test<sp/>is<sp/>considered<sp/>to<sp/>be<sp/>failed,<sp/>but<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rest<sp/>of<sp/>the<sp/>tests<sp/>will<sp/>still<sp/>be<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5703"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>parameterized<sp/>tests<sp/>are<sp/>enabled,<sp/>it<sp/>expands<sp/>and<sp/>registers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameterized<sp/>tests<sp/>first<sp/>in<sp/>RegisterParameterizedTests().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>other<sp/>functions<sp/>called<sp/>from<sp/>RunAllTests()<sp/>may<sp/>safely<sp/>assume<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5707"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameterized<sp/>tests<sp/>are<sp/>ready<sp/>to<sp/>be<sp/>counted<sp/>and<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5708"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UnitTestImpl::RunAllTests()<sp/>{</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>InitGoogleTest()<sp/>was<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GTestIsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nThis<sp/>test<sp/>program<sp/>did<sp/>NOT<sp/>call<sp/>::testing::InitGoogleTest<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;before<sp/>calling<sp/>RUN_ALL_TESTS().<sp/><sp/>Please<sp/>fix<sp/>it.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"></highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>run<sp/>any<sp/>test<sp/>if<sp/>the<sp/>--help<sp/>flag<sp/>was<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_help_flag)</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5720"><highlight class="normal"></highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeats<sp/>the<sp/>call<sp/>to<sp/>the<sp/>post-flag<sp/>parsing<sp/>initialization<sp/>in<sp/>case<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>user<sp/>didn&apos;t<sp/>call<sp/>InitGoogleTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/>PostFlagParsingInit();</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"></highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>if<sp/>sharding<sp/>is<sp/>not<sp/>on,<sp/>test<sp/>runners<sp/>may<sp/>want<sp/>to<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_SHARD_STATUS_FILE<sp/>to<sp/>query<sp/>whether<sp/>the<sp/>test<sp/>supports<sp/>the<sp/>sharding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>protocol.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/>internal::WriteToShardStatusFileIfNeeded();</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"></highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>iff<sp/>we<sp/>are<sp/>in<sp/>a<sp/>subprocess<sp/>for<sp/>running<sp/>a<sp/>thread-safe-style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_subprocess_for_death_test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"></highlight></codeline>
<codeline lineno="5734"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/>in_subprocess_for_death_test<sp/>=<sp/>(internal_run_death_test_flag_.get()<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5737"><highlight class="normal"></highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_shard<sp/>=<sp/>ShouldShard(kTestTotalShards,<sp/>kTestShardIndex,</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_subprocess_for_death_test);</highlight></codeline>
<codeline lineno="5740"><highlight class="normal"></highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>the<sp/>full<sp/>test<sp/>names<sp/>with<sp/>the<sp/>filter<sp/>to<sp/>decide<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tests<sp/>to<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_tests_to_run<sp/>=<sp/>FilterTests(should_shard</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>HONOR_SHARDING_PROTOCOL</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>IGNORE_SHARDING_PROTOCOL)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"></highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Lists<sp/>the<sp/>tests<sp/>and<sp/>exits<sp/>if<sp/>the<sp/>--gtest_list_tests<sp/>flag<sp/>was<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(list_tests))<sp/>{</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>must<sp/>be<sp/>called<sp/>*after*<sp/>FilterTests()<sp/>has<sp/>been<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><sp/><sp/>ListTestsMatchingFilter();</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"></highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/>random_seed_<sp/>=<sp/>GTEST_FLAG(shuffle)<sp/>?</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetRandomSeedFromFlag(GTEST_FLAG(random_seed))<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"></highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>iff<sp/>at<sp/>least<sp/>one<sp/>test<sp/>has<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>failed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"></highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/>TestEventListener*<sp/>repeater<sp/>=<sp/>listeners()-&gt;repeater();</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"></highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/>start_timestamp_<sp/>=<sp/>GetTimeInMillis();</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/>repeater-&gt;OnTestProgramStart(*parent_);</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"></highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>many<sp/>times<sp/>to<sp/>repeat<sp/>the<sp/>tests?<sp/><sp/>We<sp/>don&apos;t<sp/>want<sp/>to<sp/>repeat<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>we<sp/>are<sp/>inside<sp/>the<sp/>subprocess<sp/>of<sp/>a<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repeat<sp/>=<sp/>in_subprocess_for_death_test<sp/>?<sp/>1<sp/>:<sp/>GTEST_FLAG(repeat);</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeats<sp/>forever<sp/>if<sp/>the<sp/>repeat<sp/>count<sp/>is<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forever<sp/>=<sp/>repeat<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>forever<sp/>||<sp/>i<sp/>!=<sp/>repeat;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>preserve<sp/>failures<sp/>generated<sp/>by<sp/>ad-hoc<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assertions<sp/>executed<sp/>before<sp/>RUN_ALL_TESTS().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearNonAdHocTestResult();</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"></highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeInMillis<sp/>start<sp/>=<sp/>GetTimeInMillis();</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"></highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shuffles<sp/>test<sp/>cases<sp/>and<sp/>tests<sp/>if<sp/>requested.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_tests_to_run<sp/>&amp;&amp;<sp/>GTEST_FLAG(shuffle))<sp/>{</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>random()-&gt;Reseed(random_seed_);</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>be<sp/>done<sp/>before<sp/>calling<sp/>OnTestIterationStart(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>such<sp/>that<sp/>a<sp/>test<sp/>event<sp/>listener<sp/>can<sp/>see<sp/>the<sp/>actual<sp/>test<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ShuffleTests();</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"></highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>the<sp/>unit<sp/>test<sp/>event<sp/>listeners<sp/>that<sp/>the<sp/>tests<sp/>are<sp/>about<sp/>to<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/><sp/><sp/>repeater-&gt;OnTestIterationStart(*parent_,<sp/>i);</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"></highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>each<sp/>test<sp/>case<sp/>if<sp/>there<sp/>is<sp/>at<sp/>least<sp/>one<sp/>test<sp/>to<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_tests_to_run)<sp/>{</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>up<sp/>all<sp/>environments<sp/>beforehand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeater-&gt;OnEnvironmentsSetUpStart(*parent_);</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ForEach(environments_,<sp/>SetUpEnvironment);</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeater-&gt;OnEnvironmentsSetUpEnd(*parent_);</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"></highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>tests<sp/>only<sp/>if<sp/>there<sp/>was<sp/>no<sp/>fatal<sp/>failure<sp/>during<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set-up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Test::HasFatalFailure())<sp/>{</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_index<sp/>=<sp/>0;<sp/>test_index<sp/>&lt;<sp/>total_test_case_count();</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_index++)<sp/>{</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetMutableTestCase(test_index)-&gt;Run();</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"></highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tears<sp/>down<sp/>all<sp/>environments<sp/>in<sp/>reverse<sp/>order<sp/>afterwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeater-&gt;OnEnvironmentsTearDownStart(*parent_);</highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::for_each(environments_.rbegin(),<sp/>environments_.rend(),</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TearDownEnvironment);</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeater-&gt;OnEnvironmentsTearDownEnd(*parent_);</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"></highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/>elapsed_time_<sp/>=<sp/>GetTimeInMillis()<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"></highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>the<sp/>unit<sp/>test<sp/>event<sp/>listener<sp/>that<sp/>the<sp/>tests<sp/>have<sp/>just<sp/>finished.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/><sp/><sp/>repeater-&gt;OnTestIterationEnd(*parent_,<sp/>i);</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"></highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>result<sp/>and<sp/>clears<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Passed())<sp/>{</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"></highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>original<sp/>test<sp/>order<sp/>after<sp/>the<sp/>iteration.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>quickly<sp/>repro<sp/>a<sp/>failure<sp/>that<sp/>happens<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>N-th<sp/>iteration<sp/>without<sp/>repeating<sp/>the<sp/>first<sp/>(N<sp/>-<sp/>1)<sp/>iterations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>not<sp/>enclosed<sp/>in<sp/>&quot;if<sp/>(GTEST_FLAG(shuffle))<sp/>{<sp/>...<sp/>}&quot;,<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>the<sp/>user<sp/>somehow<sp/>changes<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>somewhere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(it&apos;s<sp/>always<sp/>safe<sp/>to<sp/>unshuffle<sp/>the<sp/>tests).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/><sp/><sp/>UnshuffleTests();</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"></highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(shuffle))<sp/>{</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Picks<sp/>a<sp/>new<sp/>random<sp/>seed<sp/>for<sp/>each<sp/>iteration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>random_seed_<sp/>=<sp/>GetNextRandomSeed(random_seed_);</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"></highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/>repeater-&gt;OnTestProgramEnd(*parent_);</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"></highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!failed;</highlight></codeline>
<codeline lineno="5839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"></highlight></codeline>
<codeline lineno="5841"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>the<sp/>GTEST_SHARD_STATUS_FILE<sp/>environment<sp/>variable,<sp/>and<sp/>creates<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>variable<sp/>is<sp/>present.<sp/>If<sp/>a<sp/>file<sp/>already<sp/>exists<sp/>at<sp/>this<sp/>location,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5843"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>will<sp/>write<sp/>over<sp/>it.<sp/>If<sp/>the<sp/>variable<sp/>is<sp/>present,<sp/>but<sp/>the<sp/>file<sp/>cannot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5844"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>created,<sp/>prints<sp/>an<sp/>error<sp/>and<sp/>exits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5845"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteToShardStatusFileIfNeeded()<sp/>{</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_shard_file<sp/>=<sp/>posix::GetEnv(kTestShardStatusFile);</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_shard_file<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>posix::FOpen(test_shard_file,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ColoredPrintf(COLOR_RED,</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>write<sp/>to<sp/>the<sp/>test<sp/>shard<sp/>status<sp/>file<sp/>\&quot;%s\&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;specified<sp/>by<sp/>the<sp/>%s<sp/>environment<sp/>variable.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_shard_file,<sp/>kTestShardStatusFile);</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"></highlight></codeline>
<codeline lineno="5861"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>whether<sp/>sharding<sp/>is<sp/>enabled<sp/>by<sp/>examining<sp/>the<sp/>relevant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5862"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment<sp/>variable<sp/>values.<sp/>If<sp/>the<sp/>variables<sp/>are<sp/>present,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5863"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>inconsistent<sp/>(i.e.,<sp/>shard_index<sp/>&gt;=<sp/>total_shards),<sp/>prints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>error<sp/>and<sp/>exits.<sp/>If<sp/>in_subprocess_for_death_test,<sp/>sharding<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>disabled<sp/>because<sp/>it<sp/>must<sp/>only<sp/>be<sp/>applied<sp/>to<sp/>the<sp/>original<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>process.<sp/>Otherwise,<sp/>we<sp/>could<sp/>filter<sp/>out<sp/>death<sp/>tests<sp/>we<sp/>intended<sp/>to<sp/>execute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5867"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShouldShard(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>total_shards_env,</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>shard_index_env,</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_subprocess_for_death_test)<sp/>{</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_subprocess_for_death_test)<sp/>{</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"></highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int32<sp/>total_shards<sp/>=<sp/>Int32FromEnvOrDie(total_shards_env,<sp/>-1);</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int32<sp/>shard_index<sp/>=<sp/>Int32FromEnvOrDie(shard_index_env,<sp/>-1);</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"></highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_shards<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>shard_index<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_shards<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>shard_index<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Message<sp/>msg<sp/>=<sp/>Message()</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>environment<sp/>variables:<sp/>you<sp/>have<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>kTestShardIndex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>shard_index</highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>have<sp/>left<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kTestTotalShards<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>unset.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/><sp/><sp/>ColoredPrintf(COLOR_RED,<sp/>msg.GetString().c_str());</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_shards<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>shard_index<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Message<sp/>msg<sp/>=<sp/>Message()</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>environment<sp/>variables:<sp/>you<sp/>have<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>kTestTotalShards<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>total_shards</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>have<sp/>left<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kTestShardIndex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>unset.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/>ColoredPrintf(COLOR_RED,<sp/>msg.GetString().c_str());</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shard_index<sp/>&lt;<sp/>0<sp/>||<sp/>shard_index<sp/>&gt;=<sp/>total_shards)<sp/>{</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Message<sp/>msg<sp/>=<sp/>Message()</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>environment<sp/>variables:<sp/>we<sp/>require<sp/>0<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>kTestShardIndex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kTestTotalShards</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>you<sp/>have<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kTestShardIndex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>shard_index</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kTestTotalShards<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>total_shards<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/>ColoredPrintf(COLOR_RED,<sp/>msg.GetString().c_str());</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"></highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_shards<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="5907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"></highlight></codeline>
<codeline lineno="5909"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>environment<sp/>variable<sp/>var<sp/>as<sp/>an<sp/>Int32.<sp/>If<sp/>it<sp/>is<sp/>unset,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5910"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>default_val.<sp/>If<sp/>it<sp/>is<sp/>not<sp/>an<sp/>Int32,<sp/>prints<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5911"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>aborts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5912"><highlight class="normal">Int32<sp/>Int32FromEnvOrDie(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>var,<sp/>Int32<sp/>default_val)<sp/>{</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str_val<sp/>=<sp/>posix::GetEnv(var);</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_val<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_val;</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"></highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/>Int32<sp/>result;</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ParseInt32(Message()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>value<sp/>of<sp/>environment<sp/>variable<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>var,</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_val,<sp/>&amp;result))<sp/>{</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"></highlight></codeline>
<codeline lineno="5926"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>the<sp/>total<sp/>number<sp/>of<sp/>shards,<sp/>the<sp/>shard<sp/>index,<sp/>and<sp/>the<sp/>test<sp/>id,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>should<sp/>be<sp/>run<sp/>on<sp/>this<sp/>shard.<sp/>The<sp/>test<sp/>id<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5928"><highlight class="normal"></highlight><highlight class="comment">//<sp/>some<sp/>arbitrary<sp/>but<sp/>unique<sp/>non-negative<sp/>integer<sp/>assigned<sp/>to<sp/>each<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5929"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method.<sp/>Assumes<sp/>that<sp/>0<sp/>&lt;=<sp/>shard_index<sp/>&lt;<sp/>total_shards.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5930"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShouldRunTestOnShard(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_shards,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shard_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_id)<sp/>{</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(test_id<sp/>%<sp/>total_shards)<sp/>==<sp/>shard_index;</highlight></codeline>
<codeline lineno="5932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"></highlight></codeline>
<codeline lineno="5934"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>the<sp/>name<sp/>of<sp/>each<sp/>test<sp/>with<sp/>the<sp/>user-specified<sp/>filter<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decide<sp/>whether<sp/>the<sp/>test<sp/>should<sp/>be<sp/>run,<sp/>then<sp/>records<sp/>the<sp/>result<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5936"><highlight class="normal"></highlight><highlight class="comment">//<sp/>each<sp/>TestCase<sp/>and<sp/>TestInfo<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5937"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>shard_tests<sp/>==<sp/>true,<sp/>further<sp/>filters<sp/>tests<sp/>based<sp/>on<sp/>sharding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5938"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variables<sp/>in<sp/>the<sp/>environment<sp/>-<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5939"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://code.google.com/p/googletest/wiki/GoogleTestAdvancedGuide.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5940"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5941"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestImpl::FilterTests(ReactionToSharding<sp/>shard_tests)<sp/>{</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int32<sp/>total_shards<sp/>=<sp/>shard_tests<sp/>==<sp/>HONOR_SHARDING_PROTOCOL<sp/>?</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int32FromEnvOrDie(kTestTotalShards,<sp/>-1)<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int32<sp/>shard_index<sp/>=<sp/>shard_tests<sp/>==<sp/>HONOR_SHARDING_PROTOCOL<sp/>?</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int32FromEnvOrDie(kTestShardIndex,<sp/>-1)<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"></highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>num_runnable_tests<sp/>are<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>that<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>across<sp/>all<sp/>shards<sp/>(i.e.,<sp/>match<sp/>filter<sp/>and<sp/>are<sp/>not<sp/>disabled).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>num_selected_tests<sp/>are<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>to<sp/>be<sp/>run<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>shard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_runnable_tests<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_selected_tests<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_cases_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/>TestCase*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_case<sp/>=<sp/>test_cases_[i];</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;test_case_name<sp/>=<sp/>test_case-&gt;name();</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/><sp/><sp/>test_case-&gt;set_should_run(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"></highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>test_case-&gt;test_info_list().size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=<sp/>test_case-&gt;test_info_list()[j];</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>test_name(test_info-&gt;name());</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>is<sp/>disabled<sp/>if<sp/>test<sp/>case<sp/>name<sp/>or<sp/>test<sp/>name<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kDisableTestFilter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_disabled<sp/>=</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::UnitTestOptions::MatchesFilter(test_case_name,</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kDisableTestFilter)<sp/>||</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::UnitTestOptions::MatchesFilter(test_name,</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kDisableTestFilter);</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_info-&gt;is_disabled_<sp/>=<sp/>is_disabled;</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"></highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matches_filter<sp/>=</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::UnitTestOptions::FilterMatchesTest(test_case_name,</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_name);</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_info-&gt;matches_filter_<sp/>=<sp/>matches_filter;</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"></highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_runnable<sp/>=</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GTEST_FLAG(also_run_disabled_tests)<sp/>||<sp/>!is_disabled)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matches_filter;</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"></highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_selected<sp/>=<sp/>is_runnable<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(shard_tests<sp/>==<sp/>IGNORE_SHARDING_PROTOCOL<sp/>||</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShouldRunTestOnShard(total_shards,<sp/>shard_index,</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_runnable_tests));</highlight></codeline>
<codeline lineno="5983"><highlight class="normal"></highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_runnable_tests<sp/>+=<sp/>is_runnable;</highlight></codeline>
<codeline lineno="5985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_selected_tests<sp/>+=<sp/>is_selected;</highlight></codeline>
<codeline lineno="5986"><highlight class="normal"></highlight></codeline>
<codeline lineno="5987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_info-&gt;should_run_<sp/>=<sp/>is_selected;</highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_case-&gt;set_should_run(test_case-&gt;should_run()<sp/>||<sp/>is_selected);</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_selected_tests;</highlight></codeline>
<codeline lineno="5992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"></highlight></codeline>
<codeline lineno="5994"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>C-string<sp/>on<sp/>a<sp/>single<sp/>line<sp/>by<sp/>replacing<sp/>all<sp/>&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>characters<sp/>with<sp/>string<sp/>&quot;\\n&quot;.<sp/><sp/>If<sp/>the<sp/>output<sp/>takes<sp/>more<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5996"><highlight class="normal"></highlight><highlight class="comment">//<sp/>max_length<sp/>characters,<sp/>only<sp/>prints<sp/>the<sp/>first<sp/>max_length<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5997"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>&quot;...&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5998"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintOnOneLine(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_length)<sp/>{</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>*str<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>++str)<sp/>{</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>max_length)<sp/>{</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>*str);</highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6015"><highlight class="normal"></highlight></codeline>
<codeline lineno="6016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>names<sp/>of<sp/>the<sp/>tests<sp/>matching<sp/>the<sp/>user-specified<sp/>filter<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6017"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::ListTestsMatchingFilter()<sp/>{</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>at<sp/>most<sp/>this<sp/>many<sp/>characters<sp/>for<sp/>each<sp/>type/value<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kMaxParamLength<sp/>=<sp/>250;</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"></highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_cases_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_case<sp/>=<sp/>test_cases_[i];</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>printed_test_case_name<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"></highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>test_case-&gt;test_info_list().size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_case-&gt;test_info_list()[j];</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_info-&gt;matches_filter_)<sp/>{</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printed_test_case_name)<sp/>{</highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printed_test_case_name<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s.&quot;</highlight><highlight class="normal">,<sp/>test_case-&gt;name());</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_case-&gt;type_param()<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>#<sp/>%s<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>kTypeParamLabel);</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>print<sp/>the<sp/>type<sp/>parameter<sp/>on<sp/>a<sp/>single<sp/>line<sp/>to<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>output<sp/>easy<sp/>to<sp/>parse<sp/>by<sp/>a<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOnOneLine(test_case-&gt;type_param(),<sp/>kMaxParamLength);</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;name());</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_info-&gt;value_param()<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>#<sp/>%s<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>kValueParamLabel);</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>print<sp/>the<sp/>value<sp/>parameter<sp/>on<sp/>a<sp/>single<sp/>line<sp/>to<sp/>make<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>easy<sp/>to<sp/>parse<sp/>by<sp/>a<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOnOneLine(test_info-&gt;value_param(),<sp/>kMaxParamLength);</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="6052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"></highlight></codeline>
<codeline lineno="6054"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>OS<sp/>stack<sp/>trace<sp/>getter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6055"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6056"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Does<sp/>nothing<sp/>if<sp/>the<sp/>input<sp/>and<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>getter<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6057"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same;<sp/>otherwise,<sp/>deletes<sp/>the<sp/>old<sp/>getter<sp/>and<sp/>makes<sp/>the<sp/>input<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6058"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>getter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6059"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::set_os_stack_trace_getter(</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"><sp/><sp/><sp/><sp/>OsStackTraceGetterInterface*<sp/>getter)<sp/>{</highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(os_stack_trace_getter_<sp/>!=<sp/>getter)<sp/>{</highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>os_stack_trace_getter_;</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"><sp/><sp/><sp/><sp/>os_stack_trace_getter_<sp/>=<sp/>getter;</highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"></highlight></codeline>
<codeline lineno="6067"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>getter<sp/>if<sp/>it<sp/>is<sp/>not<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6068"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise,<sp/>creates<sp/>an<sp/>OsStackTraceGetter,<sp/>makes<sp/>it<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6069"><highlight class="normal"></highlight><highlight class="comment">//<sp/>getter,<sp/>and<sp/>returns<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6070"><highlight class="normal">OsStackTraceGetterInterface*<sp/>UnitTestImpl::os_stack_trace_getter()<sp/>{</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(os_stack_trace_getter_<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="6072"><highlight class="normal"><sp/><sp/><sp/><sp/>os_stack_trace_getter_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>OsStackTraceGetter;</highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"></highlight></codeline>
<codeline lineno="6075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os_stack_trace_getter_;</highlight></codeline>
<codeline lineno="6076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6077"><highlight class="normal"></highlight></codeline>
<codeline lineno="6078"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestResult<sp/>for<sp/>the<sp/>test<sp/>that&apos;s<sp/>currently<sp/>running,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>TestResult<sp/>for<sp/>the<sp/>ad<sp/>hoc<sp/>test<sp/>if<sp/>no<sp/>test<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6080"><highlight class="normal">TestResult*<sp/>UnitTestImpl::current_test_result()<sp/>{</highlight></codeline>
<codeline lineno="6081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_test_info_<sp/>?</highlight></codeline>
<codeline lineno="6082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(current_test_info_-&gt;result_)<sp/>:<sp/>&amp;ad_hoc_test_result_;</highlight></codeline>
<codeline lineno="6083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"></highlight></codeline>
<codeline lineno="6085"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shuffles<sp/>all<sp/>test<sp/>cases,<sp/>and<sp/>the<sp/>tests<sp/>within<sp/>each<sp/>test<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>making<sp/>sure<sp/>that<sp/>death<sp/>tests<sp/>are<sp/>still<sp/>run<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6087"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::ShuffleTests()<sp/>{</highlight></codeline>
<codeline lineno="6088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shuffles<sp/>the<sp/>death<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6089"><highlight class="normal"><sp/><sp/>ShuffleRange(random(),<sp/>0,<sp/>last_death_test_case_<sp/>+<sp/>1,<sp/>&amp;test_case_indices_);</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"></highlight></codeline>
<codeline lineno="6091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shuffles<sp/>the<sp/>non-death<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6092"><highlight class="normal"><sp/><sp/>ShuffleRange(random(),<sp/>last_death_test_case_<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test_cases_.size()),<sp/>&amp;test_case_indices_);</highlight></codeline>
<codeline lineno="6094"><highlight class="normal"></highlight></codeline>
<codeline lineno="6095"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shuffles<sp/>the<sp/>tests<sp/>inside<sp/>each<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_cases_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6097"><highlight class="normal"><sp/><sp/><sp/><sp/>test_cases_[i]-&gt;ShuffleTests(random());</highlight></codeline>
<codeline lineno="6098"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6100"><highlight class="normal"></highlight></codeline>
<codeline lineno="6101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>test<sp/>cases<sp/>and<sp/>tests<sp/>to<sp/>their<sp/>order<sp/>before<sp/>the<sp/>first<sp/>shuffle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::UnshuffleTests()<sp/>{</highlight></codeline>
<codeline lineno="6103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_cases_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unshuffles<sp/>the<sp/>tests<sp/>in<sp/>each<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6105"><highlight class="normal"><sp/><sp/><sp/><sp/>test_cases_[i]-&gt;UnshuffleTests();</highlight></codeline>
<codeline lineno="6106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resets<sp/>the<sp/>index<sp/>of<sp/>each<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6107"><highlight class="normal"><sp/><sp/><sp/><sp/>test_case_indices_[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="6108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6110"><highlight class="normal"></highlight></codeline>
<codeline lineno="6111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>as<sp/>an<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6112"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>stack<sp/>frames<sp/>to<sp/>be<sp/>included<sp/>is<sp/>specified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>gtest_stack_trace_depth<sp/>flag.<sp/><sp/>The<sp/>skip_count<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>top<sp/>frames<sp/>to<sp/>be<sp/>skipped,<sp/>which<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>count<sp/>against<sp/>the<sp/>number<sp/>of<sp/>frames<sp/>to<sp/>be<sp/>included.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6117"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>if<sp/>Foo()<sp/>calls<sp/>Bar(),<sp/>which<sp/>in<sp/>turn<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GetCurrentOsStackTraceExceptTop(...,<sp/>1),<sp/>Foo()<sp/>will<sp/>be<sp/>included<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>trace<sp/>but<sp/>Bar()<sp/>and<sp/>GetCurrentOsStackTraceExceptTop()<sp/>won&apos;t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6121"><highlight class="normal">std::string<sp/>GetCurrentOsStackTraceExceptTop(UnitTest*<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_count)<sp/>{</highlight></codeline>
<codeline lineno="6123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>pass<sp/>skip_count<sp/>+<sp/>1<sp/>to<sp/>skip<sp/>this<sp/>wrapper<sp/>function<sp/>in<sp/>addition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>what<sp/>the<sp/>user<sp/>really<sp/>wants<sp/>to<sp/>skip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetUnitTestImpl()-&gt;CurrentOsStackTraceExceptTop(skip_count<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="6126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"></highlight></codeline>
<codeline lineno="6128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>by<sp/>the<sp/>GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_<sp/>macro<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>suppress<sp/>unreachable<sp/>code<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6130"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6131"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ClassUniqueToAlwaysTrue<sp/>{};</highlight></codeline>
<codeline lineno="6132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6133"><highlight class="normal"></highlight></codeline>
<codeline lineno="6134"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsTrue(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>condition)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>condition;<sp/>}</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"></highlight></codeline>
<codeline lineno="6136"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AlwaysTrue()<sp/>{</highlight></codeline>
<codeline lineno="6137"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>condition<sp/>is<sp/>always<sp/>false<sp/>so<sp/>AlwaysTrue()<sp/>never<sp/>actually<sp/>throws,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>it<sp/>makes<sp/>the<sp/>compiler<sp/>think<sp/>that<sp/>it<sp/>may<sp/>throw.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsTrue(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="6141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ClassUniqueToAlwaysTrue();</highlight></codeline>
<codeline lineno="6142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6145"><highlight class="normal"></highlight></codeline>
<codeline lineno="6146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>*pstr<sp/>starts<sp/>with<sp/>the<sp/>given<sp/>prefix,<sp/>modifies<sp/>*pstr<sp/>to<sp/>be<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>past<sp/>the<sp/>prefix<sp/>and<sp/>returns<sp/>true;<sp/>otherwise<sp/>leaves<sp/>*pstr<sp/>unchanged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>returns<sp/>false.<sp/><sp/>None<sp/>of<sp/>pstr,<sp/>*pstr,<sp/>and<sp/>prefix<sp/>can<sp/>be<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6149"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SkipPrefix(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>pstr)<sp/>{</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>prefix_len<sp/>=<sp/>strlen(prefix);</highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(*pstr,<sp/>prefix,<sp/>prefix_len)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/><sp/><sp/>*pstr<sp/>+=<sp/>prefix_len;</highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6157"><highlight class="normal"></highlight></codeline>
<codeline lineno="6158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>a<sp/>string<sp/>as<sp/>a<sp/>command<sp/>line<sp/>flag.<sp/><sp/>The<sp/>string<sp/>should<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>format<sp/>&quot;--flag=value&quot;.<sp/><sp/>When<sp/>def_optional<sp/>is<sp/>true,<sp/>the<sp/>&quot;=value&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>part<sp/>can<sp/>be<sp/>omitted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6161"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag,<sp/>or<sp/>NULL<sp/>if<sp/>the<sp/>parsing<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6163"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ParseFlagValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,</highlight></codeline>
<codeline lineno="6165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>def_optional)<sp/>{</highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>str<sp/>and<sp/>flag<sp/>must<sp/>not<sp/>be<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/>NULL<sp/>||<sp/>flag<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6168"><highlight class="normal"></highlight></codeline>
<codeline lineno="6169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>flag<sp/>must<sp/>start<sp/>with<sp/>&quot;--&quot;<sp/>followed<sp/>by<sp/>GTEST_FLAG_PREFIX_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>flag_str<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>+<sp/>GTEST_FLAG_PREFIX_<sp/>+<sp/>flag;</highlight></codeline>
<codeline lineno="6171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>flag_len<sp/>=<sp/>flag_str.length();</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(str,<sp/>flag_str.c_str(),<sp/>flag_len)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6173"><highlight class="normal"></highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Skips<sp/>the<sp/>flag<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag_end<sp/>=<sp/>str<sp/>+<sp/>flag_len;</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"></highlight></codeline>
<codeline lineno="6177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>def_optional<sp/>is<sp/>true,<sp/>it&apos;s<sp/>OK<sp/>to<sp/>not<sp/>have<sp/>a<sp/>&quot;=value&quot;<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def_optional<sp/>&amp;&amp;<sp/>(flag_end[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="6179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flag_end;</highlight></codeline>
<codeline lineno="6180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6181"><highlight class="normal"></highlight></codeline>
<codeline lineno="6182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>def_optional<sp/>is<sp/>true<sp/>and<sp/>there<sp/>are<sp/>more<sp/>characters<sp/>after<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>flag<sp/>name,<sp/>or<sp/>if<sp/>def_optional<sp/>is<sp/>false,<sp/>there<sp/>must<sp/>be<sp/>a<sp/>&apos;=&apos;<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>flag<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag_end[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6186"><highlight class="normal"></highlight></codeline>
<codeline lineno="6187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>string<sp/>after<sp/>&quot;=&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flag_end<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="6189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6190"><highlight class="normal"></highlight></codeline>
<codeline lineno="6191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>a<sp/>string<sp/>for<sp/>a<sp/>bool<sp/>flag,<sp/>in<sp/>the<sp/>form<sp/>of<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;--flag=value&quot;<sp/>or<sp/>&quot;--flag&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6193"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>former<sp/>case,<sp/>the<sp/>value<sp/>is<sp/>taken<sp/>as<sp/>true<sp/>as<sp/>long<sp/>as<sp/>it<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>start<sp/>with<sp/>&apos;0&apos;,<sp/>&apos;f&apos;,<sp/>or<sp/>&apos;F&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6196"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>latter<sp/>case,<sp/>the<sp/>value<sp/>is<sp/>taken<sp/>as<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6198"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>success,<sp/>stores<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>in<sp/>*value,<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>true.<sp/><sp/>On<sp/>failure,<sp/>returns<sp/>false<sp/>without<sp/>changing<sp/>*value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6201"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ParseBoolFlag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>as<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_str<sp/>=<sp/>ParseFlagValue(str,<sp/>flag,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"></highlight></codeline>
<codeline lineno="6205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aborts<sp/>if<sp/>the<sp/>parsing<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_str<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6207"><highlight class="normal"></highlight></codeline>
<codeline lineno="6208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>string<sp/>value<sp/>to<sp/>a<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6209"><highlight class="normal"><sp/><sp/>*value<sp/>=<sp/>!(*value_str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>*value_str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>||<sp/>*value_str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6212"><highlight class="normal"></highlight></codeline>
<codeline lineno="6213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>a<sp/>string<sp/>for<sp/>an<sp/>Int32<sp/>flag,<sp/>in<sp/>the<sp/>form<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;--flag=value&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6215"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>success,<sp/>stores<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>in<sp/>*value,<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>true.<sp/><sp/>On<sp/>failure,<sp/>returns<sp/>false<sp/>without<sp/>changing<sp/>*value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6218"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ParseInt32Flag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,<sp/>Int32*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>as<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_str<sp/>=<sp/>ParseFlagValue(str,<sp/>flag,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6221"><highlight class="normal"></highlight></codeline>
<codeline lineno="6222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aborts<sp/>if<sp/>the<sp/>parsing<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_str<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6224"><highlight class="normal"></highlight></codeline>
<codeline lineno="6225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>*value<sp/>to<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParseInt32(Message()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>value<sp/>of<sp/>flag<sp/>--&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flag,</highlight></codeline>
<codeline lineno="6227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_str,<sp/>value);</highlight></codeline>
<codeline lineno="6228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6229"><highlight class="normal"></highlight></codeline>
<codeline lineno="6230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>a<sp/>string<sp/>for<sp/>a<sp/>string<sp/>flag,<sp/>in<sp/>the<sp/>form<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;--flag=value&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6232"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>success,<sp/>stores<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>in<sp/>*value,<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>true.<sp/><sp/>On<sp/>failure,<sp/>returns<sp/>false<sp/>without<sp/>changing<sp/>*value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6235"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ParseStringFlag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,<sp/>std::string*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>as<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_str<sp/>=<sp/>ParseFlagValue(str,<sp/>flag,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6238"><highlight class="normal"></highlight></codeline>
<codeline lineno="6239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aborts<sp/>if<sp/>the<sp/>parsing<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_str<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6241"><highlight class="normal"></highlight></codeline>
<codeline lineno="6242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>*value<sp/>to<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6243"><highlight class="normal"><sp/><sp/>*value<sp/>=<sp/>value_str;</highlight></codeline>
<codeline lineno="6244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6246"><highlight class="normal"></highlight></codeline>
<codeline lineno="6247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>whether<sp/>a<sp/>string<sp/>has<sp/>a<sp/>prefix<sp/>that<sp/>Google<sp/>Test<sp/>uses<sp/>for<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>flags,<sp/>i.e.,<sp/>starts<sp/>with<sp/>GTEST_FLAG_PREFIX_<sp/>or<sp/>GTEST_FLAG_PREFIX_DASH_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>Google<sp/>Test<sp/>detects<sp/>that<sp/>a<sp/>command<sp/>line<sp/>flag<sp/>has<sp/>its<sp/>prefix<sp/>but<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recognized,<sp/>it<sp/>will<sp/>print<sp/>its<sp/>help<sp/>message.<sp/>Flags<sp/>starting<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_INTERNAL_PREFIX_<sp/>followed<sp/>by<sp/>&quot;internal_&quot;<sp/>are<sp/>considered<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>internal<sp/>flags<sp/>and<sp/>do<sp/>not<sp/>trigger<sp/>the<sp/>help<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6253"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasGoogleTestFlagPrefix(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(SkipPrefix(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">,<sp/>&amp;str)<sp/>||</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SkipPrefix(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>&amp;str)<sp/>||</highlight></codeline>
<codeline lineno="6256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SkipPrefix(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>&amp;str))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!SkipPrefix(GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;internal_&quot;</highlight><highlight class="normal">,<sp/>&amp;str)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SkipPrefix(GTEST_FLAG_PREFIX_,<sp/>&amp;str)<sp/>||</highlight></codeline>
<codeline lineno="6259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SkipPrefix(GTEST_FLAG_PREFIX_DASH_,<sp/>&amp;str));</highlight></codeline>
<codeline lineno="6260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6261"><highlight class="normal"></highlight></codeline>
<codeline lineno="6262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>string<sp/>containing<sp/>code-encoded<sp/>text.<sp/><sp/>The<sp/>following<sp/>escape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sequences<sp/>can<sp/>be<sp/>used<sp/>in<sp/>the<sp/>string<sp/>to<sp/>control<sp/>the<sp/>text<sp/>color:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6264"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6265"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>@@<sp/><sp/><sp/><sp/>prints<sp/>a<sp/>single<sp/>&apos;@&apos;<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6266"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>@R<sp/><sp/><sp/><sp/>changes<sp/>the<sp/>color<sp/>to<sp/>red.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6267"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>@G<sp/><sp/><sp/><sp/>changes<sp/>the<sp/>color<sp/>to<sp/>green.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6268"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>@Y<sp/><sp/><sp/><sp/>changes<sp/>the<sp/>color<sp/>to<sp/>yellow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6269"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>@D<sp/><sp/><sp/><sp/>changes<sp/>to<sp/>the<sp/>default<sp/>terminal<sp/>text<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6270"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(wan@google.com):<sp/>Write<sp/>tests<sp/>for<sp/>this<sp/>once<sp/>we<sp/>add<sp/>stdout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>capturing<sp/>to<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6273"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintColorEncoded(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="6274"><highlight class="normal"><sp/><sp/>GTestColor<sp/>color<sp/>=<sp/>COLOR_DEFAULT;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>current<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6275"><highlight class="normal"></highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Conceptually,<sp/>we<sp/>split<sp/>the<sp/>string<sp/>into<sp/>segments<sp/>divided<sp/>by<sp/>escape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sequences.<sp/><sp/>Then<sp/>we<sp/>print<sp/>one<sp/>segment<sp/>at<sp/>a<sp/>time.<sp/><sp/>At<sp/>the<sp/>end<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>iteration,<sp/>the<sp/>str<sp/>pointer<sp/>advances<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>segment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>strchr(str,<sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="6283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ColoredPrintf(color,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>str);</highlight></codeline>
<codeline lineno="6284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6286"><highlight class="normal"></highlight></codeline>
<codeline lineno="6287"><highlight class="normal"><sp/><sp/><sp/><sp/>ColoredPrintf(color,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>std::string(str,<sp/>p).c_str());</highlight></codeline>
<codeline lineno="6288"><highlight class="normal"></highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>p[1];</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>p<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ColoredPrintf(color,<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>COLOR_DEFAULT;</highlight></codeline>
<codeline lineno="6295"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>COLOR_RED;</highlight></codeline>
<codeline lineno="6297"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;G&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>COLOR_GREEN;</highlight></codeline>
<codeline lineno="6299"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;Y&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>COLOR_YELLOW;</highlight></codeline>
<codeline lineno="6301"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--str;</highlight></codeline>
<codeline lineno="6303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6306"><highlight class="normal"></highlight></codeline>
<codeline lineno="6307"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kColorEncodedHelpMessage[]<sp/>=</highlight></codeline>
<codeline lineno="6308"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;This<sp/>program<sp/>contains<sp/>tests<sp/>written<sp/>using<sp/>&quot;</highlight><highlight class="normal"><sp/>GTEST_NAME_<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>You<sp/>can<sp/>use<sp/>the\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6309"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;following<sp/>command<sp/>line<sp/>flags<sp/>to<sp/>control<sp/>its<sp/>behavior:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6310"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6311"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;Test<sp/>Selection:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6312"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;list_tests@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6313"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>List<sp/>the<sp/>names<sp/>of<sp/>all<sp/>tests<sp/>instead<sp/>of<sp/>running<sp/>them.<sp/>The<sp/>name<sp/>of\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6314"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>TEST(Foo,<sp/>Bar)<sp/>is<sp/>\&quot;Foo.Bar\&quot;.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6315"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;filter=@YPOSTIVE_PATTERNS&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[@G-@YNEGATIVE_PATTERNS]@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6317"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Run<sp/>only<sp/>the<sp/>tests<sp/>whose<sp/>name<sp/>matches<sp/>one<sp/>of<sp/>the<sp/>positive<sp/>patterns<sp/>but\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6318"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>none<sp/>of<sp/>the<sp/>negative<sp/>patterns.<sp/>&apos;?&apos;<sp/>matches<sp/>any<sp/>single<sp/>character;<sp/>&apos;*&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6319"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>matches<sp/>any<sp/>substring;<sp/>&apos;:&apos;<sp/>separates<sp/>two<sp/>patterns.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6320"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;also_run_disabled_tests@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6321"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Run<sp/>all<sp/>disabled<sp/>tests<sp/>too.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6322"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6323"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;Test<sp/>Execution:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6324"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;repeat=@Y[COUNT]@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6325"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Run<sp/>the<sp/>tests<sp/>repeatedly;<sp/>use<sp/>a<sp/>negative<sp/>count<sp/>to<sp/>repeat<sp/>forever.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6326"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;shuffle@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6327"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Randomize<sp/>tests&apos;<sp/>orders<sp/>on<sp/>every<sp/>iteration.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6328"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;random_seed=@Y[NUMBER]@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6329"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Random<sp/>number<sp/>seed<sp/>to<sp/>use<sp/>for<sp/>shuffling<sp/>test<sp/>orders<sp/>(between<sp/>1<sp/>and\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6330"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>99999,<sp/>or<sp/>0<sp/>to<sp/>use<sp/>a<sp/>seed<sp/>based<sp/>on<sp/>the<sp/>current<sp/>time).\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6331"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6332"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;Test<sp/>Output:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6333"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6334"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Enable/disable<sp/>colored<sp/>output.<sp/>The<sp/>default<sp/>is<sp/>@Gauto@D.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6335"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-@G-&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;print_time=0@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6336"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Don&apos;t<sp/>print<sp/>the<sp/>elapsed<sp/>time<sp/>of<sp/>each<sp/>test.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6337"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;output=xml@Y[@G:@YDIRECTORY_PATH@G&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6338"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;@Y|@G:@YFILE_PATH]@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6339"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Generate<sp/>an<sp/>XML<sp/>report<sp/>in<sp/>the<sp/>given<sp/>directory<sp/>or<sp/>with<sp/>the<sp/>given<sp/>file\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6340"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>name.<sp/>@YFILE_PATH@D<sp/>defaults<sp/>to<sp/>@Gtest_details.xml@D.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6341"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6342"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;stream_result_to=@YHOST@G:@YPORT@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6343"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Stream<sp/>test<sp/>results<sp/>to<sp/>the<sp/>given<sp/>server.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6344"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6345"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6346"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;Assertion<sp/>Behavior:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6347"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6348"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6349"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Set<sp/>the<sp/>default<sp/>death<sp/>test<sp/>style.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6350"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6351"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;break_on_failure@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6352"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Turn<sp/>assertion<sp/>failures<sp/>into<sp/>debugger<sp/>break-points.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6353"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;throw_on_failure@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6354"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Turn<sp/>assertion<sp/>failures<sp/>into<sp/>C++<sp/>exceptions.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6355"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;catch_exceptions=0@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6356"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Do<sp/>not<sp/>report<sp/>exceptions<sp/>as<sp/>test<sp/>failures.<sp/>Instead,<sp/>allow<sp/>them\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6357"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>crash<sp/>the<sp/>program<sp/>or<sp/>throw<sp/>a<sp/>pop-up<sp/>(on<sp/>Windows).\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6358"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6359"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;Except<sp/>for<sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;list_tests@D,<sp/>you<sp/>can<sp/>alternatively<sp/>set<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>corresponding\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6361"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;environment<sp/>variable<sp/>of<sp/>a<sp/>flag<sp/>(all<sp/>letters<sp/>in<sp/>upper-case).<sp/>For<sp/>example,<sp/>to\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6362"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;disable<sp/>colored<sp/>text<sp/>output,<sp/>you<sp/>can<sp/>either<sp/>specify<sp/>@G--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_</highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;color=no@D<sp/>or<sp/>set\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6364"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;the<sp/>@G&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;COLOR@D<sp/>environment<sp/>variable<sp/>to<sp/>@Gno@D.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6365"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6366"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;For<sp/>more<sp/>information,<sp/>please<sp/>read<sp/>the<sp/>&quot;</highlight><highlight class="normal"><sp/>GTEST_NAME_<sp/></highlight><highlight class="stringliteral">&quot;<sp/>documentation<sp/>at\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6367"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;@G&quot;</highlight><highlight class="normal"><sp/>GTEST_PROJECT_URL_<sp/></highlight><highlight class="stringliteral">&quot;@D.<sp/>If<sp/>you<sp/>find<sp/>a<sp/>bug<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>GTEST_NAME_<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6368"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;(not<sp/>one<sp/>in<sp/>your<sp/>own<sp/>code<sp/>or<sp/>tests),<sp/>please<sp/>report<sp/>it<sp/>to\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6369"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;@G&lt;&quot;</highlight><highlight class="normal"><sp/>GTEST_DEV_EMAIL_<sp/></highlight><highlight class="stringliteral">&quot;&gt;@D.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6370"><highlight class="normal"></highlight></codeline>
<codeline lineno="6371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>command<sp/>line<sp/>for<sp/>Google<sp/>Test<sp/>flags,<sp/>without<sp/>initializing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>other<sp/>parts<sp/>of<sp/>Google<sp/>Test.<sp/><sp/>The<sp/>type<sp/>parameter<sp/>CharType<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiated<sp/>to<sp/>either<sp/>char<sp/>or<sp/>wchar_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6374"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ParseGoogleTestFlagsOnlyImpl(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/>CharType**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="6376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>*argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>arg_string<sp/>=<sp/>StreamableToString(argv[i]);</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arg<sp/>=<sp/>arg_string.c_str();</highlight></codeline>
<codeline lineno="6379"><highlight class="normal"></highlight></codeline>
<codeline lineno="6380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">internal::ParseBoolFlag;</highlight></codeline>
<codeline lineno="6381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">internal::ParseInt32Flag;</highlight></codeline>
<codeline lineno="6382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">internal::ParseStringFlag;</highlight></codeline>
<codeline lineno="6383"><highlight class="normal"></highlight></codeline>
<codeline lineno="6384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>we<sp/>see<sp/>a<sp/>Google<sp/>Test<sp/>flag?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ParseBoolFlag(arg,<sp/>kAlsoRunDisabledTestsFlag,</highlight></codeline>
<codeline lineno="6386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;GTEST_FLAG(also_run_disabled_tests))<sp/>||</highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseBoolFlag(arg,<sp/>kBreakOnFailureFlag,</highlight></codeline>
<codeline lineno="6388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;GTEST_FLAG(break_on_failure))<sp/>||</highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseBoolFlag(arg,<sp/>kCatchExceptionsFlag,</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;GTEST_FLAG(catch_exceptions))<sp/>||</highlight></codeline>
<codeline lineno="6391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseStringFlag(arg,<sp/>kColorFlag,<sp/>&amp;GTEST_FLAG(color))<sp/>||</highlight></codeline>
<codeline lineno="6392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseStringFlag(arg,<sp/>kDeathTestStyleFlag,</highlight></codeline>
<codeline lineno="6393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;GTEST_FLAG(death_test_style))<sp/>||</highlight></codeline>
<codeline lineno="6394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseBoolFlag(arg,<sp/>kDeathTestUseFork,</highlight></codeline>
<codeline lineno="6395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;GTEST_FLAG(death_test_use_fork))<sp/>||</highlight></codeline>
<codeline lineno="6396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseStringFlag(arg,<sp/>kFilterFlag,<sp/>&amp;GTEST_FLAG(filter))<sp/>||</highlight></codeline>
<codeline lineno="6397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseStringFlag(arg,<sp/>kInternalRunDeathTestFlag,</highlight></codeline>
<codeline lineno="6398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;GTEST_FLAG(internal_run_death_test))<sp/>||</highlight></codeline>
<codeline lineno="6399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseBoolFlag(arg,<sp/>kListTestsFlag,<sp/>&amp;GTEST_FLAG(list_tests))<sp/>||</highlight></codeline>
<codeline lineno="6400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseStringFlag(arg,<sp/>kOutputFlag,<sp/>&amp;GTEST_FLAG(output))<sp/>||</highlight></codeline>
<codeline lineno="6401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseBoolFlag(arg,<sp/>kPrintTimeFlag,<sp/>&amp;GTEST_FLAG(print_time))<sp/>||</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseInt32Flag(arg,<sp/>kRandomSeedFlag,<sp/>&amp;GTEST_FLAG(random_seed))<sp/>||</highlight></codeline>
<codeline lineno="6403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseInt32Flag(arg,<sp/>kRepeatFlag,<sp/>&amp;GTEST_FLAG(repeat))<sp/>||</highlight></codeline>
<codeline lineno="6404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseBoolFlag(arg,<sp/>kShuffleFlag,<sp/>&amp;GTEST_FLAG(shuffle))<sp/>||</highlight></codeline>
<codeline lineno="6405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseInt32Flag(arg,<sp/>kStackTraceDepthFlag,</highlight></codeline>
<codeline lineno="6406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;GTEST_FLAG(stack_trace_depth))<sp/>||</highlight></codeline>
<codeline lineno="6407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseStringFlag(arg,<sp/>kStreamResultToFlag,</highlight></codeline>
<codeline lineno="6408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;GTEST_FLAG(stream_result_to))<sp/>||</highlight></codeline>
<codeline lineno="6409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseBoolFlag(arg,<sp/>kThrowOnFailureFlag,</highlight></codeline>
<codeline lineno="6410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;GTEST_FLAG(throw_on_failure))</highlight></codeline>
<codeline lineno="6411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Yes.<sp/><sp/>Shift<sp/>the<sp/>remainder<sp/>of<sp/>the<sp/>argv<sp/>list<sp/>left<sp/>by<sp/>one.<sp/><sp/>Note</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>argv<sp/>has<sp/>(*argc<sp/>+<sp/>1)<sp/>elements,<sp/>the<sp/>last<sp/>one<sp/>always<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL.<sp/><sp/>The<sp/>following<sp/>loop<sp/>moves<sp/>the<sp/>trailing<sp/>NULL<sp/>element<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i;<sp/>j<sp/>!=<sp/>*argc;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="6417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argv[j]<sp/>=<sp/>argv[j<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="6418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6419"><highlight class="normal"></highlight></codeline>
<codeline lineno="6420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrements<sp/>the<sp/>argument<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*argc)--;</highlight></codeline>
<codeline lineno="6422"><highlight class="normal"></highlight></codeline>
<codeline lineno="6423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>also<sp/>need<sp/>to<sp/>decrement<sp/>the<sp/>iterator<sp/>as<sp/>we<sp/>just<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="6426"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_string<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;--help&quot;</highlight><highlight class="normal"><sp/>||<sp/>arg_string<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-h&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="6427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_string<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-?&quot;</highlight><highlight class="normal"><sp/>||<sp/>arg_string<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;/?&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="6428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasGoogleTestFlagPrefix(arg))<sp/>{</highlight></codeline>
<codeline lineno="6429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>help<sp/>flag<sp/>and<sp/>unrecognized<sp/>Google<sp/>Test<sp/>flags<sp/>(excluding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>internal<sp/>ones)<sp/>trigger<sp/>help<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_help_flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6434"><highlight class="normal"></highlight></codeline>
<codeline lineno="6435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_help_flag)<sp/>{</highlight></codeline>
<codeline lineno="6436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>print<sp/>the<sp/>help<sp/>here<sp/>instead<sp/>of<sp/>in<sp/>RUN_ALL_TESTS(),<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>latter<sp/>may<sp/>not<sp/>be<sp/>called<sp/>at<sp/>all<sp/>if<sp/>the<sp/>user<sp/>is<sp/>using<sp/>Google</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>another<sp/>testing<sp/>framework.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6439"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintColorEncoded(kColorEncodedHelpMessage);</highlight></codeline>
<codeline lineno="6440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6442"><highlight class="normal"></highlight></codeline>
<codeline lineno="6443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>command<sp/>line<sp/>for<sp/>Google<sp/>Test<sp/>flags,<sp/>without<sp/>initializing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>other<sp/>parts<sp/>of<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6445"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ParseGoogleTestFlagsOnly(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="6446"><highlight class="normal"><sp/><sp/>ParseGoogleTestFlagsOnlyImpl(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="6447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6448"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ParseGoogleTestFlagsOnly(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="6449"><highlight class="normal"><sp/><sp/>ParseGoogleTestFlagsOnlyImpl(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="6450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6451"><highlight class="normal"></highlight></codeline>
<codeline lineno="6452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>internal<sp/>implementation<sp/>of<sp/>InitGoogleTest().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6453"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>type<sp/>parameter<sp/>CharType<sp/>can<sp/>be<sp/>instantiated<sp/>to<sp/>either<sp/>char<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6456"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="6457"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitGoogleTestImpl(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/>CharType**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"><sp/><sp/>g_init_gtest_count++;</highlight></codeline>
<codeline lineno="6459"><highlight class="normal"></highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>want<sp/>to<sp/>run<sp/>the<sp/>initialization<sp/>code<sp/>twice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_init_gtest_count<sp/>!=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"></highlight></codeline>
<codeline lineno="6463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*argc<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6464"><highlight class="normal"></highlight></codeline>
<codeline lineno="6465"><highlight class="normal"><sp/><sp/>internal::g_executable_path<sp/>=<sp/>internal::StreamableToString(argv[0]);</highlight></codeline>
<codeline lineno="6466"><highlight class="normal"></highlight></codeline>
<codeline lineno="6467"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6468"><highlight class="normal"></highlight></codeline>
<codeline lineno="6469"><highlight class="normal"><sp/><sp/>g_argvs.clear();</highlight></codeline>
<codeline lineno="6470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>*argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6471"><highlight class="normal"><sp/><sp/><sp/><sp/>g_argvs.push_back(StreamableToString(argv[i]));</highlight></codeline>
<codeline lineno="6472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6473"><highlight class="normal"></highlight></codeline>
<codeline lineno="6474"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6475"><highlight class="normal"></highlight></codeline>
<codeline lineno="6476"><highlight class="normal"><sp/><sp/>ParseGoogleTestFlagsOnly(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="6477"><highlight class="normal"><sp/><sp/>GetUnitTestImpl()-&gt;PostFlagParsingInit();</highlight></codeline>
<codeline lineno="6478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6479"><highlight class="normal"></highlight></codeline>
<codeline lineno="6480"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6481"><highlight class="normal"></highlight></codeline>
<codeline lineno="6482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initializes<sp/>Google<sp/>Test.<sp/><sp/>This<sp/>must<sp/>be<sp/>called<sp/>before<sp/>calling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RUN_ALL_TESTS().<sp/><sp/>In<sp/>particular,<sp/>it<sp/>parses<sp/>a<sp/>command<sp/>line<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>flags<sp/>that<sp/>Google<sp/>Test<sp/>recognizes.<sp/><sp/>Whenever<sp/>a<sp/>Google<sp/>Test<sp/>flag<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>seen,<sp/>it<sp/>is<sp/>removed<sp/>from<sp/>argv,<sp/>and<sp/>*argc<sp/>is<sp/>decremented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6486"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>value<sp/>is<sp/>returned.<sp/><sp/>Instead,<sp/>the<sp/>Google<sp/>Test<sp/>flag<sp/>variables<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6489"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calling<sp/>the<sp/>function<sp/>for<sp/>the<sp/>second<sp/>time<sp/>has<sp/>no<sp/>user-visible<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6491"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitGoogleTest(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"><sp/><sp/>internal::InitGoogleTestImpl(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="6493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6494"><highlight class="normal"></highlight></codeline>
<codeline lineno="6495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overloaded<sp/>version<sp/>can<sp/>be<sp/>used<sp/>in<sp/>Windows<sp/>programs<sp/>compiled<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UNICODE<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitGoogleTest(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="6498"><highlight class="normal"><sp/><sp/>internal::InitGoogleTestImpl(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="6499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6500"><highlight class="normal"></highlight></codeline>
<codeline lineno="6501"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6504"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6508"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6509"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6511"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6515"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6516"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6518"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6521"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6530"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan),<sp/>vladl@google.com<sp/>(Vlad<sp/>Losev)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6532"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>implements<sp/>death<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6534"><highlight class="normal"></highlight></codeline>
<codeline lineno="6535"><highlight class="normal"></highlight></codeline>
<codeline lineno="6536"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6537"><highlight class="normal"></highlight></codeline>
<codeline lineno="6538"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6539"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;crt_externs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6540"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6541"><highlight class="normal"></highlight></codeline>
<codeline lineno="6542"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6543"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6544"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6545"><highlight class="normal"></highlight></codeline>
<codeline lineno="6546"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6547"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6548"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6549"><highlight class="normal"></highlight></codeline>
<codeline lineno="6550"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6551"><highlight class="normal"></highlight></codeline>
<codeline lineno="6552"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6553"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6554"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6555"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6556"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;sys/wait.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6557"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6558"><highlight class="normal"></highlight></codeline>
<codeline lineno="6559"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6560"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;spawn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6561"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6562"><highlight class="normal"></highlight></codeline>
<codeline lineno="6563"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6564"><highlight class="normal"></highlight></codeline>
<codeline lineno="6565"><highlight class="normal"></highlight></codeline>
<codeline lineno="6566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Indicates<sp/>that<sp/>this<sp/>translation<sp/>unit<sp/>is<sp/>part<sp/>of<sp/>Google<sp/>Test&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation.<sp/><sp/>It<sp/>must<sp/>come<sp/>before<sp/>gtest-internal-inl.h<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>included,<sp/>or<sp/>there<sp/>will<sp/>be<sp/>a<sp/>compiler<sp/>error.<sp/><sp/>This<sp/>trick<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prevent<sp/>a<sp/>user<sp/>from<sp/>accidentally<sp/>including<sp/>gtest-internal-inl.h<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>his<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6571"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IMPLEMENTATION_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6572"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_IMPLEMENTATION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6573"><highlight class="normal"></highlight></codeline>
<codeline lineno="6574"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="6575"><highlight class="normal"></highlight></codeline>
<codeline lineno="6576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6577"><highlight class="normal"></highlight></codeline>
<codeline lineno="6578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>death<sp/>test<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6579"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kDefaultDeathTestStyle[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6580"><highlight class="normal"></highlight></codeline>
<codeline lineno="6581"><highlight class="normal">GTEST_DEFINE_string_(</highlight></codeline>
<codeline lineno="6582"><highlight class="normal"><sp/><sp/><sp/><sp/>death_test_style,</highlight></codeline>
<codeline lineno="6583"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::StringFromGTestEnv(</highlight><highlight class="stringliteral">&quot;death_test_style&quot;</highlight><highlight class="normal">,<sp/>kDefaultDeathTestStyle),</highlight></codeline>
<codeline lineno="6584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Indicates<sp/>how<sp/>to<sp/>run<sp/>a<sp/>death<sp/>test<sp/>in<sp/>a<sp/>forked<sp/>child<sp/>process:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;threadsafe\&quot;<sp/>(child<sp/>process<sp/>re-executes<sp/>the<sp/>test<sp/>binary<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;from<sp/>the<sp/>beginning,<sp/>running<sp/>only<sp/>the<sp/>specific<sp/>death<sp/>test)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;fast\&quot;<sp/>(child<sp/>process<sp/>runs<sp/>the<sp/>death<sp/>test<sp/>immediately<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;after<sp/>forking).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6589"><highlight class="normal"></highlight></codeline>
<codeline lineno="6590"><highlight class="normal">GTEST_DEFINE_bool_(</highlight></codeline>
<codeline lineno="6591"><highlight class="normal"><sp/><sp/><sp/><sp/>death_test_use_fork,</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::BoolFromGTestEnv(</highlight><highlight class="stringliteral">&quot;death_test_use_fork&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="6593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Instructs<sp/>to<sp/>use<sp/>fork()/_exit()<sp/>instead<sp/>of<sp/>clone()<sp/>in<sp/>death<sp/>tests.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Ignored<sp/>and<sp/>always<sp/>uses<sp/>fork()<sp/>on<sp/>POSIX<sp/>systems<sp/>where<sp/>clone()<sp/>is<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;implemented.<sp/>Useful<sp/>when<sp/>running<sp/>under<sp/>valgrind<sp/>or<sp/>similar<sp/>tools<sp/>if<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;those<sp/>do<sp/>not<sp/>support<sp/>clone().<sp/>Valgrind<sp/>3.3.1<sp/>will<sp/>just<sp/>fail<sp/>if<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;it<sp/>sees<sp/>an<sp/>unsupported<sp/>combination<sp/>of<sp/>clone()<sp/>flags.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;It<sp/>is<sp/>not<sp/>recommended<sp/>to<sp/>use<sp/>this<sp/>flag<sp/>w/o<sp/>valgrind<sp/>though<sp/>it<sp/>will<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;work<sp/>in<sp/>99%<sp/>of<sp/>the<sp/>cases.<sp/>Once<sp/>valgrind<sp/>is<sp/>fixed,<sp/>this<sp/>flag<sp/>will<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;most<sp/>likely<sp/>be<sp/>removed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6601"><highlight class="normal"></highlight></codeline>
<codeline lineno="6602"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="6603"><highlight class="normal">GTEST_DEFINE_string_(</highlight></codeline>
<codeline lineno="6604"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_run_death_test,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Indicates<sp/>the<sp/>file,<sp/>line<sp/>number,<sp/>temporal<sp/>index<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>single<sp/>death<sp/>test<sp/>to<sp/>run,<sp/>and<sp/>a<sp/>file<sp/>descriptor<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>a<sp/>success<sp/>code<sp/>may<sp/>be<sp/>sent,<sp/>all<sp/>separated<sp/>by<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>&apos;|&apos;<sp/>characters.<sp/><sp/>This<sp/>flag<sp/>is<sp/>specified<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>current<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;process<sp/>is<sp/>a<sp/>sub-process<sp/>launched<sp/>for<sp/>running<sp/>a<sp/>thread-safe<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;death<sp/>test.<sp/><sp/>FOR<sp/>INTERNAL<sp/>USE<sp/>ONLY.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6611"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6612"><highlight class="normal"></highlight></codeline>
<codeline lineno="6613"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6614"><highlight class="normal"></highlight></codeline>
<codeline lineno="6615"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="6616"><highlight class="normal"></highlight></codeline>
<codeline lineno="6617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Valid<sp/>only<sp/>for<sp/>fast<sp/>death<sp/>tests.<sp/>Indicates<sp/>the<sp/>code<sp/>is<sp/>running<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>child<sp/>process<sp/>of<sp/>a<sp/>fast<sp/>style<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6619"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_in_fast_death_test_child<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"></highlight></codeline>
<codeline lineno="6621"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>Boolean<sp/>value<sp/>indicating<sp/>whether<sp/>the<sp/>caller<sp/>is<sp/>currently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>executing<sp/>in<sp/>the<sp/>context<sp/>of<sp/>the<sp/>death<sp/>test<sp/>child<sp/>process.<sp/><sp/>Tools<sp/>such<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Valgrind<sp/>heap<sp/>checkers<sp/>may<sp/>need<sp/>this<sp/>to<sp/>modify<sp/>their<sp/>behavior<sp/>in<sp/>death</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tests.<sp/><sp/>IMPORTANT:<sp/>This<sp/>is<sp/>an<sp/>internal<sp/>utility.<sp/><sp/>Using<sp/>it<sp/>may<sp/>break<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>death<sp/>tests.<sp/><sp/>User<sp/>code<sp/>MUST<sp/>NOT<sp/>use<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6626"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDeathTestChild()<sp/>{</highlight></codeline>
<codeline lineno="6627"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6628"><highlight class="normal"></highlight></codeline>
<codeline lineno="6629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>Windows,<sp/>death<sp/>tests<sp/>are<sp/>thread-safe<sp/>regardless<sp/>of<sp/>the<sp/>value<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>death_test_style<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!GTEST_FLAG(internal_run_death_test).empty();</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"></highlight></codeline>
<codeline lineno="6633"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6634"><highlight class="normal"></highlight></codeline>
<codeline lineno="6635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(death_test_style)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!GTEST_FLAG(internal_run_death_test).empty();</highlight></codeline>
<codeline lineno="6637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_in_fast_death_test_child;</highlight></codeline>
<codeline lineno="6639"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"></highlight></codeline>
<codeline lineno="6642"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6643"><highlight class="normal"></highlight></codeline>
<codeline lineno="6644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ExitedWithCode<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6645"><highlight class="normal">ExitedWithCode::ExitedWithCode(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_code)<sp/>:<sp/>exit_code_(exit_code)<sp/>{</highlight></codeline>
<codeline lineno="6646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6647"><highlight class="normal"></highlight></codeline>
<codeline lineno="6648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ExitedWithCode<sp/>function-call<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6649"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ExitedWithCode::operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_status)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6650"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6651"><highlight class="normal"></highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exit_status<sp/>==<sp/>exit_code_;</highlight></codeline>
<codeline lineno="6653"><highlight class="normal"></highlight></codeline>
<codeline lineno="6654"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6655"><highlight class="normal"></highlight></codeline>
<codeline lineno="6656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>WIFEXITED(exit_status)<sp/>&amp;&amp;<sp/>WEXITSTATUS(exit_status)<sp/>==<sp/>exit_code_;</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"></highlight></codeline>
<codeline lineno="6658"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6660"><highlight class="normal"></highlight></codeline>
<codeline lineno="6661"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KilledBySignal<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6663"><highlight class="normal">KilledBySignal::KilledBySignal(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signum)<sp/>:<sp/>signum_(signum)<sp/>{</highlight></codeline>
<codeline lineno="6664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6665"><highlight class="normal"></highlight></codeline>
<codeline lineno="6666"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KilledBySignal<sp/>function-call<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6667"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>KilledBySignal::operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_status)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>WIFSIGNALED(exit_status)<sp/>&amp;&amp;<sp/>WTERMSIG(exit_status)<sp/>==<sp/>signum_;</highlight></codeline>
<codeline lineno="6669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6670"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6671"><highlight class="normal"></highlight></codeline>
<codeline lineno="6672"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="6673"><highlight class="normal"></highlight></codeline>
<codeline lineno="6674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utilities<sp/>needed<sp/>for<sp/>death<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6675"><highlight class="normal"></highlight></codeline>
<codeline lineno="6676"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>textual<sp/>description<sp/>of<sp/>a<sp/>given<sp/>exit<sp/>code,<sp/>in<sp/>the<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specified<sp/>by<sp/>wait(2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6678"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>ExitSummary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_code)<sp/>{</highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/>Message<sp/>m;</highlight></codeline>
<codeline lineno="6680"><highlight class="normal"></highlight></codeline>
<codeline lineno="6681"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6682"><highlight class="normal"></highlight></codeline>
<codeline lineno="6683"><highlight class="normal"><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Exited<sp/>with<sp/>exit<sp/>status<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>exit_code;</highlight></codeline>
<codeline lineno="6684"><highlight class="normal"></highlight></codeline>
<codeline lineno="6685"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6686"><highlight class="normal"></highlight></codeline>
<codeline lineno="6687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WIFEXITED(exit_code))<sp/>{</highlight></codeline>
<codeline lineno="6688"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Exited<sp/>with<sp/>exit<sp/>status<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>WEXITSTATUS(exit_code);</highlight></codeline>
<codeline lineno="6689"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WIFSIGNALED(exit_code))<sp/>{</highlight></codeline>
<codeline lineno="6690"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Terminated<sp/>by<sp/>signal<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>WTERMSIG(exit_code);</highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6692"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>WCOREDUMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WCOREDUMP(exit_code))<sp/>{</highlight></codeline>
<codeline lineno="6694"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(core<sp/>dumped)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6695"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6696"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6697"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6698"><highlight class="normal"></highlight></codeline>
<codeline lineno="6699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m.GetString();</highlight></codeline>
<codeline lineno="6700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6701"><highlight class="normal"></highlight></codeline>
<codeline lineno="6702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>exit_status<sp/>describes<sp/>a<sp/>process<sp/>that<sp/>was<sp/>terminated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>a<sp/>signal,<sp/>or<sp/>exited<sp/>normally<sp/>with<sp/>a<sp/>nonzero<sp/>exit<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6704"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ExitedUnsuccessfully(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_status)<sp/>{</highlight></codeline>
<codeline lineno="6705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!ExitedWithCode(0)(exit_status);</highlight></codeline>
<codeline lineno="6706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6707"><highlight class="normal"></highlight></codeline>
<codeline lineno="6708"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6709"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>textual<sp/>failure<sp/>message<sp/>when<sp/>a<sp/>death<sp/>test<sp/>finds<sp/>more<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6710"><highlight class="normal"></highlight><highlight class="comment">//<sp/>one<sp/>thread<sp/>running,<sp/>or<sp/>cannot<sp/>determine<sp/>the<sp/>number<sp/>of<sp/>threads,<sp/>prior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6711"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>executing<sp/>the<sp/>given<sp/>statement.<sp/><sp/>It<sp/>is<sp/>the<sp/>responsibility<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6712"><highlight class="normal"></highlight><highlight class="comment">//<sp/>caller<sp/>not<sp/>to<sp/>pass<sp/>a<sp/>thread_count<sp/>of<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6713"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>DeathTestThreadWarning(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>thread_count)<sp/>{</highlight></codeline>
<codeline lineno="6714"><highlight class="normal"><sp/><sp/>Message<sp/>msg;</highlight></codeline>
<codeline lineno="6715"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Death<sp/>tests<sp/>use<sp/>fork(),<sp/>which<sp/>is<sp/>unsafe<sp/>particularly&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>a<sp/>threaded<sp/>context.<sp/>For<sp/>this<sp/>test,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GTEST_NAME_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_count<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="6718"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>detect<sp/>the<sp/>number<sp/>of<sp/>threads.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6720"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;detected<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>thread_count<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>threads.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg.GetString();</highlight></codeline>
<codeline lineno="6722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6723"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6724"><highlight class="normal"></highlight></codeline>
<codeline lineno="6725"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Flag<sp/>characters<sp/>for<sp/>reporting<sp/>a<sp/>death<sp/>test<sp/>that<sp/>did<sp/>not<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6726"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kDeathTestLived<sp/>=<sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kDeathTestReturned<sp/>=<sp/></highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kDeathTestThrew<sp/>=<sp/></highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6729"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kDeathTestInternalError<sp/>=<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6730"><highlight class="normal"></highlight></codeline>
<codeline lineno="6731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>enumeration<sp/>describing<sp/>all<sp/>of<sp/>the<sp/>possible<sp/>ways<sp/>that<sp/>a<sp/>death<sp/>test<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>conclude.<sp/><sp/>DIED<sp/>means<sp/>that<sp/>the<sp/>process<sp/>died<sp/>while<sp/>executing<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code;<sp/>LIVED<sp/>means<sp/>that<sp/>process<sp/>lived<sp/>beyond<sp/>the<sp/>end<sp/>of<sp/>the<sp/>test<sp/>code;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6734"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RETURNED<sp/>means<sp/>that<sp/>the<sp/>test<sp/>statement<sp/>attempted<sp/>to<sp/>execute<sp/>a<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6735"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statement,<sp/>which<sp/>is<sp/>not<sp/>allowed;<sp/>THREW<sp/>means<sp/>that<sp/>the<sp/>test<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6736"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returned<sp/>control<sp/>by<sp/>throwing<sp/>an<sp/>exception.<sp/><sp/>IN_PROGRESS<sp/>means<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6737"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>not<sp/>yet<sp/>concluded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(vladl@google.com):<sp/>Unify<sp/>names<sp/>and<sp/>possibly<sp/>values<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AbortReason,<sp/>DeathTestOutcome,<sp/>and<sp/>flag<sp/>characters<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6740"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>DeathTestOutcome<sp/>{<sp/>IN_PROGRESS,<sp/>DIED,<sp/>LIVED,<sp/>RETURNED,<sp/>THREW<sp/>};</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"></highlight></codeline>
<codeline lineno="6742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Routine<sp/>for<sp/>aborting<sp/>the<sp/>program<sp/>which<sp/>is<sp/>safe<sp/>to<sp/>call<sp/>from<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exec-style<sp/>death<sp/>test<sp/>child<sp/>process,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>message<sp/>is<sp/>propagated<sp/>back<sp/>to<sp/>the<sp/>parent<sp/>process.<sp/><sp/>Otherwise,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>message<sp/>is<sp/>simply<sp/>printed<sp/>to<sp/>stderr.<sp/><sp/>In<sp/>either<sp/>case,<sp/>the<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6746"><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>exits<sp/>with<sp/>status<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6747"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeathTestAbort(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="6748"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>a<sp/>POSIX<sp/>system,<sp/>this<sp/>function<sp/>may<sp/>be<sp/>called<sp/>from<sp/>a<sp/>threadsafe-style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>death<sp/>test<sp/>child<sp/>process,<sp/>which<sp/>operates<sp/>on<sp/>a<sp/>very<sp/>small<sp/>stack.<sp/><sp/>Use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>heap<sp/>for<sp/>any<sp/>additional<sp/>non-minuscule<sp/>memory<sp/>requirements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InternalRunDeathTestFlag*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>flag<sp/>=</highlight></codeline>
<codeline lineno="6752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetUnitTestImpl()-&gt;internal_run_death_test_flag();</highlight></codeline>
<codeline lineno="6753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="6754"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>parent<sp/>=<sp/>posix::FDOpen(flag-&gt;write_fd(),<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6755"><highlight class="normal"><sp/><sp/><sp/><sp/>fputc(kDeathTestInternalError,<sp/>parent);</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(parent,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>message.c_str());</highlight></codeline>
<codeline lineno="6757"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(parent);</highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/><sp/>_exit(1);</highlight></codeline>
<codeline lineno="6759"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>message.c_str());</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="6762"><highlight class="normal"><sp/><sp/><sp/><sp/>posix::Abort();</highlight></codeline>
<codeline lineno="6763"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6765"><highlight class="normal"></highlight></codeline>
<codeline lineno="6766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>replacement<sp/>for<sp/>CHECK<sp/>that<sp/>calls<sp/>DeathTestAbort<sp/>if<sp/>the<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6768"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_DEATH_TEST_CHECK_(expression)<sp/>\</highlight></codeline>
<codeline lineno="6769"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6770"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!::testing::internal::IsTrue(expression))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6771"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>DeathTestAbort(<sp/>\</highlight></codeline>
<codeline lineno="6772"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::string(&quot;CHECK<sp/>failed:<sp/>File<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>__FILE__<sp/>+<sp/><sp/>&quot;,<sp/>line<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>::testing::internal::StreamableToString(__LINE__)<sp/>+<sp/>&quot;:<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>#expression);<sp/>\</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/>}<sp/>while<sp/>(::testing::internal::AlwaysFalse())</highlight></codeline>
<codeline lineno="6777"><highlight class="normal"></highlight></codeline>
<codeline lineno="6778"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>macro<sp/>is<sp/>similar<sp/>to<sp/>GTEST_DEATH_TEST_CHECK_,<sp/>but<sp/>it<sp/>is<sp/>meant<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6779"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluating<sp/>any<sp/>system<sp/>call<sp/>that<sp/>fulfills<sp/>two<sp/>conditions:<sp/>it<sp/>must<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6780"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-1<sp/>on<sp/>failure,<sp/>and<sp/>set<sp/>errno<sp/>to<sp/>EINTR<sp/>when<sp/>it<sp/>is<sp/>interrupted<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6781"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>tried<sp/>again.<sp/><sp/>The<sp/>macro<sp/>expands<sp/>to<sp/>a<sp/>loop<sp/>that<sp/>repeatedly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6782"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluates<sp/>the<sp/>expression<sp/>as<sp/>long<sp/>as<sp/>it<sp/>evaluates<sp/>to<sp/>-1<sp/>and<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6783"><highlight class="normal"></highlight><highlight class="comment">//<sp/>errno<sp/>to<sp/>EINTR.<sp/><sp/>If<sp/>the<sp/>expression<sp/>evaluates<sp/>to<sp/>-1<sp/>but<sp/>errno<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>something<sp/>other<sp/>than<sp/>EINTR,<sp/>DeathTestAbort<sp/>is<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6785"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(expression)<sp/>\</highlight></codeline>
<codeline lineno="6786"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6787"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>gtest_retval;<sp/>\</highlight></codeline>
<codeline lineno="6788"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>gtest_retval<sp/>=<sp/>(expression);<sp/>\</highlight></codeline>
<codeline lineno="6790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(gtest_retval<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>errno<sp/>==<sp/>EINTR);<sp/>\</highlight></codeline>
<codeline lineno="6791"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(gtest_retval<sp/>==<sp/>-1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6792"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>DeathTestAbort(<sp/>\</highlight></codeline>
<codeline lineno="6793"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::string(&quot;CHECK<sp/>failed:<sp/>File<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>__FILE__<sp/>+<sp/>&quot;,<sp/>line<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="6794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>::testing::internal::StreamableToString(__LINE__)<sp/>+<sp/>&quot;:<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="6795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>#expression<sp/>+<sp/>&quot;<sp/>!=<sp/>-1&quot;);<sp/>\</highlight></codeline>
<codeline lineno="6796"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="6797"><highlight class="normal"><sp/><sp/>}<sp/>while<sp/>(::testing::internal::AlwaysFalse())</highlight></codeline>
<codeline lineno="6798"><highlight class="normal"></highlight></codeline>
<codeline lineno="6799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>message<sp/>describing<sp/>the<sp/>last<sp/>system<sp/>error<sp/>in<sp/>errno.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6800"><highlight class="normal">std::string<sp/>GetLastErrnoDescription()<sp/>{</highlight></codeline>
<codeline lineno="6801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errno<sp/>==<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/>posix::StrError(errno);</highlight></codeline>
<codeline lineno="6802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6803"><highlight class="normal"></highlight></codeline>
<codeline lineno="6804"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>called<sp/>from<sp/>a<sp/>death<sp/>test<sp/>parent<sp/>process<sp/>to<sp/>read<sp/>a<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>message<sp/>from<sp/>the<sp/>death<sp/>test<sp/>child<sp/>process<sp/>and<sp/>log<sp/>it<sp/>with<sp/>the<sp/>FATAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6806"><highlight class="normal"></highlight><highlight class="comment">//<sp/>severity.<sp/>On<sp/>Windows,<sp/>the<sp/>message<sp/>is<sp/>read<sp/>from<sp/>a<sp/>pipe<sp/>handle.<sp/>On<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>platforms,<sp/>it<sp/>is<sp/>read<sp/>from<sp/>a<sp/>file<sp/>descriptor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6808"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FailFromInternalError(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="6809"><highlight class="normal"><sp/><sp/>Message<sp/>error;</highlight></codeline>
<codeline lineno="6810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="6811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_read;</highlight></codeline>
<codeline lineno="6812"><highlight class="normal"></highlight></codeline>
<codeline lineno="6813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((num_read<sp/>=<sp/>posix::Read(fd,<sp/>buffer,<sp/>255))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer[num_read]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>&lt;&lt;<sp/>buffer;</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_read<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>errno<sp/>==<sp/>EINTR);</highlight></codeline>
<codeline lineno="6819"><highlight class="normal"></highlight></codeline>
<codeline lineno="6820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_read<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6821"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOG_(FATAL)<sp/>&lt;&lt;<sp/>error.GetString();</highlight></codeline>
<codeline lineno="6822"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_error<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOG_(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>while<sp/>reading<sp/>death<sp/>test<sp/>internal:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>GetLastErrnoDescription()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>last_error<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6828"><highlight class="normal"></highlight></codeline>
<codeline lineno="6829"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Death<sp/>test<sp/>constructor.<sp/><sp/>Increments<sp/>the<sp/>running<sp/>death<sp/>test<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6830"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>current<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6831"><highlight class="normal">DeathTest::DeathTest()<sp/>{</highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/>TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>info<sp/>=<sp/>GetUnitTestImpl()-&gt;current_test_info();</highlight></codeline>
<codeline lineno="6833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>run<sp/>a<sp/>death<sp/>test<sp/>outside<sp/>of<sp/>a<sp/>TEST<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TEST_F<sp/>construct&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6836"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6838"><highlight class="normal"></highlight></codeline>
<codeline lineno="6839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>and<sp/>returns<sp/>a<sp/>death<sp/>test<sp/>by<sp/>dispatching<sp/>to<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6840"><highlight class="normal"></highlight><highlight class="comment">//<sp/>death<sp/>test<sp/>factory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6841"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DeathTest::Create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>regex,</highlight></codeline>
<codeline lineno="6842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/>DeathTest**<sp/>test)<sp/>{</highlight></codeline>
<codeline lineno="6843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetUnitTestImpl()-&gt;death_test_factory()-&gt;Create(</highlight></codeline>
<codeline lineno="6844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>statement,<sp/>regex,<sp/>file,<sp/>line,<sp/>test);</highlight></codeline>
<codeline lineno="6845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6846"><highlight class="normal"></highlight></codeline>
<codeline lineno="6847"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>DeathTest::LastMessage()<sp/>{</highlight></codeline>
<codeline lineno="6848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>last_death_test_message_.c_str();</highlight></codeline>
<codeline lineno="6849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6850"><highlight class="normal"></highlight></codeline>
<codeline lineno="6851"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeathTest::set_last_death_test_message(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/>last_death_test_message_<sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="6853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6854"><highlight class="normal"></highlight></codeline>
<codeline lineno="6855"><highlight class="normal">std::string<sp/>DeathTest::last_death_test_message_;</highlight></codeline>
<codeline lineno="6856"><highlight class="normal"></highlight></codeline>
<codeline lineno="6857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Provides<sp/>cross<sp/>platform<sp/>implementation<sp/>for<sp/>some<sp/>death<sp/>functionality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6858"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DeathTestImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DeathTest<sp/>{</highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/>DeathTestImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>a_regex)</highlight></codeline>
<codeline lineno="6861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>statement_(a_statement),</highlight></codeline>
<codeline lineno="6862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regex_(a_regex),</highlight></codeline>
<codeline lineno="6863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawned_(false),</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_(-1),</highlight></codeline>
<codeline lineno="6865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outcome_(IN_PROGRESS),</highlight></codeline>
<codeline lineno="6866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_fd_(-1),</highlight></codeline>
<codeline lineno="6867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_fd_(-1)<sp/>{}</highlight></codeline>
<codeline lineno="6868"><highlight class="normal"></highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read_fd_<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>closed<sp/>and<sp/>cleared<sp/>by<sp/>a<sp/>derived<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6870"><highlight class="normal"><sp/><sp/>~DeathTestImpl()<sp/>{<sp/>GTEST_DEATH_TEST_CHECK_(read_fd_<sp/>==<sp/>-1);<sp/>}</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"></highlight></codeline>
<codeline lineno="6872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Abort(AbortReason<sp/>reason);</highlight></codeline>
<codeline lineno="6873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Passed(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>status_ok);</highlight></codeline>
<codeline lineno="6874"><highlight class="normal"></highlight></codeline>
<codeline lineno="6875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>statement()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>statement_;<sp/>}</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>regex()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regex_;<sp/>}</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>spawned()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spawned_;<sp/>}</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_spawned(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_spawned)<sp/>{<sp/>spawned_<sp/>=<sp/>is_spawned;<sp/>}</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status_;<sp/>}</highlight></codeline>
<codeline lineno="6880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_status(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_status)<sp/>{<sp/>status_<sp/>=<sp/>a_status;<sp/>}</highlight></codeline>
<codeline lineno="6881"><highlight class="normal"><sp/><sp/>DeathTestOutcome<sp/>outcome()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outcome_;<sp/>}</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_outcome(DeathTestOutcome<sp/>an_outcome)<sp/>{<sp/>outcome_<sp/>=<sp/>an_outcome;<sp/>}</highlight></codeline>
<codeline lineno="6883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_fd()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>read_fd_;<sp/>}</highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_read_fd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{<sp/>read_fd_<sp/>=<sp/>fd;<sp/>}</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_fd()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_fd_;<sp/>}</highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_write_fd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{<sp/>write_fd_<sp/>=<sp/>fd;<sp/>}</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"></highlight></codeline>
<codeline lineno="6888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Called<sp/>in<sp/>the<sp/>parent<sp/>process<sp/>only.<sp/>Reads<sp/>the<sp/>result<sp/>code<sp/>of<sp/>the<sp/>death</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6889"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>child<sp/>process<sp/>via<sp/>a<sp/>pipe,<sp/>interprets<sp/>it<sp/>to<sp/>set<sp/>the<sp/>outcome_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>member,<sp/>and<sp/>closes<sp/>read_fd_.<sp/><sp/>Outputs<sp/>diagnostics<sp/>and<sp/>terminates<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6891"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>of<sp/>unexpected<sp/>codes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReadAndInterpretStatusByte();</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"></highlight></codeline>
<codeline lineno="6894"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6895"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>textual<sp/>content<sp/>of<sp/>the<sp/>code<sp/>this<sp/>object<sp/>is<sp/>testing.<sp/><sp/>This<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>own<sp/>this<sp/>string<sp/>and<sp/>should<sp/>not<sp/>attempt<sp/>to<sp/>delete<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>statement_;</highlight></codeline>
<codeline lineno="6898"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>regular<sp/>expression<sp/>which<sp/>test<sp/>output<sp/>must<sp/>match.<sp/><sp/>DeathTestImpl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>own<sp/>this<sp/>object<sp/>and<sp/>should<sp/>not<sp/>attempt<sp/>to<sp/>delete<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>regex_;</highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>if<sp/>the<sp/>death<sp/>test<sp/>child<sp/>process<sp/>has<sp/>been<sp/>successfully<sp/>spawned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>spawned_;</highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>exit<sp/>status<sp/>of<sp/>the<sp/>child<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status_;</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>the<sp/>death<sp/>test<sp/>concluded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6906"><highlight class="normal"><sp/><sp/>DeathTestOutcome<sp/>outcome_;</highlight></codeline>
<codeline lineno="6907"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Descriptor<sp/>to<sp/>the<sp/>read<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>to<sp/>the<sp/>child<sp/>process.<sp/><sp/>It<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6908"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>-1<sp/>in<sp/>the<sp/>child<sp/>process.<sp/><sp/>The<sp/>child<sp/>keeps<sp/>its<sp/>write<sp/>end<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6909"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pipe<sp/>in<sp/>write_fd_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_fd_;</highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Descriptor<sp/>to<sp/>the<sp/>child&apos;s<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>to<sp/>the<sp/>parent<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6912"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>always<sp/>-1<sp/>in<sp/>the<sp/>parent<sp/>process.<sp/><sp/>The<sp/>parent<sp/>keeps<sp/>its<sp/>end<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pipe<sp/>in<sp/>read_fd_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_fd_;</highlight></codeline>
<codeline lineno="6915"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6916"><highlight class="normal"></highlight></codeline>
<codeline lineno="6917"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Called<sp/>in<sp/>the<sp/>parent<sp/>process<sp/>only.<sp/>Reads<sp/>the<sp/>result<sp/>code<sp/>of<sp/>the<sp/>death</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6918"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>child<sp/>process<sp/>via<sp/>a<sp/>pipe,<sp/>interprets<sp/>it<sp/>to<sp/>set<sp/>the<sp/>outcome_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6919"><highlight class="normal"></highlight><highlight class="comment">//<sp/>member,<sp/>and<sp/>closes<sp/>read_fd_.<sp/><sp/>Outputs<sp/>diagnostics<sp/>and<sp/>terminates<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6920"><highlight class="normal"></highlight><highlight class="comment">//<sp/>case<sp/>of<sp/>unexpected<sp/>codes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6921"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeathTestImpl::ReadAndInterpretStatusByte()<sp/>{</highlight></codeline>
<codeline lineno="6922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="6923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_read;</highlight></codeline>
<codeline lineno="6924"><highlight class="normal"></highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>read()<sp/>here<sp/>blocks<sp/>until<sp/>data<sp/>is<sp/>available<sp/>(signifying<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6926"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failure<sp/>of<sp/>the<sp/>death<sp/>test)<sp/>or<sp/>until<sp/>the<sp/>pipe<sp/>is<sp/>closed<sp/>(signifying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>its<sp/>success),<sp/>so<sp/>it&apos;s<sp/>okay<sp/>to<sp/>call<sp/>this<sp/>in<sp/>the<sp/>parent<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>child<sp/>process<sp/>has<sp/>exited.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes_read<sp/>=<sp/>posix::Read(read_fd(),<sp/>&amp;flag,<sp/>1);</highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bytes_read<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>errno<sp/>==<sp/>EINTR);</highlight></codeline>
<codeline lineno="6932"><highlight class="normal"></highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/><sp/><sp/>set_outcome(DIED);</highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(flag)<sp/>{</highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kDeathTestReturned:</highlight></codeline>
<codeline lineno="6938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_outcome(RETURNED);</highlight></codeline>
<codeline lineno="6939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kDeathTestThrew:</highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_outcome(THREW);</highlight></codeline>
<codeline lineno="6942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kDeathTestLived:</highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_outcome(LIVED);</highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kDeathTestInternalError:</highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FailFromInternalError(read_fd());<sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>not<sp/>return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOG_(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Death<sp/>test<sp/>child<sp/>process<sp/>reported<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>status<sp/>byte<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(flag)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOG_(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>from<sp/>death<sp/>test<sp/>child<sp/>process<sp/>failed:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>GetLastErrnoDescription();</highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(posix::Close(read_fd()));</highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/>set_read_fd(-1);</highlight></codeline>
<codeline lineno="6960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"></highlight></codeline>
<codeline lineno="6962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Signals<sp/>that<sp/>the<sp/>death<sp/>test<sp/>code<sp/>which<sp/>should<sp/>have<sp/>exited,<sp/>didn&apos;t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Should<sp/>be<sp/>called<sp/>only<sp/>in<sp/>a<sp/>death<sp/>test<sp/>child<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6964"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>a<sp/>status<sp/>byte<sp/>to<sp/>the<sp/>child&apos;s<sp/>status<sp/>file<sp/>descriptor,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>calls<sp/>_exit(1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6966"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeathTestImpl::Abort(AbortReason<sp/>reason)<sp/>{</highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>parent<sp/>process<sp/>considers<sp/>the<sp/>death<sp/>test<sp/>to<sp/>be<sp/>a<sp/>failure<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>finds<sp/>any<sp/>data<sp/>in<sp/>our<sp/>pipe.<sp/><sp/>So,<sp/>here<sp/>we<sp/>write<sp/>a<sp/>single<sp/>flag<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>pipe,<sp/>then<sp/>exit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>status_ch<sp/>=</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>==<sp/>TEST_DID_NOT_DIE<sp/>?<sp/>kDeathTestLived<sp/>:</highlight></codeline>
<codeline lineno="6972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>==<sp/>TEST_THREW_EXCEPTION<sp/>?<sp/>kDeathTestThrew<sp/>:<sp/>kDeathTestReturned;</highlight></codeline>
<codeline lineno="6973"><highlight class="normal"></highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(posix::Write(write_fd(),<sp/>&amp;status_ch,<sp/>1));</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>leaking<sp/>the<sp/>descriptor<sp/>here<sp/>because<sp/>on<sp/>some<sp/>platforms<sp/>(i.e.,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>built<sp/>as<sp/>Windows<sp/>DLL),<sp/>destructors<sp/>of<sp/>global<sp/>objects<sp/>will<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>after<sp/>calling<sp/>_exit().<sp/>On<sp/>such<sp/>systems,<sp/>write_fd_<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>indirectly<sp/>closed<sp/>from<sp/>the<sp/>destructor<sp/>of<sp/>UnitTestImpl,<sp/>causing<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>if<sp/>it<sp/>is<sp/>also<sp/>closed<sp/>here.<sp/>On<sp/>debug<sp/>configurations,<sp/>double<sp/>close</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>assert.<sp/>As<sp/>there<sp/>are<sp/>no<sp/>in-process<sp/>buffers<sp/>to<sp/>flush<sp/>here,<sp/>we<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>relying<sp/>on<sp/>the<sp/>OS<sp/>to<sp/>close<sp/>the<sp/>descriptor<sp/>after<sp/>the<sp/>process<sp/>terminates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6982"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>destructors<sp/>are<sp/>not<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6983"><highlight class="normal"><sp/><sp/>_exit(1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Exits<sp/>w/o<sp/>any<sp/>normal<sp/>exit<sp/>hooks<sp/>(we<sp/>were<sp/>supposed<sp/>to<sp/>crash)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6985"><highlight class="normal"></highlight></codeline>
<codeline lineno="6986"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>indented<sp/>copy<sp/>of<sp/>stderr<sp/>output<sp/>for<sp/>a<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>makes<sp/>distinguishing<sp/>death<sp/>test<sp/>output<sp/>lines<sp/>from<sp/>regular<sp/>log<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>much<sp/>easier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6989"><highlight class="normal">static<sp/>::std::string<sp/>FormatDeathTestOutput(const<sp/>::std::string&amp;<sp/>output)<sp/>{</highlight></codeline>
<codeline lineno="6990"><highlight class="normal"><sp/><sp/>::std::string<sp/>ret;</highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>at<sp/>=<sp/>0;<sp/>;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>line_end<sp/>=<sp/>output.find(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>at);</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>DEATH<sp/><sp/><sp/>]<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_end<sp/>==<sp/>::std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="6995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>output.substr(at);</highlight></codeline>
<codeline lineno="6996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6998"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>output.substr(at,<sp/>line_end<sp/>+<sp/>1<sp/>-<sp/>at);</highlight></codeline>
<codeline lineno="6999"><highlight class="normal"><sp/><sp/><sp/><sp/>at<sp/>=<sp/>line_end<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="7000"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="7002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"></highlight></codeline>
<codeline lineno="7004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assesses<sp/>the<sp/>success<sp/>or<sp/>failure<sp/>of<sp/>a<sp/>death<sp/>test,<sp/>using<sp/>both<sp/>private</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>members<sp/>which<sp/>have<sp/>previously<sp/>been<sp/>set,<sp/>and<sp/>one<sp/>argument:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7006"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7007"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Private<sp/>data<sp/>members:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7008"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>outcome:<sp/><sp/>An<sp/>enumeration<sp/>describing<sp/>how<sp/>the<sp/>death<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7009"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>concluded:<sp/>DIED,<sp/>LIVED,<sp/>THREW,<sp/>or<sp/>RETURNED.<sp/><sp/>The<sp/>death<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7010"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fails<sp/>in<sp/>the<sp/>latter<sp/>three<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7011"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>status:<sp/><sp/><sp/>The<sp/>exit<sp/>status<sp/>of<sp/>the<sp/>child<sp/>process.<sp/>On<sp/>*nix,<sp/>it<sp/>is<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7012"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>format<sp/>specified<sp/>by<sp/>wait(2).<sp/>On<sp/>Windows,<sp/>this<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7013"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>supplied<sp/>to<sp/>the<sp/>ExitProcess()<sp/>API<sp/>or<sp/>a<sp/>numeric<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7014"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>exception<sp/>that<sp/>terminated<sp/>the<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7015"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>regex:<sp/><sp/><sp/><sp/>A<sp/>regular<sp/>expression<sp/>object<sp/>to<sp/>be<sp/>applied<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7016"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>test&apos;s<sp/>captured<sp/>standard<sp/>error<sp/>output;<sp/>the<sp/>death<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7017"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fails<sp/>if<sp/>it<sp/>does<sp/>not<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7018"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Argument:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7020"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>status_ok:<sp/>true<sp/>if<sp/>exit_status<sp/>is<sp/>acceptable<sp/>in<sp/>the<sp/>context<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7021"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>particular<sp/>death<sp/>test,<sp/>which<sp/>fails<sp/>if<sp/>it<sp/>is<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7022"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>all<sp/>of<sp/>the<sp/>above<sp/>conditions<sp/>are<sp/>met.<sp/><sp/>Otherwise,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7024"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>failing<sp/>condition,<sp/>in<sp/>the<sp/>order<sp/>given<sp/>above,<sp/>is<sp/>the<sp/>one<sp/>that<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7025"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reported.<sp/>Also<sp/>sets<sp/>the<sp/>last<sp/>death<sp/>test<sp/>message<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7026"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DeathTestImpl::Passed(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>status_ok)<sp/>{</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spawned())</highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7029"><highlight class="normal"></highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>error_message<sp/>=<sp/>GetCapturedStderr();</highlight></codeline>
<codeline lineno="7031"><highlight class="normal"></highlight></codeline>
<codeline lineno="7032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7033"><highlight class="normal"><sp/><sp/>Message<sp/>buffer;</highlight></codeline>
<codeline lineno="7034"><highlight class="normal"></highlight></codeline>
<codeline lineno="7035"><highlight class="normal"><sp/><sp/>buffer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Death<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>statement()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(outcome())<sp/>{</highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIVED:</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Result:<sp/>failed<sp/>to<sp/>die.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Error<sp/>msg:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FormatDeathTestOutput(error_message);</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>THREW:</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Result:<sp/>threw<sp/>an<sp/>exception.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Error<sp/>msg:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FormatDeathTestOutput(error_message);</highlight></codeline>
<codeline lineno="7044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RETURNED:</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Result:<sp/>illegal<sp/>return<sp/>in<sp/>test<sp/>statement.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Error<sp/>msg:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FormatDeathTestOutput(error_message);</highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DIED:</highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status_ok)<sp/>{</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matched<sp/>=<sp/>RE::PartialMatch(error_message.c_str(),<sp/>*regex());</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matched)<sp/>{</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Result:<sp/>died<sp/>but<sp/>not<sp/>with<sp/>expected<sp/>error.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>regex()-&gt;pattern()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Actual<sp/>msg:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FormatDeathTestOutput(error_message);</highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Result:<sp/>died<sp/>but<sp/>not<sp/>with<sp/>expected<sp/>exit<sp/>code:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ExitSummary(status())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Actual<sp/>msg:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FormatDeathTestOutput(error_message);</highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IN_PROGRESS:</highlight></codeline>
<codeline lineno="7066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOG_(FATAL)</highlight></codeline>
<codeline lineno="7068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DeathTest::Passed<sp/>somehow<sp/>called<sp/>before<sp/>conclusion<sp/>of<sp/>test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7070"><highlight class="normal"></highlight></codeline>
<codeline lineno="7071"><highlight class="normal"><sp/><sp/>DeathTest::set_last_death_test_message(buffer.GetString());</highlight></codeline>
<codeline lineno="7072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="7073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7074"><highlight class="normal"></highlight></codeline>
<codeline lineno="7075"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WindowsDeathTest<sp/>implements<sp/>death<sp/>tests<sp/>on<sp/>Windows.<sp/>Due<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7077"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specifics<sp/>of<sp/>starting<sp/>new<sp/>processes<sp/>on<sp/>Windows,<sp/>death<sp/>tests<sp/>there<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7078"><highlight class="normal"></highlight><highlight class="comment">//<sp/>always<sp/>threadsafe,<sp/>and<sp/>Google<sp/>Test<sp/>considers<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gtest_death_test_style=fast<sp/>setting<sp/>to<sp/>be<sp/>equivalent<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7080"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gtest_death_test_style=threadsafe<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7081"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>few<sp/>implementation<sp/>notes:<sp/><sp/>Like<sp/>the<sp/>Linux<sp/>version,<sp/>the<sp/>Windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7083"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>uses<sp/>pipes<sp/>for<sp/>child-to-parent<sp/>communication.<sp/>But<sp/>due<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7084"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>specifics<sp/>of<sp/>pipes<sp/>on<sp/>Windows,<sp/>some<sp/>extra<sp/>steps<sp/>are<sp/>required:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7085"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>The<sp/>parent<sp/>creates<sp/>a<sp/>communication<sp/>pipe<sp/>and<sp/>stores<sp/>handles<sp/>to<sp/>both</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7087"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>ends<sp/>of<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7088"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>The<sp/>parent<sp/>starts<sp/>the<sp/>child<sp/>and<sp/>provides<sp/>it<sp/>with<sp/>the<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7089"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>necessary<sp/>to<sp/>acquire<sp/>the<sp/>handle<sp/>to<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7090"><highlight class="normal"></highlight><highlight class="comment">//<sp/>3.<sp/>The<sp/>child<sp/>acquires<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>and<sp/>signals<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7091"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>using<sp/>a<sp/>Windows<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7092"><highlight class="normal"></highlight><highlight class="comment">//<sp/>4.<sp/>Now<sp/>the<sp/>parent<sp/>can<sp/>release<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>on<sp/>its<sp/>side.<sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7093"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>is<sp/>done<sp/>before<sp/>step<sp/>3,<sp/>the<sp/>object&apos;s<sp/>reference<sp/>count<sp/>goes<sp/>down<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7094"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0<sp/>and<sp/>it<sp/>is<sp/>destroyed,<sp/>preventing<sp/>the<sp/>child<sp/>from<sp/>acquiring<sp/>it.<sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7095"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>parent<sp/>now<sp/>has<sp/>to<sp/>release<sp/>it,<sp/>or<sp/>read<sp/>operations<sp/>on<sp/>the<sp/>read<sp/>end<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7096"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>pipe<sp/>will<sp/>not<sp/>return<sp/>when<sp/>the<sp/>child<sp/>terminates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7097"><highlight class="normal"></highlight><highlight class="comment">//<sp/>5.<sp/>The<sp/>parent<sp/>reads<sp/>child&apos;s<sp/>output<sp/>through<sp/>the<sp/>pipe<sp/>(outcome<sp/>code<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7098"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>any<sp/>possible<sp/>error<sp/>messages)<sp/>from<sp/>the<sp/>pipe,<sp/>and<sp/>its<sp/>stderr<sp/>and<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7099"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>determines<sp/>whether<sp/>to<sp/>fail<sp/>the<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7100"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>to<sp/>distinguish<sp/>Win32<sp/>API<sp/>calls<sp/>from<sp/>the<sp/>local<sp/>method<sp/>and<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>calls,<sp/>the<sp/>former<sp/>are<sp/>explicitly<sp/>resolved<sp/>in<sp/>the<sp/>global<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7103"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7104"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">WindowsDeathTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DeathTestImpl<sp/>{</highlight></codeline>
<codeline lineno="7105"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/>WindowsDeathTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_statement,</highlight></codeline>
<codeline lineno="7107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>a_regex,</highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="7109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>DeathTestImpl(a_statement,<sp/>a_regex),<sp/>file_(file),<sp/>line_(line)<sp/>{}</highlight></codeline>
<codeline lineno="7111"><highlight class="normal"></highlight></codeline>
<codeline lineno="7112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>of<sp/>these<sp/>virtual<sp/>functions<sp/>are<sp/>inherited<sp/>from<sp/>DeathTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Wait();</highlight></codeline>
<codeline lineno="7114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>TestRole<sp/>AssumeRole();</highlight></codeline>
<codeline lineno="7115"><highlight class="normal"></highlight></codeline>
<codeline lineno="7116"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>name<sp/>of<sp/>the<sp/>file<sp/>in<sp/>which<sp/>the<sp/>death<sp/>test<sp/>is<sp/>located.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file_;</highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>number<sp/>on<sp/>which<sp/>the<sp/>death<sp/>test<sp/>is<sp/>located.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_;</highlight></codeline>
<codeline lineno="7121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>to<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>to<sp/>the<sp/>child<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/>AutoHandle<sp/>write_handle_;</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Child<sp/>process<sp/>handle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7124"><highlight class="normal"><sp/><sp/>AutoHandle<sp/>child_handle_;</highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Event<sp/>the<sp/>child<sp/>process<sp/>uses<sp/>to<sp/>signal<sp/>the<sp/>parent<sp/>that<sp/>it<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>acquired<sp/>the<sp/>handle<sp/>to<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe.<sp/>After<sp/>seeing<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>event<sp/>the<sp/>parent<sp/>can<sp/>release<sp/>its<sp/>own<sp/>handles<sp/>to<sp/>make<sp/>sure<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ReadFile()<sp/>calls<sp/>return<sp/>when<sp/>the<sp/>child<sp/>terminates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7129"><highlight class="normal"><sp/><sp/>AutoHandle<sp/>event_handle_;</highlight></codeline>
<codeline lineno="7130"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7131"><highlight class="normal"></highlight></codeline>
<codeline lineno="7132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Waits<sp/>for<sp/>the<sp/>child<sp/>in<sp/>a<sp/>death<sp/>test<sp/>to<sp/>exit,<sp/>returning<sp/>its<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>status,<sp/>or<sp/>0<sp/>if<sp/>no<sp/>child<sp/>process<sp/>exists.<sp/><sp/>As<sp/>a<sp/>side<sp/>effect,<sp/>sets<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>outcome<sp/>data<sp/>member.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7135"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WindowsDeathTest::Wait()<sp/>{</highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spawned())</highlight></codeline>
<codeline lineno="7137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="7138"><highlight class="normal"></highlight></codeline>
<codeline lineno="7139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>the<sp/>child<sp/>either<sp/>signals<sp/>that<sp/>it<sp/>has<sp/>acquired<sp/>the<sp/>write<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>pipe<sp/>or<sp/>it<sp/>dies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HANDLE<sp/>wait_handles[2]<sp/>=<sp/>{<sp/>child_handle_.Get(),<sp/>event_handle_.Get()<sp/>};</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(::WaitForMultipleObjects(2,</highlight></codeline>
<codeline lineno="7143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait_handles,</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/></highlight><highlight class="comment">//<sp/>Waits<sp/>for<sp/>any<sp/>of<sp/>the<sp/>handles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INFINITE))<sp/>{</highlight></codeline>
<codeline lineno="7146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WAIT_OBJECT_0:</highlight></codeline>
<codeline lineno="7147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WAIT_OBJECT_0<sp/>+<sp/>1:</highlight></codeline>
<codeline lineno="7148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_DEATH_TEST_CHECK_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>not<sp/>get<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7152"><highlight class="normal"></highlight></codeline>
<codeline lineno="7153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>child<sp/>has<sp/>acquired<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>or<sp/>exited.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>release<sp/>the<sp/>handle<sp/>on<sp/>our<sp/>side<sp/>and<sp/>continue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7155"><highlight class="normal"><sp/><sp/>write_handle_.Reset();</highlight></codeline>
<codeline lineno="7156"><highlight class="normal"><sp/><sp/>event_handle_.Reset();</highlight></codeline>
<codeline lineno="7157"><highlight class="normal"></highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/>ReadAndInterpretStatusByte();</highlight></codeline>
<codeline lineno="7159"><highlight class="normal"></highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Waits<sp/>for<sp/>the<sp/>child<sp/>process<sp/>to<sp/>exit<sp/>if<sp/>it<sp/>haven&apos;t<sp/>already.<sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>immediately<sp/>if<sp/>the<sp/>child<sp/>has<sp/>already<sp/>exited,<sp/>regardless<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>whether<sp/>previous<sp/>calls<sp/>to<sp/>WaitForMultipleObjects<sp/>synchronized<sp/>on<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7164"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(</highlight></codeline>
<codeline lineno="7165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WAIT_OBJECT_0<sp/>==<sp/>::WaitForSingleObject(child_handle_.Get(),</highlight></codeline>
<codeline lineno="7166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INFINITE));</highlight></codeline>
<codeline lineno="7167"><highlight class="normal"><sp/><sp/>DWORD<sp/>status_code;</highlight></codeline>
<codeline lineno="7168"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(</highlight></codeline>
<codeline lineno="7169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::GetExitCodeProcess(child_handle_.Get(),<sp/>&amp;status_code)<sp/>!=<sp/>FALSE);</highlight></codeline>
<codeline lineno="7170"><highlight class="normal"><sp/><sp/>child_handle_.Reset();</highlight></codeline>
<codeline lineno="7171"><highlight class="normal"><sp/><sp/>set_status(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(status_code));</highlight></codeline>
<codeline lineno="7172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status();</highlight></codeline>
<codeline lineno="7173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7174"><highlight class="normal"></highlight></codeline>
<codeline lineno="7175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>AssumeRole<sp/>process<sp/>for<sp/>a<sp/>Windows<sp/>death<sp/>test.<sp/><sp/>It<sp/>creates<sp/>a<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>process<sp/>with<sp/>the<sp/>same<sp/>executable<sp/>as<sp/>the<sp/>current<sp/>process<sp/>to<sp/>run<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>death<sp/>test.<sp/><sp/>The<sp/>child<sp/>process<sp/>is<sp/>given<sp/>the<sp/>--gtest_filter<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gtest_internal_run_death_test<sp/>flags<sp/>such<sp/>that<sp/>it<sp/>knows<sp/>to<sp/>run<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>death<sp/>test<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7180"><highlight class="normal">DeathTest::TestRole<sp/>WindowsDeathTest::AssumeRole()<sp/>{</highlight></codeline>
<codeline lineno="7181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTestImpl*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/>GetUnitTestImpl();</highlight></codeline>
<codeline lineno="7182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InternalRunDeathTestFlag*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>flag<sp/>=</highlight></codeline>
<codeline lineno="7183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impl-&gt;internal_run_death_test_flag();</highlight></codeline>
<codeline lineno="7184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>info<sp/>=<sp/>impl-&gt;current_test_info();</highlight></codeline>
<codeline lineno="7185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>death_test_index<sp/>=<sp/>info-&gt;result()-&gt;death_test_count();</highlight></codeline>
<codeline lineno="7186"><highlight class="normal"></highlight></codeline>
<codeline lineno="7187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="7188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ParseInternalRunDeathTestFlag()<sp/>has<sp/>performed<sp/>all<sp/>the<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7190"><highlight class="normal"><sp/><sp/><sp/><sp/>set_write_fd(flag-&gt;write_fd());</highlight></codeline>
<codeline lineno="7191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXECUTE_TEST;</highlight></codeline>
<codeline lineno="7192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7193"><highlight class="normal"></highlight></codeline>
<codeline lineno="7194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>WindowsDeathTest<sp/>uses<sp/>an<sp/>anonymous<sp/>pipe<sp/>to<sp/>communicate<sp/>results<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7196"><highlight class="normal"><sp/><sp/>SECURITY_ATTRIBUTES<sp/>handles_are_inheritable<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="7197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SECURITY_ATTRIBUTES),<sp/>NULL,<sp/>TRUE<sp/>};</highlight></codeline>
<codeline lineno="7198"><highlight class="normal"><sp/><sp/>HANDLE<sp/>read_handle,<sp/>write_handle;</highlight></codeline>
<codeline lineno="7199"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(</highlight></codeline>
<codeline lineno="7200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::CreatePipe(&amp;read_handle,<sp/>&amp;write_handle,<sp/>&amp;handles_are_inheritable,</highlight></codeline>
<codeline lineno="7201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>buffer<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>FALSE);</highlight></codeline>
<codeline lineno="7203"><highlight class="normal"><sp/><sp/>set_read_fd(::_open_osfhandle(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">intptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(read_handle),</highlight></codeline>
<codeline lineno="7204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O_RDONLY));</highlight></codeline>
<codeline lineno="7205"><highlight class="normal"><sp/><sp/>write_handle_.Reset(write_handle);</highlight></codeline>
<codeline lineno="7206"><highlight class="normal"><sp/><sp/>event_handle_.Reset(::CreateEvent(</highlight></codeline>
<codeline lineno="7207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;handles_are_inheritable,</highlight></codeline>
<codeline lineno="7208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TRUE,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>event<sp/>will<sp/>automatically<sp/>reset<sp/>to<sp/>non-signaled<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>initial<sp/>state<sp/>is<sp/>non-signalled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULL));<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>even<sp/>is<sp/>unnamed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7211"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(event_handle_.Get()<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="7212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>filter_flag<sp/>=</highlight></codeline>
<codeline lineno="7213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>+<sp/>GTEST_FLAG_PREFIX_<sp/>+<sp/>kFilterFlag<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;test_case_name()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>info-&gt;name();</highlight></codeline>
<codeline lineno="7215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>internal_flag<sp/>=</highlight></codeline>
<codeline lineno="7216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>+<sp/>GTEST_FLAG_PREFIX_<sp/>+<sp/>kInternalRunDeathTestFlag<sp/>+</highlight></codeline>
<codeline lineno="7217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"><sp/>+<sp/>file_<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>+<sp/>StreamableToString(line_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(death_test_index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(::GetCurrentProcessId()))<sp/>+</highlight></codeline>
<codeline lineno="7220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size_t<sp/>has<sp/>the<sp/>same<sp/>width<sp/>as<sp/>pointers<sp/>on<sp/>both<sp/>32-bit<sp/>and<sp/>64-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>platforms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>http://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>+<sp/>StreamableToString(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(write_handle))<sp/>+</highlight></codeline>
<codeline lineno="7224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>+<sp/>StreamableToString(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(event_handle_.Get()));</highlight></codeline>
<codeline lineno="7225"><highlight class="normal"></highlight></codeline>
<codeline lineno="7226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>executable_path[_MAX_PATH<sp/>+<sp/>1];<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7227"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(</highlight></codeline>
<codeline lineno="7228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_MAX_PATH<sp/>+<sp/>1<sp/>!=<sp/>::GetModuleFileNameA(NULL,</highlight></codeline>
<codeline lineno="7229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executable_path,</highlight></codeline>
<codeline lineno="7230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_MAX_PATH));</highlight></codeline>
<codeline lineno="7231"><highlight class="normal"></highlight></codeline>
<codeline lineno="7232"><highlight class="normal"><sp/><sp/>std::string<sp/>command_line<sp/>=</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string(::GetCommandLineA())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>filter_flag<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal_flag<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7235"><highlight class="normal"></highlight></codeline>
<codeline lineno="7236"><highlight class="normal"><sp/><sp/>DeathTest::set_last_death_test_message(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7237"><highlight class="normal"></highlight></codeline>
<codeline lineno="7238"><highlight class="normal"><sp/><sp/>CaptureStderr();</highlight></codeline>
<codeline lineno="7239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>the<sp/>log<sp/>buffers<sp/>since<sp/>the<sp/>log<sp/>streams<sp/>are<sp/>shared<sp/>with<sp/>the<sp/>child.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7240"><highlight class="normal"><sp/><sp/>FlushInfoLog();</highlight></codeline>
<codeline lineno="7241"><highlight class="normal"></highlight></codeline>
<codeline lineno="7242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>child<sp/>process<sp/>will<sp/>share<sp/>the<sp/>standard<sp/>handles<sp/>with<sp/>the<sp/>parent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7243"><highlight class="normal"><sp/><sp/>STARTUPINFOA<sp/>startup_info;</highlight></codeline>
<codeline lineno="7244"><highlight class="normal"><sp/><sp/>memset(&amp;startup_info,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(STARTUPINFO));</highlight></codeline>
<codeline lineno="7245"><highlight class="normal"><sp/><sp/>startup_info.dwFlags<sp/>=<sp/>STARTF_USESTDHANDLES;</highlight></codeline>
<codeline lineno="7246"><highlight class="normal"><sp/><sp/>startup_info.hStdInput<sp/>=<sp/>::GetStdHandle(STD_INPUT_HANDLE);</highlight></codeline>
<codeline lineno="7247"><highlight class="normal"><sp/><sp/>startup_info.hStdOutput<sp/>=<sp/>::GetStdHandle(STD_OUTPUT_HANDLE);</highlight></codeline>
<codeline lineno="7248"><highlight class="normal"><sp/><sp/>startup_info.hStdError<sp/>=<sp/>::GetStdHandle(STD_ERROR_HANDLE);</highlight></codeline>
<codeline lineno="7249"><highlight class="normal"></highlight></codeline>
<codeline lineno="7250"><highlight class="normal"><sp/><sp/>PROCESS_INFORMATION<sp/>process_info;</highlight></codeline>
<codeline lineno="7251"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(::CreateProcessA(</highlight></codeline>
<codeline lineno="7252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>executable_path,</highlight></codeline>
<codeline lineno="7253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(command_line.c_str()),</highlight></codeline>
<codeline lineno="7254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retuned<sp/>process<sp/>handle<sp/>is<sp/>not<sp/>inheritable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retuned<sp/>thread<sp/>handle<sp/>is<sp/>not<sp/>inheritable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TRUE,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Child<sp/>inherits<sp/>all<sp/>inheritable<sp/>handles<sp/>(for<sp/>write_handle_).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x0,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>creation<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inherit<sp/>the<sp/>parent&apos;s<sp/>environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UnitTest::GetInstance()-&gt;original_working_dir(),</highlight></codeline>
<codeline lineno="7260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;startup_info,</highlight></codeline>
<codeline lineno="7261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;process_info)<sp/>!=<sp/>FALSE);</highlight></codeline>
<codeline lineno="7262"><highlight class="normal"><sp/><sp/>child_handle_.Reset(process_info.hProcess);</highlight></codeline>
<codeline lineno="7263"><highlight class="normal"><sp/><sp/>::CloseHandle(process_info.hThread);</highlight></codeline>
<codeline lineno="7264"><highlight class="normal"><sp/><sp/>set_spawned(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OVERSEE_TEST;</highlight></codeline>
<codeline lineno="7266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7267"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>not<sp/>on<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7268"><highlight class="normal"></highlight></codeline>
<codeline lineno="7269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ForkingDeathTest<sp/>provides<sp/>implementations<sp/>for<sp/>most<sp/>of<sp/>the<sp/>abstract</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>methods<sp/>of<sp/>the<sp/>DeathTest<sp/>interface.<sp/><sp/>Only<sp/>the<sp/>AssumeRole<sp/>method<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>left<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7272"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ForkingDeathTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DeathTestImpl<sp/>{</highlight></codeline>
<codeline lineno="7273"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7274"><highlight class="normal"><sp/><sp/>ForkingDeathTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>regex);</highlight></codeline>
<codeline lineno="7275"><highlight class="normal"></highlight></codeline>
<codeline lineno="7276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>of<sp/>these<sp/>virtual<sp/>functions<sp/>are<sp/>inherited<sp/>from<sp/>DeathTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Wait();</highlight></codeline>
<codeline lineno="7278"><highlight class="normal"></highlight></codeline>
<codeline lineno="7279"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_child_pid(pid_t<sp/>child_pid)<sp/>{<sp/>child_pid_<sp/>=<sp/>child_pid;<sp/>}</highlight></codeline>
<codeline lineno="7281"><highlight class="normal"></highlight></codeline>
<codeline lineno="7282"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>PID<sp/>of<sp/>child<sp/>process<sp/>during<sp/>death<sp/>test;<sp/>0<sp/>in<sp/>the<sp/>child<sp/>process<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7284"><highlight class="normal"><sp/><sp/>pid_t<sp/>child_pid_;</highlight></codeline>
<codeline lineno="7285"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7286"><highlight class="normal"></highlight></codeline>
<codeline lineno="7287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>ForkingDeathTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7288"><highlight class="normal">ForkingDeathTest::ForkingDeathTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>a_regex)</highlight></codeline>
<codeline lineno="7289"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>DeathTestImpl(a_statement,<sp/>a_regex),</highlight></codeline>
<codeline lineno="7290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child_pid_(-1)<sp/>{}</highlight></codeline>
<codeline lineno="7291"><highlight class="normal"></highlight></codeline>
<codeline lineno="7292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Waits<sp/>for<sp/>the<sp/>child<sp/>in<sp/>a<sp/>death<sp/>test<sp/>to<sp/>exit,<sp/>returning<sp/>its<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>status,<sp/>or<sp/>0<sp/>if<sp/>no<sp/>child<sp/>process<sp/>exists.<sp/><sp/>As<sp/>a<sp/>side<sp/>effect,<sp/>sets<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>outcome<sp/>data<sp/>member.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7295"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ForkingDeathTest::Wait()<sp/>{</highlight></codeline>
<codeline lineno="7296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spawned())</highlight></codeline>
<codeline lineno="7297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="7298"><highlight class="normal"></highlight></codeline>
<codeline lineno="7299"><highlight class="normal"><sp/><sp/>ReadAndInterpretStatusByte();</highlight></codeline>
<codeline lineno="7300"><highlight class="normal"></highlight></codeline>
<codeline lineno="7301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status_value;</highlight></codeline>
<codeline lineno="7302"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(waitpid(child_pid_,<sp/>&amp;status_value,<sp/>0));</highlight></codeline>
<codeline lineno="7303"><highlight class="normal"><sp/><sp/>set_status(status_value);</highlight></codeline>
<codeline lineno="7304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status_value;</highlight></codeline>
<codeline lineno="7305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7306"><highlight class="normal"></highlight></codeline>
<codeline lineno="7307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>concrete<sp/>death<sp/>test<sp/>class<sp/>that<sp/>forks,<sp/>then<sp/>immediately<sp/>runs<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>child<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7309"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NoExecDeathTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ForkingDeathTest<sp/>{</highlight></codeline>
<codeline lineno="7310"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7311"><highlight class="normal"><sp/><sp/>NoExecDeathTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>a_regex)<sp/>:</highlight></codeline>
<codeline lineno="7312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ForkingDeathTest(a_statement,<sp/>a_regex)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="7313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>TestRole<sp/>AssumeRole();</highlight></codeline>
<codeline lineno="7314"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7315"><highlight class="normal"></highlight></codeline>
<codeline lineno="7316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>AssumeRole<sp/>process<sp/>for<sp/>a<sp/>fork-and-run<sp/>death<sp/>test.<sp/><sp/>It<sp/>implements<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>straightforward<sp/>fork,<sp/>with<sp/>a<sp/>simple<sp/>pipe<sp/>to<sp/>transmit<sp/>the<sp/>status<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7318"><highlight class="normal">DeathTest::TestRole<sp/>NoExecDeathTest::AssumeRole()<sp/>{</highlight></codeline>
<codeline lineno="7319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>thread_count<sp/>=<sp/>GetThreadCount();</highlight></codeline>
<codeline lineno="7320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_count<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="7321"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOG_(WARNING)<sp/>&lt;&lt;<sp/>DeathTestThreadWarning(thread_count);</highlight></codeline>
<codeline lineno="7322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7323"><highlight class="normal"></highlight></codeline>
<codeline lineno="7324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pipe_fd[2];</highlight></codeline>
<codeline lineno="7325"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(pipe(pipe_fd)<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="7326"><highlight class="normal"></highlight></codeline>
<codeline lineno="7327"><highlight class="normal"><sp/><sp/>DeathTest::set_last_death_test_message(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7328"><highlight class="normal"><sp/><sp/>CaptureStderr();</highlight></codeline>
<codeline lineno="7329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>fork<sp/>the<sp/>process<sp/>below,<sp/>the<sp/>log<sp/>file<sp/>buffers<sp/>are<sp/>copied,<sp/>but<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>descriptors<sp/>are<sp/>shared.<sp/><sp/>We<sp/>flush<sp/>all<sp/>log<sp/>files<sp/>here<sp/>so<sp/>that<sp/>closing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>file<sp/>descriptors<sp/>in<sp/>the<sp/>child<sp/>process<sp/>doesn&apos;t<sp/>throw<sp/>off<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>synchronization<sp/>between<sp/>descriptors<sp/>and<sp/>buffers<sp/>in<sp/>the<sp/>parent<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>as<sp/>close<sp/>to<sp/>the<sp/>fork<sp/>as<sp/>possible<sp/>to<sp/>avoid<sp/>a<sp/>race<sp/>condition<sp/>in<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>multiple<sp/>threads<sp/>running<sp/>before<sp/>the<sp/>death<sp/>test,<sp/>and<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>thread<sp/>writes<sp/>to<sp/>the<sp/>log<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7336"><highlight class="normal"><sp/><sp/>FlushInfoLog();</highlight></codeline>
<codeline lineno="7337"><highlight class="normal"></highlight></codeline>
<codeline lineno="7338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pid_t<sp/>child_pid<sp/>=<sp/>fork();</highlight></codeline>
<codeline lineno="7339"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(child_pid<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="7340"><highlight class="normal"><sp/><sp/>set_child_pid(child_pid);</highlight></codeline>
<codeline lineno="7341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child_pid<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7342"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[0]));</highlight></codeline>
<codeline lineno="7343"><highlight class="normal"><sp/><sp/><sp/><sp/>set_write_fd(pipe_fd[1]);</highlight></codeline>
<codeline lineno="7344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Redirects<sp/>all<sp/>logging<sp/>to<sp/>stderr<sp/>in<sp/>the<sp/>child<sp/>process<sp/>to<sp/>prevent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>concurrent<sp/>writes<sp/>to<sp/>the<sp/>log<sp/>files.<sp/><sp/>We<sp/>capture<sp/>stderr<sp/>in<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>and<sp/>append<sp/>the<sp/>child<sp/>process&apos;<sp/>output<sp/>to<sp/>a<sp/>log.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7347"><highlight class="normal"><sp/><sp/><sp/><sp/>LogToStderr();</highlight></codeline>
<codeline lineno="7348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Event<sp/>forwarding<sp/>to<sp/>the<sp/>listeners<sp/>of<sp/>event<sp/>listener<sp/>API<sp/>mush<sp/>be<sp/>shut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>down<sp/>in<sp/>death<sp/>test<sp/>subprocesses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7350"><highlight class="normal"><sp/><sp/><sp/><sp/>GetUnitTestImpl()-&gt;listeners()-&gt;SuppressEventForwarding();</highlight></codeline>
<codeline lineno="7351"><highlight class="normal"><sp/><sp/><sp/><sp/>g_in_fast_death_test_child<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXECUTE_TEST;</highlight></codeline>
<codeline lineno="7353"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7354"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[1]));</highlight></codeline>
<codeline lineno="7355"><highlight class="normal"><sp/><sp/><sp/><sp/>set_read_fd(pipe_fd[0]);</highlight></codeline>
<codeline lineno="7356"><highlight class="normal"><sp/><sp/><sp/><sp/>set_spawned(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OVERSEE_TEST;</highlight></codeline>
<codeline lineno="7358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7360"><highlight class="normal"></highlight></codeline>
<codeline lineno="7361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>concrete<sp/>death<sp/>test<sp/>class<sp/>that<sp/>forks<sp/>and<sp/>re-executes<sp/>the<sp/>main</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>program<sp/>from<sp/>the<sp/>beginning,<sp/>with<sp/>command-line<sp/>flags<sp/>set<sp/>that<sp/>cause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>this<sp/>specific<sp/>death<sp/>test<sp/>to<sp/>be<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7364"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExecDeathTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ForkingDeathTest<sp/>{</highlight></codeline>
<codeline lineno="7365"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7366"><highlight class="normal"><sp/><sp/>ExecDeathTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>a_regex,</highlight></codeline>
<codeline lineno="7367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)<sp/>:</highlight></codeline>
<codeline lineno="7368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ForkingDeathTest(a_statement,<sp/>a_regex),<sp/>file_(file),<sp/>line_(line)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="7369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>TestRole<sp/>AssumeRole();</highlight></codeline>
<codeline lineno="7370"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7371"><highlight class="normal"><sp/><sp/>static<sp/>::std::vector&lt;testing::internal::string&gt;</highlight></codeline>
<codeline lineno="7372"><highlight class="normal"><sp/><sp/>GetArgvsForDeathTestChildProcess()<sp/>{</highlight></codeline>
<codeline lineno="7373"><highlight class="normal"><sp/><sp/><sp/><sp/>::std::vector&lt;testing::internal::string&gt;<sp/>args<sp/>=<sp/>GetInjectableArgvs();</highlight></codeline>
<codeline lineno="7374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args;</highlight></codeline>
<codeline lineno="7375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>name<sp/>of<sp/>the<sp/>file<sp/>in<sp/>which<sp/>the<sp/>death<sp/>test<sp/>is<sp/>located.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file_;</highlight></codeline>
<codeline lineno="7378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>number<sp/>on<sp/>which<sp/>the<sp/>death<sp/>test<sp/>is<sp/>located.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_;</highlight></codeline>
<codeline lineno="7380"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7381"><highlight class="normal"></highlight></codeline>
<codeline lineno="7382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utility<sp/>class<sp/>for<sp/>accumulating<sp/>command-line<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7383"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Arguments<sp/>{</highlight></codeline>
<codeline lineno="7384"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7385"><highlight class="normal"><sp/><sp/>Arguments()<sp/>{</highlight></codeline>
<codeline lineno="7386"><highlight class="normal"><sp/><sp/><sp/><sp/>args_.push_back(NULL);</highlight></codeline>
<codeline lineno="7387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7388"><highlight class="normal"></highlight></codeline>
<codeline lineno="7389"><highlight class="normal"><sp/><sp/>~Arguments()<sp/>{</highlight></codeline>
<codeline lineno="7390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;char*&gt;::iterator<sp/>i<sp/>=<sp/>args_.begin();<sp/>i<sp/>!=<sp/>args_.end();</highlight></codeline>
<codeline lineno="7391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(*i);</highlight></codeline>
<codeline lineno="7393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddArgument(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argument)<sp/>{</highlight></codeline>
<codeline lineno="7396"><highlight class="normal"><sp/><sp/><sp/><sp/>args_.insert(args_.end()<sp/>-<sp/>1,<sp/>posix::StrDup(argument));</highlight></codeline>
<codeline lineno="7397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7398"><highlight class="normal"></highlight></codeline>
<codeline lineno="7399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Str&gt;</highlight></codeline>
<codeline lineno="7400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddArguments(const<sp/>::std::vector&lt;Str&gt;&amp;<sp/>arguments)<sp/>{</highlight></codeline>
<codeline lineno="7401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(typename<sp/>::std::vector&lt;Str&gt;::const_iterator<sp/>i<sp/>=<sp/>arguments.begin();</highlight></codeline>
<codeline lineno="7402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>!=<sp/>arguments.end();</highlight></codeline>
<codeline lineno="7403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args_.insert(args_.end()<sp/>-<sp/>1,<sp/>posix::StrDup(i-&gt;c_str()));</highlight></codeline>
<codeline lineno="7405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>Argv()<sp/>{</highlight></codeline>
<codeline lineno="7408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;args_[0];</highlight></codeline>
<codeline lineno="7409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7410"><highlight class="normal"></highlight></codeline>
<codeline lineno="7411"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7412"><highlight class="normal"><sp/><sp/>std::vector&lt;char*&gt;<sp/>args_;</highlight></codeline>
<codeline lineno="7413"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7414"><highlight class="normal"></highlight></codeline>
<codeline lineno="7415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>struct<sp/>that<sp/>encompasses<sp/>the<sp/>arguments<sp/>to<sp/>the<sp/>child<sp/>process<sp/>of<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>threadsafe-style<sp/>death<sp/>test<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7417"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ExecDeathTestArgs<sp/>{</highlight></codeline>
<codeline lineno="7418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv;<sp/><sp/></highlight><highlight class="comment">//<sp/>Command-line<sp/>arguments<sp/>for<sp/>the<sp/>child&apos;s<sp/>call<sp/>to<sp/>exec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>close_fd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>File<sp/>descriptor<sp/>to<sp/>close;<sp/>the<sp/>read<sp/>end<sp/>of<sp/>a<sp/>pipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7420"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7421"><highlight class="normal"></highlight></codeline>
<codeline lineno="7422"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7423"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>GetEnviron()<sp/>{</highlight></codeline>
<codeline lineno="7424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>Google<sp/>Test<sp/>is<sp/>built<sp/>as<sp/>a<sp/>framework<sp/>on<sp/>MacOS<sp/>X,<sp/>the<sp/>environ<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>unavailable.<sp/>Apple&apos;s<sp/>documentation<sp/>(man<sp/>environ)<sp/>recommends<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>_NSGetEnviron()<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*_NSGetEnviron();</highlight></codeline>
<codeline lineno="7428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7429"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>POSIX<sp/>platforms<sp/>expect<sp/>you<sp/>to<sp/>declare<sp/>environ.<sp/>extern<sp/>&quot;C&quot;<sp/>makes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>reside<sp/>in<sp/>the<sp/>global<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7432"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>environ;</highlight></codeline>
<codeline lineno="7433"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>GetEnviron()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>environ;<sp/>}</highlight></codeline>
<codeline lineno="7434"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7435"><highlight class="normal"></highlight></codeline>
<codeline lineno="7436"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>!GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>main<sp/>function<sp/>for<sp/>a<sp/>threadsafe-style<sp/>death<sp/>test<sp/>child<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>called<sp/>in<sp/>a<sp/>clone()-ed<sp/>process<sp/>and<sp/>thus<sp/>must<sp/>avoid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>any<sp/>potentially<sp/>unsafe<sp/>operations<sp/>like<sp/>malloc<sp/>or<sp/>libc<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7440"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ExecDeathTestChildMain(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>child_arg)<sp/>{</highlight></codeline>
<codeline lineno="7441"><highlight class="normal"><sp/><sp/>ExecDeathTestArgs*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>args<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ExecDeathTestArgs*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(child_arg);</highlight></codeline>
<codeline lineno="7442"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(close(args-&gt;close_fd));</highlight></codeline>
<codeline lineno="7443"><highlight class="normal"></highlight></codeline>
<codeline lineno="7444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>execute<sp/>the<sp/>test<sp/>program<sp/>in<sp/>the<sp/>same<sp/>environment<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>was<sp/>originally<sp/>invoked.<sp/><sp/>Therefore<sp/>we<sp/>change<sp/>to<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>working<sp/>directory<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>original_dir<sp/>=</highlight></codeline>
<codeline lineno="7448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UnitTest::GetInstance()-&gt;original_working_dir();</highlight></codeline>
<codeline lineno="7449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>safely<sp/>call<sp/>chdir()<sp/>as<sp/>it&apos;s<sp/>a<sp/>direct<sp/>system<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chdir(original_dir)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7451"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(std::string(</highlight><highlight class="stringliteral">&quot;chdir(\&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>original_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;)<sp/>failed:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLastErrnoDescription());</highlight></codeline>
<codeline lineno="7453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="7454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7455"><highlight class="normal"></highlight></codeline>
<codeline lineno="7456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>safely<sp/>call<sp/>execve()<sp/>as<sp/>it&apos;s<sp/>a<sp/>direct<sp/>system<sp/>call.<sp/><sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>use<sp/>execvp()<sp/>as<sp/>it&apos;s<sp/>a<sp/>libc<sp/>function<sp/>and<sp/>thus<sp/>potentially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unsafe.<sp/><sp/>Since<sp/>execve()<sp/>doesn&apos;t<sp/>search<sp/>the<sp/>PATH,<sp/>the<sp/>user<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>invoke<sp/>the<sp/>test<sp/>program<sp/>via<sp/>a<sp/>valid<sp/>path<sp/>that<sp/>contains<sp/>at<sp/>least</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>path<sp/>separator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7461"><highlight class="normal"><sp/><sp/>execve(args-&gt;argv[0],<sp/>args-&gt;argv,<sp/>GetEnviron());</highlight></codeline>
<codeline lineno="7462"><highlight class="normal"><sp/><sp/>DeathTestAbort(std::string(</highlight><highlight class="stringliteral">&quot;execve(&quot;</highlight><highlight class="normal">)<sp/>+<sp/>args-&gt;argv[0]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>...)<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>failed:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLastErrnoDescription());</highlight></codeline>
<codeline lineno="7465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="7466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7467"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7468"><highlight class="normal"></highlight></codeline>
<codeline lineno="7469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Two<sp/>utility<sp/>routines<sp/>that<sp/>together<sp/>determine<sp/>the<sp/>direction<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>grows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>could<sp/>be<sp/>accomplished<sp/>more<sp/>elegantly<sp/>by<sp/>a<sp/>single<sp/>recursive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function,<sp/>but<sp/>we<sp/>want<sp/>to<sp/>guard<sp/>against<sp/>the<sp/>unlikely<sp/>possibility<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>smart<sp/>compiler<sp/>optimizing<sp/>the<sp/>recursion<sp/>away.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7474"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_NO_INLINE_<sp/>is<sp/>required<sp/>to<sp/>prevent<sp/>GCC<sp/>4.6<sp/>from<sp/>inlining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7476"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StackLowerThanAddress<sp/>into<sp/>StackGrowsDown,<sp/>which<sp/>then<sp/>doesn&apos;t<sp/>give</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>correct<sp/>answer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7478"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StackLowerThanAddress(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>result)<sp/>GTEST_NO_INLINE_;</highlight></codeline>
<codeline lineno="7479"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StackLowerThanAddress(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="7480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="7481"><highlight class="normal"><sp/><sp/>*result<sp/>=<sp/>(&amp;dummy<sp/>&lt;<sp/>ptr);</highlight></codeline>
<codeline lineno="7482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7483"><highlight class="normal"></highlight></codeline>
<codeline lineno="7484"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StackGrowsDown()<sp/>{</highlight></codeline>
<codeline lineno="7485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="7486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7487"><highlight class="normal"><sp/><sp/>StackLowerThanAddress(&amp;dummy,<sp/>&amp;result);</highlight></codeline>
<codeline lineno="7488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7490"><highlight class="normal"></highlight></codeline>
<codeline lineno="7491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Spawns<sp/>a<sp/>child<sp/>process<sp/>with<sp/>the<sp/>same<sp/>executable<sp/>as<sp/>the<sp/>current<sp/>process<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>thread-safe<sp/>manner<sp/>and<sp/>instructs<sp/>it<sp/>to<sp/>run<sp/>the<sp/>death<sp/>test.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7493"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>uses<sp/>fork(2)<sp/>+<sp/>exec.<sp/><sp/>On<sp/>systems<sp/>where<sp/>clone(2)<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>available,<sp/>it<sp/>is<sp/>used<sp/>instead,<sp/>being<sp/>slightly<sp/>more<sp/>thread-safe.<sp/><sp/>On<sp/>QNX,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fork<sp/>supports<sp/>only<sp/>single-threaded<sp/>environments,<sp/>so<sp/>this<sp/>function<sp/>uses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>spawn(2)<sp/>there<sp/>instead.<sp/><sp/>The<sp/>function<sp/>dies<sp/>with<sp/>an<sp/>error<sp/>message<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>anything<sp/>goes<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7498"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pid_t<sp/>ExecDeathTestSpawnChild(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>close_fd)<sp/>{</highlight></codeline>
<codeline lineno="7499"><highlight class="normal"><sp/><sp/>ExecDeathTestArgs<sp/>args<sp/>=<sp/>{<sp/>argv,<sp/>close_fd<sp/>};</highlight></codeline>
<codeline lineno="7500"><highlight class="normal"><sp/><sp/>pid_t<sp/>child_pid<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="7501"><highlight class="normal"></highlight></codeline>
<codeline lineno="7502"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Obtains<sp/>the<sp/>current<sp/>directory<sp/>and<sp/>sets<sp/>it<sp/>to<sp/>be<sp/>closed<sp/>in<sp/>the<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cwd_fd<sp/>=<sp/>open(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,<sp/>O_RDONLY);</highlight></codeline>
<codeline lineno="7506"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(cwd_fd<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="7507"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(fcntl(cwd_fd,<sp/>F_SETFD,<sp/>FD_CLOEXEC));</highlight></codeline>
<codeline lineno="7508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>execute<sp/>the<sp/>test<sp/>program<sp/>in<sp/>the<sp/>same<sp/>environment<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>was<sp/>originally<sp/>invoked.<sp/><sp/>Therefore<sp/>we<sp/>change<sp/>to<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>working<sp/>directory<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>original_dir<sp/>=</highlight></codeline>
<codeline lineno="7512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UnitTest::GetInstance()-&gt;original_working_dir();</highlight></codeline>
<codeline lineno="7513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>safely<sp/>call<sp/>chdir()<sp/>as<sp/>it&apos;s<sp/>a<sp/>direct<sp/>system<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chdir(original_dir)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7515"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(std::string(</highlight><highlight class="stringliteral">&quot;chdir(\&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>original_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;)<sp/>failed:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLastErrnoDescription());</highlight></codeline>
<codeline lineno="7517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="7518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7519"><highlight class="normal"></highlight></codeline>
<codeline lineno="7520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd_flags;</highlight></codeline>
<codeline lineno="7521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>close_fd<sp/>to<sp/>be<sp/>closed<sp/>after<sp/>spawn.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7522"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(fd_flags<sp/>=<sp/>fcntl(close_fd,<sp/>F_GETFD));</highlight></codeline>
<codeline lineno="7523"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(fcntl(close_fd,<sp/>F_SETFD,</highlight></codeline>
<codeline lineno="7524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd_flags<sp/>|<sp/>FD_CLOEXEC));</highlight></codeline>
<codeline lineno="7525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">inheritance<sp/>inherit<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="7526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>spawn<sp/>is<sp/>a<sp/>system<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7527"><highlight class="normal"><sp/><sp/>child_pid<sp/>=<sp/>spawn(args.argv[0],<sp/>0,<sp/>NULL,<sp/>&amp;inherit,<sp/>args.argv,<sp/>GetEnviron());</highlight></codeline>
<codeline lineno="7528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>current<sp/>working<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7529"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(fchdir(cwd_fd)<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="7530"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(close(cwd_fd));</highlight></codeline>
<codeline lineno="7531"><highlight class="normal"></highlight></codeline>
<codeline lineno="7532"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7533"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>a<sp/>SIGPROF<sp/>signal<sp/>is<sp/>received<sp/>while<sp/>fork()<sp/>or<sp/>clone()<sp/>are<sp/>executing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>process<sp/>may<sp/>hang.<sp/>To<sp/>avoid<sp/>this,<sp/>we<sp/>ignore<sp/>SIGPROF<sp/>here<sp/>and<sp/>re-enable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>after<sp/>the<sp/>call<sp/>to<sp/>fork()/clone()<sp/>is<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>saved_sigprof_action;</highlight></codeline>
<codeline lineno="7538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>ignore_sigprof_action;</highlight></codeline>
<codeline lineno="7539"><highlight class="normal"><sp/><sp/>memset(&amp;ignore_sigprof_action,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ignore_sigprof_action));</highlight></codeline>
<codeline lineno="7540"><highlight class="normal"><sp/><sp/>sigemptyset(&amp;ignore_sigprof_action.sa_mask);</highlight></codeline>
<codeline lineno="7541"><highlight class="normal"><sp/><sp/>ignore_sigprof_action.sa_handler<sp/>=<sp/>SIG_IGN;</highlight></codeline>
<codeline lineno="7542"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(sigaction(</highlight></codeline>
<codeline lineno="7543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SIGPROF,<sp/>&amp;ignore_sigprof_action,<sp/>&amp;saved_sigprof_action));</highlight></codeline>
<codeline lineno="7544"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7545"><highlight class="normal"></highlight></codeline>
<codeline lineno="7546"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>GTEST_HAS_CLONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_fork<sp/>=<sp/>GTEST_FLAG(death_test_use_fork);</highlight></codeline>
<codeline lineno="7548"><highlight class="normal"></highlight></codeline>
<codeline lineno="7549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!use_fork)<sp/>{</highlight></codeline>
<codeline lineno="7550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stack_grows_down<sp/>=<sp/>StackGrowsDown();</highlight></codeline>
<codeline lineno="7551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stack_size<sp/>=<sp/>getpagesize();</highlight></codeline>
<codeline lineno="7552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMAP_ANONYMOUS<sp/>is<sp/>not<sp/>defined<sp/>on<sp/>Mac,<sp/>so<sp/>we<sp/>use<sp/>MAP_ANON<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>stack<sp/>=<sp/>mmap(NULL,<sp/>stack_size,<sp/>PROT_READ<sp/>|<sp/>PROT_WRITE,</highlight></codeline>
<codeline lineno="7554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAP_ANON<sp/>|<sp/>MAP_PRIVATE,<sp/>-1,<sp/>0);</highlight></codeline>
<codeline lineno="7555"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DEATH_TEST_CHECK_(stack<sp/>!=<sp/>MAP_FAILED);</highlight></codeline>
<codeline lineno="7556"><highlight class="normal"></highlight></codeline>
<codeline lineno="7557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>stack<sp/>alignment<sp/>in<sp/>bytes:<sp/><sp/>For<sp/>a<sp/>downward-growing<sp/>stack,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>amount<sp/>is<sp/>subtracted<sp/>from<sp/>size<sp/>of<sp/>the<sp/>stack<sp/>space<sp/>to<sp/>get<sp/>an<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>within<sp/>the<sp/>stack<sp/>space<sp/>and<sp/>is<sp/>aligned<sp/>on<sp/>all<sp/>systems<sp/>we<sp/>care</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>about.<sp/><sp/>As<sp/>far<sp/>as<sp/>I<sp/>know<sp/>there<sp/>is<sp/>no<sp/>ABI<sp/>with<sp/>stack<sp/>alignment<sp/>greater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>64.<sp/><sp/>We<sp/>assume<sp/>stack<sp/>and<sp/>stack_size<sp/>already<sp/>have<sp/>alignment<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kMaxStackAlignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kMaxStackAlignment<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="7564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>stack_top<sp/>=</highlight></codeline>
<codeline lineno="7565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(stack)<sp/>+</highlight></codeline>
<codeline lineno="7566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(stack_grows_down<sp/>?<sp/>stack_size<sp/>-<sp/>kMaxStackAlignment<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="7567"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DEATH_TEST_CHECK_(stack_size<sp/>&gt;<sp/>kMaxStackAlignment<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">intptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(stack_top)<sp/>%<sp/>kMaxStackAlignment<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="7569"><highlight class="normal"></highlight></codeline>
<codeline lineno="7570"><highlight class="normal"><sp/><sp/><sp/><sp/>child_pid<sp/>=<sp/>clone(&amp;ExecDeathTestChildMain,<sp/>stack_top,<sp/>SIGCHLD,<sp/>&amp;args);</highlight></codeline>
<codeline lineno="7571"><highlight class="normal"></highlight></codeline>
<codeline lineno="7572"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DEATH_TEST_CHECK_(munmap(stack,<sp/>stack_size)<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="7573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7574"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_fork<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7576"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_CLONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7577"><highlight class="normal"></highlight></codeline>
<codeline lineno="7578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_fork<sp/>&amp;&amp;<sp/>(child_pid<sp/>=<sp/>fork())<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExecDeathTestChildMain(&amp;args);</highlight></codeline>
<codeline lineno="7580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_exit(0);</highlight></codeline>
<codeline lineno="7581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7582"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7583"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7584"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(</highlight></codeline>
<codeline lineno="7585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sigaction(SIGPROF,<sp/>&amp;saved_sigprof_action,<sp/>NULL));</highlight></codeline>
<codeline lineno="7586"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7587"><highlight class="normal"></highlight></codeline>
<codeline lineno="7588"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(child_pid<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="7589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>child_pid;</highlight></codeline>
<codeline lineno="7590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7591"><highlight class="normal"></highlight></codeline>
<codeline lineno="7592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>AssumeRole<sp/>process<sp/>for<sp/>a<sp/>fork-and-exec<sp/>death<sp/>test.<sp/><sp/>It<sp/>re-executes<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7593"><highlight class="normal"></highlight><highlight class="comment">//<sp/>main<sp/>program<sp/>from<sp/>the<sp/>beginning,<sp/>setting<sp/>the<sp/>--gtest_filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>--gtest_internal_run_death_test<sp/>flags<sp/>to<sp/>cause<sp/>only<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>death<sp/>test<sp/>to<sp/>be<sp/>re-run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7596"><highlight class="normal">DeathTest::TestRole<sp/>ExecDeathTest::AssumeRole()<sp/>{</highlight></codeline>
<codeline lineno="7597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTestImpl*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/>GetUnitTestImpl();</highlight></codeline>
<codeline lineno="7598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InternalRunDeathTestFlag*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>flag<sp/>=</highlight></codeline>
<codeline lineno="7599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impl-&gt;internal_run_death_test_flag();</highlight></codeline>
<codeline lineno="7600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>info<sp/>=<sp/>impl-&gt;current_test_info();</highlight></codeline>
<codeline lineno="7601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>death_test_index<sp/>=<sp/>info-&gt;result()-&gt;death_test_count();</highlight></codeline>
<codeline lineno="7602"><highlight class="normal"></highlight></codeline>
<codeline lineno="7603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="7604"><highlight class="normal"><sp/><sp/><sp/><sp/>set_write_fd(flag-&gt;write_fd());</highlight></codeline>
<codeline lineno="7605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXECUTE_TEST;</highlight></codeline>
<codeline lineno="7606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7607"><highlight class="normal"></highlight></codeline>
<codeline lineno="7608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pipe_fd[2];</highlight></codeline>
<codeline lineno="7609"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(pipe(pipe_fd)<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="7610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>close-on-exec<sp/>flag<sp/>on<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe,<sp/>lest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>be<sp/>closed<sp/>when<sp/>the<sp/>child<sp/>process<sp/>does<sp/>an<sp/>exec:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7612"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(fcntl(pipe_fd[1],<sp/>F_SETFD,<sp/>0)<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="7613"><highlight class="normal"></highlight></codeline>
<codeline lineno="7614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>filter_flag<sp/>=</highlight></codeline>
<codeline lineno="7615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>+<sp/>GTEST_FLAG_PREFIX_<sp/>+<sp/>kFilterFlag<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>info-&gt;test_case_name()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>info-&gt;name();</highlight></codeline>
<codeline lineno="7617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>internal_flag<sp/>=</highlight></codeline>
<codeline lineno="7618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>+<sp/>GTEST_FLAG_PREFIX_<sp/>+<sp/>kInternalRunDeathTestFlag<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>file_<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>+<sp/>StreamableToString(line_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>StreamableToString(death_test_index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>StreamableToString(pipe_fd[1]);</highlight></codeline>
<codeline lineno="7622"><highlight class="normal"><sp/><sp/>Arguments<sp/>args;</highlight></codeline>
<codeline lineno="7623"><highlight class="normal"><sp/><sp/>args.AddArguments(GetArgvsForDeathTestChildProcess());</highlight></codeline>
<codeline lineno="7624"><highlight class="normal"><sp/><sp/>args.AddArgument(filter_flag.c_str());</highlight></codeline>
<codeline lineno="7625"><highlight class="normal"><sp/><sp/>args.AddArgument(internal_flag.c_str());</highlight></codeline>
<codeline lineno="7626"><highlight class="normal"></highlight></codeline>
<codeline lineno="7627"><highlight class="normal"><sp/><sp/>DeathTest::set_last_death_test_message(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7628"><highlight class="normal"></highlight></codeline>
<codeline lineno="7629"><highlight class="normal"><sp/><sp/>CaptureStderr();</highlight></codeline>
<codeline lineno="7630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>comment<sp/>in<sp/>NoExecDeathTest::AssumeRole<sp/>for<sp/>why<sp/>the<sp/>next<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7632"><highlight class="normal"><sp/><sp/>FlushInfoLog();</highlight></codeline>
<codeline lineno="7633"><highlight class="normal"></highlight></codeline>
<codeline lineno="7634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pid_t<sp/>child_pid<sp/>=<sp/>ExecDeathTestSpawnChild(args.Argv(),<sp/>pipe_fd[0]);</highlight></codeline>
<codeline lineno="7635"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[1]));</highlight></codeline>
<codeline lineno="7636"><highlight class="normal"><sp/><sp/>set_child_pid(child_pid);</highlight></codeline>
<codeline lineno="7637"><highlight class="normal"><sp/><sp/>set_read_fd(pipe_fd[0]);</highlight></codeline>
<codeline lineno="7638"><highlight class="normal"><sp/><sp/>set_spawned(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OVERSEE_TEST;</highlight></codeline>
<codeline lineno="7640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7641"><highlight class="normal"></highlight></codeline>
<codeline lineno="7642"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7643"><highlight class="normal"></highlight></codeline>
<codeline lineno="7644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>concrete<sp/>DeathTest-derived<sp/>class<sp/>that<sp/>depends<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gtest_death_test_style<sp/>flag,<sp/>and<sp/>sets<sp/>the<sp/>pointer<sp/>pointed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7646"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>&quot;test&quot;<sp/>argument<sp/>to<sp/>its<sp/>address.<sp/><sp/>If<sp/>the<sp/>test<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>skipped,<sp/>sets<sp/>that<sp/>pointer<sp/>to<sp/>NULL.<sp/><sp/>Returns<sp/>true,<sp/>unless<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>flag<sp/>is<sp/>set<sp/>to<sp/>an<sp/>invalid<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7649"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DefaultDeathTestFactory::Create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>regex,</highlight></codeline>
<codeline lineno="7650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="7651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeathTest**<sp/>test)<sp/>{</highlight></codeline>
<codeline lineno="7652"><highlight class="normal"><sp/><sp/>UnitTestImpl*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/>GetUnitTestImpl();</highlight></codeline>
<codeline lineno="7653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InternalRunDeathTestFlag*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>flag<sp/>=</highlight></codeline>
<codeline lineno="7654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impl-&gt;internal_run_death_test_flag();</highlight></codeline>
<codeline lineno="7655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>death_test_index<sp/>=<sp/>impl-&gt;current_test_info()</highlight></codeline>
<codeline lineno="7656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;increment_death_test_count();</highlight></codeline>
<codeline lineno="7657"><highlight class="normal"></highlight></codeline>
<codeline lineno="7658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="7659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(death_test_index<sp/>&gt;<sp/>flag-&gt;index())<sp/>{</highlight></codeline>
<codeline lineno="7660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DeathTest::set_last_death_test_message(</highlight></codeline>
<codeline lineno="7661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Death<sp/>test<sp/>count<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>StreamableToString(death_test_index)</highlight></codeline>
<codeline lineno="7662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>somehow<sp/>exceeded<sp/>expected<sp/>maximum<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>StreamableToString(flag-&gt;index())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7666"><highlight class="normal"></highlight></codeline>
<codeline lineno="7667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(flag-&gt;file()<sp/>==<sp/>file<sp/>&amp;&amp;<sp/>flag-&gt;line()<sp/>==<sp/>line<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag-&gt;index()<sp/>==<sp/>death_test_index))<sp/>{</highlight></codeline>
<codeline lineno="7669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*test<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7673"><highlight class="normal"></highlight></codeline>
<codeline lineno="7674"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7675"><highlight class="normal"></highlight></codeline>
<codeline lineno="7676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(death_test_style)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="7677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG(death_test_style)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7678"><highlight class="normal"><sp/><sp/><sp/><sp/>*test<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>WindowsDeathTest(statement,<sp/>regex,<sp/>file,<sp/>line);</highlight></codeline>
<codeline lineno="7679"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7680"><highlight class="normal"></highlight></codeline>
<codeline lineno="7681"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7682"><highlight class="normal"></highlight></codeline>
<codeline lineno="7683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(death_test_style)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7684"><highlight class="normal"><sp/><sp/><sp/><sp/>*test<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ExecDeathTest(statement,<sp/>regex,<sp/>file,<sp/>line);</highlight></codeline>
<codeline lineno="7685"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(death_test_style)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7686"><highlight class="normal"><sp/><sp/><sp/><sp/>*test<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NoExecDeathTest(statement,<sp/>regex);</highlight></codeline>
<codeline lineno="7687"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7688"><highlight class="normal"></highlight></codeline>
<codeline lineno="7689"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7690"><highlight class="normal"></highlight></codeline>
<codeline lineno="7691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT<sp/>-<sp/>this<sp/>is<sp/>more<sp/>readable<sp/>than<sp/>unbalanced<sp/>brackets<sp/>inside<sp/>#if.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7692"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTest::set_last_death_test_message(</highlight></codeline>
<codeline lineno="7693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>death<sp/>test<sp/>style<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>GTEST_FLAG(death_test_style)</highlight></codeline>
<codeline lineno="7694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>encountered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7697"><highlight class="normal"></highlight></codeline>
<codeline lineno="7698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7700"><highlight class="normal"></highlight></codeline>
<codeline lineno="7701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Splits<sp/>a<sp/>given<sp/>string<sp/>on<sp/>a<sp/>given<sp/>delimiter,<sp/>populating<sp/>a<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>vector<sp/>with<sp/>the<sp/>fields.<sp/><sp/>GTEST_HAS_DEATH_TEST<sp/>implies<sp/>that<sp/>we<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::std::string,<sp/>so<sp/>we<sp/>can<sp/>use<sp/>it<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7704"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplitString(const<sp/>::std::string&amp;<sp/>str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delimiter,</highlight></codeline>
<codeline lineno="7705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::vector&lt;<sp/>::std::string&gt;*<sp/>dest)<sp/>{</highlight></codeline>
<codeline lineno="7706"><highlight class="normal"><sp/><sp/>::std::vector&lt;<sp/>::std::string&gt;<sp/>parsed;</highlight></codeline>
<codeline lineno="7707"><highlight class="normal"><sp/><sp/>::std::string::size_type<sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(::testing::internal::AlwaysTrue())<sp/>{</highlight></codeline>
<codeline lineno="7709"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>::std::string::size_type<sp/>colon<sp/>=<sp/>str.find(delimiter,<sp/>pos);</highlight></codeline>
<codeline lineno="7710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colon<sp/>==<sp/>::std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="7711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parsed.push_back(str.substr(pos));</highlight></codeline>
<codeline lineno="7712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7713"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parsed.push_back(str.substr(pos,<sp/>colon<sp/>-<sp/>pos));</highlight></codeline>
<codeline lineno="7715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>colon<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="7716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7717"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7718"><highlight class="normal"><sp/><sp/>dest-&gt;swap(parsed);</highlight></codeline>
<codeline lineno="7719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7720"><highlight class="normal"></highlight></codeline>
<codeline lineno="7721"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Recreates<sp/>the<sp/>pipe<sp/>and<sp/>event<sp/>handles<sp/>from<sp/>the<sp/>provided<sp/>parameters,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7723"><highlight class="normal"></highlight><highlight class="comment">//<sp/>signals<sp/>the<sp/>event,<sp/>and<sp/>returns<sp/>a<sp/>file<sp/>descriptor<sp/>wrapped<sp/>around<sp/>the<sp/>pipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7724"><highlight class="normal"></highlight><highlight class="comment">//<sp/>handle.<sp/>This<sp/>function<sp/>is<sp/>called<sp/>in<sp/>the<sp/>child<sp/>process<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7725"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetStatusFileDescriptor(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parent_process_id,</highlight></codeline>
<codeline lineno="7726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>write_handle_as_size_t,</highlight></codeline>
<codeline lineno="7727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>event_handle_as_size_t)<sp/>{</highlight></codeline>
<codeline lineno="7728"><highlight class="normal"><sp/><sp/>AutoHandle<sp/>parent_process_handle(::OpenProcess(PROCESS_DUP_HANDLE,</highlight></codeline>
<codeline lineno="7729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/></highlight><highlight class="comment">//<sp/>Non-inheritable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_process_id));</highlight></codeline>
<codeline lineno="7731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent_process_handle.Get()<sp/>==<sp/>INVALID_HANDLE_VALUE)<sp/>{</highlight></codeline>
<codeline lineno="7732"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>parent<sp/>process<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(parent_process_id));</highlight></codeline>
<codeline lineno="7734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7735"><highlight class="normal"></highlight></codeline>
<codeline lineno="7736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vladl@google.com):<sp/>Replace<sp/>the<sp/>following<sp/>check<sp/>with<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compile-time<sp/>assertion<sp/>when<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7738"><highlight class="normal"><sp/><sp/>GTEST_CHECK_(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(HANDLE)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7739"><highlight class="normal"></highlight></codeline>
<codeline lineno="7740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HANDLE<sp/>write_handle<sp/>=</highlight></codeline>
<codeline lineno="7741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">HANDLE</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(write_handle_as_size_t);</highlight></codeline>
<codeline lineno="7742"><highlight class="normal"><sp/><sp/>HANDLE<sp/>dup_write_handle;</highlight></codeline>
<codeline lineno="7743"><highlight class="normal"></highlight></codeline>
<codeline lineno="7744"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>newly<sp/>initialized<sp/>handle<sp/>is<sp/>accessible<sp/>only<sp/>in<sp/>in<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>process.<sp/>To<sp/>obtain<sp/>one<sp/>accessible<sp/>within<sp/>the<sp/>child,<sp/>we<sp/>need<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7746"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DuplicateHandle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!::DuplicateHandle(parent_process_handle.Get(),<sp/>write_handle,</highlight></codeline>
<codeline lineno="7748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::GetCurrentProcess(),<sp/>&amp;dup_write_handle,</highlight></codeline>
<codeline lineno="7749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Requested<sp/>privileges<sp/>ignored<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DUPLICATE_SAME_ACCESS<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/></highlight><highlight class="comment">//<sp/>Request<sp/>non-inheritable<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUPLICATE_SAME_ACCESS))<sp/>{</highlight></codeline>
<codeline lineno="7753"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>duplicate<sp/>the<sp/>pipe<sp/>handle<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(write_handle_as_size_t)<sp/>+</highlight></codeline>
<codeline lineno="7755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>from<sp/>the<sp/>parent<sp/>process<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(parent_process_id));</highlight></codeline>
<codeline lineno="7757"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7758"><highlight class="normal"></highlight></codeline>
<codeline lineno="7759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HANDLE<sp/>event_handle<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">HANDLE</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(event_handle_as_size_t);</highlight></codeline>
<codeline lineno="7760"><highlight class="normal"><sp/><sp/>HANDLE<sp/>dup_event_handle;</highlight></codeline>
<codeline lineno="7761"><highlight class="normal"></highlight></codeline>
<codeline lineno="7762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!::DuplicateHandle(parent_process_handle.Get(),<sp/>event_handle,</highlight></codeline>
<codeline lineno="7763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::GetCurrentProcess(),<sp/>&amp;dup_event_handle,</highlight></codeline>
<codeline lineno="7764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0,</highlight></codeline>
<codeline lineno="7765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,</highlight></codeline>
<codeline lineno="7766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUPLICATE_SAME_ACCESS))<sp/>{</highlight></codeline>
<codeline lineno="7767"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>duplicate<sp/>the<sp/>event<sp/>handle<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(event_handle_as_size_t)<sp/>+</highlight></codeline>
<codeline lineno="7769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>from<sp/>the<sp/>parent<sp/>process<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(parent_process_id));</highlight></codeline>
<codeline lineno="7771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7772"><highlight class="normal"></highlight></codeline>
<codeline lineno="7773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_fd<sp/>=</highlight></codeline>
<codeline lineno="7774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::_open_osfhandle(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">intptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dup_write_handle),<sp/>O_APPEND);</highlight></codeline>
<codeline lineno="7775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_fd<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="7776"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>convert<sp/>pipe<sp/>handle<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamableToString(write_handle_as_size_t)<sp/>+</highlight></codeline>
<codeline lineno="7778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>a<sp/>file<sp/>descriptor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7779"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7780"><highlight class="normal"></highlight></codeline>
<codeline lineno="7781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Signals<sp/>the<sp/>parent<sp/>that<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>has<sp/>been<sp/>acquired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7782"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>the<sp/>parent<sp/>can<sp/>release<sp/>its<sp/>own<sp/>write<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7783"><highlight class="normal"><sp/><sp/>::SetEvent(dup_event_handle);</highlight></codeline>
<codeline lineno="7784"><highlight class="normal"></highlight></codeline>
<codeline lineno="7785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_fd;</highlight></codeline>
<codeline lineno="7786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7787"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7788"><highlight class="normal"></highlight></codeline>
<codeline lineno="7789"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>newly<sp/>created<sp/>InternalRunDeathTestFlag<sp/>object<sp/>with<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7790"><highlight class="normal"></highlight><highlight class="comment">//<sp/>initialized<sp/>from<sp/>the<sp/>GTEST_FLAG(internal_run_death_test)<sp/>flag<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>flag<sp/>is<sp/>specified;<sp/>otherwise<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7792"><highlight class="normal">InternalRunDeathTestFlag*<sp/>ParseInternalRunDeathTestFlag()<sp/>{</highlight></codeline>
<codeline lineno="7793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_FLAG(internal_run_death_test)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="7794"><highlight class="normal"></highlight></codeline>
<codeline lineno="7795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST<sp/>implies<sp/>that<sp/>we<sp/>have<sp/>::std::string,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>use<sp/>it<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="7798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="7799"><highlight class="normal"><sp/><sp/>::std::vector&lt;<sp/>::std::string&gt;<sp/>fields;</highlight></codeline>
<codeline lineno="7800"><highlight class="normal"><sp/><sp/>SplitString(GTEST_FLAG(internal_run_death_test).c_str(),<sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">,<sp/>&amp;fields);</highlight></codeline>
<codeline lineno="7801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_fd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="7802"><highlight class="normal"></highlight></codeline>
<codeline lineno="7803"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7804"><highlight class="normal"></highlight></codeline>
<codeline lineno="7805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parent_process_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>write_handle_as_size_t<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>event_handle_as_size_t<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7808"><highlight class="normal"></highlight></codeline>
<codeline lineno="7809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fields.size()<sp/>!=<sp/>6</highlight></codeline>
<codeline lineno="7810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[1],<sp/>&amp;line)</highlight></codeline>
<codeline lineno="7811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[2],<sp/>&amp;index)</highlight></codeline>
<codeline lineno="7812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[3],<sp/>&amp;parent_process_id)</highlight></codeline>
<codeline lineno="7813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[4],<sp/>&amp;write_handle_as_size_t)</highlight></codeline>
<codeline lineno="7814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[5],<sp/>&amp;event_handle_as_size_t))<sp/>{</highlight></codeline>
<codeline lineno="7815"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Bad<sp/>--gtest_internal_run_death_test<sp/>flag:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="7816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG(internal_run_death_test));</highlight></codeline>
<codeline lineno="7817"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7818"><highlight class="normal"><sp/><sp/>write_fd<sp/>=<sp/>GetStatusFileDescriptor(parent_process_id,</highlight></codeline>
<codeline lineno="7819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_handle_as_size_t,</highlight></codeline>
<codeline lineno="7820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event_handle_as_size_t);</highlight></codeline>
<codeline lineno="7821"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7822"><highlight class="normal"></highlight></codeline>
<codeline lineno="7823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fields.size()<sp/>!=<sp/>4</highlight></codeline>
<codeline lineno="7824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[1],<sp/>&amp;line)</highlight></codeline>
<codeline lineno="7825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[2],<sp/>&amp;index)</highlight></codeline>
<codeline lineno="7826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[3],<sp/>&amp;write_fd))<sp/>{</highlight></codeline>
<codeline lineno="7827"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Bad<sp/>--gtest_internal_run_death_test<sp/>flag:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>GTEST_FLAG(internal_run_death_test));</highlight></codeline>
<codeline lineno="7829"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7830"><highlight class="normal"></highlight></codeline>
<codeline lineno="7831"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7832"><highlight class="normal"></highlight></codeline>
<codeline lineno="7833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>InternalRunDeathTestFlag(fields[0],<sp/>line,<sp/>index,<sp/>write_fd);</highlight></codeline>
<codeline lineno="7834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7835"><highlight class="normal"></highlight></codeline>
<codeline lineno="7836"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7837"><highlight class="normal"></highlight></codeline>
<codeline lineno="7838"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7839"><highlight class="normal"></highlight></codeline>
<codeline lineno="7840"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7841"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7843"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7844"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7845"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7847"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7848"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7850"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7851"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7854"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7855"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7856"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7857"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7858"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7859"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7860"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7861"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7862"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7863"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7867"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7868"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7869"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7870"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Authors:<sp/>keith.ray@gmail.com<sp/>(Keith<sp/>Ray)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7871"><highlight class="normal"></highlight></codeline>
<codeline lineno="7872"><highlight class="normal"></highlight></codeline>
<codeline lineno="7873"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7874"><highlight class="normal"></highlight></codeline>
<codeline lineno="7875"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7876"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7877"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7878"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7879"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7880"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7881"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Symbian<sp/>OpenC<sp/>has<sp/>PATH_MAX<sp/>in<sp/>sys/syslimits.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7882"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/syslimits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7883"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7884"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7885"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;climits&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>Linux<sp/>distributions<sp/>define<sp/>PATH_MAX<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7886"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7887"><highlight class="normal"></highlight></codeline>
<codeline lineno="7888"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7889"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_PATH_MAX_<sp/>_MAX_PATH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7890"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PATH_MAX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7891"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_PATH_MAX_<sp/>PATH_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7892"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_XOPEN_PATH_MAX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7893"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_PATH_MAX_<sp/>_XOPEN_PATH_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7894"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7895"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_PATH_MAX_<sp/>_POSIX_PATH_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7896"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7897"><highlight class="normal"></highlight></codeline>
<codeline lineno="7898"><highlight class="normal"></highlight></codeline>
<codeline lineno="7899"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="7900"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="7901"><highlight class="normal"></highlight></codeline>
<codeline lineno="7902"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>Windows,<sp/>&apos;\\&apos;<sp/>is<sp/>the<sp/>standard<sp/>path<sp/>separator,<sp/>but<sp/>many<sp/>tools<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>API<sp/>also<sp/>accept<sp/>&apos;/&apos;<sp/>as<sp/>an<sp/>alternate<sp/>path<sp/>separator.<sp/>Unless<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>noted,<sp/>a<sp/>file<sp/>path<sp/>can<sp/>contain<sp/>either<sp/>kind<sp/>of<sp/>path<sp/>separators,<sp/>or<sp/>a<sp/>mixture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7907"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kPathSeparator<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7908"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kAlternatePathSeparator<sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7909"><highlight class="normal"></highlight><highlight class="comment">//const<sp/>char<sp/>kPathSeparatorString[]<sp/>=<sp/>&quot;\\&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7910"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kAlternatePathSeparatorString[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7911"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>CE<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>current<sp/>directory.<sp/>You<sp/>should<sp/>not<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7913"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>current<sp/>directory<sp/>in<sp/>tests<sp/>on<sp/>Windows<sp/>CE,<sp/>but<sp/>this<sp/>at<sp/>least</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>provides<sp/>a<sp/>reasonable<sp/>fallback.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7915"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kCurrentDirectoryString[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7916"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>CE<sp/>doesn&apos;t<sp/>define<sp/>INVALID_FILE_ATTRIBUTES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7917"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>kInvalidFileAttributes<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="7918"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7919"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kCurrentDirectoryString[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.\\&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7920"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7921"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7922"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kPathSeparator<sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7923"><highlight class="normal"></highlight><highlight class="comment">//const<sp/>char<sp/>kPathSeparatorString[]<sp/>=<sp/>&quot;/&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7924"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kCurrentDirectoryString[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;./&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7925"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7926"><highlight class="normal"></highlight></codeline>
<codeline lineno="7927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>whether<sp/>the<sp/>given<sp/>character<sp/>is<sp/>a<sp/>valid<sp/>path<sp/>separator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7928"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsPathSeparator(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="7929"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_ALT_PATH_SEP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>kPathSeparator)<sp/>||<sp/>(c<sp/>==<sp/>kAlternatePathSeparator);</highlight></codeline>
<codeline lineno="7931"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/>kPathSeparator;</highlight></codeline>
<codeline lineno="7933"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7935"><highlight class="normal"></highlight></codeline>
<codeline lineno="7936"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>working<sp/>directory,<sp/>or<sp/>&quot;&quot;<sp/>if<sp/>unsuccessful.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7937"><highlight class="normal">FilePath<sp/>FilePath::GetCurrentDir()<sp/>{</highlight></codeline>
<codeline lineno="7938"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>CE<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>current<sp/>directory,<sp/>so<sp/>we<sp/>just<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7940"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>something<sp/>reasonable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FilePath(kCurrentDirectoryString);</highlight></codeline>
<codeline lineno="7942"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cwd[GTEST_PATH_MAX_<sp/>+<sp/>1]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="7944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FilePath(_getcwd(cwd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cwd))<sp/>==<sp/>NULL<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/>cwd);</highlight></codeline>
<codeline lineno="7945"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cwd[GTEST_PATH_MAX_<sp/>+<sp/>1]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="7947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FilePath(getcwd(cwd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cwd))<sp/>==<sp/>NULL<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/>cwd);</highlight></codeline>
<codeline lineno="7948"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7950"><highlight class="normal"></highlight></codeline>
<codeline lineno="7951"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>FilePath<sp/>with<sp/>the<sp/>case-insensitive<sp/>extension<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7952"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example:<sp/>FilePath(&quot;dir/file.exe&quot;).RemoveExtension(&quot;EXE&quot;)<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FilePath(&quot;dir/file&quot;).<sp/>If<sp/>a<sp/>case-insensitive<sp/>extension<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>found,<sp/>returns<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>original<sp/>FilePath.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7955"><highlight class="normal">FilePath<sp/>FilePath::RemoveExtension(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>extension)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>dot_extension<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>+<sp/>extension;</highlight></codeline>
<codeline lineno="7957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(String::EndsWithCaseInsensitive(pathname_,<sp/>dot_extension))<sp/>{</highlight></codeline>
<codeline lineno="7958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FilePath(pathname_.substr(</highlight></codeline>
<codeline lineno="7959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>pathname_.length()<sp/>-<sp/>dot_extension.length()));</highlight></codeline>
<codeline lineno="7960"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7963"><highlight class="normal"></highlight></codeline>
<codeline lineno="7964"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>last<sp/>occurrence<sp/>of<sp/>a<sp/>valid<sp/>path<sp/>separator<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>FilePath.<sp/>On<sp/>Windows,<sp/>for<sp/>example,<sp/>both<sp/>&apos;/&apos;<sp/>and<sp/>&apos;\&apos;<sp/>are<sp/>valid<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7966"><highlight class="normal"></highlight><highlight class="comment">//<sp/>separators.<sp/>Returns<sp/>NULL<sp/>if<sp/>no<sp/>path<sp/>separator<sp/>was<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7967"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>FilePath::FindLastPathSeparator()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>last_sep<sp/>=<sp/>strrchr(c_str(),<sp/>kPathSeparator);</highlight></codeline>
<codeline lineno="7969"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_ALT_PATH_SEP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>last_alt_sep<sp/>=<sp/>strrchr(c_str(),<sp/>kAlternatePathSeparator);</highlight></codeline>
<codeline lineno="7971"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Comparing<sp/>two<sp/>pointers<sp/>of<sp/>which<sp/>only<sp/>one<sp/>is<sp/>NULL<sp/>is<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_alt_sep<sp/>!=<sp/>NULL<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(last_sep<sp/>==<sp/>NULL<sp/>||<sp/>last_alt_sep<sp/>&gt;<sp/>last_sep))<sp/>{</highlight></codeline>
<codeline lineno="7974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>last_alt_sep;</highlight></codeline>
<codeline lineno="7975"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7976"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>last_sep;</highlight></codeline>
<codeline lineno="7978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7979"><highlight class="normal"></highlight></codeline>
<codeline lineno="7980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>FilePath<sp/>with<sp/>the<sp/>directory<sp/>part<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example:<sp/>FilePath(&quot;path/to/file&quot;).RemoveDirectoryName()<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FilePath(&quot;file&quot;).<sp/>If<sp/>there<sp/>is<sp/>no<sp/>directory<sp/>part<sp/>(&quot;just_a_file&quot;),<sp/>it<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>FilePath<sp/>unmodified.<sp/>If<sp/>there<sp/>is<sp/>no<sp/>file<sp/>part<sp/>(&quot;just_a_dir/&quot;)<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>an<sp/>empty<sp/>FilePath<sp/>(&quot;&quot;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>Windows<sp/>platform,<sp/>&apos;\&apos;<sp/>is<sp/>the<sp/>path<sp/>separator,<sp/>otherwise<sp/>it<sp/>is<sp/>&apos;/&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7986"><highlight class="normal">FilePath<sp/>FilePath::RemoveDirectoryName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>last_sep<sp/>=<sp/>FindLastPathSeparator();</highlight></codeline>
<codeline lineno="7988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>last_sep<sp/>?<sp/>FilePath(last_sep<sp/>+<sp/>1)<sp/>:<sp/>*this;</highlight></codeline>
<codeline lineno="7989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7990"><highlight class="normal"></highlight></codeline>
<codeline lineno="7991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveFileName<sp/>returns<sp/>the<sp/>directory<sp/>path<sp/>with<sp/>the<sp/>filename<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example:<sp/>FilePath(&quot;path/to/file&quot;).RemoveFileName()<sp/>returns<sp/>&quot;path/to/&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>FilePath<sp/>is<sp/>&quot;a_file&quot;<sp/>or<sp/>&quot;/a_file&quot;,<sp/>RemoveFileName<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7994"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FilePath(&quot;./&quot;)<sp/>or,<sp/>on<sp/>Windows,<sp/>FilePath(&quot;.\\&quot;).<sp/>If<sp/>the<sp/>filepath<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>have<sp/>a<sp/>file,<sp/>like<sp/>&quot;just/a/dir/&quot;,<sp/>it<sp/>returns<sp/>the<sp/>FilePath<sp/>unmodified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7996"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>Windows<sp/>platform,<sp/>&apos;\&apos;<sp/>is<sp/>the<sp/>path<sp/>separator,<sp/>otherwise<sp/>it<sp/>is<sp/>&apos;/&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7997"><highlight class="normal">FilePath<sp/>FilePath::RemoveFileName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>last_sep<sp/>=<sp/>FindLastPathSeparator();</highlight></codeline>
<codeline lineno="7999"><highlight class="normal"><sp/><sp/>std::string<sp/>dir;</highlight></codeline>
<codeline lineno="8000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_sep)<sp/>{</highlight></codeline>
<codeline lineno="8001"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>std::string(c_str(),<sp/>last_sep<sp/>+<sp/>1<sp/>-<sp/>c_str());</highlight></codeline>
<codeline lineno="8002"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8003"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>kCurrentDirectoryString;</highlight></codeline>
<codeline lineno="8004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FilePath(dir);</highlight></codeline>
<codeline lineno="8006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8007"><highlight class="normal"></highlight></codeline>
<codeline lineno="8008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>functions<sp/>for<sp/>naming<sp/>files<sp/>in<sp/>a<sp/>directory<sp/>for<sp/>xml<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8009"><highlight class="normal"></highlight></codeline>
<codeline lineno="8010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>directory<sp/>=<sp/>&quot;dir&quot;,<sp/>base_name<sp/>=<sp/>&quot;test&quot;,<sp/>number<sp/>=<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>extension<sp/>=<sp/>&quot;xml&quot;,<sp/>returns<sp/>&quot;dir/test.xml&quot;.<sp/>If<sp/>number<sp/>is<sp/>greater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8012"><highlight class="normal"></highlight><highlight class="comment">//<sp/>than<sp/>zero<sp/>(e.g.,<sp/>12),<sp/>returns<sp/>&quot;dir/test_12.xml&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8013"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>Windows<sp/>platform,<sp/>uses<sp/>\<sp/>as<sp/>the<sp/>separator<sp/>rather<sp/>than<sp/>/.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8014"><highlight class="normal">FilePath<sp/>FilePath::MakeFileName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath&amp;<sp/>directory,</highlight></codeline>
<codeline lineno="8015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath&amp;<sp/>base_name,</highlight></codeline>
<codeline lineno="8016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number,</highlight></codeline>
<codeline lineno="8017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>extension)<sp/>{</highlight></codeline>
<codeline lineno="8018"><highlight class="normal"><sp/><sp/>std::string<sp/>file;</highlight></codeline>
<codeline lineno="8019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(number<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8020"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/>base_name.string()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>extension;</highlight></codeline>
<codeline lineno="8021"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8022"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/>base_name.string()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>StreamableToString(number)</highlight></codeline>
<codeline lineno="8023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>extension;</highlight></codeline>
<codeline lineno="8024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConcatPaths(directory,<sp/>FilePath(file));</highlight></codeline>
<codeline lineno="8026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8027"><highlight class="normal"></highlight></codeline>
<codeline lineno="8028"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>directory<sp/>=<sp/>&quot;dir&quot;,<sp/>relative_path<sp/>=<sp/>&quot;test.xml&quot;,<sp/>returns<sp/>&quot;dir/test.xml&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8029"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>Windows,<sp/>uses<sp/>\<sp/>as<sp/>the<sp/>separator<sp/>rather<sp/>than<sp/>/.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8030"><highlight class="normal">FilePath<sp/>FilePath::ConcatPaths(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath&amp;<sp/>directory,</highlight></codeline>
<codeline lineno="8031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath&amp;<sp/>relative_path)<sp/>{</highlight></codeline>
<codeline lineno="8032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(directory.IsEmpty())</highlight></codeline>
<codeline lineno="8033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>relative_path;</highlight></codeline>
<codeline lineno="8034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath<sp/>dir(directory.RemoveTrailingPathSeparator());</highlight></codeline>
<codeline lineno="8035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FilePath(dir.string()<sp/>+<sp/>kPathSeparator<sp/>+<sp/>relative_path.string());</highlight></codeline>
<codeline lineno="8036"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8037"><highlight class="normal"></highlight></codeline>
<codeline lineno="8038"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>pathname<sp/>describes<sp/>something<sp/>findable<sp/>in<sp/>the<sp/>file-system,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8039"><highlight class="normal"></highlight><highlight class="comment">//<sp/>either<sp/>a<sp/>file,<sp/>directory,<sp/>or<sp/>whatever.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8040"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FilePath::FileOrDirectoryExists()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8041"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8042"><highlight class="normal"><sp/><sp/>LPCWSTR<sp/>unicode<sp/>=<sp/>String::AnsiToUtf16(pathname_.c_str());</highlight></codeline>
<codeline lineno="8043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>attributes<sp/>=<sp/>GetFileAttributes(unicode);</highlight></codeline>
<codeline lineno="8044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>unicode;</highlight></codeline>
<codeline lineno="8045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attributes<sp/>!=<sp/>kInvalidFileAttributes;</highlight></codeline>
<codeline lineno="8046"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8047"><highlight class="normal"><sp/><sp/>posix::StatStruct<sp/>file_stat;</highlight></codeline>
<codeline lineno="8048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>posix::Stat(pathname_.c_str(),<sp/>&amp;file_stat)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="8049"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8051"><highlight class="normal"></highlight></codeline>
<codeline lineno="8052"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>pathname<sp/>describes<sp/>a<sp/>directory<sp/>in<sp/>the<sp/>file-system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8053"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8054"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FilePath::DirectoryExists()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8056"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>strip<sp/>off<sp/>trailing<sp/>separator<sp/>if<sp/>path<sp/>is<sp/>a<sp/>root<sp/>directory<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8058"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>(like<sp/>&quot;C:\\&quot;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath&amp;<sp/>path(IsRootDirectory()<sp/>?<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="8060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RemoveTrailingPathSeparator());</highlight></codeline>
<codeline lineno="8061"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath&amp;<sp/>path(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8063"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8064"><highlight class="normal"></highlight></codeline>
<codeline lineno="8065"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8066"><highlight class="normal"><sp/><sp/>LPCWSTR<sp/>unicode<sp/>=<sp/>String::AnsiToUtf16(path.c_str());</highlight></codeline>
<codeline lineno="8067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>attributes<sp/>=<sp/>GetFileAttributes(unicode);</highlight></codeline>
<codeline lineno="8068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>unicode;</highlight></codeline>
<codeline lineno="8069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((attributes<sp/>!=<sp/>kInvalidFileAttributes)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(attributes<sp/>&amp;<sp/>FILE_ATTRIBUTE_DIRECTORY))<sp/>{</highlight></codeline>
<codeline lineno="8071"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8073"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8074"><highlight class="normal"><sp/><sp/>posix::StatStruct<sp/>file_stat;</highlight></codeline>
<codeline lineno="8075"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>posix::Stat(path.c_str(),<sp/>&amp;file_stat)<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>posix::IsDir(file_stat);</highlight></codeline>
<codeline lineno="8077"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8078"><highlight class="normal"></highlight></codeline>
<codeline lineno="8079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8081"><highlight class="normal"></highlight></codeline>
<codeline lineno="8082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>pathname<sp/>describes<sp/>a<sp/>root<sp/>directory.<sp/>(Windows<sp/>has<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8083"><highlight class="normal"></highlight><highlight class="comment">//<sp/>root<sp/>directory<sp/>per<sp/>disk<sp/>drive.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8084"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FilePath::IsRootDirectory()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8085"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8086"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(wan@google.com):<sp/>on<sp/>Windows<sp/>a<sp/>network<sp/>share<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8087"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>\\server\share<sp/>can<sp/>be<sp/>a<sp/>root<sp/>directory,<sp/>although<sp/>it<sp/>cannot<sp/>be<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>directory.<sp/><sp/>Handle<sp/>this<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pathname_.length()<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>IsAbsolutePath();</highlight></codeline>
<codeline lineno="8090"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pathname_.length()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>IsPathSeparator(pathname_.c_str()[0]);</highlight></codeline>
<codeline lineno="8092"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8094"><highlight class="normal"></highlight></codeline>
<codeline lineno="8095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>pathname<sp/>describes<sp/>an<sp/>absolute<sp/>path.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8096"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FilePath::IsAbsolutePath()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name<sp/>=<sp/>pathname_.c_str();</highlight></codeline>
<codeline lineno="8098"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pathname_.length()<sp/>&gt;=<sp/>3<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>((name[0]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>name[0]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="8101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(name[0]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>name[0]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>name[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>IsPathSeparator(name[2]);</highlight></codeline>
<codeline lineno="8104"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsPathSeparator(name[0]);</highlight></codeline>
<codeline lineno="8106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8108"><highlight class="normal"></highlight></codeline>
<codeline lineno="8109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>pathname<sp/>for<sp/>a<sp/>file<sp/>that<sp/>does<sp/>not<sp/>currently<sp/>exist.<sp/>The<sp/>pathname</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>directory/base_name.extension<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>directory/base_name_&lt;number&gt;.extension<sp/>if<sp/>directory/base_name.extension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>already<sp/>exists.<sp/>The<sp/>number<sp/>will<sp/>be<sp/>incremented<sp/>until<sp/>a<sp/>pathname<sp/>is<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>does<sp/>not<sp/>already<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examples:<sp/>&apos;dir/foo_test.xml&apos;<sp/>or<sp/>&apos;dir/foo_test_1.xml&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>could<sp/>be<sp/>a<sp/>race<sp/>condition<sp/>if<sp/>two<sp/>or<sp/>more<sp/>processes<sp/>are<sp/>calling<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>at<sp/>the<sp/>same<sp/>time<sp/>--<sp/>they<sp/>could<sp/>both<sp/>pick<sp/>the<sp/>same<sp/>filename.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8117"><highlight class="normal">FilePath<sp/>FilePath::GenerateUniqueFileName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath&amp;<sp/>directory,</highlight></codeline>
<codeline lineno="8118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath&amp;<sp/>base_name,</highlight></codeline>
<codeline lineno="8119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>extension)<sp/>{</highlight></codeline>
<codeline lineno="8120"><highlight class="normal"><sp/><sp/>FilePath<sp/>full_pathname;</highlight></codeline>
<codeline lineno="8121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8123"><highlight class="normal"><sp/><sp/><sp/><sp/>full_pathname.Set(MakeFileName(directory,<sp/>base_name,<sp/>number++,<sp/>extension));</highlight></codeline>
<codeline lineno="8124"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(full_pathname.FileOrDirectoryExists());</highlight></codeline>
<codeline lineno="8125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>full_pathname;</highlight></codeline>
<codeline lineno="8126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8127"><highlight class="normal"></highlight></codeline>
<codeline lineno="8128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>FilePath<sp/>ends<sp/>with<sp/>a<sp/>path<sp/>separator,<sp/>which<sp/>indicates<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>intended<sp/>to<sp/>represent<sp/>a<sp/>directory.<sp/>Returns<sp/>false<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>does<sp/>NOT<sp/>check<sp/>that<sp/>a<sp/>directory<sp/>(or<sp/>file)<sp/>actually<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8131"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FilePath::IsDirectory()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!pathname_.empty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsPathSeparator(pathname_.c_str()[pathname_.length()<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="8134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8135"><highlight class="normal"></highlight></codeline>
<codeline lineno="8136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>directories<sp/>so<sp/>that<sp/>path<sp/>exists.<sp/>Returns<sp/>true<sp/>if<sp/>successful<sp/>or<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>directories<sp/>already<sp/>exist;<sp/>returns<sp/>false<sp/>if<sp/>unable<sp/>to<sp/>create<sp/>directories</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>any<sp/>reason.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8139"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FilePath::CreateDirectoriesRecursively()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;IsDirectory())<sp/>{</highlight></codeline>
<codeline lineno="8141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8143"><highlight class="normal"></highlight></codeline>
<codeline lineno="8144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pathname_.length()<sp/>==<sp/>0<sp/>||<sp/>this-&gt;DirectoryExists())<sp/>{</highlight></codeline>
<codeline lineno="8145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8147"><highlight class="normal"></highlight></codeline>
<codeline lineno="8148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath<sp/>parent(this-&gt;RemoveTrailingPathSeparator().RemoveFileName());</highlight></codeline>
<codeline lineno="8149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent.CreateDirectoriesRecursively()<sp/>&amp;&amp;<sp/>this-&gt;CreateFolder();</highlight></codeline>
<codeline lineno="8150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8151"><highlight class="normal"></highlight></codeline>
<codeline lineno="8152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>directory<sp/>so<sp/>that<sp/>path<sp/>exists.<sp/>Returns<sp/>true<sp/>if<sp/>successful<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>directory<sp/>already<sp/>exists;<sp/>returns<sp/>false<sp/>if<sp/>unable<sp/>to<sp/>create<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>directory<sp/>for<sp/>any<sp/>reason,<sp/>including<sp/>if<sp/>the<sp/>parent<sp/>directory<sp/>does<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exist.<sp/>Not<sp/>named<sp/>&quot;CreateDirectory&quot;<sp/>because<sp/>that&apos;s<sp/>a<sp/>macro<sp/>on<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8156"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FilePath::CreateFolder()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8157"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8158"><highlight class="normal"><sp/><sp/>FilePath<sp/>removed_sep(this-&gt;RemoveTrailingPathSeparator());</highlight></codeline>
<codeline lineno="8159"><highlight class="normal"><sp/><sp/>LPCWSTR<sp/>unicode<sp/>=<sp/>String::AnsiToUtf16(removed_sep.c_str());</highlight></codeline>
<codeline lineno="8160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>CreateDirectory(unicode,<sp/>NULL)<sp/>?<sp/>0<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="8161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>unicode;</highlight></codeline>
<codeline lineno="8162"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>_mkdir(pathname_.c_str());</highlight></codeline>
<codeline lineno="8164"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>mkdir(pathname_.c_str(),<sp/>0777);</highlight></codeline>
<codeline lineno="8166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8167"><highlight class="normal"></highlight></codeline>
<codeline lineno="8168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="8169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;DirectoryExists();<sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>error<sp/>is<sp/>OK<sp/>if<sp/>the<sp/>directory<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8173"><highlight class="normal"></highlight></codeline>
<codeline lineno="8174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>input<sp/>name<sp/>has<sp/>a<sp/>trailing<sp/>separator<sp/>character,<sp/>remove<sp/>it<sp/>and<sp/>return<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>name,<sp/>otherwise<sp/>return<sp/>the<sp/>name<sp/>string<sp/>unmodified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>Windows<sp/>platform,<sp/>uses<sp/>\<sp/>as<sp/>the<sp/>separator,<sp/>other<sp/>platforms<sp/>use<sp/>/.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8177"><highlight class="normal">FilePath<sp/>FilePath::RemoveTrailingPathSeparator()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsDirectory()</highlight></codeline>
<codeline lineno="8179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>FilePath(pathname_.substr(0,<sp/>pathname_.length()<sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="8180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>*this;</highlight></codeline>
<codeline lineno="8181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8182"><highlight class="normal"></highlight></codeline>
<codeline lineno="8183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removes<sp/>any<sp/>redundant<sp/>separators<sp/>that<sp/>might<sp/>be<sp/>in<sp/>the<sp/>pathname.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>&quot;bar///foo&quot;<sp/>becomes<sp/>&quot;bar/foo&quot;.<sp/>Does<sp/>not<sp/>eliminate<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>redundancies<sp/>that<sp/>might<sp/>be<sp/>in<sp/>a<sp/>pathname<sp/>involving<sp/>&quot;.&quot;<sp/>or<sp/>&quot;..&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(wan@google.com):<sp/>handle<sp/>Windows<sp/>network<sp/>shares<sp/>(e.g.<sp/>\\server\share).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FilePath::Normalize()<sp/>{</highlight></codeline>
<codeline lineno="8188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pathname_.c_str()<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="8189"><highlight class="normal"><sp/><sp/><sp/><sp/>pathname_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src<sp/>=<sp/>pathname_.c_str();</highlight></codeline>
<codeline lineno="8193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[pathname_.length()<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="8194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dest_ptr<sp/>=<sp/>dest;</highlight></codeline>
<codeline lineno="8195"><highlight class="normal"><sp/><sp/>memset(dest_ptr,<sp/>0,<sp/>pathname_.length()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="8196"><highlight class="normal"></highlight></codeline>
<codeline lineno="8197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*src<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8198"><highlight class="normal"><sp/><sp/><sp/><sp/>*dest_ptr<sp/>=<sp/>*src;</highlight></codeline>
<codeline lineno="8199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsPathSeparator(*src))<sp/>{</highlight></codeline>
<codeline lineno="8200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src++;</highlight></codeline>
<codeline lineno="8201"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8202"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_ALT_PATH_SEP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*dest_ptr<sp/>==<sp/>kAlternatePathSeparator)<sp/>{</highlight></codeline>
<codeline lineno="8204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest_ptr<sp/>=<sp/>kPathSeparator;</highlight></codeline>
<codeline lineno="8205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(IsPathSeparator(*src))</highlight></codeline>
<codeline lineno="8208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src++;</highlight></codeline>
<codeline lineno="8209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8210"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_ptr++;</highlight></codeline>
<codeline lineno="8211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8212"><highlight class="normal"><sp/><sp/>*dest_ptr<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8213"><highlight class="normal"><sp/><sp/>pathname_<sp/>=<sp/>dest;</highlight></codeline>
<codeline lineno="8214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>dest;</highlight></codeline>
<codeline lineno="8215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8216"><highlight class="normal"></highlight></codeline>
<codeline lineno="8217"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8218"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8221"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8225"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8226"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8228"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8232"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8235"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8247"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8249"><highlight class="normal"></highlight></codeline>
<codeline lineno="8250"><highlight class="normal"></highlight></codeline>
<codeline lineno="8251"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8252"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8253"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8254"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8255"><highlight class="normal"></highlight></codeline>
<codeline lineno="8256"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8257"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>TerminateProcess()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8258"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8259"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8260"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8261"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8262"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8263"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8264"><highlight class="normal"></highlight></codeline>
<codeline lineno="8265"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8266"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;mach/mach_init.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8267"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;mach/task.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8268"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;mach/vm_map.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8269"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8270"><highlight class="normal"></highlight></codeline>
<codeline lineno="8271"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8272"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;devctl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8273"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/procfs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8275"><highlight class="normal"></highlight></codeline>
<codeline lineno="8276"><highlight class="normal"></highlight></codeline>
<codeline lineno="8277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Indicates<sp/>that<sp/>this<sp/>translation<sp/>unit<sp/>is<sp/>part<sp/>of<sp/>Google<sp/>Test&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation.<sp/><sp/>It<sp/>must<sp/>come<sp/>before<sp/>gtest-internal-inl.h<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>included,<sp/>or<sp/>there<sp/>will<sp/>be<sp/>a<sp/>compiler<sp/>error.<sp/><sp/>This<sp/>trick<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prevent<sp/>a<sp/>user<sp/>from<sp/>accidentally<sp/>including<sp/>gtest-internal-inl.h<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>his<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8282"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IMPLEMENTATION_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8283"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_IMPLEMENTATION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8284"><highlight class="normal"></highlight></codeline>
<codeline lineno="8285"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="8286"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="8287"><highlight class="normal"></highlight></codeline>
<codeline lineno="8288"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>||<sp/>defined(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>and<sp/>C++Builder<sp/>do<sp/>not<sp/>provide<sp/>a<sp/>definition<sp/>of<sp/>STDERR_FILENO.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8290"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kStdOutFileno<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="8291"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kStdErrFileno<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="8292"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8293"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kStdOutFileno<sp/>=<sp/>STDOUT_FILENO;</highlight></codeline>
<codeline lineno="8294"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kStdErrFileno<sp/>=<sp/>STDERR_FILENO;</highlight></codeline>
<codeline lineno="8295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8296"><highlight class="normal"></highlight></codeline>
<codeline lineno="8297"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8298"><highlight class="normal"></highlight></codeline>
<codeline lineno="8299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>threads<sp/>running<sp/>in<sp/>the<sp/>process,<sp/>or<sp/>0<sp/>to<sp/>indicate<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>cannot<sp/>detect<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8301"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>GetThreadCount()<sp/>{</highlight></codeline>
<codeline lineno="8302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>task_t<sp/>task<sp/>=<sp/>mach_task_self();</highlight></codeline>
<codeline lineno="8303"><highlight class="normal"><sp/><sp/>mach_msg_type_number_t<sp/>thread_count;</highlight></codeline>
<codeline lineno="8304"><highlight class="normal"><sp/><sp/>thread_act_array_t<sp/>thread_list;</highlight></codeline>
<codeline lineno="8305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>kern_return_t<sp/>status<sp/>=<sp/>task_threads(task,<sp/>&amp;thread_list,<sp/>&amp;thread_count);</highlight></codeline>
<codeline lineno="8306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>KERN_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="8307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>task_threads<sp/>allocates<sp/>resources<sp/>in<sp/>thread_list<sp/>and<sp/>we<sp/>need<sp/>to<sp/>free<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>avoid<sp/>leaks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8309"><highlight class="normal"><sp/><sp/><sp/><sp/>vm_deallocate(task,</highlight></codeline>
<codeline lineno="8310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">vm_address_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(thread_list),</highlight></codeline>
<codeline lineno="8311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(thread_t)<sp/>*<sp/>thread_count);</highlight></codeline>
<codeline lineno="8312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(thread_count);</highlight></codeline>
<codeline lineno="8313"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="8315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8317"><highlight class="normal"></highlight></codeline>
<codeline lineno="8318"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8319"><highlight class="normal"></highlight></codeline>
<codeline lineno="8320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>threads<sp/>running<sp/>in<sp/>the<sp/>process,<sp/>or<sp/>0<sp/>to<sp/>indicate<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>cannot<sp/>detect<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8322"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>GetThreadCount()<sp/>{</highlight></codeline>
<codeline lineno="8323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>open(</highlight><highlight class="stringliteral">&quot;/proc/self/as&quot;</highlight><highlight class="normal">,<sp/>O_RDONLY);</highlight></codeline>
<codeline lineno="8324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="8326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8327"><highlight class="normal"><sp/><sp/>procfs_info<sp/>process_info;</highlight></codeline>
<codeline lineno="8328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=</highlight></codeline>
<codeline lineno="8329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>devctl(fd,<sp/>DCMD_PROC_INFO,<sp/>&amp;process_info,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(process_info),<sp/>NULL);</highlight></codeline>
<codeline lineno="8330"><highlight class="normal"><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="8331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>EOK)<sp/>{</highlight></codeline>
<codeline lineno="8332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(process_info.num_threads);</highlight></codeline>
<codeline lineno="8333"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="8335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8337"><highlight class="normal"></highlight></codeline>
<codeline lineno="8338"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8339"><highlight class="normal"></highlight></codeline>
<codeline lineno="8340"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>GetThreadCount()<sp/>{</highlight></codeline>
<codeline lineno="8341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There&apos;s<sp/>no<sp/>portable<sp/>way<sp/>to<sp/>detect<sp/>the<sp/>number<sp/>of<sp/>threads,<sp/>so<sp/>we<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>0<sp/>to<sp/>indicate<sp/>that<sp/>we<sp/>cannot<sp/>detect<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="8344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8345"><highlight class="normal"></highlight></codeline>
<codeline lineno="8346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8347"><highlight class="normal"></highlight></codeline>
<codeline lineno="8348"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_USES_POSIX_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8349"><highlight class="normal"></highlight></codeline>
<codeline lineno="8350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>RE.<sp/><sp/>Currently<sp/>only<sp/>needed<sp/>for<sp/>death<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8351"><highlight class="normal"></highlight></codeline>
<codeline lineno="8352"><highlight class="normal">RE::~RE()<sp/>{</highlight></codeline>
<codeline lineno="8353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_valid_)<sp/>{</highlight></codeline>
<codeline lineno="8354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>regfree&apos;ing<sp/>an<sp/>invalid<sp/>regex<sp/>might<sp/>crash<sp/>because<sp/>the<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>regex<sp/>is<sp/>undefined.<sp/>Since<sp/>the<sp/>regex&apos;s<sp/>are<sp/>essentially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>same,<sp/>one<sp/>cannot<sp/>be<sp/>valid<sp/>(or<sp/>invalid)<sp/>without<sp/>the<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>being<sp/>so<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8358"><highlight class="normal"><sp/><sp/><sp/><sp/>regfree(&amp;partial_regex_);</highlight></codeline>
<codeline lineno="8359"><highlight class="normal"><sp/><sp/><sp/><sp/>regfree(&amp;full_regex_);</highlight></codeline>
<codeline lineno="8360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8361"><highlight class="normal"><sp/><sp/>free(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pattern_));</highlight></codeline>
<codeline lineno="8362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8363"><highlight class="normal"></highlight></codeline>
<codeline lineno="8364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>regular<sp/>expression<sp/>re<sp/>matches<sp/>the<sp/>entire<sp/>str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8365"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RE::FullMatch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE&amp;<sp/>re)<sp/>{</highlight></codeline>
<codeline lineno="8366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!re.is_valid_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8367"><highlight class="normal"></highlight></codeline>
<codeline lineno="8368"><highlight class="normal"><sp/><sp/>regmatch_t<sp/>match;</highlight></codeline>
<codeline lineno="8369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regexec(&amp;re.full_regex_,<sp/>str,<sp/>1,<sp/>&amp;match,<sp/>0)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="8370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8371"><highlight class="normal"></highlight></codeline>
<codeline lineno="8372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>regular<sp/>expression<sp/>re<sp/>matches<sp/>a<sp/>substring<sp/>of<sp/>str</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(including<sp/>str<sp/>itself).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8374"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RE::PartialMatch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE&amp;<sp/>re)<sp/>{</highlight></codeline>
<codeline lineno="8375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!re.is_valid_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8376"><highlight class="normal"></highlight></codeline>
<codeline lineno="8377"><highlight class="normal"><sp/><sp/>regmatch_t<sp/>match;</highlight></codeline>
<codeline lineno="8378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regexec(&amp;re.partial_regex_,<sp/>str,<sp/>1,<sp/>&amp;match,<sp/>0)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="8379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8380"><highlight class="normal"></highlight></codeline>
<codeline lineno="8381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initializes<sp/>an<sp/>RE<sp/>from<sp/>its<sp/>string<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8382"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RE::Init(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex)<sp/>{</highlight></codeline>
<codeline lineno="8383"><highlight class="normal"><sp/><sp/>pattern_<sp/>=<sp/>posix::StrDup(regex);</highlight></codeline>
<codeline lineno="8384"><highlight class="normal"></highlight></codeline>
<codeline lineno="8385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reserves<sp/>enough<sp/>bytes<sp/>to<sp/>hold<sp/>the<sp/>regular<sp/>expression<sp/>used<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>full<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>full_regex_len<sp/>=<sp/>strlen(regex)<sp/>+<sp/>10;</highlight></codeline>
<codeline lineno="8388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>full_pattern<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[full_regex_len];</highlight></codeline>
<codeline lineno="8389"><highlight class="normal"></highlight></codeline>
<codeline lineno="8390"><highlight class="normal"><sp/><sp/>snprintf(full_pattern,<sp/>full_regex_len,<sp/></highlight><highlight class="stringliteral">&quot;^(%s)$&quot;</highlight><highlight class="normal">,<sp/>regex);</highlight></codeline>
<codeline lineno="8391"><highlight class="normal"><sp/><sp/>is_valid_<sp/>=<sp/>regcomp(&amp;full_regex_,<sp/>full_pattern,<sp/>REG_EXTENDED)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="8392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>call<sp/>regcomp(&amp;partial_regex_,<sp/>...)<sp/>even<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>previous<sp/>expression<sp/>returns<sp/>false.<sp/><sp/>Otherwise<sp/>partial_regex_<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>be<sp/>properly<sp/>initialized<sp/>can<sp/>may<sp/>cause<sp/>trouble<sp/>when<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>freed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>implementation<sp/>of<sp/>POSIX<sp/>regex<sp/>(e.g.<sp/>on<sp/>at<sp/>least<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>versions<sp/>of<sp/>Cygwin)<sp/>doesn&apos;t<sp/>accept<sp/>the<sp/>empty<sp/>string<sp/>as<sp/>a<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>regex.<sp/><sp/>We<sp/>change<sp/>it<sp/>to<sp/>an<sp/>equivalent<sp/>form<sp/>&quot;()&quot;<sp/>to<sp/>be<sp/>safe.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_valid_)<sp/>{</highlight></codeline>
<codeline lineno="8401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>partial_regex<sp/>=<sp/>(*regex<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal"><sp/>:<sp/>regex;</highlight></codeline>
<codeline lineno="8402"><highlight class="normal"><sp/><sp/><sp/><sp/>is_valid_<sp/>=<sp/>regcomp(&amp;partial_regex_,<sp/>partial_regex,<sp/>REG_EXTENDED)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="8403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8404"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(is_valid_)</highlight></codeline>
<codeline lineno="8405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Regular<sp/>expression<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>regex</highlight></codeline>
<codeline lineno="8406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>POSIX<sp/>Extended<sp/>regular<sp/>expression.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8407"><highlight class="normal"></highlight></codeline>
<codeline lineno="8408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>full_pattern;</highlight></codeline>
<codeline lineno="8409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8410"><highlight class="normal"></highlight></codeline>
<codeline lineno="8411"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_USES_SIMPLE_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8412"><highlight class="normal"></highlight></codeline>
<codeline lineno="8413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>ch<sp/>appears<sp/>anywhere<sp/>in<sp/>str<sp/>(excluding<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>terminating<sp/>&apos;\0&apos;<sp/>character).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8415"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInSet(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="8416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>strchr(str,<sp/>ch)<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="8417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8418"><highlight class="normal"></highlight></codeline>
<codeline lineno="8419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>ch<sp/>belongs<sp/>to<sp/>the<sp/>given<sp/>classification.<sp/><sp/>Unlike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>similar<sp/>functions<sp/>in<sp/>&lt;ctype.h&gt;,<sp/>these<sp/>aren&apos;t<sp/>affected<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>locale.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8422"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsAsciiDigit(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>ch<sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="8423"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsAsciiPunct(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="8424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsInSet(ch,<sp/></highlight><highlight class="stringliteral">&quot;^-!\&quot;#$%&amp;&apos;()*+,./:;&lt;=&gt;?@[\\]_`{|}~&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8426"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsRepeat(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsInSet(ch,<sp/></highlight><highlight class="stringliteral">&quot;?*+&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="8427"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsAsciiWhiteSpace(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsInSet(ch,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\f\n\r\t\v&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="8428"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsAsciiWordChar(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="8429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>ch<sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>ch<sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="8430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>ch<sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8432"><highlight class="normal"></highlight></codeline>
<codeline lineno="8433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>&quot;\\c&quot;<sp/>is<sp/>a<sp/>supported<sp/>escape<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8434"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsValidEscape(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="8435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(IsAsciiPunct(c)<sp/>||<sp/>IsInSet(c,<sp/></highlight><highlight class="stringliteral">&quot;dDfnrsStvwW&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="8436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8437"><highlight class="normal"></highlight></codeline>
<codeline lineno="8438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>given<sp/>atom<sp/>(specified<sp/>by<sp/>escaped<sp/>and<sp/>pattern)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matches<sp/>ch.<sp/><sp/>The<sp/>result<sp/>is<sp/>undefined<sp/>if<sp/>the<sp/>atom<sp/>is<sp/>invalid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8440"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AtomMatchesChar(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>escaped,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pattern_char,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="8441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(escaped)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;\\p&quot;<sp/>where<sp/>p<sp/>is<sp/>pattern_char.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(pattern_char)<sp/>{</highlight></codeline>
<codeline lineno="8443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsAsciiDigit(ch);</highlight></codeline>
<codeline lineno="8444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!IsAsciiDigit(ch);</highlight></codeline>
<codeline lineno="8445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsAsciiWhiteSpace(ch);</highlight></codeline>
<codeline lineno="8449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!IsAsciiWhiteSpace(ch);</highlight></codeline>
<codeline lineno="8450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\v&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsAsciiWordChar(ch);</highlight></codeline>
<codeline lineno="8453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!IsAsciiWordChar(ch);</highlight></codeline>
<codeline lineno="8454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsAsciiPunct(pattern_char)<sp/>&amp;&amp;<sp/>pattern_char<sp/>==<sp/>ch;</highlight></codeline>
<codeline lineno="8456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8457"><highlight class="normal"></highlight></codeline>
<codeline lineno="8458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pattern_char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ch<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>||<sp/>pattern_char<sp/>==<sp/>ch;</highlight></codeline>
<codeline lineno="8459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8460"><highlight class="normal"></highlight></codeline>
<codeline lineno="8461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>used<sp/>by<sp/>ValidateRegex()<sp/>to<sp/>format<sp/>error<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8462"><highlight class="normal">std::string<sp/>FormatRegexSyntaxError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="8463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Message()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Syntax<sp/>error<sp/>at<sp/>index<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index</highlight></codeline>
<codeline lineno="8464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>simple<sp/>regular<sp/>expression<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>regex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;:<sp/>&quot;</highlight><highlight class="normal">).GetString();</highlight></codeline>
<codeline lineno="8465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8466"><highlight class="normal"></highlight></codeline>
<codeline lineno="8467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>non-fatal<sp/>failures<sp/>and<sp/>returns<sp/>false<sp/>if<sp/>regex<sp/>is<sp/>invalid;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise<sp/>returns<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8469"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ValidateRegex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex)<sp/>{</highlight></codeline>
<codeline lineno="8470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regex<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="8471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(wan@google.com):<sp/>fix<sp/>the<sp/>source<sp/>file<sp/>location<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assertion<sp/>failures<sp/>to<sp/>match<sp/>where<sp/>the<sp/>regex<sp/>is<sp/>used<sp/>in<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8474"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NULL<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>simple<sp/>regular<sp/>expression.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8477"><highlight class="normal"></highlight></codeline>
<codeline lineno="8478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_valid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8479"><highlight class="normal"></highlight></codeline>
<codeline lineno="8480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>iff<sp/>?,<sp/>*,<sp/>or<sp/>+<sp/>can<sp/>follow<sp/>the<sp/>previous<sp/>atom.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>prev_repeatable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>regex[i];<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="8483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regex[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>escape<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="8485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regex[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/>FormatRegexSyntaxError(regex,<sp/>i<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="8487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;\\&apos;<sp/>cannot<sp/>appear<sp/>at<sp/>the<sp/>end.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8490"><highlight class="normal"></highlight></codeline>
<codeline lineno="8491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsValidEscape(regex[i]))<sp/>{</highlight></codeline>
<codeline lineno="8492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/>FormatRegexSyntaxError(regex,<sp/>i<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="8493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>escape<sp/>sequence<sp/>\&quot;\\&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>regex[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev_repeatable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8497"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>an<sp/>escape<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>regex[i];</highlight></codeline>
<codeline lineno="8499"><highlight class="normal"></highlight></codeline>
<codeline lineno="8500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/>FormatRegexSyntaxError(regex,<sp/>i)</highlight></codeline>
<codeline lineno="8502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;^&apos;<sp/>can<sp/>only<sp/>appear<sp/>at<sp/>the<sp/>beginning.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>regex[i<sp/>+<sp/>1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/>FormatRegexSyntaxError(regex,<sp/>i)</highlight></codeline>
<codeline lineno="8506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;$&apos;<sp/>can<sp/>only<sp/>appear<sp/>at<sp/>the<sp/>end.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsInSet(ch,<sp/></highlight><highlight class="stringliteral">&quot;()[]{}|&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="8509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/>FormatRegexSyntaxError(regex,<sp/>i)</highlight></codeline>
<codeline lineno="8510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>is<sp/>unsupported.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsRepeat(ch)<sp/>&amp;&amp;<sp/>!prev_repeatable)<sp/>{</highlight></codeline>
<codeline lineno="8513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/>FormatRegexSyntaxError(regex,<sp/>i)</highlight></codeline>
<codeline lineno="8514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>can<sp/>only<sp/>follow<sp/>a<sp/>repeatable<sp/>token.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8517"><highlight class="normal"></highlight></codeline>
<codeline lineno="8518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev_repeatable<sp/>=<sp/>!IsInSet(ch,<sp/></highlight><highlight class="stringliteral">&quot;^$?*+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8521"><highlight class="normal"></highlight></codeline>
<codeline lineno="8522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_valid;</highlight></codeline>
<codeline lineno="8523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8524"><highlight class="normal"></highlight></codeline>
<codeline lineno="8525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>repeated<sp/>regex<sp/>atom<sp/>followed<sp/>by<sp/>a<sp/>valid<sp/>simple<sp/>regular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expression.<sp/><sp/>The<sp/>regex<sp/>atom<sp/>is<sp/>defined<sp/>as<sp/>c<sp/>if<sp/>escaped<sp/>is<sp/>false,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>\c<sp/>otherwise.<sp/><sp/>repeat<sp/>is<sp/>the<sp/>repetition<sp/>meta<sp/>character<sp/>(?,<sp/>*,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>+).<sp/><sp/>The<sp/>behavior<sp/>is<sp/>undefined<sp/>if<sp/>str<sp/>contains<sp/>too<sp/>many</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>characters<sp/>to<sp/>be<sp/>indexable<sp/>by<sp/>size_t,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>test<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>probably<sp/>time<sp/>out<sp/>anyway.<sp/><sp/>We<sp/>are<sp/>fine<sp/>with<sp/>this<sp/>limitation<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::string<sp/>has<sp/>it<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8532"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchRepetitionAndRegexAtHead(</highlight></codeline>
<codeline lineno="8533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>escaped,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>repeat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex,</highlight></codeline>
<codeline lineno="8534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="8535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_count<sp/>=<sp/>(repeat<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="8536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_count<sp/>=<sp/>(repeat<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">)<sp/>?<sp/>1<sp/>:</highlight></codeline>
<codeline lineno="8537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="8538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>call<sp/>numeric_limits::max()<sp/>as<sp/>it<sp/>conflicts<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>max()<sp/>macro<sp/>on<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8540"><highlight class="normal"></highlight></codeline>
<codeline lineno="8541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>max_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>know<sp/>that<sp/>the<sp/>atom<sp/>matches<sp/>each<sp/>of<sp/>the<sp/>first<sp/>i<sp/>characters<sp/>in<sp/>str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>min_count<sp/>&amp;&amp;<sp/>MatchRegexAtHead(regex,<sp/>str<sp/>+<sp/>i))<sp/>{</highlight></codeline>
<codeline lineno="8544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>enough<sp/>matches<sp/>at<sp/>the<sp/>head,<sp/>and<sp/>the<sp/>tail<sp/>matches<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>only<sp/>care<sp/>about<sp/>*whether*<sp/>the<sp/>pattern<sp/>matches<sp/>str</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(as<sp/>opposed<sp/>to<sp/>*how*<sp/>it<sp/>matches),<sp/>there<sp/>is<sp/>no<sp/>need<sp/>to<sp/>find<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>greedy<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>||<sp/>!AtomMatchesChar(escaped,<sp/>c,<sp/>str[i]))</highlight></codeline>
<codeline lineno="8551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8555"><highlight class="normal"></highlight></codeline>
<codeline lineno="8556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>regex<sp/>matches<sp/>a<sp/>prefix<sp/>of<sp/>str.<sp/><sp/>regex<sp/>must<sp/>be<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8557"><highlight class="normal"></highlight><highlight class="comment">//<sp/>valid<sp/>simple<sp/>regular<sp/>expression<sp/>and<sp/>not<sp/>start<sp/>with<sp/>&quot;^&quot;,<sp/>or<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8558"><highlight class="normal"></highlight><highlight class="comment">//<sp/>result<sp/>is<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8559"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchRegexAtHead(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="8560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*regex<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>empty<sp/>regex<sp/>matches<sp/>a<sp/>prefix<sp/>of<sp/>anything.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8562"><highlight class="normal"></highlight></codeline>
<codeline lineno="8563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;$&quot;<sp/>only<sp/>matches<sp/>the<sp/>end<sp/>of<sp/>a<sp/>string.<sp/><sp/>Note<sp/>that<sp/>regex<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>valid<sp/>guarantees<sp/>that<sp/>there&apos;s<sp/>nothing<sp/>after<sp/>&quot;$&quot;<sp/>in<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*regex<sp/>==<sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8567"><highlight class="normal"></highlight></codeline>
<codeline lineno="8568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>first<sp/>thing<sp/>in<sp/>regex<sp/>an<sp/>escape<sp/>sequence?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>escaped<sp/>=<sp/>*regex<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(escaped)</highlight></codeline>
<codeline lineno="8571"><highlight class="normal"><sp/><sp/><sp/><sp/>++regex;</highlight></codeline>
<codeline lineno="8572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsRepeat(regex[1]))<sp/>{</highlight></codeline>
<codeline lineno="8573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MatchRepetitionAndRegexAtHead()<sp/>calls<sp/>MatchRegexAtHead(),<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here&apos;s<sp/>an<sp/>indirect<sp/>recursion.<sp/><sp/>It<sp/>terminates<sp/>as<sp/>the<sp/>regex<sp/>gets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shorter<sp/>in<sp/>each<sp/>recursion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchRepetitionAndRegexAtHead(</highlight></codeline>
<codeline lineno="8577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>escaped,<sp/>regex[0],<sp/>regex[1],<sp/>regex<sp/>+<sp/>2,<sp/>str);</highlight></codeline>
<codeline lineno="8578"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>regex<sp/>isn&apos;t<sp/>empty,<sp/>isn&apos;t<sp/>&quot;$&quot;,<sp/>and<sp/>doesn&apos;t<sp/>start<sp/>with<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>repetition.<sp/><sp/>We<sp/>match<sp/>the<sp/>first<sp/>atom<sp/>of<sp/>regex<sp/>with<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>character<sp/>of<sp/>str<sp/>and<sp/>recurse.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*str<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>AtomMatchesChar(escaped,<sp/>*regex,<sp/>*str)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchRegexAtHead(regex<sp/>+<sp/>1,<sp/>str<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="8584"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8586"><highlight class="normal"></highlight></codeline>
<codeline lineno="8587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>regex<sp/>matches<sp/>any<sp/>substring<sp/>of<sp/>str.<sp/><sp/>regex<sp/>must<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>valid<sp/>simple<sp/>regular<sp/>expression,<sp/>or<sp/>the<sp/>result<sp/>is<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8589"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>algorithm<sp/>is<sp/>recursive,<sp/>but<sp/>the<sp/>recursion<sp/>depth<sp/>doesn&apos;t<sp/>exceed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>regex<sp/>length,<sp/>so<sp/>we<sp/>won&apos;t<sp/>need<sp/>to<sp/>worry<sp/>about<sp/>running<sp/>out<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stack<sp/>space<sp/>normally.<sp/><sp/>In<sp/>rare<sp/>cases<sp/>the<sp/>time<sp/>complexity<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8593"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exponential<sp/>with<sp/>respect<sp/>to<sp/>the<sp/>regex<sp/>length<sp/>+<sp/>the<sp/>string<sp/>length,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>usually<sp/>it&apos;s<sp/>must<sp/>faster<sp/>(often<sp/>close<sp/>to<sp/>linear).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8595"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchRegexAnywhere(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="8596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regex<sp/>==<sp/>NULL<sp/>||<sp/>str<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="8597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8598"><highlight class="normal"></highlight></codeline>
<codeline lineno="8599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*regex<sp/>==<sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchRegexAtHead(regex<sp/>+<sp/>1,<sp/>str);</highlight></codeline>
<codeline lineno="8601"><highlight class="normal"></highlight></codeline>
<codeline lineno="8602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>successful<sp/>match<sp/>can<sp/>be<sp/>anywhere<sp/>in<sp/>str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MatchRegexAtHead(regex,<sp/>str))</highlight></codeline>
<codeline lineno="8605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8606"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str++<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8609"><highlight class="normal"></highlight></codeline>
<codeline lineno="8610"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>RE<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8611"><highlight class="normal"></highlight></codeline>
<codeline lineno="8612"><highlight class="normal">RE::~RE()<sp/>{</highlight></codeline>
<codeline lineno="8613"><highlight class="normal"><sp/><sp/>free(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pattern_));</highlight></codeline>
<codeline lineno="8614"><highlight class="normal"><sp/><sp/>free(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(full_pattern_));</highlight></codeline>
<codeline lineno="8615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8616"><highlight class="normal"></highlight></codeline>
<codeline lineno="8617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>regular<sp/>expression<sp/>re<sp/>matches<sp/>the<sp/>entire<sp/>str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8618"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RE::FullMatch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE&amp;<sp/>re)<sp/>{</highlight></codeline>
<codeline lineno="8619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>re.is_valid_<sp/>&amp;&amp;<sp/>MatchRegexAnywhere(re.full_pattern_,<sp/>str);</highlight></codeline>
<codeline lineno="8620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8621"><highlight class="normal"></highlight></codeline>
<codeline lineno="8622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>regular<sp/>expression<sp/>re<sp/>matches<sp/>a<sp/>substring<sp/>of<sp/>str</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(including<sp/>str<sp/>itself).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8624"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RE::PartialMatch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE&amp;<sp/>re)<sp/>{</highlight></codeline>
<codeline lineno="8625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>re.is_valid_<sp/>&amp;&amp;<sp/>MatchRegexAnywhere(re.pattern_,<sp/>str);</highlight></codeline>
<codeline lineno="8626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8627"><highlight class="normal"></highlight></codeline>
<codeline lineno="8628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initializes<sp/>an<sp/>RE<sp/>from<sp/>its<sp/>string<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8629"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RE::Init(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex)<sp/>{</highlight></codeline>
<codeline lineno="8630"><highlight class="normal"><sp/><sp/>pattern_<sp/>=<sp/>full_pattern_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regex<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="8632"><highlight class="normal"><sp/><sp/><sp/><sp/>pattern_<sp/>=<sp/>posix::StrDup(regex);</highlight></codeline>
<codeline lineno="8633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8634"><highlight class="normal"></highlight></codeline>
<codeline lineno="8635"><highlight class="normal"><sp/><sp/>is_valid_<sp/>=<sp/>ValidateRegex(regex);</highlight></codeline>
<codeline lineno="8636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_valid_)<sp/>{</highlight></codeline>
<codeline lineno="8637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>calculate<sp/>the<sp/>full<sp/>pattern<sp/>when<sp/>the<sp/>regex<sp/>is<sp/>invalid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8639"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8640"><highlight class="normal"></highlight></codeline>
<codeline lineno="8641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(regex);</highlight></codeline>
<codeline lineno="8642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reserves<sp/>enough<sp/>bytes<sp/>to<sp/>hold<sp/>the<sp/>regular<sp/>expression<sp/>used<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>full<sp/>match:<sp/>we<sp/>need<sp/>space<sp/>to<sp/>prepend<sp/>a<sp/>&apos;^&apos;,<sp/>append<sp/>a<sp/>&apos;$&apos;,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>terminate<sp/>the<sp/>string<sp/>with<sp/>&apos;\0&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(len<sp/>+<sp/>3));</highlight></codeline>
<codeline lineno="8646"><highlight class="normal"><sp/><sp/>full_pattern_<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="8647"><highlight class="normal"></highlight></codeline>
<codeline lineno="8648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*regex<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8649"><highlight class="normal"><sp/><sp/><sp/><sp/>*buffer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>full_pattern_<sp/>starts<sp/>with<sp/>&apos;^&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8650"><highlight class="normal"></highlight></codeline>
<codeline lineno="8651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>use<sp/>snprintf<sp/>or<sp/>strncpy,<sp/>as<sp/>they<sp/>trigger<sp/>a<sp/>warning<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compiled<sp/>with<sp/>VC++<sp/>8.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8653"><highlight class="normal"><sp/><sp/>memcpy(buffer,<sp/>regex,<sp/>len);</highlight></codeline>
<codeline lineno="8654"><highlight class="normal"><sp/><sp/>buffer<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="8655"><highlight class="normal"></highlight></codeline>
<codeline lineno="8656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0<sp/>||<sp/>regex[len<sp/>-<sp/>1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8657"><highlight class="normal"><sp/><sp/><sp/><sp/>*buffer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>full_pattern_<sp/>ends<sp/>with<sp/>&apos;$&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8658"><highlight class="normal"></highlight></codeline>
<codeline lineno="8659"><highlight class="normal"><sp/><sp/>*buffer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8661"><highlight class="normal"></highlight></codeline>
<codeline lineno="8662"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_USES_POSIX_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8663"><highlight class="normal"></highlight></codeline>
<codeline lineno="8664"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kUnknownFile[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8665"><highlight class="normal"></highlight></codeline>
<codeline lineno="8666"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>source<sp/>file<sp/>path<sp/>and<sp/>a<sp/>line<sp/>number<sp/>as<sp/>they<sp/>would<sp/>appear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8667"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>an<sp/>error<sp/>message<sp/>from<sp/>the<sp/>compiler<sp/>used<sp/>to<sp/>compile<sp/>this<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8668"><highlight class="normal">GTEST_API_<sp/>::std::string<sp/>FormatFileLocation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)<sp/>{</highlight></codeline>
<codeline lineno="8669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file_name(file<sp/>==<sp/>NULL<sp/>?<sp/>kUnknownFile<sp/>:<sp/>file);</highlight></codeline>
<codeline lineno="8670"><highlight class="normal"></highlight></codeline>
<codeline lineno="8671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8673"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8674"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>StreamableToString(line)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;):&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8676"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+<sp/>StreamableToString(line)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8678"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8680"><highlight class="normal"></highlight></codeline>
<codeline lineno="8681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>file<sp/>location<sp/>for<sp/>compiler-independent<sp/>XML<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Although<sp/>this<sp/>function<sp/>is<sp/>not<sp/>platform<sp/>dependent,<sp/>we<sp/>put<sp/>it<sp/>next<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FormatFileLocation<sp/>in<sp/>order<sp/>to<sp/>contrast<sp/>the<sp/>two<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>FormatCompilerIndependentFileLocation()<sp/>does<sp/>NOT<sp/>append<sp/>colon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8685"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>file<sp/>location<sp/>it<sp/>produces,<sp/>unlike<sp/>FormatFileLocation().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8686"><highlight class="normal">GTEST_API_<sp/>::std::string<sp/>FormatCompilerIndependentFileLocation(</highlight></codeline>
<codeline lineno="8687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)<sp/>{</highlight></codeline>
<codeline lineno="8688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file_name(file<sp/>==<sp/>NULL<sp/>?<sp/>kUnknownFile<sp/>:<sp/>file);</highlight></codeline>
<codeline lineno="8689"><highlight class="normal"></highlight></codeline>
<codeline lineno="8690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="8691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file_name;</highlight></codeline>
<codeline lineno="8692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+<sp/>StreamableToString(line);</highlight></codeline>
<codeline lineno="8694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8695"><highlight class="normal"></highlight></codeline>
<codeline lineno="8696"><highlight class="normal"></highlight></codeline>
<codeline lineno="8697"><highlight class="normal">GTestLog::GTestLog(GTestLogSeverity<sp/>severity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="8698"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>severity_(severity)<sp/>{</highlight></codeline>
<codeline lineno="8699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>marker<sp/>=</highlight></codeline>
<codeline lineno="8700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>severity<sp/>==<sp/>GTEST_INFO<sp/>?<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>INFO<sp/>]&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="8701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>severity<sp/>==<sp/>GTEST_WARNING<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;[WARNING]&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="8702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>severity<sp/>==<sp/>GTEST_ERROR<sp/>?<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/>ERROR<sp/>]&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>FATAL<sp/>]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8703"><highlight class="normal"><sp/><sp/>GetStream()<sp/>&lt;&lt;<sp/>::std::endl<sp/>&lt;&lt;<sp/>marker<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>FormatFileLocation(file,<sp/>line).c_str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8706"><highlight class="normal"></highlight></codeline>
<codeline lineno="8707"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Flushes<sp/>the<sp/>buffers<sp/>and,<sp/>if<sp/>severity<sp/>is<sp/>GTEST_FATAL,<sp/>aborts<sp/>the<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8708"><highlight class="normal">GTestLog::~GTestLog()<sp/>{</highlight></codeline>
<codeline lineno="8709"><highlight class="normal"><sp/><sp/>GetStream()<sp/>&lt;&lt;<sp/>::std::endl;</highlight></codeline>
<codeline lineno="8710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(severity_<sp/>==<sp/>GTEST_FATAL)<sp/>{</highlight></codeline>
<codeline lineno="8711"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="8712"><highlight class="normal"><sp/><sp/><sp/><sp/>posix::Abort();</highlight></codeline>
<codeline lineno="8713"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8715"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disable<sp/>Microsoft<sp/>deprecation<sp/>warnings<sp/>for<sp/>POSIX<sp/>functions<sp/>called<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8716"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>class<sp/>(creat,<sp/>dup,<sp/>dup2,<sp/>and<sp/>close)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8717"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8718"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8719"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(disable:<sp/>4996)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8720"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8721"><highlight class="normal"></highlight></codeline>
<codeline lineno="8722"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8723"><highlight class="normal"></highlight></codeline>
<codeline lineno="8724"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Object<sp/>that<sp/>captures<sp/>an<sp/>output<sp/>stream<sp/>(stdout/stderr).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8725"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CapturedStream<sp/>{</highlight></codeline>
<codeline lineno="8726"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>ctor<sp/>redirects<sp/>the<sp/>stream<sp/>to<sp/>a<sp/>temporary<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>CapturedStream(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>:<sp/>fd_(fd),<sp/>uncaptured_fd_(dup(fd))<sp/>{</highlight></codeline>
<codeline lineno="8729"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp_dir_path[MAX_PATH<sp/>+<sp/>1]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp_file_path[MAX_PATH<sp/>+<sp/>1]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8732"><highlight class="normal"></highlight></codeline>
<codeline lineno="8733"><highlight class="normal"><sp/><sp/><sp/><sp/>::GetTempPathA(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(temp_dir_path),<sp/>temp_dir_path);</highlight></codeline>
<codeline lineno="8734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT<sp/>success<sp/>=<sp/>::GetTempFileNameA(temp_dir_path,</highlight></codeline>
<codeline lineno="8735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;gtest_redir&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>unique<sp/>file<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_file_path);</highlight></codeline>
<codeline lineno="8738"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_(success<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="8739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>a<sp/>temporary<sp/>file<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>temp_dir_path;</highlight></codeline>
<codeline lineno="8740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>captured_fd<sp/>=<sp/>creat(temp_file_path,<sp/>_S_IREAD<sp/>|<sp/>_S_IWRITE);</highlight></codeline>
<codeline lineno="8741"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_(captured_fd<sp/>!=<sp/>-1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>temporary<sp/>file<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>temp_file_path;</highlight></codeline>
<codeline lineno="8743"><highlight class="normal"><sp/><sp/><sp/><sp/>filename_<sp/>=<sp/>temp_file_path;</highlight></codeline>
<codeline lineno="8744"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There&apos;s<sp/>no<sp/>guarantee<sp/>that<sp/>a<sp/>test<sp/>has<sp/>write<sp/>access<sp/>to<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>directory,<sp/>so<sp/>we<sp/>create<sp/>the<sp/>temporary<sp/>file<sp/>in<sp/>the<sp/>/tmp<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instead.<sp/>We<sp/>use<sp/>/tmp<sp/>on<sp/>most<sp/>systems,<sp/>and<sp/>/sdcard<sp/>on<sp/>Android.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>That&apos;s<sp/>because<sp/>Android<sp/>doesn&apos;t<sp/>have<sp/>/tmp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8749"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>GTEST_OS_LINUX_ANDROID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>Android<sp/>applications<sp/>are<sp/>expected<sp/>to<sp/>call<sp/>the<sp/>framework&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Context.getExternalStorageDirectory()<sp/>method<sp/>through<sp/>JNI<sp/>to<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>location<sp/>of<sp/>the<sp/>world-writable<sp/>SD<sp/>Card<sp/>directory.<sp/>However,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>requires<sp/>a<sp/>Context<sp/>handle,<sp/>which<sp/>cannot<sp/>be<sp/>retrieved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>globally<sp/>from<sp/>native<sp/>code.<sp/>Doing<sp/>so<sp/>also<sp/>precludes<sp/>running<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>code<sp/>as<sp/>part<sp/>of<sp/>a<sp/>regular<sp/>standalone<sp/>executable,<sp/>which<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>in<sp/>a<sp/>Dalvik<sp/>process<sp/>(e.g.<sp/>when<sp/>running<sp/>it<sp/>through<sp/>&apos;adb<sp/>shell&apos;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>location<sp/>/sdcard<sp/>is<sp/>directly<sp/>accessible<sp/>from<sp/>native<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>is<sp/>the<sp/>only<sp/>location<sp/>(unofficially)<sp/>supported<sp/>by<sp/>the<sp/>Android</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>team.<sp/>It&apos;s<sp/>generally<sp/>a<sp/>symlink<sp/>to<sp/>the<sp/>real<sp/>SD<sp/>Card<sp/>mount<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>can<sp/>be<sp/>/mnt/sdcard,<sp/>/mnt/sdcard0,<sp/>/system/media/sdcard,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>OEM-customized<sp/>locations.<sp/>Never<sp/>rely<sp/>on<sp/>these,<sp/>and<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>/sdcard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name_template[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/sdcard/gtest_captured_stream.XXXXXX&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8765"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name_template[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/tmp/captured_stream.XXXXXX&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8767"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX_ANDROID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>captured_fd<sp/>=<sp/>mkstemp(name_template);</highlight></codeline>
<codeline lineno="8769"><highlight class="normal"><sp/><sp/><sp/><sp/>filename_<sp/>=<sp/>name_template;</highlight></codeline>
<codeline lineno="8770"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8771"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(NULL);</highlight></codeline>
<codeline lineno="8772"><highlight class="normal"><sp/><sp/><sp/><sp/>dup2(captured_fd,<sp/>fd_);</highlight></codeline>
<codeline lineno="8773"><highlight class="normal"><sp/><sp/><sp/><sp/>close(captured_fd);</highlight></codeline>
<codeline lineno="8774"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8775"><highlight class="normal"></highlight></codeline>
<codeline lineno="8776"><highlight class="normal"><sp/><sp/>~CapturedStream()<sp/>{</highlight></codeline>
<codeline lineno="8777"><highlight class="normal"><sp/><sp/><sp/><sp/>remove(filename_.c_str());</highlight></codeline>
<codeline lineno="8778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8779"><highlight class="normal"></highlight></codeline>
<codeline lineno="8780"><highlight class="normal"><sp/><sp/>std::string<sp/>GetCapturedString()<sp/>{</highlight></codeline>
<codeline lineno="8781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uncaptured_fd_<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="8782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>original<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fflush(NULL);</highlight></codeline>
<codeline lineno="8784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dup2(uncaptured_fd_,<sp/>fd_);</highlight></codeline>
<codeline lineno="8785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close(uncaptured_fd_);</highlight></codeline>
<codeline lineno="8786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uncaptured_fd_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="8787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8788"><highlight class="normal"></highlight></codeline>
<codeline lineno="8789"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>posix::FOpen(filename_.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>content<sp/>=<sp/>ReadEntireFile(file);</highlight></codeline>
<codeline lineno="8791"><highlight class="normal"><sp/><sp/><sp/><sp/>posix::FClose(file);</highlight></codeline>
<codeline lineno="8792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>content;</highlight></codeline>
<codeline lineno="8793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8794"><highlight class="normal"></highlight></codeline>
<codeline lineno="8795"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reads<sp/>the<sp/>entire<sp/>content<sp/>of<sp/>a<sp/>file<sp/>as<sp/>an<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>ReadEntireFile(FILE*<sp/>file);</highlight></codeline>
<codeline lineno="8798"><highlight class="normal"></highlight></codeline>
<codeline lineno="8799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>size<sp/>(in<sp/>bytes)<sp/>of<sp/>a<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>GetFileSize(FILE*<sp/>file);</highlight></codeline>
<codeline lineno="8801"><highlight class="normal"></highlight></codeline>
<codeline lineno="8802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd_;<sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>stream<sp/>to<sp/>capture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uncaptured_fd_;</highlight></codeline>
<codeline lineno="8804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Name<sp/>of<sp/>the<sp/>temporary<sp/>file<sp/>holding<sp/>the<sp/>stderr<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8805"><highlight class="normal"><sp/><sp/>::std::string<sp/>filename_;</highlight></codeline>
<codeline lineno="8806"><highlight class="normal"></highlight></codeline>
<codeline lineno="8807"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(CapturedStream);</highlight></codeline>
<codeline lineno="8808"><highlight class="normal">};</highlight></codeline>
<codeline lineno="8809"><highlight class="normal"></highlight></codeline>
<codeline lineno="8810"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>size<sp/>(in<sp/>bytes)<sp/>of<sp/>a<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8811"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>CapturedStream::GetFileSize(FILE*<sp/>file)<sp/>{</highlight></codeline>
<codeline lineno="8812"><highlight class="normal"><sp/><sp/>fseek(file,<sp/>0,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="8813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ftell(file));</highlight></codeline>
<codeline lineno="8814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8815"><highlight class="normal"></highlight></codeline>
<codeline lineno="8816"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>the<sp/>entire<sp/>content<sp/>of<sp/>a<sp/>file<sp/>as<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8817"><highlight class="normal">std::string<sp/>CapturedStream::ReadEntireFile(FILE*<sp/>file)<sp/>{</highlight></codeline>
<codeline lineno="8818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>file_size<sp/>=<sp/>GetFileSize(file);</highlight></codeline>
<codeline lineno="8819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[file_size];</highlight></codeline>
<codeline lineno="8820"><highlight class="normal"></highlight></codeline>
<codeline lineno="8821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_last_read<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>of<sp/>bytes<sp/>read<sp/>in<sp/>the<sp/>last<sp/>fread()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_read<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>of<sp/>bytes<sp/>read<sp/>so<sp/>far</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8823"><highlight class="normal"></highlight></codeline>
<codeline lineno="8824"><highlight class="normal"><sp/><sp/>fseek(file,<sp/>0,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="8825"><highlight class="normal"></highlight></codeline>
<codeline lineno="8826"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Keeps<sp/>reading<sp/>the<sp/>file<sp/>until<sp/>we<sp/>cannot<sp/>read<sp/>further<sp/>or<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8827"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pre-determined<sp/>file<sp/>size<sp/>is<sp/>reached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8829"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes_last_read<sp/>=<sp/>fread(buffer+bytes_read,<sp/>1,<sp/>file_size-bytes_read,<sp/>file);</highlight></codeline>
<codeline lineno="8830"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes_read<sp/>+=<sp/>bytes_last_read;</highlight></codeline>
<codeline lineno="8831"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bytes_last_read<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>bytes_read<sp/>&lt;<sp/>file_size);</highlight></codeline>
<codeline lineno="8832"><highlight class="normal"></highlight></codeline>
<codeline lineno="8833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>content(buffer,<sp/>bytes_read);</highlight></codeline>
<codeline lineno="8834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>buffer;</highlight></codeline>
<codeline lineno="8835"><highlight class="normal"></highlight></codeline>
<codeline lineno="8836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>content;</highlight></codeline>
<codeline lineno="8837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8838"><highlight class="normal"></highlight></codeline>
<codeline lineno="8839"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8840"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8841"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8842"><highlight class="normal"></highlight></codeline>
<codeline lineno="8843"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CapturedStream*<sp/>g_captured_stderr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8844"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CapturedStream*<sp/>g_captured_stdout<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8845"><highlight class="normal"></highlight></codeline>
<codeline lineno="8846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Starts<sp/>capturing<sp/>an<sp/>output<sp/>stream<sp/>(stdout/stderr).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8847"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CaptureStream(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>stream_name,<sp/>CapturedStream**<sp/>stream)<sp/>{</highlight></codeline>
<codeline lineno="8848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*stream<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="8849"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOG_(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>one<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>stream_name</highlight></codeline>
<codeline lineno="8850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>capturer<sp/>can<sp/>exist<sp/>at<sp/>a<sp/>time.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8852"><highlight class="normal"><sp/><sp/>*stream<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CapturedStream(fd);</highlight></codeline>
<codeline lineno="8853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8854"><highlight class="normal"></highlight></codeline>
<codeline lineno="8855"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stops<sp/>capturing<sp/>the<sp/>output<sp/>stream<sp/>and<sp/>returns<sp/>the<sp/>captured<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8856"><highlight class="normal">std::string<sp/>GetCapturedStream(CapturedStream**<sp/>captured_stream)<sp/>{</highlight></codeline>
<codeline lineno="8857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>content<sp/>=<sp/>(*captured_stream)-&gt;GetCapturedString();</highlight></codeline>
<codeline lineno="8858"><highlight class="normal"></highlight></codeline>
<codeline lineno="8859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*captured_stream;</highlight></codeline>
<codeline lineno="8860"><highlight class="normal"><sp/><sp/>*captured_stream<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8861"><highlight class="normal"></highlight></codeline>
<codeline lineno="8862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>content;</highlight></codeline>
<codeline lineno="8863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8864"><highlight class="normal"></highlight></codeline>
<codeline lineno="8865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Starts<sp/>capturing<sp/>stdout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8866"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CaptureStdout()<sp/>{</highlight></codeline>
<codeline lineno="8867"><highlight class="normal"><sp/><sp/>CaptureStream(kStdOutFileno,<sp/></highlight><highlight class="stringliteral">&quot;stdout&quot;</highlight><highlight class="normal">,<sp/>&amp;g_captured_stdout);</highlight></codeline>
<codeline lineno="8868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8869"><highlight class="normal"></highlight></codeline>
<codeline lineno="8870"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Starts<sp/>capturing<sp/>stderr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8871"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CaptureStderr()<sp/>{</highlight></codeline>
<codeline lineno="8872"><highlight class="normal"><sp/><sp/>CaptureStream(kStdErrFileno,<sp/></highlight><highlight class="stringliteral">&quot;stderr&quot;</highlight><highlight class="normal">,<sp/>&amp;g_captured_stderr);</highlight></codeline>
<codeline lineno="8873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8874"><highlight class="normal"></highlight></codeline>
<codeline lineno="8875"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stops<sp/>capturing<sp/>stdout<sp/>and<sp/>returns<sp/>the<sp/>captured<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8876"><highlight class="normal">std::string<sp/>GetCapturedStdout()<sp/>{</highlight></codeline>
<codeline lineno="8877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetCapturedStream(&amp;g_captured_stdout);</highlight></codeline>
<codeline lineno="8878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8879"><highlight class="normal"></highlight></codeline>
<codeline lineno="8880"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stops<sp/>capturing<sp/>stderr<sp/>and<sp/>returns<sp/>the<sp/>captured<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8881"><highlight class="normal">std::string<sp/>GetCapturedStderr()<sp/>{</highlight></codeline>
<codeline lineno="8882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetCapturedStream(&amp;g_captured_stderr);</highlight></codeline>
<codeline lineno="8883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8884"><highlight class="normal"></highlight></codeline>
<codeline lineno="8885"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8886"><highlight class="normal"></highlight></codeline>
<codeline lineno="8887"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8888"><highlight class="normal"></highlight></codeline>
<codeline lineno="8889"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>copy<sp/>of<sp/>all<sp/>command<sp/>line<sp/>arguments.<sp/><sp/>Set<sp/>by<sp/>InitGoogleTest().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8890"><highlight class="normal">::std::vector&lt;testing::internal::string&gt;<sp/>g_argvs;</highlight></codeline>
<codeline lineno="8891"><highlight class="normal"></highlight></codeline>
<codeline lineno="8892"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::std::vector&lt;testing::internal::string&gt;*<sp/>g_injected_test_argvs<sp/>=</highlight></codeline>
<codeline lineno="8893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL;<sp/><sp/></highlight><highlight class="comment">//<sp/>Owned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8894"><highlight class="normal"></highlight></codeline>
<codeline lineno="8895"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetInjectableArgvs(const<sp/>::std::vector&lt;testing::internal::string&gt;*<sp/>argvs)<sp/>{</highlight></codeline>
<codeline lineno="8896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_injected_test_argvs<sp/>!=<sp/>argvs)</highlight></codeline>
<codeline lineno="8897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>g_injected_test_argvs;</highlight></codeline>
<codeline lineno="8898"><highlight class="normal"><sp/><sp/>g_injected_test_argvs<sp/>=<sp/>argvs;</highlight></codeline>
<codeline lineno="8899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8900"><highlight class="normal"></highlight></codeline>
<codeline lineno="8901"><highlight class="normal">const<sp/>::std::vector&lt;testing::internal::string&gt;&amp;<sp/>GetInjectableArgvs()<sp/>{</highlight></codeline>
<codeline lineno="8902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_injected_test_argvs<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="8903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*g_injected_test_argvs;</highlight></codeline>
<codeline lineno="8904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_argvs;</highlight></codeline>
<codeline lineno="8906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8907"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8908"><highlight class="normal"></highlight></codeline>
<codeline lineno="8909"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8910"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">posix<sp/>{</highlight></codeline>
<codeline lineno="8911"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Abort()<sp/>{</highlight></codeline>
<codeline lineno="8912"><highlight class="normal"><sp/><sp/>DebugBreak();</highlight></codeline>
<codeline lineno="8913"><highlight class="normal"><sp/><sp/>TerminateProcess(GetCurrentProcess(),<sp/>1);</highlight></codeline>
<codeline lineno="8914"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8915"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>posix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8916"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8917"><highlight class="normal"></highlight></codeline>
<codeline lineno="8918"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>name<sp/>of<sp/>the<sp/>environment<sp/>variable<sp/>corresponding<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8919"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>flag.<sp/><sp/>For<sp/>example,<sp/>FlagToEnvVar(&quot;foo&quot;)<sp/>will<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8920"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;GTEST_FOO&quot;<sp/>in<sp/>the<sp/>open-source<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8921"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>FlagToEnvVar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="8922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>full_flag<sp/>=</highlight></codeline>
<codeline lineno="8923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(Message()<sp/>&lt;&lt;<sp/>GTEST_FLAG_PREFIX_<sp/>&lt;&lt;<sp/>flag).GetString();</highlight></codeline>
<codeline lineno="8924"><highlight class="normal"></highlight></codeline>
<codeline lineno="8925"><highlight class="normal"><sp/><sp/>Message<sp/>env_var;</highlight></codeline>
<codeline lineno="8926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>full_flag.length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="8927"><highlight class="normal"><sp/><sp/><sp/><sp/>env_var<sp/>&lt;&lt;<sp/>ToUpper(full_flag.c_str()[i]);</highlight></codeline>
<codeline lineno="8928"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8929"><highlight class="normal"></highlight></codeline>
<codeline lineno="8930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>env_var.GetString();</highlight></codeline>
<codeline lineno="8931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8932"><highlight class="normal"></highlight></codeline>
<codeline lineno="8933"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>&apos;str&apos;<sp/>for<sp/>a<sp/>32-bit<sp/>signed<sp/>integer.<sp/><sp/>If<sp/>successful,<sp/>writes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8934"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>result<sp/>to<sp/>*value<sp/>and<sp/>returns<sp/>true;<sp/>otherwise<sp/>leaves<sp/>*value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unchanged<sp/>and<sp/>returns<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8936"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ParseInt32(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Message&amp;<sp/>src_text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/>Int32*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="8937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>environment<sp/>variable<sp/>as<sp/>a<sp/>decimal<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long_value<sp/>=<sp/>strtol(str,<sp/>&amp;end,<sp/>10);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8940"><highlight class="normal"></highlight></codeline>
<codeline lineno="8941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Has<sp/>strtol()<sp/>consumed<sp/>all<sp/>characters<sp/>in<sp/>the<sp/>string?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*end<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>-<sp/>an<sp/>invalid<sp/>character<sp/>was<sp/>encountered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8944"><highlight class="normal"><sp/><sp/><sp/><sp/>Message<sp/>msg;</highlight></codeline>
<codeline lineno="8945"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>src_text</highlight></codeline>
<codeline lineno="8946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>a<sp/>32-bit<sp/>integer,<sp/>but<sp/>actually&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>value<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8948"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>msg.GetString().c_str());</highlight></codeline>
<codeline lineno="8949"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="8950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8951"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8952"><highlight class="normal"></highlight></codeline>
<codeline lineno="8953"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>parsed<sp/>value<sp/>in<sp/>the<sp/>range<sp/>of<sp/>an<sp/>Int32?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int32<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Int32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(long_value);</highlight></codeline>
<codeline lineno="8955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(long_value<sp/>==<sp/>LONG_MAX<sp/>||<sp/>long_value<sp/>==<sp/>LONG_MIN<sp/>||</highlight></codeline>
<codeline lineno="8956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>parsed<sp/>value<sp/>overflows<sp/>as<sp/>a<sp/>long.<sp/><sp/>(strtol()<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LONG_MAX<sp/>or<sp/>LONG_MIN<sp/>when<sp/>the<sp/>input<sp/>overflows.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>!=<sp/>long_value</highlight></codeline>
<codeline lineno="8959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>parsed<sp/>value<sp/>overflows<sp/>as<sp/>an<sp/>Int32.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8961"><highlight class="normal"><sp/><sp/><sp/><sp/>Message<sp/>msg;</highlight></codeline>
<codeline lineno="8962"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>src_text</highlight></codeline>
<codeline lineno="8963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>a<sp/>32-bit<sp/>integer,<sp/>but<sp/>actually&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>value<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>overflows.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8965"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>msg.GetString().c_str());</highlight></codeline>
<codeline lineno="8966"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="8967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8968"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8969"><highlight class="normal"></highlight></codeline>
<codeline lineno="8970"><highlight class="normal"><sp/><sp/>*value<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="8971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8973"><highlight class="normal"></highlight></codeline>
<codeline lineno="8974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>and<sp/>returns<sp/>the<sp/>Boolean<sp/>environment<sp/>variable<sp/>corresponding<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8975"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>flag;<sp/>if<sp/>it&apos;s<sp/>not<sp/>set,<sp/>returns<sp/>default_value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8976"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>is<sp/>considered<sp/>true<sp/>iff<sp/>it&apos;s<sp/>not<sp/>&quot;0&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8978"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BoolFromGTestEnv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>default_value)<sp/>{</highlight></codeline>
<codeline lineno="8979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>env_var<sp/>=<sp/>FlagToEnvVar(flag);</highlight></codeline>
<codeline lineno="8980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>string_value<sp/>=<sp/>posix::GetEnv(env_var.c_str());</highlight></codeline>
<codeline lineno="8981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string_value<sp/>==<sp/>NULL<sp/>?</highlight></codeline>
<codeline lineno="8982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_value<sp/>:<sp/>strcmp(string_value,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="8983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8984"><highlight class="normal"></highlight></codeline>
<codeline lineno="8985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>and<sp/>returns<sp/>a<sp/>32-bit<sp/>integer<sp/>stored<sp/>in<sp/>the<sp/>environment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8986"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variable<sp/>corresponding<sp/>to<sp/>the<sp/>given<sp/>flag;<sp/>if<sp/>it<sp/>isn&apos;t<sp/>set<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>represent<sp/>a<sp/>valid<sp/>32-bit<sp/>integer,<sp/>returns<sp/>default_value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8988"><highlight class="normal">Int32<sp/>Int32FromGTestEnv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,<sp/>Int32<sp/>default_value)<sp/>{</highlight></codeline>
<codeline lineno="8989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>env_var<sp/>=<sp/>FlagToEnvVar(flag);</highlight></codeline>
<codeline lineno="8990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>string_value<sp/>=<sp/>posix::GetEnv(env_var.c_str());</highlight></codeline>
<codeline lineno="8991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(string_value<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="8992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>environment<sp/>variable<sp/>is<sp/>not<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_value;</highlight></codeline>
<codeline lineno="8994"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8995"><highlight class="normal"></highlight></codeline>
<codeline lineno="8996"><highlight class="normal"><sp/><sp/>Int32<sp/>result<sp/>=<sp/>default_value;</highlight></codeline>
<codeline lineno="8997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ParseInt32(Message()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Environment<sp/>variable<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>env_var,</highlight></codeline>
<codeline lineno="8998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_value,<sp/>&amp;result))<sp/>{</highlight></codeline>
<codeline lineno="8999"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;The<sp/>default<sp/>value<sp/>%s<sp/>is<sp/>used.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="9000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Message()<sp/>&lt;&lt;<sp/>default_value).GetString().c_str());</highlight></codeline>
<codeline lineno="9001"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="9002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_value;</highlight></codeline>
<codeline lineno="9003"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9004"><highlight class="normal"></highlight></codeline>
<codeline lineno="9005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9007"><highlight class="normal"></highlight></codeline>
<codeline lineno="9008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>and<sp/>returns<sp/>the<sp/>string<sp/>environment<sp/>variable<sp/>corresponding<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9009"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>flag;<sp/>if<sp/>it&apos;s<sp/>not<sp/>set,<sp/>returns<sp/>default_value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9010"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>StringFromGTestEnv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>default_value)<sp/>{</highlight></codeline>
<codeline lineno="9011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>env_var<sp/>=<sp/>FlagToEnvVar(flag);</highlight></codeline>
<codeline lineno="9012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>posix::GetEnv(env_var.c_str());</highlight></codeline>
<codeline lineno="9013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>==<sp/>NULL<sp/>?<sp/>default_value<sp/>:<sp/>value;</highlight></codeline>
<codeline lineno="9014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9015"><highlight class="normal"></highlight></codeline>
<codeline lineno="9016"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9017"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9020"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9021"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9022"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9024"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9025"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9027"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9028"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9029"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9030"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9031"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9032"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9033"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9034"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9035"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9036"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9037"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9038"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9039"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9040"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9041"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9045"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9046"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9047"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9048"><highlight class="normal"></highlight></codeline>
<codeline lineno="9049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>-<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9050"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>implements<sp/>a<sp/>universal<sp/>value<sp/>printer<sp/>that<sp/>can<sp/>print<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9052"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>of<sp/>any<sp/>type<sp/>T:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9053"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9054"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>::testing::internal::UniversalPrinter&lt;T&gt;::Print(value,<sp/>ostream_ptr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9055"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9056"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>uses<sp/>the<sp/>&lt;&lt;<sp/>operator<sp/>when<sp/>possible,<sp/>and<sp/>prints<sp/>the<sp/>bytes<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9057"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object<sp/>otherwise.<sp/><sp/>A<sp/>user<sp/>can<sp/>override<sp/>its<sp/>behavior<sp/>for<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9058"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>Foo<sp/>by<sp/>defining<sp/>either<sp/>operator&lt;&lt;(::std::ostream&amp;,<sp/>const<sp/>Foo&amp;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9059"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>void<sp/>PrintTo(const<sp/>Foo&amp;,<sp/>::std::ostream*)<sp/>in<sp/>the<sp/>namespace<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9060"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defines<sp/>Foo.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9061"><highlight class="normal"></highlight></codeline>
<codeline lineno="9062"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9063"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9064"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9065"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9066"><highlight class="normal"></highlight></codeline>
<codeline lineno="9067"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="9068"><highlight class="normal"></highlight></codeline>
<codeline lineno="9069"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9070"><highlight class="normal"></highlight></codeline>
<codeline lineno="9071"><highlight class="normal">using<sp/>::std::ostream;</highlight></codeline>
<codeline lineno="9072"><highlight class="normal"></highlight></codeline>
<codeline lineno="9073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>segment<sp/>of<sp/>bytes<sp/>in<sp/>the<sp/>given<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9074"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintByteSegmentInObjectTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>obj_bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start,</highlight></codeline>
<codeline lineno="9075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>text[5]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="9078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>start<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="9079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Organizes<sp/>the<sp/>bytes<sp/>into<sp/>groups<sp/>of<sp/>2<sp/>for<sp/>easy<sp/>parsing<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>human.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="9083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9086"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9087"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_SNPRINTF_(text,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(text),<sp/></highlight><highlight class="stringliteral">&quot;%02X&quot;</highlight><highlight class="normal">,<sp/>obj_bytes[j]);</highlight></codeline>
<codeline lineno="9088"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>text;</highlight></codeline>
<codeline lineno="9089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9091"><highlight class="normal"></highlight></codeline>
<codeline lineno="9092"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>bytes<sp/>in<sp/>the<sp/>given<sp/>value<sp/>to<sp/>the<sp/>given<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9093"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintBytesInObjectToImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>obj_bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="9094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9095"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>the<sp/>user<sp/>how<sp/>big<sp/>the<sp/>object<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9096"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/>count<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-byte<sp/>object<sp/>&lt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9097"><highlight class="normal"></highlight></codeline>
<codeline lineno="9098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kThreshold<sp/>=<sp/>132;</highlight></codeline>
<codeline lineno="9099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kChunkSize<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="9100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>object<sp/>size<sp/>is<sp/>bigger<sp/>than<sp/>kThreshold,<sp/>we&apos;ll<sp/>have<sp/>to<sp/>omit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>details<sp/>by<sp/>printing<sp/>only<sp/>the<sp/>first<sp/>and<sp/>the<sp/>last<sp/>kChunkSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(wan):<sp/>let<sp/>the<sp/>user<sp/>control<sp/>the<sp/>threshold<sp/>using<sp/>a<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&lt;<sp/>kThreshold)<sp/>{</highlight></codeline>
<codeline lineno="9105"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintByteSegmentInObjectTo(obj_bytes,<sp/>0,<sp/>count,<sp/>os);</highlight></codeline>
<codeline lineno="9106"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9107"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintByteSegmentInObjectTo(obj_bytes,<sp/>0,<sp/>kChunkSize,<sp/>os);</highlight></codeline>
<codeline lineno="9108"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>...<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rounds<sp/>up<sp/>to<sp/>2-byte<sp/>boundary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>resume_pos<sp/>=<sp/>(count<sp/>-<sp/>kChunkSize<sp/>+<sp/>1)/2*2;</highlight></codeline>
<codeline lineno="9111"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintByteSegmentInObjectTo(obj_bytes,<sp/>resume_pos,<sp/>count<sp/>-<sp/>resume_pos,<sp/>os);</highlight></codeline>
<codeline lineno="9112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9113"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9115"><highlight class="normal"></highlight></codeline>
<codeline lineno="9116"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9117"><highlight class="normal"></highlight></codeline>
<codeline lineno="9118"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal2<sp/>{</highlight></codeline>
<codeline lineno="9119"><highlight class="normal"></highlight></codeline>
<codeline lineno="9120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Delegates<sp/>to<sp/>PrintBytesInObjectToImpl()<sp/>to<sp/>print<sp/>the<sp/>bytes<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>object.<sp/><sp/>The<sp/>delegation<sp/>simplifies<sp/>the<sp/>implementation,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uses<sp/>the<sp/>&lt;&lt;<sp/>operator<sp/>and<sp/>thus<sp/>is<sp/>easier<sp/>done<sp/>outside<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::testing::internal<sp/>namespace,<sp/>which<sp/>contains<sp/>a<sp/>&lt;&lt;<sp/>operator<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sometimes<sp/>conflicts<sp/>with<sp/>the<sp/>one<sp/>in<sp/>STL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintBytesInObjectTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>obj_bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="9126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9127"><highlight class="normal"><sp/><sp/>PrintBytesInObjectToImpl(obj_bytes,<sp/>count,<sp/>os);</highlight></codeline>
<codeline lineno="9128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9129"><highlight class="normal"></highlight></codeline>
<codeline lineno="9130"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9131"><highlight class="normal"></highlight></codeline>
<codeline lineno="9132"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="9133"><highlight class="normal"></highlight></codeline>
<codeline lineno="9134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Depending<sp/>on<sp/>the<sp/>value<sp/>of<sp/>a<sp/>char<sp/>(or<sp/>wchar_t),<sp/>we<sp/>print<sp/>it<sp/>in<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>three<sp/>formats:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9136"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>as<sp/>is<sp/>if<sp/>it&apos;s<sp/>a<sp/>printable<sp/>ASCII<sp/>(e.g.<sp/>&apos;a&apos;,<sp/>&apos;2&apos;,<sp/>&apos;<sp/>&apos;),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9137"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>as<sp/>a<sp/>hexidecimal<sp/>escape<sp/>sequence<sp/>(e.g.<sp/>&apos;\x7F&apos;),<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>as<sp/>a<sp/>special<sp/>escape<sp/>sequence<sp/>(e.g.<sp/>&apos;\r&apos;,<sp/>&apos;\n&apos;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9139"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>CharFormat<sp/>{</highlight></codeline>
<codeline lineno="9140"><highlight class="normal"><sp/><sp/>kAsIs,</highlight></codeline>
<codeline lineno="9141"><highlight class="normal"><sp/><sp/>kHexEscape,</highlight></codeline>
<codeline lineno="9142"><highlight class="normal"><sp/><sp/>kSpecialEscape</highlight></codeline>
<codeline lineno="9143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="9144"><highlight class="normal"></highlight></codeline>
<codeline lineno="9145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>c<sp/>is<sp/>a<sp/>printable<sp/>ASCII<sp/>character.<sp/><sp/>We<sp/>test<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>of<sp/>c<sp/>directly<sp/>instead<sp/>of<sp/>calling<sp/>isprint(),<sp/>which<sp/>is<sp/>buggy<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>Mobile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9148"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsPrintableAscii(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="9149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0x20<sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/>0x7E;</highlight></codeline>
<codeline lineno="9150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9151"><highlight class="normal"></highlight></codeline>
<codeline lineno="9152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>wide<sp/>or<sp/>narrow<sp/>char<sp/>c<sp/>as<sp/>a<sp/>character<sp/>literal<sp/>without<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>quotes,<sp/>escaping<sp/>it<sp/>when<sp/>necessary;<sp/>returns<sp/>how<sp/>c<sp/>was<sp/>formatted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>template<sp/>argument<sp/>UnsignedChar<sp/>is<sp/>the<sp/>unsigned<sp/>version<sp/>of<sp/>Char,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>the<sp/>type<sp/>of<sp/>c.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Un</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal">Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="9157"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CharFormat<sp/>PrintAsCharLiteralTo(Char<sp/>c,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c))<sp/>{</highlight></codeline>
<codeline lineno="9159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\a&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\a&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\f&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\v&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\v&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsPrintableAscii(c))<sp/>{</highlight></codeline>
<codeline lineno="9191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>static_cast&lt;char&gt;(c);</highlight></codeline>
<codeline lineno="9192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kAsIs;</highlight></codeline>
<codeline lineno="9193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\x&quot;</highlight><highlight class="normal"><sp/>+<sp/>String::FormatHexInt(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UnsignedChar</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c));</highlight></codeline>
<codeline lineno="9195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kHexEscape;</highlight></codeline>
<codeline lineno="9196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kSpecialEscape;</highlight></codeline>
<codeline lineno="9199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9200"><highlight class="normal"></highlight></codeline>
<codeline lineno="9201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>wchar_t<sp/>c<sp/>as<sp/>if<sp/>it&apos;s<sp/>part<sp/>of<sp/>a<sp/>string<sp/>literal,<sp/>escaping<sp/>it<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>necessary;<sp/>returns<sp/>how<sp/>c<sp/>was<sp/>formatted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9203"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CharFormat<sp/>PrintAsStringLiteralTo(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>c,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="9205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kAsIs;</highlight></codeline>
<codeline lineno="9208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kSpecialEscape;</highlight></codeline>
<codeline lineno="9211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PrintAsCharLiteralTo&lt;wchar_t&gt;(c,<sp/>os);</highlight></codeline>
<codeline lineno="9213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9215"><highlight class="normal"></highlight></codeline>
<codeline lineno="9216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>char<sp/>c<sp/>as<sp/>if<sp/>it&apos;s<sp/>part<sp/>of<sp/>a<sp/>string<sp/>literal,<sp/>escaping<sp/>it<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>necessary;<sp/>returns<sp/>how<sp/>c<sp/>was<sp/>formatted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9218"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CharFormat<sp/>PrintAsStringLiteralTo(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PrintAsStringLiteralTo(</highlight></codeline>
<codeline lineno="9220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c)),<sp/>os);</highlight></codeline>
<codeline lineno="9221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9222"><highlight class="normal"></highlight></codeline>
<codeline lineno="9223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>wide<sp/>or<sp/>narrow<sp/>character<sp/>c<sp/>and<sp/>its<sp/>code.<sp/><sp/>&apos;\0&apos;<sp/>is<sp/>printed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>&quot;&apos;\\0&apos;&quot;,<sp/>other<sp/>unprintable<sp/>characters<sp/>are<sp/>also<sp/>properly<sp/>escaped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>standard<sp/>C++<sp/>escape<sp/>sequence.<sp/><sp/>The<sp/>template<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnsignedChar<sp/>is<sp/>the<sp/>unsigned<sp/>version<sp/>of<sp/>Char,<sp/>which<sp/>is<sp/>the<sp/>type<sp/>of<sp/>c.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9227"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Un</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal">Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="9228"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCharAndCodeTo(Char<sp/>c,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>print<sp/>c<sp/>as<sp/>a<sp/>literal<sp/>in<sp/>the<sp/>most<sp/>readable<sp/>form<sp/>we<sp/>can<sp/>find.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9230"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/>((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(c)<sp/>&gt;<sp/>1)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;L&apos;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharFormat<sp/>format<sp/>=<sp/>PrintAsCharLiteralTo&lt;UnsignedChar&gt;(c,<sp/>os);</highlight></codeline>
<codeline lineno="9232"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9233"><highlight class="normal"></highlight></codeline>
<codeline lineno="9234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>aid<sp/>user<sp/>debugging,<sp/>we<sp/>also<sp/>print<sp/>c&apos;s<sp/>code<sp/>in<sp/>decimal,<sp/>unless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>0<sp/>(in<sp/>which<sp/>case<sp/>c<sp/>was<sp/>printed<sp/>as<sp/>&apos;\\0&apos;,<sp/>making<sp/>the<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>obvious).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="9238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9239"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c);</highlight></codeline>
<codeline lineno="9240"><highlight class="normal"></highlight></codeline>
<codeline lineno="9241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>more<sp/>convenience,<sp/>we<sp/>print<sp/>c&apos;s<sp/>code<sp/>again<sp/>in<sp/>hexidecimal,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unless<sp/>c<sp/>was<sp/>already<sp/>printed<sp/>in<sp/>the<sp/>form<sp/>&apos;\x##&apos;<sp/>or<sp/>the<sp/>code<sp/>is<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[1,<sp/>9].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format<sp/>==<sp/>kHexEscape<sp/>||<sp/>(1<sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/>9))<sp/>{</highlight></codeline>
<codeline lineno="9245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9246"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9247"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>0x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>String::FormatHexInt(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UnsignedChar</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c));</highlight></codeline>
<codeline lineno="9248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9249"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9251"><highlight class="normal"></highlight></codeline>
<codeline lineno="9252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>::std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9253"><highlight class="normal"><sp/><sp/>PrintCharAndCodeTo&lt;unsigned<sp/>char&gt;(c,<sp/>os);</highlight></codeline>
<codeline lineno="9254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>::std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9256"><highlight class="normal"><sp/><sp/>PrintCharAndCodeTo&lt;unsigned<sp/>char&gt;(c,<sp/>os);</highlight></codeline>
<codeline lineno="9257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9258"><highlight class="normal"></highlight></codeline>
<codeline lineno="9259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>wchar_t<sp/>as<sp/>a<sp/>symbol<sp/>if<sp/>it<sp/>is<sp/>printable<sp/>or<sp/>as<sp/>its<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code<sp/>otherwise<sp/>and<sp/>also<sp/>as<sp/>its<sp/>code.<sp/><sp/>L&apos;\0&apos;<sp/>is<sp/>printed<sp/>as<sp/>&quot;L&apos;\\0&apos;&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9261"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>wc,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9262"><highlight class="normal"><sp/><sp/>PrintCharAndCodeTo&lt;wchar_t&gt;(wc,<sp/>os);</highlight></codeline>
<codeline lineno="9263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9264"><highlight class="normal"></highlight></codeline>
<codeline lineno="9265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>array<sp/>of<sp/>characters<sp/>to<sp/>the<sp/>ostream.<sp/><sp/>CharType<sp/>must<sp/>be<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char<sp/>or<sp/>wchar_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>array<sp/>starts<sp/>at<sp/>begin,<sp/>the<sp/>length<sp/>is<sp/>len,<sp/>it<sp/>may<sp/>include<sp/>&apos;\0&apos;<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>may<sp/>not<sp/>be<sp/>NUL-terminated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9269"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="9270"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCharsAsStringTo(</highlight></codeline>
<codeline lineno="9271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType*<sp/>begin,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>kQuoteBegin<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(CharType)<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;L\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9273"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/>kQuoteBegin;</highlight></codeline>
<codeline lineno="9274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_previous_hex<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>len;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="9276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType<sp/>cur<sp/>=<sp/>begin[index];</highlight></codeline>
<codeline lineno="9277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_previous_hex<sp/>&amp;&amp;<sp/>IsXDigit(cur))<sp/>{</highlight></codeline>
<codeline lineno="9278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Previous<sp/>character<sp/>is<sp/>of<sp/>&apos;\x..&apos;<sp/>form<sp/>and<sp/>this<sp/>character<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interpreted<sp/>as<sp/>another<sp/>hexadecimal<sp/>digit<sp/>in<sp/>its<sp/>number.<sp/>Break<sp/>string<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disambiguate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kQuoteBegin;</highlight></codeline>
<codeline lineno="9282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9283"><highlight class="normal"><sp/><sp/><sp/><sp/>is_previous_hex<sp/>=<sp/>PrintAsStringLiteralTo(cur,<sp/>os)<sp/>==<sp/>kHexEscape;</highlight></codeline>
<codeline lineno="9284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9285"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9287"><highlight class="normal"></highlight></codeline>
<codeline lineno="9288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>(const)<sp/>char/wchar_t<sp/>array<sp/>of<sp/>&apos;len&apos;<sp/>elements,<sp/>starting<sp/>at<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;begin&apos;.<sp/><sp/>CharType<sp/>must<sp/>be<sp/>either<sp/>char<sp/>or<sp/>wchar_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9290"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="9291"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UniversalPrintCharArray(</highlight></codeline>
<codeline lineno="9292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType*<sp/>begin,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>char<sp/>kFoo[]<sp/>=<sp/>&quot;foo&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generates<sp/>an<sp/>array<sp/>of<sp/>4,<sp/>not<sp/>3,<sp/>elements,<sp/>with<sp/>the<sp/>last<sp/>one<sp/>being<sp/>&apos;\0&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Therefore<sp/>when<sp/>printing<sp/>a<sp/>char<sp/>array,<sp/>we<sp/>don&apos;t<sp/>print<sp/>the<sp/>last<sp/>element<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>&apos;\0&apos;,<sp/>such<sp/>that<sp/>the<sp/>output<sp/>matches<sp/>the<sp/>string<sp/>literal<sp/>as<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>written<sp/>in<sp/>the<sp/>source<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>begin[len<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9301"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintCharsAsStringTo(begin,<sp/>len<sp/>-<sp/>1,<sp/>os);</highlight></codeline>
<codeline lineno="9302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9304"><highlight class="normal"></highlight></codeline>
<codeline lineno="9305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If,<sp/>however,<sp/>the<sp/>last<sp/>element<sp/>in<sp/>the<sp/>array<sp/>is<sp/>not<sp/>&apos;\0&apos;,<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>const<sp/>char<sp/>kFoo[]<sp/>=<sp/>{<sp/>&apos;f&apos;,<sp/>&apos;o&apos;,<sp/>&apos;o&apos;<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>must<sp/>print<sp/>the<sp/>entire<sp/>array.<sp/><sp/>We<sp/>also<sp/>print<sp/>a<sp/>message<sp/>to<sp/>indicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>array<sp/>is<sp/>not<sp/>NUL-terminated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9309"><highlight class="normal"><sp/><sp/>PrintCharsAsStringTo(begin,<sp/>len,<sp/>os);</highlight></codeline>
<codeline lineno="9310"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(no<sp/>terminating<sp/>NUL)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9312"><highlight class="normal"></highlight></codeline>
<codeline lineno="9313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>(const)<sp/>char<sp/>array<sp/>of<sp/>&apos;len&apos;<sp/>elements,<sp/>starting<sp/>at<sp/>address<sp/>&apos;begin&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9314"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UniversalPrintArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>begin,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9315"><highlight class="normal"><sp/><sp/>UniversalPrintCharArray(begin,<sp/>len,<sp/>os);</highlight></codeline>
<codeline lineno="9316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9317"><highlight class="normal"></highlight></codeline>
<codeline lineno="9318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>(const)<sp/>wchar_t<sp/>array<sp/>of<sp/>&apos;len&apos;<sp/>elements,<sp/>starting<sp/>at<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;begin&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UniversalPrintArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>begin,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9321"><highlight class="normal"><sp/><sp/>UniversalPrintCharArray(begin,<sp/>len,<sp/>os);</highlight></codeline>
<codeline lineno="9322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9323"><highlight class="normal"></highlight></codeline>
<codeline lineno="9324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>C<sp/>string<sp/>to<sp/>the<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="9327"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9328"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9329"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>ImplicitCast_&lt;const<sp/>void*&gt;(s)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9330"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintCharsAsStringTo(s,<sp/>strlen(s),<sp/>os);</highlight></codeline>
<codeline lineno="9331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9333"><highlight class="normal"></highlight></codeline>
<codeline lineno="9334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>compiler<sp/>can<sp/>be<sp/>configured<sp/>to<sp/>define<sp/>whar_t<sp/>as<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>unsigned<sp/>short.<sp/>Defining<sp/>an<sp/>overload<sp/>for<sp/>const<sp/>wchar_t*<sp/>in<sp/>that<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>cause<sp/>pointers<sp/>to<sp/>unsigned<sp/>shorts<sp/>be<sp/>printed<sp/>as<sp/>wide<sp/>strings,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>possibly<sp/>accessing<sp/>more<sp/>memory<sp/>than<sp/>intended<sp/>and<sp/>causing<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>accesses.<sp/>MSVC<sp/>defines<sp/>_NATIVE_WCHAR_T_DEFINED<sp/>symbol<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t<sp/>is<sp/>implemented<sp/>as<sp/>a<sp/>native<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9340"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_MSC_VER)<sp/>||<sp/>defined(_NATIVE_WCHAR_T_DEFINED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>wide<sp/>C<sp/>string<sp/>to<sp/>the<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="9344"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9345"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9346"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>ImplicitCast_&lt;const<sp/>void*&gt;(s)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9347"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintCharsAsStringTo(s,<sp/>wcslen(s),<sp/>os);</highlight></codeline>
<codeline lineno="9348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9350"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>wchar_t<sp/>is<sp/>native</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9351"><highlight class="normal"></highlight></codeline>
<codeline lineno="9352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>::string<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9353"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9354"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintStringTo(const<sp/>::string&amp;<sp/>s,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9355"><highlight class="normal"><sp/><sp/>PrintCharsAsStringTo(s.data(),<sp/>s.size(),<sp/>os);</highlight></codeline>
<codeline lineno="9356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9357"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_GLOBAL_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9358"><highlight class="normal"></highlight></codeline>
<codeline lineno="9359"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintStringTo(const<sp/>::std::string&amp;<sp/>s,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9360"><highlight class="normal"><sp/><sp/>PrintCharsAsStringTo(s.data(),<sp/>s.size(),<sp/>os);</highlight></codeline>
<codeline lineno="9361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9362"><highlight class="normal"></highlight></codeline>
<codeline lineno="9363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>::wstring<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9364"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintWideStringTo(const<sp/>::wstring&amp;<sp/>s,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9366"><highlight class="normal"><sp/><sp/>PrintCharsAsStringTo(s.data(),<sp/>s.size(),<sp/>os);</highlight></codeline>
<codeline lineno="9367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9369"><highlight class="normal"></highlight></codeline>
<codeline lineno="9370"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintWideStringTo(const<sp/>::std::wstring&amp;<sp/>s,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="9372"><highlight class="normal"><sp/><sp/>PrintCharsAsStringTo(s.data(),<sp/>s.size(),<sp/>os);</highlight></codeline>
<codeline lineno="9373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9374"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9375"><highlight class="normal"></highlight></codeline>
<codeline lineno="9376"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9377"><highlight class="normal"></highlight></codeline>
<codeline lineno="9378"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9381"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9385"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9386"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9388"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9392"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9395"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9407"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>mheule@google.com<sp/>(Markus<sp/>Heule)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9409"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework<sp/>(Google<sp/>Test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9411"><highlight class="normal"></highlight></codeline>
<codeline lineno="9412"><highlight class="normal"></highlight></codeline>
<codeline lineno="9413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Indicates<sp/>that<sp/>this<sp/>translation<sp/>unit<sp/>is<sp/>part<sp/>of<sp/>Google<sp/>Test&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation.<sp/><sp/>It<sp/>must<sp/>come<sp/>before<sp/>gtest-internal-inl.h<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>included,<sp/>or<sp/>there<sp/>will<sp/>be<sp/>a<sp/>compiler<sp/>error.<sp/><sp/>This<sp/>trick<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prevent<sp/>a<sp/>user<sp/>from<sp/>accidentally<sp/>including<sp/>gtest-internal-inl.h<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>his<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9418"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IMPLEMENTATION_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9419"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_IMPLEMENTATION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9420"><highlight class="normal"></highlight></codeline>
<codeline lineno="9421"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="9422"><highlight class="normal"></highlight></codeline>
<codeline lineno="9423"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">internal::GetUnitTestImpl;</highlight></codeline>
<codeline lineno="9424"><highlight class="normal"></highlight></codeline>
<codeline lineno="9425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>summary<sp/>of<sp/>the<sp/>failure<sp/>message<sp/>by<sp/>omitting<sp/>the<sp/>stack<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9427"><highlight class="normal">std::string<sp/>TestPartResult::ExtractSummary(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="9428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>stack_trace<sp/>=<sp/>strstr(message,<sp/>internal::kStackTraceMarker);</highlight></codeline>
<codeline lineno="9429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stack_trace<sp/>==<sp/>NULL<sp/>?<sp/>message<sp/>:</highlight></codeline>
<codeline lineno="9430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string(message,<sp/>stack_trace);</highlight></codeline>
<codeline lineno="9431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9432"><highlight class="normal"></highlight></codeline>
<codeline lineno="9433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>TestPartResult<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9434"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="9435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="9436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>result.file_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result.line_number()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(result.type()<sp/>==<sp/>TestPartResult::kSuccess<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Success&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="9438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.type()<sp/>==<sp/>TestPartResult::kFatalFailure<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Fatal<sp/>failure&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="9439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Non-fatal<sp/>failure&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>result.message()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="9441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9442"><highlight class="normal"></highlight></codeline>
<codeline lineno="9443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>a<sp/>TestPartResult<sp/>to<sp/>the<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9444"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestPartResultArray::Append(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="9445"><highlight class="normal"><sp/><sp/>array_.push_back(result);</highlight></codeline>
<codeline lineno="9446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9447"><highlight class="normal"></highlight></codeline>
<codeline lineno="9448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestPartResult<sp/>at<sp/>the<sp/>given<sp/>index<sp/>(0-based).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9449"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>TestPartResultArray::GetTestPartResult(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/>size())<sp/>{</highlight></codeline>
<codeline lineno="9451"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nInvalid<sp/>index<sp/>(%d)<sp/>into<sp/>TestPartResultArray.\n&quot;</highlight><highlight class="normal">,<sp/>index);</highlight></codeline>
<codeline lineno="9452"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::posix::Abort();</highlight></codeline>
<codeline lineno="9453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9454"><highlight class="normal"></highlight></codeline>
<codeline lineno="9455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array_[index];</highlight></codeline>
<codeline lineno="9456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9457"><highlight class="normal"></highlight></codeline>
<codeline lineno="9458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>TestPartResult<sp/>objects<sp/>in<sp/>the<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9459"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestPartResultArray::size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(array_.size());</highlight></codeline>
<codeline lineno="9461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9462"><highlight class="normal"></highlight></codeline>
<codeline lineno="9463"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="9464"><highlight class="normal"></highlight></codeline>
<codeline lineno="9465"><highlight class="normal">HasNewFatalFailureHelper::HasNewFatalFailureHelper()</highlight></codeline>
<codeline lineno="9466"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>has_new_fatal_failure_(false),</highlight></codeline>
<codeline lineno="9467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>original_reporter_(GetUnitTestImpl()-&gt;</highlight></codeline>
<codeline lineno="9468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetTestPartResultReporterForCurrentThread())<sp/>{</highlight></codeline>
<codeline lineno="9469"><highlight class="normal"><sp/><sp/>GetUnitTestImpl()-&gt;SetTestPartResultReporterForCurrentThread(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9471"><highlight class="normal"></highlight></codeline>
<codeline lineno="9472"><highlight class="normal">HasNewFatalFailureHelper::~HasNewFatalFailureHelper()<sp/>{</highlight></codeline>
<codeline lineno="9473"><highlight class="normal"><sp/><sp/>GetUnitTestImpl()-&gt;SetTestPartResultReporterForCurrentThread(</highlight></codeline>
<codeline lineno="9474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>original_reporter_);</highlight></codeline>
<codeline lineno="9475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9476"><highlight class="normal"></highlight></codeline>
<codeline lineno="9477"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HasNewFatalFailureHelper::ReportTestPartResult(</highlight></codeline>
<codeline lineno="9478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="9479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.fatally_failed())</highlight></codeline>
<codeline lineno="9480"><highlight class="normal"><sp/><sp/><sp/><sp/>has_new_fatal_failure_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9481"><highlight class="normal"><sp/><sp/>original_reporter_-&gt;ReportTestPartResult(result);</highlight></codeline>
<codeline lineno="9482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9483"><highlight class="normal"></highlight></codeline>
<codeline lineno="9484"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9485"><highlight class="normal"></highlight></codeline>
<codeline lineno="9486"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2008<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>Rights<sp/>Reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9489"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9493"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9494"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9496"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9500"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9503"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9509"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9515"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9516"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9517"><highlight class="normal"></highlight></codeline>
<codeline lineno="9518"><highlight class="normal"></highlight></codeline>
<codeline lineno="9519"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="9520"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="9521"><highlight class="normal"></highlight></codeline>
<codeline lineno="9522"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_TYPED_TEST_P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9523"><highlight class="normal"></highlight></codeline>
<codeline lineno="9524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Skips<sp/>to<sp/>the<sp/>first<sp/>non-space<sp/>char<sp/>in<sp/>str.<sp/>Returns<sp/>an<sp/>empty<sp/>string<sp/>if<sp/>str</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contains<sp/>only<sp/>whitespace<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9526"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>SkipSpaces(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="9527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(IsSpace(*str))</highlight></codeline>
<codeline lineno="9528"><highlight class="normal"><sp/><sp/><sp/><sp/>str++;</highlight></codeline>
<codeline lineno="9529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="9530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9531"><highlight class="normal"></highlight></codeline>
<codeline lineno="9532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>registered_tests<sp/>match<sp/>the<sp/>test<sp/>names<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defined_test_names_;<sp/>returns<sp/>registered_tests<sp/>if<sp/>successful,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>aborts<sp/>the<sp/>program<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9535"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>TypedTestCasePState::VerifyRegisteredTestNames(</highlight></codeline>
<codeline lineno="9536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>registered_tests)<sp/>{</highlight></codeline>
<codeline lineno="9537"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::set&lt;const<sp/>char*&gt;::const_iterator<sp/>DefinedTestIter;</highlight></codeline>
<codeline lineno="9538"><highlight class="normal"><sp/><sp/>registered_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9539"><highlight class="normal"></highlight></codeline>
<codeline lineno="9540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>initial<sp/>whitespace<sp/>in<sp/>registered_tests<sp/>since<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>preprocessors<sp/>prefix<sp/>stringizied<sp/>literals<sp/>with<sp/>whitespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9542"><highlight class="normal"><sp/><sp/>registered_tests<sp/>=<sp/>SkipSpaces(registered_tests);</highlight></codeline>
<codeline lineno="9543"><highlight class="normal"></highlight></codeline>
<codeline lineno="9544"><highlight class="normal"><sp/><sp/>Message<sp/>errors;</highlight></codeline>
<codeline lineno="9545"><highlight class="normal"><sp/><sp/>::std::set&lt;std::string&gt;<sp/>tests;</highlight></codeline>
<codeline lineno="9546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>names<sp/>=<sp/>registered_tests;<sp/>names<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="9547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>names<sp/>=<sp/>SkipComma(names))<sp/>{</highlight></codeline>
<codeline lineno="9548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>name<sp/>=<sp/>GetPrefixUntilComma(names);</highlight></codeline>
<codeline lineno="9549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tests.count(name)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errors<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>listed<sp/>more<sp/>than<sp/>once.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9553"><highlight class="normal"></highlight></codeline>
<codeline lineno="9554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(DefinedTestIter<sp/>it<sp/>=<sp/>defined_test_names_.begin();</highlight></codeline>
<codeline lineno="9556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>defined_test_names_.end();</highlight></codeline>
<codeline lineno="9557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="9558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/>*it)<sp/>{</highlight></codeline>
<codeline lineno="9559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9563"><highlight class="normal"></highlight></codeline>
<codeline lineno="9564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/>{</highlight></codeline>
<codeline lineno="9565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tests.insert(name);</highlight></codeline>
<codeline lineno="9566"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errors<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>test<sp/>named<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name</highlight></codeline>
<codeline lineno="9568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>can<sp/>be<sp/>found<sp/>in<sp/>this<sp/>test<sp/>case.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9571"><highlight class="normal"></highlight></codeline>
<codeline lineno="9572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(DefinedTestIter<sp/>it<sp/>=<sp/>defined_test_names_.begin();</highlight></codeline>
<codeline lineno="9573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>defined_test_names_.end();</highlight></codeline>
<codeline lineno="9574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="9575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tests.count(*it)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errors<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;You<sp/>forgot<sp/>to<sp/>list<sp/>test<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9579"><highlight class="normal"></highlight></codeline>
<codeline lineno="9580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>errors_str<sp/>=<sp/>errors.GetString();</highlight></codeline>
<codeline lineno="9581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errors_str<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9582"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>FormatFileLocation(file,<sp/>line).c_str(),</highlight></codeline>
<codeline lineno="9583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errors_str.c_str());</highlight></codeline>
<codeline lineno="9584"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="9585"><highlight class="normal"><sp/><sp/><sp/><sp/>posix::Abort();</highlight></codeline>
<codeline lineno="9586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9587"><highlight class="normal"></highlight></codeline>
<codeline lineno="9588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>registered_tests;</highlight></codeline>
<codeline lineno="9589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9590"><highlight class="normal"></highlight></codeline>
<codeline lineno="9591"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_TYPED_TEST_P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9592"><highlight class="normal"></highlight></codeline>
<codeline lineno="9593"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9594"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/Kokkos/kokkos/tpls/gtest/gtest/gtest-all.cc"/>
  </compounddef>
</doxygen>
