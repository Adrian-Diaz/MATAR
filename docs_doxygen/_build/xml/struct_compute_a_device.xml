<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="struct_compute_a_device" kind="struct" language="C++" prot="public">
    <compoundname>ComputeADevice</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_compute_a_device_1a0009fe5022deb273ed7d9dc0c9b1b28c" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int ComputeADevice::iter</definition>
        <argsstring></argsstring>
        <name>iter</name>
        <qualifiedname>ComputeADevice::iter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/example/tutorial/Advanced_Views/07_Overlapping_DeepCopy/overlapping_deepcopy.cpp" line="64" column="7" bodyfile="src/Kokkos/kokkos/example/tutorial/Advanced_Views/07_Overlapping_DeepCopy/overlapping_deepcopy.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_compute_a_device_1aba77a6c419edc6db3e0a62c2e346ad2d" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; double *, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, Kokkos::CudaSpace &gt;</type>
        <definition>Kokkos::View&lt;double*, Kokkos::LayoutLeft, Kokkos::CudaSpace&gt; ComputeADevice::a</definition>
        <argsstring></argsstring>
        <name>a</name>
        <qualifiedname>ComputeADevice::a</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/example/tutorial/Advanced_Views/07_Overlapping_DeepCopy/overlapping_deepcopy.cpp" line="65" column="16" bodyfile="src/Kokkos/kokkos/example/tutorial/Advanced_Views/07_Overlapping_DeepCopy/overlapping_deepcopy.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_compute_a_device_1a3604b7f1e6b2a09e88253e85ed703e30" prot="public" static="no" mutable="no">
        <type><ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; double *, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, Kokkos::CudaSpace &gt;</type>
        <definition>Kokkos::View&lt;double*, Kokkos::LayoutLeft, Kokkos::CudaSpace&gt; ComputeADevice::b</definition>
        <argsstring></argsstring>
        <name>b</name>
        <qualifiedname>ComputeADevice::b</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/example/tutorial/Advanced_Views/07_Overlapping_DeepCopy/overlapping_deepcopy.cpp" line="66" column="16" bodyfile="src/Kokkos/kokkos/example/tutorial/Advanced_Views/07_Overlapping_DeepCopy/overlapping_deepcopy.cpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_compute_a_device_1ac52aa849051ef3d64713e4987c3dd1f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComputeADevice::ComputeADevice</definition>
        <argsstring>(const int &amp;iter_, const Kokkos::View&lt; double *, Kokkos::LayoutLeft, Kokkos::CudaSpace &gt; &amp;d_a, const Kokkos::View&lt; double *, Kokkos::LayoutLeft, Kokkos::CudaSpace &gt; &amp;d_b)</argsstring>
        <name>ComputeADevice</name>
        <qualifiedname>ComputeADevice::ComputeADevice</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>iter_</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; double *, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, Kokkos::CudaSpace &gt; &amp;</type>
          <declname>d_a</declname>
        </param>
        <param>
          <type>const <ref refid="class_kokkos_1_1_view" kindref="compound">Kokkos::View</ref>&lt; double *, <ref refid="struct_kokkos_1_1_layout_left" kindref="compound">Kokkos::LayoutLeft</ref>, Kokkos::CudaSpace &gt; &amp;</type>
          <declname>d_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/example/tutorial/Advanced_Views/07_Overlapping_DeepCopy/overlapping_deepcopy.cpp" line="67" column="3" bodyfile="src/Kokkos/kokkos/example/tutorial/Advanced_Views/07_Overlapping_DeepCopy/overlapping_deepcopy.cpp" bodystart="67" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="struct_compute_a_device_1a2cf13819e363f91dbee530997baff778" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION void</type>
        <definition>KOKKOS_INLINE_FUNCTION void ComputeADevice::operator()</definition>
        <argsstring>(const int &amp;i) const</argsstring>
        <name>operator()</name>
        <qualifiedname>ComputeADevice::operator()</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Kokkos/kokkos/example/tutorial/Advanced_Views/07_Overlapping_DeepCopy/overlapping_deepcopy.cpp" line="74" column="8" bodyfile="src/Kokkos/kokkos/example/tutorial/Advanced_Views/07_Overlapping_DeepCopy/overlapping_deepcopy.cpp" bodystart="74" bodyend="78"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>ComputeADevice</label>
        <link refid="struct_compute_a_device"/>
        <childnode refid="2" relation="usage">
          <edgelabel>a</edgelabel>
          <edgelabel>b</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>Kokkos::View&lt; double *, Kokkos::LayoutLeft, Kokkos::CudaSpace &gt;</label>
        <link refid="class_kokkos_1_1_view"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Kokkos::ViewTraits&lt; double *, Properties... &gt;</label>
        <link refid="struct_kokkos_1_1_view_traits"/>
      </node>
    </collaborationgraph>
    <location file="src/Kokkos/kokkos/example/tutorial/Advanced_Views/07_Overlapping_DeepCopy/overlapping_deepcopy.cpp" line="63" column="1" bodyfile="src/Kokkos/kokkos/example/tutorial/Advanced_Views/07_Overlapping_DeepCopy/overlapping_deepcopy.cpp" bodystart="63" bodyend="79"/>
    <listofallmembers>
      <member refid="struct_compute_a_device_1aba77a6c419edc6db3e0a62c2e346ad2d" prot="public" virt="non-virtual"><scope>ComputeADevice</scope><name>a</name></member>
      <member refid="struct_compute_a_device_1a3604b7f1e6b2a09e88253e85ed703e30" prot="public" virt="non-virtual"><scope>ComputeADevice</scope><name>b</name></member>
      <member refid="struct_compute_a_device_1ac52aa849051ef3d64713e4987c3dd1f7" prot="public" virt="non-virtual"><scope>ComputeADevice</scope><name>ComputeADevice</name></member>
      <member refid="struct_compute_a_device_1a0009fe5022deb273ed7d9dc0c9b1b28c" prot="public" virt="non-virtual"><scope>ComputeADevice</scope><name>iter</name></member>
      <member refid="struct_compute_a_device_1a2cf13819e363f91dbee530997baff778" prot="public" virt="non-virtual"><scope>ComputeADevice</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
